
gps-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08005f38  08005f38  00015f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060dc  080060dc  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060e4  080060e4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060e4  080060e4  000160e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080060ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00004a98  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b14  20004b14  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ff6  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003192  00000000  00000000  000350a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00038238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00039220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002672a  00000000  00000000  0003a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f67  00000000  00000000  000607fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd9a6  00000000  00000000  00073761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00151107  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046c4  00000000  00000000  00151158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f20 	.word	0x08005f20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08005f20 	.word	0x08005f20

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	evtGrpHandle = xEventGroupCreate();
 80004f8:	f002 f896 	bl	8002628 <xEventGroupCreate>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <MX_FREERTOS_Init+0x44>)
 8000500:	6013      	str	r3, [r2, #0]

	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <MX_FREERTOS_Init+0x48>)
 8000504:	2100      	movs	r1, #0
 8000506:	480e      	ldr	r0, [pc, #56]	; (8000540 <MX_FREERTOS_Init+0x4c>)
 8000508:	f001 ffac 	bl	8002464 <osThreadNew>
 800050c:	4603      	mov	r3, r0
 800050e:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <MX_FREERTOS_Init+0x50>)
 8000510:	6013      	str	r3, [r2, #0]

	myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <MX_FREERTOS_Init+0x54>)
 8000514:	2100      	movs	r1, #0
 8000516:	480d      	ldr	r0, [pc, #52]	; (800054c <MX_FREERTOS_Init+0x58>)
 8000518:	f001 ffa4 	bl	8002464 <osThreadNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a0c      	ldr	r2, [pc, #48]	; (8000550 <MX_FREERTOS_Init+0x5c>)
 8000520:	6013      	str	r3, [r2, #0]

	myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <MX_FREERTOS_Init+0x60>)
 8000524:	2100      	movs	r1, #0
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <MX_FREERTOS_Init+0x64>)
 8000528:	f001 ff9c 	bl	8002464 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a0b      	ldr	r2, [pc, #44]	; (800055c <MX_FREERTOS_Init+0x68>)
 8000530:	6013      	str	r3, [r2, #0]
  */

/**
  * @}
  */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000098 	.word	0x20000098
 800053c:	08005ff4 	.word	0x08005ff4
 8000540:	08000561 	.word	0x08000561
 8000544:	2000009c 	.word	0x2000009c
 8000548:	08006018 	.word	0x08006018
 800054c:	08000659 	.word	0x08000659
 8000550:	200000a0 	.word	0x200000a0
 8000554:	0800603c 	.word	0x0800603c
 8000558:	08000685 	.word	0x08000685
 800055c:	200000a4 	.word	0x200000a4

08000560 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	printf("StartDefaultTask\r\n");
 8000568:	4832      	ldr	r0, [pc, #200]	; (8000634 <StartDefaultTask+0xd4>)
 800056a:	f005 f96b 	bl	8005844 <puts>
	uint32_t result;
  /* Infinite loop */
  for(;;)
  {
#if 1
	  result = xEventGroupWaitBits(evtGrpHandle,
 800056e:	4b32      	ldr	r3, [pc, #200]	; (8000638 <StartDefaultTask+0xd8>)
 8000570:	6818      	ldr	r0, [r3, #0]
 8000572:	4b32      	ldr	r3, [pc, #200]	; (800063c <StartDefaultTask+0xdc>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	4b32      	ldr	r3, [pc, #200]	; (8000640 <StartDefaultTask+0xe0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	ea42 0103 	orr.w	r1, r2, r3
 800057e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2301      	movs	r3, #1
 8000586:	2201      	movs	r2, #1
 8000588:	f002 f868 	bl	800265c <xEventGroupWaitBits>
 800058c:	60f8      	str	r0, [r7, #12]
			  	  	  	  	  	  (evtFlag1 | evtFlag2),
								  1,
								  1,
								  2000);
	  if ((result & (evtFlag1 | evtFlag2)) == (evtFlag1 | evtFlag2)){
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <StartDefaultTask+0xdc>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b2b      	ldr	r3, [pc, #172]	; (8000640 <StartDefaultTask+0xe0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	431a      	orrs	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	401a      	ands	r2, r3
 800059c:	4b27      	ldr	r3, [pc, #156]	; (800063c <StartDefaultTask+0xdc>)
 800059e:	6819      	ldr	r1, [r3, #0]
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <StartDefaultTask+0xe0>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	430b      	orrs	r3, r1
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d109      	bne.n	80005be <StartDefaultTask+0x5e>
		  printf("evtFlag1 | evtFlag2 set\n");
 80005aa:	4826      	ldr	r0, [pc, #152]	; (8000644 <StartDefaultTask+0xe4>)
 80005ac:	f005 f94a 	bl	8005844 <puts>
		  xEventGroupClearBits(evtGrpHandle, 1|2);
 80005b0:	4b21      	ldr	r3, [pc, #132]	; (8000638 <StartDefaultTask+0xd8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2103      	movs	r1, #3
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 f91e 	bl	80027f8 <xEventGroupClearBits>
 80005bc:	e036      	b.n	800062c <StartDefaultTask+0xcc>
	  }
	  else{
	  	if (result & evtFlag1)
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <StartDefaultTask+0xdc>)
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	4013      	ands	r3, r2
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d013      	beq.n	80005f2 <StartDefaultTask+0x92>
	  			{
	  				printf("evtFlag1 set\n");
 80005ca:	481f      	ldr	r0, [pc, #124]	; (8000648 <StartDefaultTask+0xe8>)
 80005cc:	f005 f93a 	bl	8005844 <puts>
	  				xEventGroupClearBits(evtGrpHandle, 1);
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <StartDefaultTask+0xd8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	2101      	movs	r1, #1
 80005d6:	4618      	mov	r0, r3
 80005d8:	f002 f90e 	bl	80027f8 <xEventGroupClearBits>
	  				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2108      	movs	r1, #8
 80005e0:	481a      	ldr	r0, [pc, #104]	; (800064c <StartDefaultTask+0xec>)
 80005e2:	f000 fdeb 	bl	80011bc <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2110      	movs	r1, #16
 80005ea:	4818      	ldr	r0, [pc, #96]	; (800064c <StartDefaultTask+0xec>)
 80005ec:	f000 fde6 	bl	80011bc <HAL_GPIO_WritePin>
 80005f0:	e01c      	b.n	800062c <StartDefaultTask+0xcc>
	  			}
	  			else if (result & evtFlag2)
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <StartDefaultTask+0xe0>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	4013      	ands	r3, r2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d013      	beq.n	8000626 <StartDefaultTask+0xc6>
	  			{
	  				printf("evtFlag2 set\n");
 80005fe:	4814      	ldr	r0, [pc, #80]	; (8000650 <StartDefaultTask+0xf0>)
 8000600:	f005 f920 	bl	8005844 <puts>
	  				xEventGroupClearBits(evtGrpHandle, 2);
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <StartDefaultTask+0xd8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f8f4 	bl	80027f8 <xEventGroupClearBits>
	  				HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	2110      	movs	r1, #16
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <StartDefaultTask+0xec>)
 8000616:	f000 fdd1 	bl	80011bc <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2108      	movs	r1, #8
 800061e:	480b      	ldr	r0, [pc, #44]	; (800064c <StartDefaultTask+0xec>)
 8000620:	f000 fdcc 	bl	80011bc <HAL_GPIO_WritePin>
 8000624:	e002      	b.n	800062c <StartDefaultTask+0xcc>
	  			}
	  			else
	  			{
	  				printf("None is set\n");
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <StartDefaultTask+0xf4>)
 8000628:	f005 f90c 	bl	8005844 <puts>
	  			}
	  		}
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f001 ffab 	bl	8002588 <osDelay>
	  result = xEventGroupWaitBits(evtGrpHandle,
 8000632:	e79c      	b.n	800056e <StartDefaultTask+0xe>
 8000634:	08005f5c 	.word	0x08005f5c
 8000638:	20000098 	.word	0x20000098
 800063c:	20000000 	.word	0x20000000
 8000640:	20000004 	.word	0x20000004
 8000644:	08005f70 	.word	0x08005f70
 8000648:	08005f88 	.word	0x08005f88
 800064c:	40021000 	.word	0x40021000
 8000650:	08005f98 	.word	0x08005f98
 8000654:	08005fa8 	.word	0x08005fa8

08000658 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	printf("StartTask02\r\n");
 8000660:	4806      	ldr	r0, [pc, #24]	; (800067c <StartTask02+0x24>)
 8000662:	f005 f8ef 	bl	8005844 <puts>
  /* Infinite loop */
  for(;;)
  {
#if 1
	  xEventGroupSetBits(evtGrpHandle, 1);
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <StartTask02+0x28>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f002 f8fb 	bl	8002868 <xEventGroupSetBits>
	  osDelay(1000);
 8000672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000676:	f001 ff87 	bl	8002588 <osDelay>
	  xEventGroupSetBits(evtGrpHandle, 1);
 800067a:	e7f4      	b.n	8000666 <StartTask02+0xe>
 800067c:	08005fb4 	.word	0x08005fb4
 8000680:	20000098 	.word	0x20000098

08000684 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  	  xEventGroupSetBits(evtGrpHandle, 2);
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <StartTask03+0x1c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2102      	movs	r1, #2
 8000692:	4618      	mov	r0, r3
 8000694:	f002 f8e8 	bl	8002868 <xEventGroupSetBits>
	  	  osDelay(250);
 8000698:	20fa      	movs	r0, #250	; 0xfa
 800069a:	f001 ff75 	bl	8002588 <osDelay>
	  	  xEventGroupSetBits(evtGrpHandle, 2);
 800069e:	e7f5      	b.n	800068c <StartTask03+0x8>
 80006a0:	20000098 	.word	0x20000098

080006a4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_GPIO_Init+0x7c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a17      	ldr	r2, [pc, #92]	; (8000720 <MX_GPIO_Init+0x7c>)
 80006c4:	f043 0310 	orr.w	r3, r3, #16
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_GPIO_Init+0x7c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0310 	and.w	r3, r3, #16
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_GPIO_Init+0x7c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a10      	ldr	r2, [pc, #64]	; (8000720 <MX_GPIO_Init+0x7c>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_GPIO_Init+0x7c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2118      	movs	r1, #24
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_GPIO_Init+0x80>)
 80006f8:	f000 fd60 	bl	80011bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80006fc:	2318      	movs	r3, #24
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4619      	mov	r1, r3
 8000712:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_GPIO_Init+0x80>)
 8000714:	f000 fba6 	bl	8000e64 <HAL_GPIO_Init>

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40021000 	.word	0x40021000

08000728 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* redirect to USART */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000730:	1d39      	adds	r1, r7, #4
 8000732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000736:	2201      	movs	r2, #1
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <__io_putchar+0x20>)
 800073a:	f001 f9fe 	bl	8001b3a <HAL_UART_Transmit>
  return ch;
 800073e:	687b      	ldr	r3, [r7, #4]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000ac 	.word	0x200000ac

0800074c <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 30000))
 8000756:	bf00      	nop
 8000758:	1df9      	adds	r1, r7, #7
 800075a:	f247 5330 	movw	r3, #30000	; 0x7530
 800075e:	2201      	movs	r2, #1
 8000760:	4805      	ldr	r0, [pc, #20]	; (8000778 <__io_getchar+0x2c>)
 8000762:	f001 fa7c 	bl	8001c5e <HAL_UART_Receive>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f5      	bne.n	8000758 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 800076c:	79fb      	ldrb	r3, [r7, #7]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000ac 	.word	0x200000ac

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000780:	f000 fa18 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000784:	f000 f810 	bl	80007a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000788:	f7ff ff8c 	bl	80006a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078c:	f000 f976 	bl	8000a7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("++Start GPS Tracker++\r\n");
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <main+0x28>)
 8000792:	f005 f857 	bl	8005844 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000796:	f001 fe1b 	bl	80023d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 800079a:	f7ff feab 	bl	80004f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800079e:	f001 fe3b 	bl	8002418 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <main+0x26>
 80007a4:	08005fc4 	.word	0x08005fc4

080007a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2230      	movs	r2, #48	; 0x30
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 ff39 	bl	800562e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007bc:	f107 030c 	add.w	r3, r7, #12
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b23      	ldr	r3, [pc, #140]	; (8000860 <SystemClock_Config+0xb8>)
 80007d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d4:	4a22      	ldr	r2, [pc, #136]	; (8000860 <SystemClock_Config+0xb8>)
 80007d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007da:	6413      	str	r3, [r2, #64]	; 0x40
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <SystemClock_Config+0xb8>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <SystemClock_Config+0xbc>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <SystemClock_Config+0xbc>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <SystemClock_Config+0xbc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0320 	add.w	r3, r7, #32
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fce7 	bl	80011f0 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000828:	f000 f81e 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f000 ff4a 	bl	80016e0 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000852:	f000 f809 	bl	8000868 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_MspInit+0x54>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a11      	ldr	r2, [pc, #68]	; (80008c8 <HAL_MspInit+0x54>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <HAL_MspInit+0x54>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <HAL_MspInit+0x54>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <HAL_MspInit+0x54>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_MspInit+0x54>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	210f      	movs	r1, #15
 80008b6:	f06f 0001 	mvn.w	r0, #1
 80008ba:	f000 faaa 	bl	8000e12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f9ac 	bl	8000c58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000900:	f003 fce6 	bl	80042d0 <xTaskGetSchedulerState>
 8000904:	4603      	mov	r3, r0
 8000906:	2b01      	cmp	r3, #1
 8000908:	d001      	beq.n	800090e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800090a:	f004 fae5 	bl	8004ed8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}

08000912 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e00a      	b.n	800093a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000924:	f7ff ff12 	bl	800074c <__io_getchar>
 8000928:	4601      	mov	r1, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1c5a      	adds	r2, r3, #1
 800092e:	60ba      	str	r2, [r7, #8]
 8000930:	b2ca      	uxtb	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	3301      	adds	r3, #1
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	429a      	cmp	r2, r3
 8000940:	dbf0      	blt.n	8000924 <_read+0x12>
  }

  return len;
 8000942:	687b      	ldr	r3, [r7, #4]
}
 8000944:	4618      	mov	r0, r3
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	e009      	b.n	8000972 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	60ba      	str	r2, [r7, #8]
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fede 	bl	8000728 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbf1      	blt.n	800095e <_write+0x12>
  }
  return len;
 800097a:	687b      	ldr	r3, [r7, #4]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_close>:

int _close(int file)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000990:	4618      	mov	r0, r3
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ac:	605a      	str	r2, [r3, #4]
  return 0;
 80009ae:	2300      	movs	r3, #0
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_isatty>:

int _isatty(int file)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b085      	sub	sp, #20
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	60f8      	str	r0, [r7, #12]
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f004 fcd6 	bl	80053cc <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20030000 	.word	0x20030000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	200000a8 	.word	0x200000a8
 8000a54:	20004b18 	.word	0x20004b18

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <MX_USART2_UART_Init+0x50>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	f000 fff4 	bl	8001aa0 <HAL_UART_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000abe:	f7ff fed3 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	200000ac 	.word	0x200000ac
 8000acc:	40004400 	.word	0x40004400

08000ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d12b      	bne.n	8000b4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a17      	ldr	r2, [pc, #92]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b2a:	230c      	movs	r3, #12
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_UART_MspInit+0x8c>)
 8000b46:	f000 f98d 	bl	8000e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ff65 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f004 fd19 	bl	80055c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fdf3 	bl	800077c <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ba4:	080060ec 	.word	0x080060ec
  ldr r2, =_sbss
 8000ba8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000bac:	20004b14 	.word	0x20004b14

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f90d 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fe44 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f917 	bl	8000e4a <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f8ed 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000010 	.word	0x20000010
 8000c54:	2000000c 	.word	0x2000000c

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000010 	.word	0x20000010
 8000c7c:	200000f0 	.word	0x200000f0

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	200000f0 	.word	0x200000f0

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff47 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5c 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb0 	bl	8000db8 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e177      	b.n	8001170 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8166 	bne.w	800116a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80c0 	beq.w	800116a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b66      	ldr	r3, [pc, #408]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a65      	ldr	r2, [pc, #404]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b63      	ldr	r3, [pc, #396]	; (8001188 <HAL_GPIO_Init+0x324>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a61      	ldr	r2, [pc, #388]	; (800118c <HAL_GPIO_Init+0x328>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a58      	ldr	r2, [pc, #352]	; (8001190 <HAL_GPIO_Init+0x32c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d037      	beq.n	80010a2 <HAL_GPIO_Init+0x23e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a57      	ldr	r2, [pc, #348]	; (8001194 <HAL_GPIO_Init+0x330>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d031      	beq.n	800109e <HAL_GPIO_Init+0x23a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a56      	ldr	r2, [pc, #344]	; (8001198 <HAL_GPIO_Init+0x334>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d02b      	beq.n	800109a <HAL_GPIO_Init+0x236>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a55      	ldr	r2, [pc, #340]	; (800119c <HAL_GPIO_Init+0x338>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d025      	beq.n	8001096 <HAL_GPIO_Init+0x232>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a54      	ldr	r2, [pc, #336]	; (80011a0 <HAL_GPIO_Init+0x33c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d01f      	beq.n	8001092 <HAL_GPIO_Init+0x22e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a53      	ldr	r2, [pc, #332]	; (80011a4 <HAL_GPIO_Init+0x340>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d019      	beq.n	800108e <HAL_GPIO_Init+0x22a>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a52      	ldr	r2, [pc, #328]	; (80011a8 <HAL_GPIO_Init+0x344>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d013      	beq.n	800108a <HAL_GPIO_Init+0x226>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x348>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d00d      	beq.n	8001086 <HAL_GPIO_Init+0x222>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a50      	ldr	r2, [pc, #320]	; (80011b0 <HAL_GPIO_Init+0x34c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x21e>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_GPIO_Init+0x350>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d101      	bne.n	800107e <HAL_GPIO_Init+0x21a>
 800107a:	2309      	movs	r3, #9
 800107c:	e012      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800107e:	230a      	movs	r3, #10
 8001080:	e010      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001082:	2308      	movs	r3, #8
 8001084:	e00e      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001086:	2307      	movs	r3, #7
 8001088:	e00c      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800108a:	2306      	movs	r3, #6
 800108c:	e00a      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800108e:	2305      	movs	r3, #5
 8001090:	e008      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001092:	2304      	movs	r3, #4
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 8001096:	2303      	movs	r3, #3
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x240>
 80010a2:	2300      	movs	r3, #0
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	f002 0203 	and.w	r2, r2, #3
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x328>)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c2:	4b3d      	ldr	r3, [pc, #244]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010e6:	4a34      	ldr	r2, [pc, #208]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <HAL_GPIO_Init+0x354>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4313      	orrs	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001110:	4a29      	ldr	r2, [pc, #164]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001116:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800113a:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <HAL_GPIO_Init+0x354>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <HAL_GPIO_Init+0x354>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3301      	adds	r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	2b0f      	cmp	r3, #15
 8001174:	f67f ae84 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40013800 	.word	0x40013800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800
 800119c:	40020c00 	.word	0x40020c00
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021400 	.word	0x40021400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40021c00 	.word	0x40021c00
 80011b0:	40022000 	.word	0x40022000
 80011b4:	40022400 	.word	0x40022400
 80011b8:	40013c00 	.word	0x40013c00

080011bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	807b      	strh	r3, [r7, #2]
 80011c8:	4613      	mov	r3, r2
 80011ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011cc:	787b      	ldrb	r3, [r7, #1]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d2:	887a      	ldrh	r2, [r7, #2]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d8:	e003      	b.n	80011e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011da:	887b      	ldrh	r3, [r7, #2]
 80011dc:	041a      	lsls	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	619a      	str	r2, [r3, #24]
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e267      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d075      	beq.n	80012fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800120e:	4b88      	ldr	r3, [pc, #544]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b04      	cmp	r3, #4
 8001218:	d00c      	beq.n	8001234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121a:	4b85      	ldr	r3, [pc, #532]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001222:	2b08      	cmp	r3, #8
 8001224:	d112      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001226:	4b82      	ldr	r3, [pc, #520]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001232:	d10b      	bne.n	800124c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001234:	4b7e      	ldr	r3, [pc, #504]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d05b      	beq.n	80012f8 <HAL_RCC_OscConfig+0x108>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d157      	bne.n	80012f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e242      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001254:	d106      	bne.n	8001264 <HAL_RCC_OscConfig+0x74>
 8001256:	4b76      	ldr	r3, [pc, #472]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a75      	ldr	r2, [pc, #468]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800125c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x98>
 800126e:	4b70      	ldr	r3, [pc, #448]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a6f      	ldr	r2, [pc, #444]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6d      	ldr	r3, [pc, #436]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6c      	ldr	r2, [pc, #432]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xb0>
 8001288:	4b69      	ldr	r3, [pc, #420]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a68      	ldr	r2, [pc, #416]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b66      	ldr	r3, [pc, #408]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a65      	ldr	r2, [pc, #404]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fcea 	bl	8000c80 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fce6 	bl	8000c80 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e207      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5b      	ldr	r3, [pc, #364]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xc0>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcd6 	bl	8000c80 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fcd2 	bl	8000c80 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1f3      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b51      	ldr	r3, [pc, #324]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0xe8>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001306:	4b4a      	ldr	r3, [pc, #296]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001312:	4b47      	ldr	r3, [pc, #284]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131e:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1c7      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4937      	ldr	r1, [pc, #220]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b34      	ldr	r3, [pc, #208]	; (8001434 <HAL_RCC_OscConfig+0x244>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fc8b 	bl	8000c80 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fc87 	bl	8000c80 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e1a8      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4925      	ldr	r1, [pc, #148]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b24      	ldr	r3, [pc, #144]	; (8001434 <HAL_RCC_OscConfig+0x244>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc6a 	bl	8000c80 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fc66 	bl	8000c80 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e187      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d036      	beq.n	8001448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d016      	beq.n	8001410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_RCC_OscConfig+0x248>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e8:	f7ff fc4a 	bl	8000c80 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fc46 	bl	8000c80 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e167      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_OscConfig+0x240>)
 8001404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x200>
 800140e:	e01b      	b.n	8001448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <HAL_RCC_OscConfig+0x248>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001416:	f7ff fc33 	bl	8000c80 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	e00e      	b.n	800143c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fc2f 	bl	8000c80 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d907      	bls.n	800143c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e150      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001430:	40023800 	.word	0x40023800
 8001434:	42470000 	.word	0x42470000
 8001438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	4b88      	ldr	r3, [pc, #544]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800143e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1ea      	bne.n	800141e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 8097 	beq.w	8001584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145a:	4b81      	ldr	r3, [pc, #516]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10f      	bne.n	8001486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	4b7d      	ldr	r3, [pc, #500]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a7c      	ldr	r2, [pc, #496]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b7a      	ldr	r3, [pc, #488]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b77      	ldr	r3, [pc, #476]	; (8001664 <HAL_RCC_OscConfig+0x474>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b74      	ldr	r3, [pc, #464]	; (8001664 <HAL_RCC_OscConfig+0x474>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a73      	ldr	r2, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x474>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbef 	bl	8000c80 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fbeb 	bl	8000c80 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e10c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <HAL_RCC_OscConfig+0x474>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x2ea>
 80014cc:	4b64      	ldr	r3, [pc, #400]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a63      	ldr	r2, [pc, #396]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	e01c      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b05      	cmp	r3, #5
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x30c>
 80014e2:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a5e      	ldr	r2, [pc, #376]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	4b5c      	ldr	r3, [pc, #368]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a5b      	ldr	r2, [pc, #364]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0x324>
 80014fc:	4b58      	ldr	r3, [pc, #352]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	4a57      	ldr	r2, [pc, #348]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001502:	f023 0301 	bic.w	r3, r3, #1
 8001506:	6713      	str	r3, [r2, #112]	; 0x70
 8001508:	4b55      	ldr	r3, [pc, #340]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800150a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150c:	4a54      	ldr	r2, [pc, #336]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800150e:	f023 0304 	bic.w	r3, r3, #4
 8001512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d015      	beq.n	8001548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151c:	f7ff fbb0 	bl	8000c80 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001522:	e00a      	b.n	800153a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001524:	f7ff fbac 	bl	8000c80 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e0cb      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153a:	4b49      	ldr	r3, [pc, #292]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ee      	beq.n	8001524 <HAL_RCC_OscConfig+0x334>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fb9a 	bl	8000c80 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154e:	e00a      	b.n	8001566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001550:	f7ff fb96 	bl	8000c80 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e0b5      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001566:	4b3e      	ldr	r3, [pc, #248]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ee      	bne.n	8001550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001578:	4b39      	ldr	r3, [pc, #228]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	4a38      	ldr	r2, [pc, #224]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800157e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 80a1 	beq.w	80016d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800158e:	4b34      	ldr	r3, [pc, #208]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b08      	cmp	r3, #8
 8001598:	d05c      	beq.n	8001654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d141      	bne.n	8001626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a2:	4b31      	ldr	r3, [pc, #196]	; (8001668 <HAL_RCC_OscConfig+0x478>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fb6a 	bl	8000c80 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b0:	f7ff fb66 	bl	8000c80 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e087      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69da      	ldr	r2, [r3, #28]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	3b01      	subs	r3, #1
 80015e8:	041b      	lsls	r3, r3, #16
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	061b      	lsls	r3, r3, #24
 80015f2:	491b      	ldr	r1, [pc, #108]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_RCC_OscConfig+0x478>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fe:	f7ff fb3f 	bl	8000c80 <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001606:	f7ff fb3b 	bl	8000c80 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e05c      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x416>
 8001624:	e054      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <HAL_RCC_OscConfig+0x478>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb28 	bl	8000c80 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb24 	bl	8000c80 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e045      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_RCC_OscConfig+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x444>
 8001652:	e03d      	b.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d107      	bne.n	800166c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e038      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
 8001660:	40023800 	.word	0x40023800
 8001664:	40007000 	.word	0x40007000
 8001668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <HAL_RCC_OscConfig+0x4ec>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d028      	beq.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d121      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d11a      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d111      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0cc      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b68      	ldr	r3, [pc, #416]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d90c      	bls.n	800171c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b65      	ldr	r3, [pc, #404]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b8      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800173e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a52      	ldr	r2, [pc, #328]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	494d      	ldr	r1, [pc, #308]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d044      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d119      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d003      	beq.n	800179e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e067      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa56 	bl	8000c80 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa52 	bl	8000c80 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e04f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d20c      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e032      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4916      	ldr	r1, [pc, #88]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001866:	f000 f821 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186a:	4602      	mov	r2, r0
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	490a      	ldr	r1, [pc, #40]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	fa22 f303 	lsr.w	r3, r2, r3
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f9b6 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	08006060 	.word	0x08006060
 80018a4:	20000008 	.word	0x20000008
 80018a8:	2000000c 	.word	0x2000000c

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b0:	b090      	sub	sp, #64	; 0x40
 80018b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
 80018b8:	2300      	movs	r3, #0
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018bc:	2300      	movs	r3, #0
 80018be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d00d      	beq.n	80018ec <HAL_RCC_GetSysClockFreq+0x40>
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	f200 80a1 	bhi.w	8001a18 <HAL_RCC_GetSysClockFreq+0x16c>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80018de:	e09b      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x184>)
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018e4:	e09b      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e6:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x188>)
 80018e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ea:	e098      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ec:	4b4f      	ldr	r3, [pc, #316]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f6:	4b4d      	ldr	r3, [pc, #308]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d028      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001902:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	2200      	movs	r2, #0
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	627a      	str	r2, [r7, #36]	; 0x24
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001914:	2100      	movs	r1, #0
 8001916:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001918:	fb03 f201 	mul.w	r2, r3, r1
 800191c:	2300      	movs	r3, #0
 800191e:	fb00 f303 	mul.w	r3, r0, r3
 8001922:	4413      	add	r3, r2
 8001924:	4a43      	ldr	r2, [pc, #268]	; (8001a34 <HAL_RCC_GetSysClockFreq+0x188>)
 8001926:	fba0 1202 	umull	r1, r2, r0, r2
 800192a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800192c:	460a      	mov	r2, r1
 800192e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001932:	4413      	add	r3, r2
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001938:	2200      	movs	r2, #0
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	61fa      	str	r2, [r7, #28]
 800193e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001942:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001946:	f7fe fc53 	bl	80001f0 <__aeabi_uldivmod>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4613      	mov	r3, r2
 8001950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001952:	e053      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	099b      	lsrs	r3, r3, #6
 800195a:	2200      	movs	r2, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	617a      	str	r2, [r7, #20]
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001966:	f04f 0b00 	mov.w	fp, #0
 800196a:	4652      	mov	r2, sl
 800196c:	465b      	mov	r3, fp
 800196e:	f04f 0000 	mov.w	r0, #0
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	0159      	lsls	r1, r3, #5
 8001978:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800197c:	0150      	lsls	r0, r2, #5
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	ebb2 080a 	subs.w	r8, r2, sl
 8001986:	eb63 090b 	sbc.w	r9, r3, fp
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001996:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800199a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800199e:	ebb2 0408 	subs.w	r4, r2, r8
 80019a2:	eb63 0509 	sbc.w	r5, r3, r9
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	00eb      	lsls	r3, r5, #3
 80019b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019b4:	00e2      	lsls	r2, r4, #3
 80019b6:	4614      	mov	r4, r2
 80019b8:	461d      	mov	r5, r3
 80019ba:	eb14 030a 	adds.w	r3, r4, sl
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	eb45 030b 	adc.w	r3, r5, fp
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019d2:	4629      	mov	r1, r5
 80019d4:	028b      	lsls	r3, r1, #10
 80019d6:	4621      	mov	r1, r4
 80019d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019dc:	4621      	mov	r1, r4
 80019de:	028a      	lsls	r2, r1, #10
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e6:	2200      	movs	r2, #0
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	60fa      	str	r2, [r7, #12]
 80019ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019f0:	f7fe fbfe 	bl	80001f0 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019fc:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <HAL_RCC_GetSysClockFreq+0x180>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	3301      	adds	r3, #1
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a16:	e002      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3740      	adds	r7, #64	; 0x40
 8001a24:	46bd      	mov	sp, r7
 8001a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	00f42400 	.word	0x00f42400
 8001a34:	017d7840 	.word	0x017d7840

08001a38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008

08001a50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a54:	f7ff fff0 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	0a9b      	lsrs	r3, r3, #10
 8001a60:	f003 0307 	and.w	r3, r3, #7
 8001a64:	4903      	ldr	r1, [pc, #12]	; (8001a74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a66:	5ccb      	ldrb	r3, [r1, r3]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40023800 	.word	0x40023800
 8001a74:	08006070 	.word	0x08006070

08001a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a7c:	f7ff ffdc 	bl	8001a38 <HAL_RCC_GetHCLKFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	0b5b      	lsrs	r3, r3, #13
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4903      	ldr	r1, [pc, #12]	; (8001a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	08006070 	.word	0x08006070

08001aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e03f      	b.n	8001b32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff f802 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	; 0x24
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f9cb 	bl	8001e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	695a      	ldr	r2, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b08a      	sub	sp, #40	; 0x28
 8001b3e:	af02      	add	r7, sp, #8
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4613      	mov	r3, r2
 8001b48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b20      	cmp	r3, #32
 8001b58:	d17c      	bne.n	8001c54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_UART_Transmit+0x2c>
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e075      	b.n	8001c56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_UART_Transmit+0x3e>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e06e      	b.n	8001c56 <HAL_UART_Transmit+0x11c>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2221      	movs	r2, #33	; 0x21
 8001b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b8e:	f7ff f877 	bl	8000c80 <HAL_GetTick>
 8001b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	88fa      	ldrh	r2, [r7, #6]
 8001b9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba8:	d108      	bne.n	8001bbc <HAL_UART_Transmit+0x82>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d104      	bne.n	8001bbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	e003      	b.n	8001bc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bcc:	e02a      	b.n	8001c24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f000 f8e2 	bl	8001da2 <UART_WaitOnFlagUntilTimeout>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e036      	b.n	8001c56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10b      	bne.n	8001c06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	3302      	adds	r3, #2
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	e007      	b.n	8001c16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	3301      	adds	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1cf      	bne.n	8001bce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2200      	movs	r2, #0
 8001c36:	2140      	movs	r1, #64	; 0x40
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f8b2 	bl	8001da2 <UART_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e006      	b.n	8001c56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c50:	2300      	movs	r3, #0
 8001c52:	e000      	b.n	8001c56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c54:	2302      	movs	r3, #2
  }
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b08a      	sub	sp, #40	; 0x28
 8001c62:	af02      	add	r7, sp, #8
 8001c64:	60f8      	str	r0, [r7, #12]
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	f040 808c 	bne.w	8001d98 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_UART_Receive+0x2e>
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e084      	b.n	8001d9a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d101      	bne.n	8001c9e <HAL_UART_Receive+0x40>
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	e07d      	b.n	8001d9a <HAL_UART_Receive+0x13c>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2222      	movs	r2, #34	; 0x22
 8001cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cba:	f7fe ffe1 	bl	8000c80 <HAL_GetTick>
 8001cbe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	88fa      	ldrh	r2, [r7, #6]
 8001cc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	88fa      	ldrh	r2, [r7, #6]
 8001cca:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd4:	d108      	bne.n	8001ce8 <HAL_UART_Receive+0x8a>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d104      	bne.n	8001ce8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	e003      	b.n	8001cf0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001cf8:	e043      	b.n	8001d82 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2200      	movs	r2, #0
 8001d02:	2120      	movs	r1, #32
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 f84c 	bl	8001da2 <UART_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e042      	b.n	8001d9a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10c      	bne.n	8001d34 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	3302      	adds	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	e01f      	b.n	8001d74 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d3c:	d007      	beq.n	8001d4e <HAL_UART_Receive+0xf0>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10a      	bne.n	8001d5c <HAL_UART_Receive+0xfe>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e008      	b.n	8001d6e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3301      	adds	r3, #1
 8001d72:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1b6      	bne.n	8001cfa <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
  }
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b090      	sub	sp, #64	; 0x40
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001db2:	e050      	b.n	8001e56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dba:	d04c      	beq.n	8001e56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001dc2:	f7fe ff5d 	bl	8000c80 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d241      	bcs.n	8001e56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	330c      	adds	r3, #12
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	e853 3f00 	ldrex	r3, [r3]
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001df2:	637a      	str	r2, [r7, #52]	; 0x34
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dfa:	e841 2300 	strex	r3, r2, [r1]
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e5      	bne.n	8001dd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3314      	adds	r3, #20
 8001e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	e853 3f00 	ldrex	r3, [r3]
 8001e14:	613b      	str	r3, [r7, #16]
   return(result);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3314      	adds	r3, #20
 8001e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e26:	623a      	str	r2, [r7, #32]
 8001e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e2a:	69f9      	ldr	r1, [r7, #28]
 8001e2c:	6a3a      	ldr	r2, [r7, #32]
 8001e2e:	e841 2300 	strex	r3, r2, [r1]
 8001e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1e5      	bne.n	8001e06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e00f      	b.n	8001e76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	68ba      	ldr	r2, [r7, #8]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	bf0c      	ite	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	2300      	movne	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d09f      	beq.n	8001db4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3740      	adds	r7, #64	; 0x40
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e84:	b0c0      	sub	sp, #256	; 0x100
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9c:	68d9      	ldr	r1, [r3, #12]
 8001e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	ea40 0301 	orr.w	r3, r0, r1
 8001ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ed8:	f021 010c 	bic.w	r1, r1, #12
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efa:	6999      	ldr	r1, [r3, #24]
 8001efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	ea40 0301 	orr.w	r3, r0, r1
 8001f06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4b8f      	ldr	r3, [pc, #572]	; (800214c <UART_SetConfig+0x2cc>)
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d005      	beq.n	8001f20 <UART_SetConfig+0xa0>
 8001f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b8d      	ldr	r3, [pc, #564]	; (8002150 <UART_SetConfig+0x2d0>)
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d104      	bne.n	8001f2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f20:	f7ff fdaa 	bl	8001a78 <HAL_RCC_GetPCLK2Freq>
 8001f24:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f28:	e003      	b.n	8001f32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f2a:	f7ff fd91 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001f2e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f3c:	f040 810c 	bne.w	8002158 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f44:	2200      	movs	r2, #0
 8001f46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f52:	4622      	mov	r2, r4
 8001f54:	462b      	mov	r3, r5
 8001f56:	1891      	adds	r1, r2, r2
 8001f58:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f5a:	415b      	adcs	r3, r3
 8001f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f62:	4621      	mov	r1, r4
 8001f64:	eb12 0801 	adds.w	r8, r2, r1
 8001f68:	4629      	mov	r1, r5
 8001f6a:	eb43 0901 	adc.w	r9, r3, r1
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f82:	4690      	mov	r8, r2
 8001f84:	4699      	mov	r9, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	eb18 0303 	adds.w	r3, r8, r3
 8001f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f90:	462b      	mov	r3, r5
 8001f92:	eb49 0303 	adc.w	r3, r9, r3
 8001f96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fa6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001faa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fae:	460b      	mov	r3, r1
 8001fb0:	18db      	adds	r3, r3, r3
 8001fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	eb42 0303 	adc.w	r3, r2, r3
 8001fba:	657b      	str	r3, [r7, #84]	; 0x54
 8001fbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fc4:	f7fe f914 	bl	80001f0 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4b61      	ldr	r3, [pc, #388]	; (8002154 <UART_SetConfig+0x2d4>)
 8001fce:	fba3 2302 	umull	r2, r3, r3, r2
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	011c      	lsls	r4, r3, #4
 8001fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fe0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001fe4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001fe8:	4642      	mov	r2, r8
 8001fea:	464b      	mov	r3, r9
 8001fec:	1891      	adds	r1, r2, r2
 8001fee:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ff0:	415b      	adcs	r3, r3
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ff4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	eb12 0a01 	adds.w	sl, r2, r1
 8001ffe:	4649      	mov	r1, r9
 8002000:	eb43 0b01 	adc.w	fp, r3, r1
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002010:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002018:	4692      	mov	sl, r2
 800201a:	469b      	mov	fp, r3
 800201c:	4643      	mov	r3, r8
 800201e:	eb1a 0303 	adds.w	r3, sl, r3
 8002022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002026:	464b      	mov	r3, r9
 8002028:	eb4b 0303 	adc.w	r3, fp, r3
 800202c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800203c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002040:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002044:	460b      	mov	r3, r1
 8002046:	18db      	adds	r3, r3, r3
 8002048:	643b      	str	r3, [r7, #64]	; 0x40
 800204a:	4613      	mov	r3, r2
 800204c:	eb42 0303 	adc.w	r3, r2, r3
 8002050:	647b      	str	r3, [r7, #68]	; 0x44
 8002052:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002056:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800205a:	f7fe f8c9 	bl	80001f0 <__aeabi_uldivmod>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4611      	mov	r1, r2
 8002064:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <UART_SetConfig+0x2d4>)
 8002066:	fba3 2301 	umull	r2, r3, r3, r1
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2264      	movs	r2, #100	; 0x64
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	1acb      	subs	r3, r1, r3
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <UART_SetConfig+0x2d4>)
 800207c:	fba3 2302 	umull	r2, r3, r3, r2
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002088:	441c      	add	r4, r3
 800208a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800208e:	2200      	movs	r2, #0
 8002090:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002094:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002098:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800209c:	4642      	mov	r2, r8
 800209e:	464b      	mov	r3, r9
 80020a0:	1891      	adds	r1, r2, r2
 80020a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80020a4:	415b      	adcs	r3, r3
 80020a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020ac:	4641      	mov	r1, r8
 80020ae:	1851      	adds	r1, r2, r1
 80020b0:	6339      	str	r1, [r7, #48]	; 0x30
 80020b2:	4649      	mov	r1, r9
 80020b4:	414b      	adcs	r3, r1
 80020b6:	637b      	str	r3, [r7, #52]	; 0x34
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020c4:	4659      	mov	r1, fp
 80020c6:	00cb      	lsls	r3, r1, #3
 80020c8:	4651      	mov	r1, sl
 80020ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ce:	4651      	mov	r1, sl
 80020d0:	00ca      	lsls	r2, r1, #3
 80020d2:	4610      	mov	r0, r2
 80020d4:	4619      	mov	r1, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	4642      	mov	r2, r8
 80020da:	189b      	adds	r3, r3, r2
 80020dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020e0:	464b      	mov	r3, r9
 80020e2:	460a      	mov	r2, r1
 80020e4:	eb42 0303 	adc.w	r3, r2, r3
 80020e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002100:	460b      	mov	r3, r1
 8002102:	18db      	adds	r3, r3, r3
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
 8002106:	4613      	mov	r3, r2
 8002108:	eb42 0303 	adc.w	r3, r2, r3
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002112:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002116:	f7fe f86b 	bl	80001f0 <__aeabi_uldivmod>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <UART_SetConfig+0x2d4>)
 8002120:	fba3 1302 	umull	r1, r3, r3, r2
 8002124:	095b      	lsrs	r3, r3, #5
 8002126:	2164      	movs	r1, #100	; 0x64
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	3332      	adds	r3, #50	; 0x32
 8002132:	4a08      	ldr	r2, [pc, #32]	; (8002154 <UART_SetConfig+0x2d4>)
 8002134:	fba2 2303 	umull	r2, r3, r2, r3
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	f003 0207 	and.w	r2, r3, #7
 800213e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4422      	add	r2, r4
 8002146:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002148:	e105      	b.n	8002356 <UART_SetConfig+0x4d6>
 800214a:	bf00      	nop
 800214c:	40011000 	.word	0x40011000
 8002150:	40011400 	.word	0x40011400
 8002154:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800215c:	2200      	movs	r2, #0
 800215e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002162:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002166:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800216a:	4642      	mov	r2, r8
 800216c:	464b      	mov	r3, r9
 800216e:	1891      	adds	r1, r2, r2
 8002170:	6239      	str	r1, [r7, #32]
 8002172:	415b      	adcs	r3, r3
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
 8002176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800217a:	4641      	mov	r1, r8
 800217c:	1854      	adds	r4, r2, r1
 800217e:	4649      	mov	r1, r9
 8002180:	eb43 0501 	adc.w	r5, r3, r1
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	00eb      	lsls	r3, r5, #3
 800218e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002192:	00e2      	lsls	r2, r4, #3
 8002194:	4614      	mov	r4, r2
 8002196:	461d      	mov	r5, r3
 8002198:	4643      	mov	r3, r8
 800219a:	18e3      	adds	r3, r4, r3
 800219c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021a0:	464b      	mov	r3, r9
 80021a2:	eb45 0303 	adc.w	r3, r5, r3
 80021a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021c6:	4629      	mov	r1, r5
 80021c8:	008b      	lsls	r3, r1, #2
 80021ca:	4621      	mov	r1, r4
 80021cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021d0:	4621      	mov	r1, r4
 80021d2:	008a      	lsls	r2, r1, #2
 80021d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021d8:	f7fe f80a 	bl	80001f0 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4b60      	ldr	r3, [pc, #384]	; (8002364 <UART_SetConfig+0x4e4>)
 80021e2:	fba3 2302 	umull	r2, r3, r3, r2
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	011c      	lsls	r4, r3, #4
 80021ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	1891      	adds	r1, r2, r2
 8002202:	61b9      	str	r1, [r7, #24]
 8002204:	415b      	adcs	r3, r3
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800220c:	4641      	mov	r1, r8
 800220e:	1851      	adds	r1, r2, r1
 8002210:	6139      	str	r1, [r7, #16]
 8002212:	4649      	mov	r1, r9
 8002214:	414b      	adcs	r3, r1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002224:	4659      	mov	r1, fp
 8002226:	00cb      	lsls	r3, r1, #3
 8002228:	4651      	mov	r1, sl
 800222a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800222e:	4651      	mov	r1, sl
 8002230:	00ca      	lsls	r2, r1, #3
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	4603      	mov	r3, r0
 8002238:	4642      	mov	r2, r8
 800223a:	189b      	adds	r3, r3, r2
 800223c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002240:	464b      	mov	r3, r9
 8002242:	460a      	mov	r2, r1
 8002244:	eb42 0303 	adc.w	r3, r2, r3
 8002248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800224c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	67bb      	str	r3, [r7, #120]	; 0x78
 8002256:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002264:	4649      	mov	r1, r9
 8002266:	008b      	lsls	r3, r1, #2
 8002268:	4641      	mov	r1, r8
 800226a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800226e:	4641      	mov	r1, r8
 8002270:	008a      	lsls	r2, r1, #2
 8002272:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002276:	f7fd ffbb 	bl	80001f0 <__aeabi_uldivmod>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <UART_SetConfig+0x4e4>)
 8002280:	fba3 1302 	umull	r1, r3, r3, r2
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	2164      	movs	r1, #100	; 0x64
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	3332      	adds	r3, #50	; 0x32
 8002292:	4a34      	ldr	r2, [pc, #208]	; (8002364 <UART_SetConfig+0x4e4>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229e:	441c      	add	r4, r3
 80022a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a4:	2200      	movs	r2, #0
 80022a6:	673b      	str	r3, [r7, #112]	; 0x70
 80022a8:	677a      	str	r2, [r7, #116]	; 0x74
 80022aa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022ae:	4642      	mov	r2, r8
 80022b0:	464b      	mov	r3, r9
 80022b2:	1891      	adds	r1, r2, r2
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	415b      	adcs	r3, r3
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022be:	4641      	mov	r1, r8
 80022c0:	1851      	adds	r1, r2, r1
 80022c2:	6039      	str	r1, [r7, #0]
 80022c4:	4649      	mov	r1, r9
 80022c6:	414b      	adcs	r3, r1
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022d6:	4659      	mov	r1, fp
 80022d8:	00cb      	lsls	r3, r1, #3
 80022da:	4651      	mov	r1, sl
 80022dc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e0:	4651      	mov	r1, sl
 80022e2:	00ca      	lsls	r2, r1, #3
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	4603      	mov	r3, r0
 80022ea:	4642      	mov	r2, r8
 80022ec:	189b      	adds	r3, r3, r2
 80022ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80022f0:	464b      	mov	r3, r9
 80022f2:	460a      	mov	r2, r1
 80022f4:	eb42 0303 	adc.w	r3, r2, r3
 80022f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	663b      	str	r3, [r7, #96]	; 0x60
 8002304:	667a      	str	r2, [r7, #100]	; 0x64
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002312:	4649      	mov	r1, r9
 8002314:	008b      	lsls	r3, r1, #2
 8002316:	4641      	mov	r1, r8
 8002318:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800231c:	4641      	mov	r1, r8
 800231e:	008a      	lsls	r2, r1, #2
 8002320:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002324:	f7fd ff64 	bl	80001f0 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <UART_SetConfig+0x4e4>)
 800232e:	fba3 1302 	umull	r1, r3, r3, r2
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2164      	movs	r1, #100	; 0x64
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	3332      	adds	r3, #50	; 0x32
 8002340:	4a08      	ldr	r2, [pc, #32]	; (8002364 <UART_SetConfig+0x4e4>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4422      	add	r2, r4
 8002354:	609a      	str	r2, [r3, #8]
}
 8002356:	bf00      	nop
 8002358:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800235c:	46bd      	mov	sp, r7
 800235e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002362:	bf00      	nop
 8002364:	51eb851f 	.word	0x51eb851f

08002368 <__NVIC_SetPriority>:
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80023c0:	2100      	movs	r1, #0
 80023c2:	f06f 0004 	mvn.w	r0, #4
 80023c6:	f7ff ffcf 	bl	8002368 <__NVIC_SetPriority>
#endif
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023d6:	f3ef 8305 	mrs	r3, IPSR
 80023da:	603b      	str	r3, [r7, #0]
  return(result);
 80023dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80023e2:	f06f 0305 	mvn.w	r3, #5
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	e00c      	b.n	8002404 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <osKernelInitialize+0x44>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d105      	bne.n	80023fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <osKernelInitialize+0x44>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	e002      	b.n	8002404 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002404:	687b      	ldr	r3, [r7, #4]
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	200000f4 	.word	0x200000f4

08002418 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800241e:	f3ef 8305 	mrs	r3, IPSR
 8002422:	603b      	str	r3, [r7, #0]
  return(result);
 8002424:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <osKernelStart+0x1a>
    stat = osErrorISR;
 800242a:	f06f 0305 	mvn.w	r3, #5
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	e010      	b.n	8002454 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <osKernelStart+0x48>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d109      	bne.n	800244e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800243a:	f7ff ffbf 	bl	80023bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <osKernelStart+0x48>)
 8002440:	2202      	movs	r2, #2
 8002442:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002444:	f001 fa4a 	bl	80038dc <vTaskStartScheduler>
      stat = osOK;
 8002448:	2300      	movs	r3, #0
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	e002      	b.n	8002454 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
 8002452:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002454:	687b      	ldr	r3, [r7, #4]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200000f4 	.word	0x200000f4

08002464 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b08e      	sub	sp, #56	; 0x38
 8002468:	af04      	add	r7, sp, #16
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002474:	f3ef 8305 	mrs	r3, IPSR
 8002478:	617b      	str	r3, [r7, #20]
  return(result);
 800247a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800247c:	2b00      	cmp	r3, #0
 800247e:	d17e      	bne.n	800257e <osThreadNew+0x11a>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d07b      	beq.n	800257e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800248a:	2318      	movs	r3, #24
 800248c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800248e:	2300      	movs	r3, #0
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d045      	beq.n	800252a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <osThreadNew+0x48>
        name = attr->name;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d008      	beq.n	80024d2 <osThreadNew+0x6e>
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b38      	cmp	r3, #56	; 0x38
 80024c4:	d805      	bhi.n	80024d2 <osThreadNew+0x6e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <osThreadNew+0x72>
        return (NULL);
 80024d2:	2300      	movs	r3, #0
 80024d4:	e054      	b.n	8002580 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	089b      	lsrs	r3, r3, #2
 80024e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00e      	beq.n	800250c <osThreadNew+0xa8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2bbb      	cmp	r3, #187	; 0xbb
 80024f4:	d90a      	bls.n	800250c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d006      	beq.n	800250c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <osThreadNew+0xa8>
        mem = 1;
 8002506:	2301      	movs	r3, #1
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	e010      	b.n	800252e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10c      	bne.n	800252e <osThreadNew+0xca>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d108      	bne.n	800252e <osThreadNew+0xca>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <osThreadNew+0xca>
          mem = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	e001      	b.n	800252e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d110      	bne.n	8002556 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800253c:	9202      	str	r2, [sp, #8]
 800253e:	9301      	str	r3, [sp, #4]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6a3a      	ldr	r2, [r7, #32]
 8002548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 ffda 	bl	8003504 <xTaskCreateStatic>
 8002550:	4603      	mov	r3, r0
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e013      	b.n	800257e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d110      	bne.n	800257e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	b29a      	uxth	r2, r3
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f001 f825 	bl	80035be <xTaskCreate>
 8002574:	4603      	mov	r3, r0
 8002576:	2b01      	cmp	r3, #1
 8002578:	d001      	beq.n	800257e <osThreadNew+0x11a>
            hTask = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800257e:	693b      	ldr	r3, [r7, #16]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3728      	adds	r7, #40	; 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002590:	f3ef 8305 	mrs	r3, IPSR
 8002594:	60bb      	str	r3, [r7, #8]
  return(result);
 8002596:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <osDelay+0x1c>
    stat = osErrorISR;
 800259c:	f06f 0305 	mvn.w	r3, #5
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	e007      	b.n	80025b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f001 f960 	bl	8003874 <vTaskDelay>
    }
  }

  return (stat);
 80025b4:	68fb      	ldr	r3, [r7, #12]
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a07      	ldr	r2, [pc, #28]	; (80025ec <vApplicationGetIdleTaskMemory+0x2c>)
 80025d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <vApplicationGetIdleTaskMemory+0x30>)
 80025d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2280      	movs	r2, #128	; 0x80
 80025dc:	601a      	str	r2, [r3, #0]
}
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200000f8 	.word	0x200000f8
 80025f0:	200001b4 	.word	0x200001b4

080025f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a07      	ldr	r2, [pc, #28]	; (8002620 <vApplicationGetTimerTaskMemory+0x2c>)
 8002604:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <vApplicationGetTimerTaskMemory+0x30>)
 800260a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	200003b4 	.word	0x200003b4
 8002624:	20000470 	.word	0x20000470

08002628 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800262e:	2020      	movs	r0, #32
 8002630:	f002 fce2 	bl	8004ff8 <pvPortMalloc>
 8002634:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00a      	beq.n	8002652 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f9bb 	bl	80029c2 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002652:	687b      	ldr	r3, [r7, #4]
	}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b090      	sub	sp, #64	; 0x40
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002672:	2300      	movs	r3, #0
 8002674:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800267c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002680:	f383 8811 	msr	BASEPRI, r3
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	f3bf 8f4f 	dsb	sy
 800268c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800268e:	bf00      	nop
 8002690:	e7fe      	b.n	8002690 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00a      	beq.n	80026b2 <xEventGroupWaitBits+0x56>
	__asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	61fb      	str	r3, [r7, #28]
}
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <xEventGroupWaitBits+0x72>
	__asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	61bb      	str	r3, [r7, #24]
}
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ce:	f001 fdff 	bl	80042d0 <xTaskGetSchedulerState>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d102      	bne.n	80026de <xEventGroupWaitBits+0x82>
 80026d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <xEventGroupWaitBits+0x86>
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <xEventGroupWaitBits+0x88>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <xEventGroupWaitBits+0xa2>
	__asm volatile
 80026e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ec:	f383 8811 	msr	BASEPRI, r3
 80026f0:	f3bf 8f6f 	isb	sy
 80026f4:	f3bf 8f4f 	dsb	sy
 80026f8:	617b      	str	r3, [r7, #20]
}
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80026fe:	f001 f95d 	bl	80039bc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800270e:	f000 f936 	bl	800297e <prvTestWaitCondition>
 8002712:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00e      	beq.n	8002738 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800271e:	2300      	movs	r3, #0
 8002720:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d028      	beq.n	800277a <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	43db      	mvns	r3, r3
 8002730:	401a      	ands	r2, r3
 8002732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e020      	b.n	800277a <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800273e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002742:	2301      	movs	r3, #1
 8002744:	633b      	str	r3, [r7, #48]	; 0x30
 8002746:	e018      	b.n	800277a <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800274e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002754:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800275c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002762:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	1d18      	adds	r0, r3, #4
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	4313      	orrs	r3, r2
 800276e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002770:	4619      	mov	r1, r3
 8002772:	f001 fb21 	bl	8003db8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800277a:	f001 f92d 	bl	80039d8 <xTaskResumeAll>
 800277e:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8002780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002782:	2b00      	cmp	r3, #0
 8002784:	d031      	beq.n	80027ea <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <xEventGroupWaitBits+0x198>)
 800278e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800279c:	f001 fe24 	bl	80043e8 <uxTaskResetEventItemValue>
 80027a0:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80027a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11a      	bne.n	80027e2 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80027ac:	f002 fb02 	bl	8004db4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80027b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027bc:	f000 f8df 	bl	800297e <prvTestWaitCondition>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d009      	beq.n	80027da <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d006      	beq.n	80027da <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	401a      	ands	r2, r3
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80027da:	2301      	movs	r3, #1
 80027dc:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80027de:	f002 fb19 	bl	8004e14 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80027e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80027ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3740      	adds	r7, #64	; 0x40
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	e000ed04 	.word	0xe000ed04

080027f8 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <xEventGroupClearBits+0x2a>
	__asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60fb      	str	r3, [r7, #12]
}
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <xEventGroupClearBits+0x4a>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	60bb      	str	r3, [r7, #8]
}
 800283e:	bf00      	nop
 8002840:	e7fe      	b.n	8002840 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 8002842:	f002 fab7 	bl	8004db4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	43db      	mvns	r3, r3
 8002854:	401a      	ands	r2, r3
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800285a:	f002 fadb 	bl	8004e14 <vPortExitCritical>

	return uxReturn;
 800285e:	693b      	ldr	r3, [r7, #16]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002872:	2300      	movs	r3, #0
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800287a:	2300      	movs	r3, #0
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <xEventGroupSetBits+0x32>
	__asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	613b      	str	r3, [r7, #16]
}
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <xEventGroupSetBits+0x52>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	60fb      	str	r3, [r7, #12]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80028ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028bc:	3304      	adds	r3, #4
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3308      	adds	r3, #8
 80028c4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80028c6:	f001 f879 	bl	80039bc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80028d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	431a      	orrs	r2, r3
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80028dc:	e03c      	b.n	8002958 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80028e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80028f4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028fc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d108      	bne.n	800291a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00b      	beq.n	800292c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8002914:	2301      	movs	r3, #1
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002918:	e008      	b.n	800292c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	429a      	cmp	r2, r3
 8002926:	d101      	bne.n	800292c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8002928:	2301      	movs	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800293c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800294c:	4619      	mov	r1, r3
 800294e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002950:	f001 fafe 	bl	8003f50 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8002958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	429a      	cmp	r2, r3
 800295e:	d1be      	bne.n	80028de <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	43db      	mvns	r3, r3
 8002968:	401a      	ands	r2, r3
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800296e:	f001 f833 	bl	80039d8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	681b      	ldr	r3, [r3, #0]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3738      	adds	r7, #56	; 0x38
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800297e:	b480      	push	{r7}
 8002980:	b087      	sub	sp, #28
 8002982:	af00      	add	r7, sp, #0
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800299e:	2301      	movs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
 80029a2:	e007      	b.n	80029b4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d101      	bne.n	80029b4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80029b0:	2301      	movs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80029b4:	697b      	ldr	r3, [r7, #20]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f103 0208 	add.w	r2, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f04f 32ff 	mov.w	r2, #4294967295
 80029da:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f103 0208 	add.w	r2, r3, #8
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f103 0208 	add.w	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	601a      	str	r2, [r3, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7a:	d103      	bne.n	8002a84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e00c      	b.n	8002a9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3308      	adds	r3, #8
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e002      	b.n	8002a92 <vListInsert+0x2e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d2f6      	bcs.n	8002a8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6852      	ldr	r2, [r2, #4]
 8002af6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d103      	bne.n	8002b0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	1e5a      	subs	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <xQueueGenericReset+0x2a>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	60bb      	str	r3, [r7, #8]
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002b56:	f002 f92d 	bl	8004db4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	441a      	add	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	3b01      	subs	r3, #1
 8002b88:	68f9      	ldr	r1, [r7, #12]
 8002b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	441a      	add	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	22ff      	movs	r2, #255	; 0xff
 8002b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	22ff      	movs	r2, #255	; 0xff
 8002ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d114      	bne.n	8002bd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d01a      	beq.n	8002bea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3310      	adds	r3, #16
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 f965 	bl	8003e88 <xTaskRemoveFromEventList>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d012      	beq.n	8002bea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <xQueueGenericReset+0xcc>)
 8002bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	e009      	b.n	8002bea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	3310      	adds	r3, #16
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fef1 	bl	80029c2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3324      	adds	r3, #36	; 0x24
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff feec 	bl	80029c2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002bea:	f002 f913 	bl	8004e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002bee:	2301      	movs	r3, #1
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08e      	sub	sp, #56	; 0x38
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c14:	f383 8811 	msr	BASEPRI, r3
 8002c18:	f3bf 8f6f 	isb	sy
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c22:	bf00      	nop
 8002c24:	e7fe      	b.n	8002c24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <xQueueGenericCreateStatic+0x52>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <xQueueGenericCreateStatic+0x56>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueGenericCreateStatic+0x58>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	623b      	str	r3, [r7, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	e7fe      	b.n	8002c6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <xQueueGenericCreateStatic+0x7e>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <xQueueGenericCreateStatic+0x82>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <xQueueGenericCreateStatic+0x84>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	61fb      	str	r3, [r7, #28]
}
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002c9a:	2350      	movs	r3, #80	; 0x50
 8002c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b50      	cmp	r3, #80	; 0x50
 8002ca2:	d00a      	beq.n	8002cba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca8:	f383 8811 	msr	BASEPRI, r3
 8002cac:	f3bf 8f6f 	isb	sy
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	61bb      	str	r3, [r7, #24]
}
 8002cb6:	bf00      	nop
 8002cb8:	e7fe      	b.n	8002cb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002cba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00d      	beq.n	8002ce2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd4:	9300      	str	r3, [sp, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	68b9      	ldr	r1, [r7, #8]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f805 	bl	8002cec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3730      	adds	r7, #48	; 0x30
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d103      	bne.n	8002d08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	e002      	b.n	8002d0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	69b8      	ldr	r0, [r7, #24]
 8002d1e:	f7ff ff05 	bl	8002b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10a      	bne.n	8002d66 <xQueueGenericSend+0x32>
	__asm volatile
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d62:	bf00      	nop
 8002d64:	e7fe      	b.n	8002d64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d103      	bne.n	8002d74 <xQueueGenericSend+0x40>
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <xQueueGenericSend+0x44>
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <xQueueGenericSend+0x46>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <xQueueGenericSend+0x60>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d90:	bf00      	nop
 8002d92:	e7fe      	b.n	8002d92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d103      	bne.n	8002da2 <xQueueGenericSend+0x6e>
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d101      	bne.n	8002da6 <xQueueGenericSend+0x72>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <xQueueGenericSend+0x74>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	623b      	str	r3, [r7, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	e7fe      	b.n	8002dc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc2:	f001 fa85 	bl	80042d0 <xTaskGetSchedulerState>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <xQueueGenericSend+0x9e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <xQueueGenericSend+0xa2>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <xQueueGenericSend+0xa4>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	61fb      	str	r3, [r7, #28]
}
 8002dee:	bf00      	nop
 8002df0:	e7fe      	b.n	8002df0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002df2:	f001 ffdf 	bl	8004db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <xQueueGenericSend+0xd4>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d129      	bne.n	8002e5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e0e:	f000 fa0b 	bl	8003228 <prvCopyDataToQueue>
 8002e12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d010      	beq.n	8002e3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1e:	3324      	adds	r3, #36	; 0x24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f831 	bl	8003e88 <xTaskRemoveFromEventList>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b3f      	ldr	r3, [pc, #252]	; (8002f2c <xQueueGenericSend+0x1f8>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	e00a      	b.n	8002e54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e44:	4b39      	ldr	r3, [pc, #228]	; (8002f2c <xQueueGenericSend+0x1f8>)
 8002e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e54:	f001 ffde 	bl	8004e14 <vPortExitCritical>
				return pdPASS;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e063      	b.n	8002f24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e62:	f001 ffd7 	bl	8004e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e05c      	b.n	8002f24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d106      	bne.n	8002e7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 f8cd 	bl	8004014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e7e:	f001 ffc9 	bl	8004e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e82:	f000 fd9b 	bl	80039bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e86:	f001 ff95 	bl	8004db4 <vPortEnterCritical>
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d103      	bne.n	8002ea0 <xQueueGenericSend+0x16c>
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ea6:	b25b      	sxtb	r3, r3
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d103      	bne.n	8002eb6 <xQueueGenericSend+0x182>
 8002eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eb6:	f001 ffad 	bl	8004e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eba:	1d3a      	adds	r2, r7, #4
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f001 f8bc 	bl	8004040 <xTaskCheckForTimeOut>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d124      	bne.n	8002f18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed0:	f000 faa2 	bl	8003418 <prvIsQueueFull>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d018      	beq.n	8002f0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	3310      	adds	r3, #16
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 ff44 	bl	8003d70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eea:	f000 fa2d 	bl	8003348 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eee:	f000 fd73 	bl	80039d8 <xTaskResumeAll>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f af7c 	bne.w	8002df2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <xQueueGenericSend+0x1f8>)
 8002efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	e772      	b.n	8002df2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f0e:	f000 fa1b 	bl	8003348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f12:	f000 fd61 	bl	80039d8 <xTaskResumeAll>
 8002f16:	e76c      	b.n	8002df2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f1a:	f000 fa15 	bl	8003348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f1e:	f000 fd5b 	bl	80039d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3738      	adds	r7, #56	; 0x38
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	e000ed04 	.word	0xe000ed04

08002f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b090      	sub	sp, #64	; 0x40
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
 8002f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4c:	f383 8811 	msr	BASEPRI, r3
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	f3bf 8f4f 	dsb	sy
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f5a:	bf00      	nop
 8002f5c:	e7fe      	b.n	8002f5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d103      	bne.n	8002f6c <xQueueGenericSendFromISR+0x3c>
 8002f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueGenericSendFromISR+0x40>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueGenericSendFromISR+0x42>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d103      	bne.n	8002f9a <xQueueGenericSendFromISR+0x6a>
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <xQueueGenericSendFromISR+0x6e>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueGenericSendFromISR+0x70>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fba:	f001 ffdd 	bl	8004f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	61fa      	str	r2, [r7, #28]
 8002fd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <xQueueGenericSendFromISR+0xbc>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d12f      	bne.n	800304c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003002:	f000 f911 	bl	8003228 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003006:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300e:	d112      	bne.n	8003036 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d016      	beq.n	8003046 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	3324      	adds	r3, #36	; 0x24
 800301c:	4618      	mov	r0, r3
 800301e:	f000 ff33 	bl	8003e88 <xTaskRemoveFromEventList>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00e      	beq.n	8003046 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e007      	b.n	8003046 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800303a:	3301      	adds	r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	b25a      	sxtb	r2, r3
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003046:	2301      	movs	r3, #1
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800304a:	e001      	b.n	8003050 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800304c:	2300      	movs	r3, #0
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800305a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800305c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800305e:	4618      	mov	r0, r3
 8003060:	3740      	adds	r7, #64	; 0x40
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08c      	sub	sp, #48	; 0x30
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003074:	2300      	movs	r3, #0
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <xQueueReceive+0x30>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	623b      	str	r3, [r7, #32]
}
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <xQueueReceive+0x3e>
 800309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <xQueueReceive+0x42>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <xQueueReceive+0x44>
 80030aa:	2300      	movs	r3, #0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10a      	bne.n	80030c6 <xQueueReceive+0x5e>
	__asm volatile
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	61fb      	str	r3, [r7, #28]
}
 80030c2:	bf00      	nop
 80030c4:	e7fe      	b.n	80030c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030c6:	f001 f903 	bl	80042d0 <xTaskGetSchedulerState>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <xQueueReceive+0x6e>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <xQueueReceive+0x72>
 80030d6:	2301      	movs	r3, #1
 80030d8:	e000      	b.n	80030dc <xQueueReceive+0x74>
 80030da:	2300      	movs	r3, #0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <xQueueReceive+0x8e>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	61bb      	str	r3, [r7, #24]
}
 80030f2:	bf00      	nop
 80030f4:	e7fe      	b.n	80030f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030f6:	f001 fe5d 	bl	8004db4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01f      	beq.n	8003146 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310a:	f000 f8f7 	bl	80032fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	1e5a      	subs	r2, r3, #1
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003114:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00f      	beq.n	800313e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	3310      	adds	r3, #16
 8003122:	4618      	mov	r0, r3
 8003124:	f000 feb0 	bl	8003e88 <xTaskRemoveFromEventList>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <xQueueReceive+0x1bc>)
 8003130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800313e:	f001 fe69 	bl	8004e14 <vPortExitCritical>
				return pdPASS;
 8003142:	2301      	movs	r3, #1
 8003144:	e069      	b.n	800321a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800314c:	f001 fe62 	bl	8004e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003150:	2300      	movs	r3, #0
 8003152:	e062      	b.n	800321a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800315a:	f107 0310 	add.w	r3, r7, #16
 800315e:	4618      	mov	r0, r3
 8003160:	f000 ff58 	bl	8004014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003164:	2301      	movs	r3, #1
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003168:	f001 fe54 	bl	8004e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800316c:	f000 fc26 	bl	80039bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003170:	f001 fe20 	bl	8004db4 <vPortEnterCritical>
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800317a:	b25b      	sxtb	r3, r3
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d103      	bne.n	800318a <xQueueReceive+0x122>
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003190:	b25b      	sxtb	r3, r3
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d103      	bne.n	80031a0 <xQueueReceive+0x138>
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031a0:	f001 fe38 	bl	8004e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031a4:	1d3a      	adds	r2, r7, #4
 80031a6:	f107 0310 	add.w	r3, r7, #16
 80031aa:	4611      	mov	r1, r2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f000 ff47 	bl	8004040 <xTaskCheckForTimeOut>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d123      	bne.n	8003200 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ba:	f000 f917 	bl	80033ec <prvIsQueueEmpty>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fdcf 	bl	8003d70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d4:	f000 f8b8 	bl	8003348 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031d8:	f000 fbfe 	bl	80039d8 <xTaskResumeAll>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d189      	bne.n	80030f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031e2:	4b10      	ldr	r3, [pc, #64]	; (8003224 <xQueueReceive+0x1bc>)
 80031e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	f3bf 8f4f 	dsb	sy
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	e780      	b.n	80030f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f6:	f000 f8a7 	bl	8003348 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031fa:	f000 fbed 	bl	80039d8 <xTaskResumeAll>
 80031fe:	e77a      	b.n	80030f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003202:	f000 f8a1 	bl	8003348 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003206:	f000 fbe7 	bl	80039d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800320a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800320c:	f000 f8ee 	bl	80033ec <prvIsQueueEmpty>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	f43f af6f 	beq.w	80030f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003218:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800321a:	4618      	mov	r0, r3
 800321c:	3730      	adds	r7, #48	; 0x30
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	e000ed04 	.word	0xe000ed04

08003228 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d14d      	bne.n	80032ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f001 f85a 	bl	800430c <xTaskPriorityDisinherit>
 8003258:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	609a      	str	r2, [r3, #8]
 8003260:	e043      	b.n	80032ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d119      	bne.n	800329c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6858      	ldr	r0, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	461a      	mov	r2, r3
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	f002 f9cd 	bl	8005612 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	441a      	add	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d32b      	bcc.n	80032ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	e026      	b.n	80032ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	68d8      	ldr	r0, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	461a      	mov	r2, r3
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	f002 f9b3 	bl	8005612 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	425b      	negs	r3, r3
 80032b6:	441a      	add	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d207      	bcs.n	80032d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	425b      	negs	r3, r3
 80032d2:	441a      	add	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d105      	bne.n	80032ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032f2:	697b      	ldr	r3, [r7, #20]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	441a      	add	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	429a      	cmp	r2, r3
 8003326:	d303      	bcc.n	8003330 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68d9      	ldr	r1, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	461a      	mov	r2, r3
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f002 f969 	bl	8005612 <memcpy>
	}
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003350:	f001 fd30 	bl	8004db4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800335a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800335c:	e011      	b.n	8003382 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d012      	beq.n	800338c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3324      	adds	r3, #36	; 0x24
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fd8c 	bl	8003e88 <xTaskRemoveFromEventList>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003376:	f000 fec5 	bl	8004104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	3b01      	subs	r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003386:	2b00      	cmp	r3, #0
 8003388:	dce9      	bgt.n	800335e <prvUnlockQueue+0x16>
 800338a:	e000      	b.n	800338e <prvUnlockQueue+0x46>
					break;
 800338c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003396:	f001 fd3d 	bl	8004e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800339a:	f001 fd0b 	bl	8004db4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033a6:	e011      	b.n	80033cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d012      	beq.n	80033d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3310      	adds	r3, #16
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fd67 	bl	8003e88 <xTaskRemoveFromEventList>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80033c0:	f000 fea0 	bl	8004104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80033c4:	7bbb      	ldrb	r3, [r7, #14]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	dce9      	bgt.n	80033a8 <prvUnlockQueue+0x60>
 80033d4:	e000      	b.n	80033d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80033d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80033e0:	f001 fd18 	bl	8004e14 <vPortExitCritical>
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033f4:	f001 fcde 	bl	8004db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003400:	2301      	movs	r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	e001      	b.n	800340a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800340a:	f001 fd03 	bl	8004e14 <vPortExitCritical>

	return xReturn;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003420:	f001 fcc8 	bl	8004db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	429a      	cmp	r2, r3
 800342e:	d102      	bne.n	8003436 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003430:	2301      	movs	r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e001      	b.n	800343a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800343a:	f001 fceb 	bl	8004e14 <vPortExitCritical>

	return xReturn;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e014      	b.n	8003482 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003458:	4a0f      	ldr	r2, [pc, #60]	; (8003498 <vQueueAddToRegistry+0x50>)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10b      	bne.n	800347c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <vQueueAddToRegistry+0x50>)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <vQueueAddToRegistry+0x50>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800347a:	e006      	b.n	800348a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	3301      	adds	r3, #1
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b07      	cmp	r3, #7
 8003486:	d9e7      	bls.n	8003458 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	20000870 	.word	0x20000870

0800349c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034ac:	f001 fc82 	bl	8004db4 <vPortEnterCritical>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d103      	bne.n	80034c6 <vQueueWaitForMessageRestricted+0x2a>
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034cc:	b25b      	sxtb	r3, r3
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	d103      	bne.n	80034dc <vQueueWaitForMessageRestricted+0x40>
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034dc:	f001 fc9a 	bl	8004e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	68b9      	ldr	r1, [r7, #8]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f000 fc9d 	bl	8003e30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff ff26 	bl	8003348 <prvUnlockQueue>
	}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08e      	sub	sp, #56	; 0x38
 8003508:	af04      	add	r7, sp, #16
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351c:	f383 8811 	msr	BASEPRI, r3
 8003520:	f3bf 8f6f 	isb	sy
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	623b      	str	r3, [r7, #32]
}
 800352a:	bf00      	nop
 800352c:	e7fe      	b.n	800352c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10a      	bne.n	800354a <xTaskCreateStatic+0x46>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	61fb      	str	r3, [r7, #28]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800354a:	23bc      	movs	r3, #188	; 0xbc
 800354c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2bbc      	cmp	r3, #188	; 0xbc
 8003552:	d00a      	beq.n	800356a <xTaskCreateStatic+0x66>
	__asm volatile
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	61bb      	str	r3, [r7, #24]
}
 8003566:	bf00      	nop
 8003568:	e7fe      	b.n	8003568 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800356a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01e      	beq.n	80035b0 <xTaskCreateStatic+0xac>
 8003572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003580:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	2202      	movs	r2, #2
 8003586:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800358a:	2300      	movs	r3, #0
 800358c:	9303      	str	r3, [sp, #12]
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	9302      	str	r3, [sp, #8]
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f850 	bl	8003648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035aa:	f000 f8f3 	bl	8003794 <prvAddNewTaskToReadyList>
 80035ae:	e001      	b.n	80035b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035b4:	697b      	ldr	r3, [r7, #20]
	}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3728      	adds	r7, #40	; 0x28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08c      	sub	sp, #48	; 0x30
 80035c2:	af04      	add	r7, sp, #16
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f001 fd10 	bl	8004ff8 <pvPortMalloc>
 80035d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00e      	beq.n	80035fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035e0:	20bc      	movs	r0, #188	; 0xbc
 80035e2:	f001 fd09 	bl	8004ff8 <pvPortMalloc>
 80035e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
 80035f4:	e005      	b.n	8003602 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035f6:	6978      	ldr	r0, [r7, #20]
 80035f8:	f001 fdca 	bl	8005190 <vPortFree>
 80035fc:	e001      	b.n	8003602 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d017      	beq.n	8003638 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003610:	88fa      	ldrh	r2, [r7, #6]
 8003612:	2300      	movs	r3, #0
 8003614:	9303      	str	r3, [sp, #12]
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	f000 f80e 	bl	8003648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800362c:	69f8      	ldr	r0, [r7, #28]
 800362e:	f000 f8b1 	bl	8003794 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003632:	2301      	movs	r3, #1
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	e002      	b.n	800363e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
 800363c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800363e:	69bb      	ldr	r3, [r7, #24]
	}
 8003640:	4618      	mov	r0, r3
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003658:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	461a      	mov	r2, r3
 8003660:	21a5      	movs	r1, #165	; 0xa5
 8003662:	f001 ffe4 	bl	800562e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003670:	3b01      	subs	r3, #1
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	617b      	str	r3, [r7, #20]
}
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01f      	beq.n	80036e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e012      	b.n	80036d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	7819      	ldrb	r1, [r3, #0]
 80036b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	3334      	adds	r3, #52	; 0x34
 80036bc:	460a      	mov	r2, r1
 80036be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	4413      	add	r3, r2
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d006      	beq.n	80036da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3301      	adds	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	2b0f      	cmp	r3, #15
 80036d6:	d9e9      	bls.n	80036ac <prvInitialiseNewTask+0x64>
 80036d8:	e000      	b.n	80036dc <prvInitialiseNewTask+0x94>
			{
				break;
 80036da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036e4:	e003      	b.n	80036ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	2b37      	cmp	r3, #55	; 0x37
 80036f2:	d901      	bls.n	80036f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036f4:	2337      	movs	r3, #55	; 0x37
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003702:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	3304      	adds	r3, #4
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff f977 	bl	8002a02 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	3318      	adds	r3, #24
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff f972 	bl	8002a02 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800371e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003722:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800372a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	2200      	movs	r2, #0
 8003738:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800373c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373e:	2200      	movs	r2, #0
 8003740:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	3354      	adds	r3, #84	; 0x54
 8003748:	2260      	movs	r2, #96	; 0x60
 800374a:	2100      	movs	r1, #0
 800374c:	4618      	mov	r0, r3
 800374e:	f001 ff6e 	bl	800562e <memset>
 8003752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003754:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <prvInitialiseNewTask+0x140>)
 8003756:	659a      	str	r2, [r3, #88]	; 0x58
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <prvInitialiseNewTask+0x144>)
 800375c:	65da      	str	r2, [r3, #92]	; 0x5c
 800375e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003760:	4a0b      	ldr	r2, [pc, #44]	; (8003790 <prvInitialiseNewTask+0x148>)
 8003762:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	69b8      	ldr	r0, [r7, #24]
 800376a:	f001 f9f7 	bl	8004b5c <pxPortInitialiseStack>
 800376e:	4602      	mov	r2, r0
 8003770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003772:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800377e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003780:	bf00      	nop
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	08006098 	.word	0x08006098
 800378c:	080060b8 	.word	0x080060b8
 8003790:	08006078 	.word	0x08006078

08003794 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800379c:	f001 fb0a 	bl	8004db4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <prvAddNewTaskToReadyList+0xc4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <prvAddNewTaskToReadyList+0xc4>)
 80037a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037aa:	4b2c      	ldr	r3, [pc, #176]	; (800385c <prvAddNewTaskToReadyList+0xc8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <prvAddNewTaskToReadyList+0xc8>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037b8:	4b27      	ldr	r3, [pc, #156]	; (8003858 <prvAddNewTaskToReadyList+0xc4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d110      	bne.n	80037e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037c0:	f000 fcc4 	bl	800414c <prvInitialiseTaskLists>
 80037c4:	e00d      	b.n	80037e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037c6:	4b26      	ldr	r3, [pc, #152]	; (8003860 <prvAddNewTaskToReadyList+0xcc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <prvAddNewTaskToReadyList+0xc8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	429a      	cmp	r2, r3
 80037da:	d802      	bhi.n	80037e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <prvAddNewTaskToReadyList+0xc8>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <prvAddNewTaskToReadyList+0xd0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <prvAddNewTaskToReadyList+0xd0>)
 80037ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <prvAddNewTaskToReadyList+0xd0>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <prvAddNewTaskToReadyList+0xd4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d903      	bls.n	8003808 <prvAddNewTaskToReadyList+0x74>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <prvAddNewTaskToReadyList+0xd4>)
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4a15      	ldr	r2, [pc, #84]	; (800386c <prvAddNewTaskToReadyList+0xd8>)
 8003816:	441a      	add	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f7ff f8fc 	bl	8002a1c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003824:	f001 faf6 	bl	8004e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <prvAddNewTaskToReadyList+0xcc>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <prvAddNewTaskToReadyList+0xc8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	429a      	cmp	r2, r3
 800383c:	d207      	bcs.n	800384e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <prvAddNewTaskToReadyList+0xdc>)
 8003840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f3bf 8f4f 	dsb	sy
 800384a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000d84 	.word	0x20000d84
 800385c:	200008b0 	.word	0x200008b0
 8003860:	20000d90 	.word	0x20000d90
 8003864:	20000da0 	.word	0x20000da0
 8003868:	20000d8c 	.word	0x20000d8c
 800386c:	200008b4 	.word	0x200008b4
 8003870:	e000ed04 	.word	0xe000ed04

08003874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d017      	beq.n	80038b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <vTaskDelay+0x60>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <vTaskDelay+0x30>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60bb      	str	r3, [r7, #8]
}
 80038a0:	bf00      	nop
 80038a2:	e7fe      	b.n	80038a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80038a4:	f000 f88a 	bl	80039bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038a8:	2100      	movs	r1, #0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fdb4 	bl	8004418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80038b0:	f000 f892 	bl	80039d8 <xTaskResumeAll>
 80038b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d107      	bne.n	80038cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <vTaskDelay+0x64>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038cc:	bf00      	nop
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20000dac 	.word	0x20000dac
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038ea:	463a      	mov	r2, r7
 80038ec:	1d39      	adds	r1, r7, #4
 80038ee:	f107 0308 	add.w	r3, r7, #8
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fe fe64 	bl	80025c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038f8:	6839      	ldr	r1, [r7, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	9202      	str	r2, [sp, #8]
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2300      	movs	r3, #0
 8003908:	460a      	mov	r2, r1
 800390a:	4924      	ldr	r1, [pc, #144]	; (800399c <vTaskStartScheduler+0xc0>)
 800390c:	4824      	ldr	r0, [pc, #144]	; (80039a0 <vTaskStartScheduler+0xc4>)
 800390e:	f7ff fdf9 	bl	8003504 <xTaskCreateStatic>
 8003912:	4603      	mov	r3, r0
 8003914:	4a23      	ldr	r2, [pc, #140]	; (80039a4 <vTaskStartScheduler+0xc8>)
 8003916:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003918:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <vTaskStartScheduler+0xc8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003920:	2301      	movs	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e001      	b.n	800392a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003930:	f000 fdc6 	bl	80044c0 <xTimerCreateTimerTask>
 8003934:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d11b      	bne.n	8003974 <vTaskStartScheduler+0x98>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	613b      	str	r3, [r7, #16]
}
 800394e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003950:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <vTaskStartScheduler+0xcc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3354      	adds	r3, #84	; 0x54
 8003956:	4a15      	ldr	r2, [pc, #84]	; (80039ac <vTaskStartScheduler+0xd0>)
 8003958:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800395a:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <vTaskStartScheduler+0xd4>)
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003962:	4b14      	ldr	r3, [pc, #80]	; (80039b4 <vTaskStartScheduler+0xd8>)
 8003964:	2201      	movs	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <vTaskStartScheduler+0xdc>)
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800396e:	f001 f97f 	bl	8004c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003972:	e00e      	b.n	8003992 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397a:	d10a      	bne.n	8003992 <vTaskStartScheduler+0xb6>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	60fb      	str	r3, [r7, #12]
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <vTaskStartScheduler+0xb4>
}
 8003992:	bf00      	nop
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	08005fdc 	.word	0x08005fdc
 80039a0:	0800411d 	.word	0x0800411d
 80039a4:	20000da8 	.word	0x20000da8
 80039a8:	200008b0 	.word	0x200008b0
 80039ac:	20000018 	.word	0x20000018
 80039b0:	20000da4 	.word	0x20000da4
 80039b4:	20000d90 	.word	0x20000d90
 80039b8:	20000d88 	.word	0x20000d88

080039bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <vTaskSuspendAll+0x18>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3301      	adds	r3, #1
 80039c6:	4a03      	ldr	r2, [pc, #12]	; (80039d4 <vTaskSuspendAll+0x18>)
 80039c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	20000dac 	.word	0x20000dac

080039d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039e2:	2300      	movs	r3, #0
 80039e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039e6:	4b42      	ldr	r3, [pc, #264]	; (8003af0 <xTaskResumeAll+0x118>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <xTaskResumeAll+0x2c>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	603b      	str	r3, [r7, #0]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a04:	f001 f9d6 	bl	8004db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a08:	4b39      	ldr	r3, [pc, #228]	; (8003af0 <xTaskResumeAll+0x118>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	4a38      	ldr	r2, [pc, #224]	; (8003af0 <xTaskResumeAll+0x118>)
 8003a10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a12:	4b37      	ldr	r3, [pc, #220]	; (8003af0 <xTaskResumeAll+0x118>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d162      	bne.n	8003ae0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a1a:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <xTaskResumeAll+0x11c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d05e      	beq.n	8003ae0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a22:	e02f      	b.n	8003a84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a24:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <xTaskResumeAll+0x120>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3318      	adds	r3, #24
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff f850 	bl	8002ad6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7ff f84b 	bl	8002ad6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <xTaskResumeAll+0x124>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d903      	bls.n	8003a54 <xTaskResumeAll+0x7c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a50:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <xTaskResumeAll+0x124>)
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4a27      	ldr	r2, [pc, #156]	; (8003b00 <xTaskResumeAll+0x128>)
 8003a62:	441a      	add	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	f7fe ffd6 	bl	8002a1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a74:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <xTaskResumeAll+0x12c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <xTaskResumeAll+0x130>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a84:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <xTaskResumeAll+0x120>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1cb      	bne.n	8003a24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a92:	f000 fbfd 	bl	8004290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <xTaskResumeAll+0x134>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d010      	beq.n	8003ac4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003aa2:	f000 f847 	bl	8003b34 <xTaskIncrementTick>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003aac:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <xTaskResumeAll+0x130>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1f1      	bne.n	8003aa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003abe:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <xTaskResumeAll+0x134>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ac4:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <xTaskResumeAll+0x130>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d009      	beq.n	8003ae0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003acc:	2301      	movs	r3, #1
 8003ace:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <xTaskResumeAll+0x138>)
 8003ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ae0:	f001 f998 	bl	8004e14 <vPortExitCritical>

	return xAlreadyYielded;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20000dac 	.word	0x20000dac
 8003af4:	20000d84 	.word	0x20000d84
 8003af8:	20000d44 	.word	0x20000d44
 8003afc:	20000d8c 	.word	0x20000d8c
 8003b00:	200008b4 	.word	0x200008b4
 8003b04:	200008b0 	.word	0x200008b0
 8003b08:	20000d98 	.word	0x20000d98
 8003b0c:	20000d94 	.word	0x20000d94
 8003b10:	e000ed04 	.word	0xe000ed04

08003b14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <xTaskGetTickCount+0x1c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b20:	687b      	ldr	r3, [r7, #4]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	20000d88 	.word	0x20000d88

08003b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b086      	sub	sp, #24
 8003b38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b3e:	4b4f      	ldr	r3, [pc, #316]	; (8003c7c <xTaskIncrementTick+0x148>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 808f 	bne.w	8003c66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b48:	4b4d      	ldr	r3, [pc, #308]	; (8003c80 <xTaskIncrementTick+0x14c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b50:	4a4b      	ldr	r2, [pc, #300]	; (8003c80 <xTaskIncrementTick+0x14c>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d120      	bne.n	8003b9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b5c:	4b49      	ldr	r3, [pc, #292]	; (8003c84 <xTaskIncrementTick+0x150>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	603b      	str	r3, [r7, #0]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <xTaskIncrementTick+0x46>
 8003b7c:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <xTaskIncrementTick+0x150>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <xTaskIncrementTick+0x154>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a3f      	ldr	r2, [pc, #252]	; (8003c84 <xTaskIncrementTick+0x150>)
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <xTaskIncrementTick+0x154>)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b3e      	ldr	r3, [pc, #248]	; (8003c8c <xTaskIncrementTick+0x158>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	4a3d      	ldr	r2, [pc, #244]	; (8003c8c <xTaskIncrementTick+0x158>)
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	f000 fb79 	bl	8004290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b9e:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <xTaskIncrementTick+0x15c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d349      	bcc.n	8003c3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ba8:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <xTaskIncrementTick+0x150>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <xTaskIncrementTick+0x15c>)
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb8:	601a      	str	r2, [r3, #0]
					break;
 8003bba:	e03f      	b.n	8003c3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bbc:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <xTaskIncrementTick+0x150>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d203      	bcs.n	8003bdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bd4:	4a2e      	ldr	r2, [pc, #184]	; (8003c90 <xTaskIncrementTick+0x15c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bda:	e02f      	b.n	8003c3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	3304      	adds	r3, #4
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fe ff78 	bl	8002ad6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3318      	adds	r3, #24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe ff6f 	bl	8002ad6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <xTaskIncrementTick+0x160>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d903      	bls.n	8003c0c <xTaskIncrementTick+0xd8>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <xTaskIncrementTick+0x160>)
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	4613      	mov	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <xTaskIncrementTick+0x164>)
 8003c1a:	441a      	add	r2, r3
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f7fe fefa 	bl	8002a1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <xTaskIncrementTick+0x168>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d3b8      	bcc.n	8003ba8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3a:	e7b5      	b.n	8003ba8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c3c:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <xTaskIncrementTick+0x168>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c42:	4915      	ldr	r1, [pc, #84]	; (8003c98 <xTaskIncrementTick+0x164>)
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d901      	bls.n	8003c58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c54:	2301      	movs	r3, #1
 8003c56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <xTaskIncrementTick+0x16c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c60:	2301      	movs	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e004      	b.n	8003c70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <xTaskIncrementTick+0x170>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <xTaskIncrementTick+0x170>)
 8003c6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c70:	697b      	ldr	r3, [r7, #20]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000dac 	.word	0x20000dac
 8003c80:	20000d88 	.word	0x20000d88
 8003c84:	20000d3c 	.word	0x20000d3c
 8003c88:	20000d40 	.word	0x20000d40
 8003c8c:	20000d9c 	.word	0x20000d9c
 8003c90:	20000da4 	.word	0x20000da4
 8003c94:	20000d8c 	.word	0x20000d8c
 8003c98:	200008b4 	.word	0x200008b4
 8003c9c:	200008b0 	.word	0x200008b0
 8003ca0:	20000d98 	.word	0x20000d98
 8003ca4:	20000d94 	.word	0x20000d94

08003ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cae:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <vTaskSwitchContext+0xb0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cb6:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <vTaskSwitchContext+0xb4>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cbc:	e046      	b.n	8003d4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003cbe:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <vTaskSwitchContext+0xb4>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc4:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <vTaskSwitchContext+0xb8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e010      	b.n	8003cee <vTaskSwitchContext+0x46>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
}
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <vTaskSwitchContext+0x3e>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	491d      	ldr	r1, [pc, #116]	; (8003d64 <vTaskSwitchContext+0xbc>)
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0e4      	beq.n	8003ccc <vTaskSwitchContext+0x24>
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4a15      	ldr	r2, [pc, #84]	; (8003d64 <vTaskSwitchContext+0xbc>)
 8003d0e:	4413      	add	r3, r2
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	3308      	adds	r3, #8
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d104      	bne.n	8003d32 <vTaskSwitchContext+0x8a>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4a0b      	ldr	r2, [pc, #44]	; (8003d68 <vTaskSwitchContext+0xc0>)
 8003d3a:	6013      	str	r3, [r2, #0]
 8003d3c:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <vTaskSwitchContext+0xb8>)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <vTaskSwitchContext+0xc0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3354      	adds	r3, #84	; 0x54
 8003d48:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <vTaskSwitchContext+0xc4>)
 8003d4a:	6013      	str	r3, [r2, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20000dac 	.word	0x20000dac
 8003d5c:	20000d98 	.word	0x20000d98
 8003d60:	20000d8c 	.word	0x20000d8c
 8003d64:	200008b4 	.word	0x200008b4
 8003d68:	200008b0 	.word	0x200008b0
 8003d6c:	20000018 	.word	0x20000018

08003d70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10a      	bne.n	8003d96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	60fb      	str	r3, [r7, #12]
}
 8003d92:	bf00      	nop
 8003d94:	e7fe      	b.n	8003d94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <vTaskPlaceOnEventList+0x44>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3318      	adds	r3, #24
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7fe fe60 	bl	8002a64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003da4:	2101      	movs	r1, #1
 8003da6:	6838      	ldr	r0, [r7, #0]
 8003da8:	f000 fb36 	bl	8004418 <prvAddCurrentTaskToDelayedList>
}
 8003dac:	bf00      	nop
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	200008b0 	.word	0x200008b0

08003db8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	617b      	str	r3, [r7, #20]
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003de0:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <vTaskPlaceOnUnorderedEventList+0x70>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	613b      	str	r3, [r7, #16]
}
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <vTaskPlaceOnUnorderedEventList+0x74>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003e08:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e0a:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <vTaskPlaceOnUnorderedEventList+0x74>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3318      	adds	r3, #24
 8003e10:	4619      	mov	r1, r3
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7fe fe02 	bl	8002a1c <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e18:	2101      	movs	r1, #1
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 fafc 	bl	8004418 <prvAddCurrentTaskToDelayedList>
}
 8003e20:	bf00      	nop
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000dac 	.word	0x20000dac
 8003e2c:	200008b0 	.word	0x200008b0

08003e30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	617b      	str	r3, [r7, #20]
}
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3318      	adds	r3, #24
 8003e5e:	4619      	mov	r1, r3
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7fe fddb 	bl	8002a1c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	68b8      	ldr	r0, [r7, #8]
 8003e76:	f000 facf 	bl	8004418 <prvAddCurrentTaskToDelayedList>
	}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	200008b0 	.word	0x200008b0

08003e88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	60fb      	str	r3, [r7, #12]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	3318      	adds	r3, #24
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fe fe0c 	bl	8002ad6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <xTaskRemoveFromEventList+0xb0>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fe03 	bl	8002ad6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <xTaskRemoveFromEventList+0xb4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d903      	bls.n	8003ee4 <xTaskRemoveFromEventList+0x5c>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee0:	4a16      	ldr	r2, [pc, #88]	; (8003f3c <xTaskRemoveFromEventList+0xb4>)
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4a13      	ldr	r2, [pc, #76]	; (8003f40 <xTaskRemoveFromEventList+0xb8>)
 8003ef2:	441a      	add	r2, r3
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f7fe fd8e 	bl	8002a1c <vListInsertEnd>
 8003f00:	e005      	b.n	8003f0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	3318      	adds	r3, #24
 8003f06:	4619      	mov	r1, r3
 8003f08:	480e      	ldr	r0, [pc, #56]	; (8003f44 <xTaskRemoveFromEventList+0xbc>)
 8003f0a:	f7fe fd87 	bl	8002a1c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4b0d      	ldr	r3, [pc, #52]	; (8003f48 <xTaskRemoveFromEventList+0xc0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d905      	bls.n	8003f28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <xTaskRemoveFromEventList+0xc4>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	e001      	b.n	8003f2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f2c:	697b      	ldr	r3, [r7, #20]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000dac 	.word	0x20000dac
 8003f3c:	20000d8c 	.word	0x20000d8c
 8003f40:	200008b4 	.word	0x200008b4
 8003f44:	20000d44 	.word	0x20000d44
 8003f48:	200008b0 	.word	0x200008b0
 8003f4c:	20000d98 	.word	0x20000d98

08003f50 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	613b      	str	r3, [r7, #16]
}
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	60fb      	str	r3, [r7, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	e7fe      	b.n	8003fa2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7fe fd96 	bl	8002ad6 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fd91 	bl	8002ad6 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb8:	4b12      	ldr	r3, [pc, #72]	; (8004004 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d903      	bls.n	8003fc8 <vTaskRemoveFromUnorderedEventList+0x78>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4a0c      	ldr	r2, [pc, #48]	; (8004008 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003fd6:	441a      	add	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f7fe fd1c 	bl	8002a1c <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d902      	bls.n	8003ff8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]
	}
}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000dac 	.word	0x20000dac
 8004004:	20000d8c 	.word	0x20000d8c
 8004008:	200008b4 	.word	0x200008b4
 800400c:	200008b0 	.word	0x200008b0
 8004010:	20000d98 	.word	0x20000d98

08004014 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <vTaskInternalSetTimeOutState+0x24>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <vTaskInternalSetTimeOutState+0x28>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	605a      	str	r2, [r3, #4]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000d9c 	.word	0x20000d9c
 800403c:	20000d88 	.word	0x20000d88

08004040 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	613b      	str	r3, [r7, #16]
}
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004082:	f000 fe97 	bl	8004db4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004086:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <xTaskCheckForTimeOut+0xbc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d102      	bne.n	80040a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e023      	b.n	80040ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <xTaskCheckForTimeOut+0xc0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d007      	beq.n	80040c2 <xTaskCheckForTimeOut+0x82>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d302      	bcc.n	80040c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e015      	b.n	80040ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d20b      	bcs.n	80040e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1ad2      	subs	r2, r2, r3
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff9b 	bl	8004014 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	e004      	b.n	80040ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040ee:	f000 fe91 	bl	8004e14 <vPortExitCritical>

	return xReturn;
 80040f2:	69fb      	ldr	r3, [r7, #28]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000d88 	.word	0x20000d88
 8004100:	20000d9c 	.word	0x20000d9c

08004104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <vTaskMissedYield+0x14>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	20000d98 	.word	0x20000d98

0800411c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004124:	f000 f852 	bl	80041cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <prvIdleTask+0x28>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d9f9      	bls.n	8004124 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <prvIdleTask+0x2c>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004140:	e7f0      	b.n	8004124 <prvIdleTask+0x8>
 8004142:	bf00      	nop
 8004144:	200008b4 	.word	0x200008b4
 8004148:	e000ed04 	.word	0xe000ed04

0800414c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004152:	2300      	movs	r3, #0
 8004154:	607b      	str	r3, [r7, #4]
 8004156:	e00c      	b.n	8004172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4a12      	ldr	r2, [pc, #72]	; (80041ac <prvInitialiseTaskLists+0x60>)
 8004164:	4413      	add	r3, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe fc2b 	bl	80029c2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	607b      	str	r3, [r7, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b37      	cmp	r3, #55	; 0x37
 8004176:	d9ef      	bls.n	8004158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004178:	480d      	ldr	r0, [pc, #52]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 800417a:	f7fe fc22 	bl	80029c2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800417e:	480d      	ldr	r0, [pc, #52]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 8004180:	f7fe fc1f 	bl	80029c2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004184:	480c      	ldr	r0, [pc, #48]	; (80041b8 <prvInitialiseTaskLists+0x6c>)
 8004186:	f7fe fc1c 	bl	80029c2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800418a:	480c      	ldr	r0, [pc, #48]	; (80041bc <prvInitialiseTaskLists+0x70>)
 800418c:	f7fe fc19 	bl	80029c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004190:	480b      	ldr	r0, [pc, #44]	; (80041c0 <prvInitialiseTaskLists+0x74>)
 8004192:	f7fe fc16 	bl	80029c2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004196:	4b0b      	ldr	r3, [pc, #44]	; (80041c4 <prvInitialiseTaskLists+0x78>)
 8004198:	4a05      	ldr	r2, [pc, #20]	; (80041b0 <prvInitialiseTaskLists+0x64>)
 800419a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <prvInitialiseTaskLists+0x7c>)
 800419e:	4a05      	ldr	r2, [pc, #20]	; (80041b4 <prvInitialiseTaskLists+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200008b4 	.word	0x200008b4
 80041b0:	20000d14 	.word	0x20000d14
 80041b4:	20000d28 	.word	0x20000d28
 80041b8:	20000d44 	.word	0x20000d44
 80041bc:	20000d58 	.word	0x20000d58
 80041c0:	20000d70 	.word	0x20000d70
 80041c4:	20000d3c 	.word	0x20000d3c
 80041c8:	20000d40 	.word	0x20000d40

080041cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d2:	e019      	b.n	8004208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041d4:	f000 fdee 	bl	8004db4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d8:	4b10      	ldr	r3, [pc, #64]	; (800421c <prvCheckTasksWaitingTermination+0x50>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fe fc76 	bl	8002ad6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041ea:	4b0d      	ldr	r3, [pc, #52]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <prvCheckTasksWaitingTermination+0x54>)
 80041f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 80041fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041fe:	f000 fe09 	bl	8004e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f810 	bl	8004228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <prvCheckTasksWaitingTermination+0x58>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e1      	bne.n	80041d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000d58 	.word	0x20000d58
 8004220:	20000d84 	.word	0x20000d84
 8004224:	20000d6c 	.word	0x20000d6c

08004228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3354      	adds	r3, #84	; 0x54
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fb1b 	bl	8005870 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004240:	2b00      	cmp	r3, #0
 8004242:	d108      	bne.n	8004256 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	4618      	mov	r0, r3
 800424a:	f000 ffa1 	bl	8005190 <vPortFree>
				vPortFree( pxTCB );
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 ff9e 	bl	8005190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004254:	e018      	b.n	8004288 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800425c:	2b01      	cmp	r3, #1
 800425e:	d103      	bne.n	8004268 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 ff95 	bl	8005190 <vPortFree>
	}
 8004266:	e00f      	b.n	8004288 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800426e:	2b02      	cmp	r3, #2
 8004270:	d00a      	beq.n	8004288 <prvDeleteTCB+0x60>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	60fb      	str	r3, [r7, #12]
}
 8004284:	bf00      	nop
 8004286:	e7fe      	b.n	8004286 <prvDeleteTCB+0x5e>
	}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004296:	4b0c      	ldr	r3, [pc, #48]	; (80042c8 <prvResetNextTaskUnblockTime+0x38>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <prvResetNextTaskUnblockTime+0x3c>)
 80042a2:	f04f 32ff 	mov.w	r2, #4294967295
 80042a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042a8:	e008      	b.n	80042bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <prvResetNextTaskUnblockTime+0x38>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <prvResetNextTaskUnblockTime+0x3c>)
 80042ba:	6013      	str	r3, [r2, #0]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20000d3c 	.word	0x20000d3c
 80042cc:	20000da4 	.word	0x20000da4

080042d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042d6:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <xTaskGetSchedulerState+0x34>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042de:	2301      	movs	r3, #1
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	e008      	b.n	80042f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e4:	4b08      	ldr	r3, [pc, #32]	; (8004308 <xTaskGetSchedulerState+0x38>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042ec:	2302      	movs	r3, #2
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	e001      	b.n	80042f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042f6:	687b      	ldr	r3, [r7, #4]
	}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	20000d90 	.word	0x20000d90
 8004308:	20000dac 	.word	0x20000dac

0800430c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d056      	beq.n	80043d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004322:	4b2e      	ldr	r3, [pc, #184]	; (80043dc <xTaskPriorityDisinherit+0xd0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d00a      	beq.n	8004342 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60fb      	str	r3, [r7, #12]
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	60bb      	str	r3, [r7, #8]
}
 800435c:	bf00      	nop
 800435e:	e7fe      	b.n	800435e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004364:	1e5a      	subs	r2, r3, #1
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	429a      	cmp	r2, r3
 8004374:	d02c      	beq.n	80043d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	2b00      	cmp	r3, #0
 800437c:	d128      	bne.n	80043d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	3304      	adds	r3, #4
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fba7 	bl	8002ad6 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <xTaskPriorityDisinherit+0xd4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d903      	bls.n	80043b0 <xTaskPriorityDisinherit+0xa4>
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	4a0c      	ldr	r2, [pc, #48]	; (80043e0 <xTaskPriorityDisinherit+0xd4>)
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	4613      	mov	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <xTaskPriorityDisinherit+0xd8>)
 80043be:	441a      	add	r2, r3
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f7fe fb28 	bl	8002a1c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043d0:	697b      	ldr	r3, [r7, #20]
	}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	200008b0 	.word	0x200008b0
 80043e0:	20000d8c 	.word	0x20000d8c
 80043e4:	200008b4 	.word	0x200008b4

080043e8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <uxTaskResetEventItemValue+0x2c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f6:	4b07      	ldr	r3, [pc, #28]	; (8004414 <uxTaskResetEventItemValue+0x2c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <uxTaskResetEventItemValue+0x2c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8004404:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8004406:	687b      	ldr	r3, [r7, #4]
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	200008b0 	.word	0x200008b0

08004418 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004422:	4b21      	ldr	r3, [pc, #132]	; (80044a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004428:	4b20      	ldr	r3, [pc, #128]	; (80044ac <prvAddCurrentTaskToDelayedList+0x94>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fb51 	bl	8002ad6 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d10a      	bne.n	8004452 <prvAddCurrentTaskToDelayedList+0x3a>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d007      	beq.n	8004452 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004442:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4819      	ldr	r0, [pc, #100]	; (80044b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800444c:	f7fe fae6 	bl	8002a1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004450:	e026      	b.n	80044a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4413      	add	r3, r2
 8004458:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <prvAddCurrentTaskToDelayedList+0x94>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	429a      	cmp	r2, r3
 8004468:	d209      	bcs.n	800447e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3304      	adds	r3, #4
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7fe faf4 	bl	8002a64 <vListInsert>
}
 800447c:	e010      	b.n	80044a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <prvAddCurrentTaskToDelayedList+0x94>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f7fe faea 	bl	8002a64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	d202      	bcs.n	80044a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800449a:	4a08      	ldr	r2, [pc, #32]	; (80044bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000d88 	.word	0x20000d88
 80044ac:	200008b0 	.word	0x200008b0
 80044b0:	20000d70 	.word	0x20000d70
 80044b4:	20000d40 	.word	0x20000d40
 80044b8:	20000d3c 	.word	0x20000d3c
 80044bc:	20000da4 	.word	0x20000da4

080044c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80044ca:	f000 fb07 	bl	8004adc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <xTimerCreateTimerTask+0x80>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d021      	beq.n	800451a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044de:	1d3a      	adds	r2, r7, #4
 80044e0:	f107 0108 	add.w	r1, r7, #8
 80044e4:	f107 030c 	add.w	r3, r7, #12
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe f883 	bl	80025f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	9202      	str	r2, [sp, #8]
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	2302      	movs	r3, #2
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	2300      	movs	r3, #0
 80044fe:	460a      	mov	r2, r1
 8004500:	4910      	ldr	r1, [pc, #64]	; (8004544 <xTimerCreateTimerTask+0x84>)
 8004502:	4811      	ldr	r0, [pc, #68]	; (8004548 <xTimerCreateTimerTask+0x88>)
 8004504:	f7fe fffe 	bl	8003504 <xTaskCreateStatic>
 8004508:	4603      	mov	r3, r0
 800450a:	4a10      	ldr	r2, [pc, #64]	; (800454c <xTimerCreateTimerTask+0x8c>)
 800450c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800450e:	4b0f      	ldr	r3, [pc, #60]	; (800454c <xTimerCreateTimerTask+0x8c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004516:	2301      	movs	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	613b      	str	r3, [r7, #16]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004536:	697b      	ldr	r3, [r7, #20]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000de0 	.word	0x20000de0
 8004544:	08005fe4 	.word	0x08005fe4
 8004548:	08004685 	.word	0x08004685
 800454c:	20000de4 	.word	0x20000de4

08004550 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456c:	f383 8811 	msr	BASEPRI, r3
 8004570:	f3bf 8f6f 	isb	sy
 8004574:	f3bf 8f4f 	dsb	sy
 8004578:	623b      	str	r3, [r7, #32]
}
 800457a:	bf00      	nop
 800457c:	e7fe      	b.n	800457c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800457e:	4b1a      	ldr	r3, [pc, #104]	; (80045e8 <xTimerGenericCommand+0x98>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d02a      	beq.n	80045dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b05      	cmp	r3, #5
 8004596:	dc18      	bgt.n	80045ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004598:	f7ff fe9a 	bl	80042d0 <xTaskGetSchedulerState>
 800459c:	4603      	mov	r3, r0
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d109      	bne.n	80045b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045a2:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <xTimerGenericCommand+0x98>)
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	f107 0110 	add.w	r1, r7, #16
 80045aa:	2300      	movs	r3, #0
 80045ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ae:	f7fe fbc1 	bl	8002d34 <xQueueGenericSend>
 80045b2:	6278      	str	r0, [r7, #36]	; 0x24
 80045b4:	e012      	b.n	80045dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045b6:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <xTimerGenericCommand+0x98>)
 80045b8:	6818      	ldr	r0, [r3, #0]
 80045ba:	f107 0110 	add.w	r1, r7, #16
 80045be:	2300      	movs	r3, #0
 80045c0:	2200      	movs	r2, #0
 80045c2:	f7fe fbb7 	bl	8002d34 <xQueueGenericSend>
 80045c6:	6278      	str	r0, [r7, #36]	; 0x24
 80045c8:	e008      	b.n	80045dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <xTimerGenericCommand+0x98>)
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f107 0110 	add.w	r1, r7, #16
 80045d2:	2300      	movs	r3, #0
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	f7fe fcab 	bl	8002f30 <xQueueGenericSendFromISR>
 80045da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	; 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000de0 	.word	0x20000de0

080045ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f6:	4b22      	ldr	r3, [pc, #136]	; (8004680 <prvProcessExpiredTimer+0x94>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe fa66 	bl	8002ad6 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d022      	beq.n	800465e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	699a      	ldr	r2, [r3, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	18d1      	adds	r1, r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	6978      	ldr	r0, [r7, #20]
 8004626:	f000 f8d1 	bl	80047cc <prvInsertTimerInActiveList>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01f      	beq.n	8004670 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004630:	2300      	movs	r3, #0
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	2300      	movs	r3, #0
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	2100      	movs	r1, #0
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7ff ff88 	bl	8004550 <xTimerGenericCommand>
 8004640:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d113      	bne.n	8004670 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	60fb      	str	r3, [r7, #12]
}
 800465a:	bf00      	nop
 800465c:	e7fe      	b.n	800465c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	4798      	blx	r3
}
 8004678:	bf00      	nop
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000dd8 	.word	0x20000dd8

08004684 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800468c:	f107 0308 	add.w	r3, r7, #8
 8004690:	4618      	mov	r0, r3
 8004692:	f000 f857 	bl	8004744 <prvGetNextExpireTime>
 8004696:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4619      	mov	r1, r3
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f803 	bl	80046a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80046a2:	f000 f8d5 	bl	8004850 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046a6:	e7f1      	b.n	800468c <prvTimerTask+0x8>

080046a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80046b2:	f7ff f983 	bl	80039bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046b6:	f107 0308 	add.w	r3, r7, #8
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f866 	bl	800478c <prvSampleTimeNow>
 80046c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d130      	bne.n	800472a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <prvProcessTimerOrBlockTask+0x3c>
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d806      	bhi.n	80046e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046d6:	f7ff f97f 	bl	80039d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff ff85 	bl	80045ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046e2:	e024      	b.n	800472e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <prvProcessTimerOrBlockTask+0x90>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <prvProcessTimerOrBlockTask+0x50>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <prvProcessTimerOrBlockTask+0x52>
 80046f8:	2300      	movs	r3, #0
 80046fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <prvProcessTimerOrBlockTask+0x94>)
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	4619      	mov	r1, r3
 800470a:	f7fe fec7 	bl	800349c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800470e:	f7ff f963 	bl	80039d8 <xTaskResumeAll>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10a      	bne.n	800472e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <prvProcessTimerOrBlockTask+0x98>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
}
 8004728:	e001      	b.n	800472e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800472a:	f7ff f955 	bl	80039d8 <xTaskResumeAll>
}
 800472e:	bf00      	nop
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000ddc 	.word	0x20000ddc
 800473c:	20000de0 	.word	0x20000de0
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <prvGetNextExpireTime+0x44>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <prvGetNextExpireTime+0x16>
 8004756:	2201      	movs	r2, #1
 8004758:	e000      	b.n	800475c <prvGetNextExpireTime+0x18>
 800475a:	2200      	movs	r2, #0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004768:	4b07      	ldr	r3, [pc, #28]	; (8004788 <prvGetNextExpireTime+0x44>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	e001      	b.n	8004778 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004778:	68fb      	ldr	r3, [r7, #12]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000dd8 	.word	0x20000dd8

0800478c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004794:	f7ff f9be 	bl	8003b14 <xTaskGetTickCount>
 8004798:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <prvSampleTimeNow+0x3c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d205      	bcs.n	80047b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80047a4:	f000 f936 	bl	8004a14 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	e002      	b.n	80047b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80047b6:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <prvSampleTimeNow+0x3c>)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047bc:	68fb      	ldr	r3, [r7, #12]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000de8 	.word	0x20000de8

080047cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d812      	bhi.n	8004818 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	1ad2      	subs	r2, r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d302      	bcc.n	8004806 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	e01b      	b.n	800483e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004806:	4b10      	ldr	r3, [pc, #64]	; (8004848 <prvInsertTimerInActiveList+0x7c>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f7fe f927 	bl	8002a64 <vListInsert>
 8004816:	e012      	b.n	800483e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d206      	bcs.n	800482e <prvInsertTimerInActiveList+0x62>
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004828:	2301      	movs	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e007      	b.n	800483e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <prvInsertTimerInActiveList+0x80>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7fe f913 	bl	8002a64 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800483e:	697b      	ldr	r3, [r7, #20]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	20000ddc 	.word	0x20000ddc
 800484c:	20000dd8 	.word	0x20000dd8

08004850 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004856:	e0ca      	b.n	80049ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	da18      	bge.n	8004890 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800485e:	1d3b      	adds	r3, r7, #4
 8004860:	3304      	adds	r3, #4
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	61fb      	str	r3, [r7, #28]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004886:	6850      	ldr	r0, [r2, #4]
 8004888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488a:	6892      	ldr	r2, [r2, #8]
 800488c:	4611      	mov	r1, r2
 800488e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f2c0 80aa 	blt.w	80049ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	3304      	adds	r3, #4
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe f914 	bl	8002ad6 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ae:	463b      	mov	r3, r7
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff ff6b 	bl	800478c <prvSampleTimeNow>
 80048b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b09      	cmp	r3, #9
 80048bc:	f200 8097 	bhi.w	80049ee <prvProcessReceivedCommands+0x19e>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <prvProcessReceivedCommands+0x78>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f1 	.word	0x080048f1
 80048d4:	08004965 	.word	0x08004965
 80048d8:	08004979 	.word	0x08004979
 80048dc:	080049c3 	.word	0x080049c3
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	080048f1 	.word	0x080048f1
 80048e8:	08004965 	.word	0x08004965
 80048ec:	08004979 	.word	0x08004979
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	18d1      	adds	r1, r2, r3
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004910:	f7ff ff5c 	bl	80047cc <prvInsertTimerInActiveList>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d069      	beq.n	80049ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800491a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004920:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d05e      	beq.n	80049ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	441a      	add	r2, r3
 8004938:	2300      	movs	r3, #0
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	2100      	movs	r1, #0
 8004940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004942:	f7ff fe05 	bl	8004550 <xTimerGenericCommand>
 8004946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d14f      	bne.n	80049ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	61bb      	str	r3, [r7, #24]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	b2da      	uxtb	r2, r3
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004976:	e03a      	b.n	80049ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	617b      	str	r3, [r7, #20]
}
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	18d1      	adds	r1, r2, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049bc:	f7ff ff06 	bl	80047cc <prvInsertTimerInActiveList>
					break;
 80049c0:	e015      	b.n	80049ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d103      	bne.n	80049d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80049d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d2:	f000 fbdd 	bl	8005190 <vPortFree>
 80049d6:	e00a      	b.n	80049ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049ea:	e000      	b.n	80049ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80049ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <prvProcessReceivedCommands+0x1c0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	1d39      	adds	r1, r7, #4
 80049f4:	2200      	movs	r2, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fe fb36 	bl	8003068 <xQueueReceive>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f47f af2a 	bne.w	8004858 <prvProcessReceivedCommands+0x8>
	}
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	3730      	adds	r7, #48	; 0x30
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000de0 	.word	0x20000de0

08004a14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a1a:	e048      	b.n	8004aae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a26:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe f84e 	bl	8002ad6 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02e      	beq.n	8004aae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d90e      	bls.n	8004a80 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a6e:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fd fff3 	bl	8002a64 <vListInsert>
 8004a7e:	e016      	b.n	8004aae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a80:	2300      	movs	r3, #0
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	2100      	movs	r1, #0
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff fd60 	bl	8004550 <xTimerGenericCommand>
 8004a90:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	603b      	str	r3, [r7, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	e7fe      	b.n	8004aac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1b1      	bne.n	8004a1c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <prvSwitchTimerLists+0xc4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004ac4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ac6:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <prvSwitchTimerLists+0xc4>)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6013      	str	r3, [r2, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	20000dd8 	.word	0x20000dd8
 8004ad8:	20000ddc 	.word	0x20000ddc

08004adc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ae2:	f000 f967 	bl	8004db4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ae6:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <prvCheckForValidListAndQueue+0x60>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d120      	bne.n	8004b30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004aee:	4814      	ldr	r0, [pc, #80]	; (8004b40 <prvCheckForValidListAndQueue+0x64>)
 8004af0:	f7fd ff67 	bl	80029c2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004af4:	4813      	ldr	r0, [pc, #76]	; (8004b44 <prvCheckForValidListAndQueue+0x68>)
 8004af6:	f7fd ff64 	bl	80029c2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <prvCheckForValidListAndQueue+0x6c>)
 8004afc:	4a10      	ldr	r2, [pc, #64]	; (8004b40 <prvCheckForValidListAndQueue+0x64>)
 8004afe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <prvCheckForValidListAndQueue+0x70>)
 8004b02:	4a10      	ldr	r2, [pc, #64]	; (8004b44 <prvCheckForValidListAndQueue+0x68>)
 8004b04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b06:	2300      	movs	r3, #0
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <prvCheckForValidListAndQueue+0x74>)
 8004b0c:	4a11      	ldr	r2, [pc, #68]	; (8004b54 <prvCheckForValidListAndQueue+0x78>)
 8004b0e:	2110      	movs	r1, #16
 8004b10:	200a      	movs	r0, #10
 8004b12:	f7fe f873 	bl	8002bfc <xQueueGenericCreateStatic>
 8004b16:	4603      	mov	r3, r0
 8004b18:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <prvCheckForValidListAndQueue+0x60>)
 8004b1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b1c:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <prvCheckForValidListAndQueue+0x60>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <prvCheckForValidListAndQueue+0x60>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	490b      	ldr	r1, [pc, #44]	; (8004b58 <prvCheckForValidListAndQueue+0x7c>)
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fc8c 	bl	8003448 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b30:	f000 f970 	bl	8004e14 <vPortExitCritical>
}
 8004b34:	bf00      	nop
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000de0 	.word	0x20000de0
 8004b40:	20000db0 	.word	0x20000db0
 8004b44:	20000dc4 	.word	0x20000dc4
 8004b48:	20000dd8 	.word	0x20000dd8
 8004b4c:	20000ddc 	.word	0x20000ddc
 8004b50:	20000e8c 	.word	0x20000e8c
 8004b54:	20000dec 	.word	0x20000dec
 8004b58:	08005fec 	.word	0x08005fec

08004b5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b04      	subs	r3, #4
 8004b6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3b04      	subs	r3, #4
 8004b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3b04      	subs	r3, #4
 8004b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b8c:	4a0c      	ldr	r2, [pc, #48]	; (8004bc0 <pxPortInitialiseStack+0x64>)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3b14      	subs	r3, #20
 8004b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3b04      	subs	r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f06f 0202 	mvn.w	r2, #2
 8004baa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3b20      	subs	r3, #32
 8004bb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	08004bc5 	.word	0x08004bc5

08004bc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <prvTaskExitError+0x54>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d00a      	beq.n	8004bee <prvTaskExitError+0x2a>
	__asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
}
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <prvTaskExitError+0x28>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	60bb      	str	r3, [r7, #8]
}
 8004c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c02:	bf00      	nop
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0fc      	beq.n	8004c04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	20000014 	.word	0x20000014
 8004c1c:	00000000 	.word	0x00000000

08004c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <pxCurrentTCBConst2>)
 8004c22:	6819      	ldr	r1, [r3, #0]
 8004c24:	6808      	ldr	r0, [r1, #0]
 8004c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	f380 8809 	msr	PSP, r0
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8811 	msr	BASEPRI, r0
 8004c3a:	4770      	bx	lr
 8004c3c:	f3af 8000 	nop.w

08004c40 <pxCurrentTCBConst2>:
 8004c40:	200008b0 	.word	0x200008b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c44:	bf00      	nop
 8004c46:	bf00      	nop

08004c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c48:	4808      	ldr	r0, [pc, #32]	; (8004c6c <prvPortStartFirstTask+0x24>)
 8004c4a:	6800      	ldr	r0, [r0, #0]
 8004c4c:	6800      	ldr	r0, [r0, #0]
 8004c4e:	f380 8808 	msr	MSP, r0
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8814 	msr	CONTROL, r0
 8004c5a:	b662      	cpsie	i
 8004c5c:	b661      	cpsie	f
 8004c5e:	f3bf 8f4f 	dsb	sy
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	df00      	svc	0
 8004c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c6a:	bf00      	nop
 8004c6c:	e000ed08 	.word	0xe000ed08

08004c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c76:	4b46      	ldr	r3, [pc, #280]	; (8004d90 <xPortStartScheduler+0x120>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a46      	ldr	r2, [pc, #280]	; (8004d94 <xPortStartScheduler+0x124>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10a      	bne.n	8004c96 <xPortStartScheduler+0x26>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	613b      	str	r3, [r7, #16]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c96:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <xPortStartScheduler+0x120>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a3f      	ldr	r2, [pc, #252]	; (8004d98 <xPortStartScheduler+0x128>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10a      	bne.n	8004cb6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60fb      	str	r3, [r7, #12]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cb6:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <xPortStartScheduler+0x12c>)
 8004cb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	22ff      	movs	r2, #255	; 0xff
 8004cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cd0:	78fb      	ldrb	r3, [r7, #3]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <xPortStartScheduler+0x130>)
 8004cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cde:	4b31      	ldr	r3, [pc, #196]	; (8004da4 <xPortStartScheduler+0x134>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ce4:	e009      	b.n	8004cfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004ce6:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <xPortStartScheduler+0x134>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	4a2d      	ldr	r2, [pc, #180]	; (8004da4 <xPortStartScheduler+0x134>)
 8004cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d0ef      	beq.n	8004ce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f1c3 0307 	rsb	r3, r3, #7
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d00a      	beq.n	8004d28 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	60bb      	str	r3, [r7, #8]
}
 8004d24:	bf00      	nop
 8004d26:	e7fe      	b.n	8004d26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d32:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <xPortStartScheduler+0x134>)
 8004d3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d46:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <xPortStartScheduler+0x138>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a17      	ldr	r2, [pc, #92]	; (8004da8 <xPortStartScheduler+0x138>)
 8004d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <xPortStartScheduler+0x138>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <xPortStartScheduler+0x138>)
 8004d58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d5e:	f000 f8dd 	bl	8004f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d62:	4b12      	ldr	r3, [pc, #72]	; (8004dac <xPortStartScheduler+0x13c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d68:	f000 f8fc 	bl	8004f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d6c:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <xPortStartScheduler+0x140>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0f      	ldr	r2, [pc, #60]	; (8004db0 <xPortStartScheduler+0x140>)
 8004d72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d78:	f7ff ff66 	bl	8004c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d7c:	f7fe ff94 	bl	8003ca8 <vTaskSwitchContext>
	prvTaskExitError();
 8004d80:	f7ff ff20 	bl	8004bc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000ed00 	.word	0xe000ed00
 8004d94:	410fc271 	.word	0x410fc271
 8004d98:	410fc270 	.word	0x410fc270
 8004d9c:	e000e400 	.word	0xe000e400
 8004da0:	20000edc 	.word	0x20000edc
 8004da4:	20000ee0 	.word	0x20000ee0
 8004da8:	e000ed20 	.word	0xe000ed20
 8004dac:	20000014 	.word	0x20000014
 8004db0:	e000ef34 	.word	0xe000ef34

08004db4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	607b      	str	r3, [r7, #4]
}
 8004dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <vPortEnterCritical+0x58>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	4a0d      	ldr	r2, [pc, #52]	; (8004e0c <vPortEnterCritical+0x58>)
 8004dd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <vPortEnterCritical+0x58>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d10f      	bne.n	8004e00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004de0:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <vPortEnterCritical+0x5c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	603b      	str	r3, [r7, #0]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <vPortEnterCritical+0x4a>
	}
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	20000014 	.word	0x20000014
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <vPortExitCritical+0x50>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <vPortExitCritical+0x24>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	607b      	str	r3, [r7, #4]
}
 8004e34:	bf00      	nop
 8004e36:	e7fe      	b.n	8004e36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e38:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <vPortExitCritical+0x50>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	4a09      	ldr	r2, [pc, #36]	; (8004e64 <vPortExitCritical+0x50>)
 8004e40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e42:	4b08      	ldr	r3, [pc, #32]	; (8004e64 <vPortExitCritical+0x50>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d105      	bne.n	8004e56 <vPortExitCritical+0x42>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	f383 8811 	msr	BASEPRI, r3
}
 8004e54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000014 	.word	0x20000014
	...

08004e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e70:	f3ef 8009 	mrs	r0, PSP
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <pxCurrentTCBConst>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	f01e 0f10 	tst.w	lr, #16
 8004e80:	bf08      	it	eq
 8004e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e94:	f380 8811 	msr	BASEPRI, r0
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f7fe ff02 	bl	8003ca8 <vTaskSwitchContext>
 8004ea4:	f04f 0000 	mov.w	r0, #0
 8004ea8:	f380 8811 	msr	BASEPRI, r0
 8004eac:	bc09      	pop	{r0, r3}
 8004eae:	6819      	ldr	r1, [r3, #0]
 8004eb0:	6808      	ldr	r0, [r1, #0]
 8004eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb6:	f01e 0f10 	tst.w	lr, #16
 8004eba:	bf08      	it	eq
 8004ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ec0:	f380 8809 	msr	PSP, r0
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	200008b0 	.word	0x200008b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ef2:	f7fe fe1f 	bl	8003b34 <xTaskIncrementTick>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <xPortSysTickHandler+0x40>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
}
 8004f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <vPortSetupTimerInterrupt+0x38>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <vPortSetupTimerInterrupt+0x3c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <vPortSetupTimerInterrupt+0x40>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <vPortSetupTimerInterrupt+0x44>)
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	e000e010 	.word	0xe000e010
 8004f54:	e000e018 	.word	0xe000e018
 8004f58:	20000008 	.word	0x20000008
 8004f5c:	10624dd3 	.word	0x10624dd3
 8004f60:	e000e014 	.word	0xe000e014

08004f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f74 <vPortEnableVFP+0x10>
 8004f68:	6801      	ldr	r1, [r0, #0]
 8004f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f6e:	6001      	str	r1, [r0, #0]
 8004f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f72:	bf00      	nop
 8004f74:	e000ed88 	.word	0xe000ed88

08004f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f7e:	f3ef 8305 	mrs	r3, IPSR
 8004f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d914      	bls.n	8004fb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f8a:	4a17      	ldr	r2, [pc, #92]	; (8004fe8 <vPortValidateInterruptPriority+0x70>)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f94:	4b15      	ldr	r3, [pc, #84]	; (8004fec <vPortValidateInterruptPriority+0x74>)
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	7afa      	ldrb	r2, [r7, #11]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d20a      	bcs.n	8004fb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	607b      	str	r3, [r7, #4]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <vPortValidateInterruptPriority+0x78>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <vPortValidateInterruptPriority+0x7c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d90a      	bls.n	8004fda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	603b      	str	r3, [r7, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <vPortValidateInterruptPriority+0x60>
	}
 8004fda:	bf00      	nop
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	e000e3f0 	.word	0xe000e3f0
 8004fec:	20000edc 	.word	0x20000edc
 8004ff0:	e000ed0c 	.word	0xe000ed0c
 8004ff4:	20000ee0 	.word	0x20000ee0

08004ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	; 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005000:	2300      	movs	r3, #0
 8005002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005004:	f7fe fcda 	bl	80039bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005008:	4b5b      	ldr	r3, [pc, #364]	; (8005178 <pvPortMalloc+0x180>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005010:	f000 f920 	bl	8005254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005014:	4b59      	ldr	r3, [pc, #356]	; (800517c <pvPortMalloc+0x184>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	f040 8093 	bne.w	8005148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01d      	beq.n	8005064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005028:	2208      	movs	r2, #8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	2b00      	cmp	r3, #0
 8005038:	d014      	beq.n	8005064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f023 0307 	bic.w	r3, r3, #7
 8005040:	3308      	adds	r3, #8
 8005042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <pvPortMalloc+0x6c>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	617b      	str	r3, [r7, #20]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d06e      	beq.n	8005148 <pvPortMalloc+0x150>
 800506a:	4b45      	ldr	r3, [pc, #276]	; (8005180 <pvPortMalloc+0x188>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	429a      	cmp	r2, r3
 8005072:	d869      	bhi.n	8005148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005074:	4b43      	ldr	r3, [pc, #268]	; (8005184 <pvPortMalloc+0x18c>)
 8005076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005078:	4b42      	ldr	r3, [pc, #264]	; (8005184 <pvPortMalloc+0x18c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800507e:	e004      	b.n	800508a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	429a      	cmp	r2, r3
 8005092:	d903      	bls.n	800509c <pvPortMalloc+0xa4>
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f1      	bne.n	8005080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800509c:	4b36      	ldr	r3, [pc, #216]	; (8005178 <pvPortMalloc+0x180>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d050      	beq.n	8005148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2208      	movs	r2, #8
 80050ac:	4413      	add	r3, r2
 80050ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad2      	subs	r2, r2, r3
 80050c0:	2308      	movs	r3, #8
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d91f      	bls.n	8005108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <pvPortMalloc+0xf8>
	__asm volatile
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	613b      	str	r3, [r7, #16]
}
 80050ec:	bf00      	nop
 80050ee:	e7fe      	b.n	80050ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	1ad2      	subs	r2, r2, r3
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005102:	69b8      	ldr	r0, [r7, #24]
 8005104:	f000 f908 	bl	8005318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005108:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <pvPortMalloc+0x188>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <pvPortMalloc+0x188>)
 8005114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005116:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <pvPortMalloc+0x188>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <pvPortMalloc+0x190>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d203      	bcs.n	800512a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <pvPortMalloc+0x188>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a18      	ldr	r2, [pc, #96]	; (8005188 <pvPortMalloc+0x190>)
 8005128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <pvPortMalloc+0x184>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	431a      	orrs	r2, r3
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800513e:	4b13      	ldr	r3, [pc, #76]	; (800518c <pvPortMalloc+0x194>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a11      	ldr	r2, [pc, #68]	; (800518c <pvPortMalloc+0x194>)
 8005146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005148:	f7fe fc46 	bl	80039d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <pvPortMalloc+0x174>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60fb      	str	r3, [r7, #12]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <pvPortMalloc+0x172>
	return pvReturn;
 800516c:	69fb      	ldr	r3, [r7, #28]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3728      	adds	r7, #40	; 0x28
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20004aec 	.word	0x20004aec
 800517c:	20004b00 	.word	0x20004b00
 8005180:	20004af0 	.word	0x20004af0
 8005184:	20004ae4 	.word	0x20004ae4
 8005188:	20004af4 	.word	0x20004af4
 800518c:	20004af8 	.word	0x20004af8

08005190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04d      	beq.n	800523e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80051a2:	2308      	movs	r3, #8
 80051a4:	425b      	negs	r3, r3
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4413      	add	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	4b24      	ldr	r3, [pc, #144]	; (8005248 <vPortFree+0xb8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10a      	bne.n	80051d4 <vPortFree+0x44>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	60fb      	str	r3, [r7, #12]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <vPortFree+0x62>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	60bb      	str	r3, [r7, #8]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b14      	ldr	r3, [pc, #80]	; (8005248 <vPortFree+0xb8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01e      	beq.n	800523e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11a      	bne.n	800523e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <vPortFree+0xb8>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005218:	f7fe fbd0 	bl	80039bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	4b0a      	ldr	r3, [pc, #40]	; (800524c <vPortFree+0xbc>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4413      	add	r3, r2
 8005226:	4a09      	ldr	r2, [pc, #36]	; (800524c <vPortFree+0xbc>)
 8005228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800522a:	6938      	ldr	r0, [r7, #16]
 800522c:	f000 f874 	bl	8005318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005230:	4b07      	ldr	r3, [pc, #28]	; (8005250 <vPortFree+0xc0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	4a06      	ldr	r2, [pc, #24]	; (8005250 <vPortFree+0xc0>)
 8005238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800523a:	f7fe fbcd 	bl	80039d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800523e:	bf00      	nop
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20004b00 	.word	0x20004b00
 800524c:	20004af0 	.word	0x20004af0
 8005250:	20004afc 	.word	0x20004afc

08005254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800525a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800525e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005260:	4b27      	ldr	r3, [pc, #156]	; (8005300 <prvHeapInit+0xac>)
 8005262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3307      	adds	r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0307 	bic.w	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <prvHeapInit+0xac>)
 8005284:	4413      	add	r3, r2
 8005286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <prvHeapInit+0xb0>)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <prvHeapInit+0xb0>)
 8005294:	2200      	movs	r2, #0
 8005296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	4413      	add	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052a0:	2208      	movs	r2, #8
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0307 	bic.w	r3, r3, #7
 80052ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4a15      	ldr	r2, [pc, #84]	; (8005308 <prvHeapInit+0xb4>)
 80052b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <prvHeapInit+0xb4>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052be:	4b12      	ldr	r3, [pc, #72]	; (8005308 <prvHeapInit+0xb4>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052d4:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <prvHeapInit+0xb4>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a0a      	ldr	r2, [pc, #40]	; (800530c <prvHeapInit+0xb8>)
 80052e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <prvHeapInit+0xbc>)
 80052ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052ec:	4b09      	ldr	r3, [pc, #36]	; (8005314 <prvHeapInit+0xc0>)
 80052ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052f2:	601a      	str	r2, [r3, #0]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	20000ee4 	.word	0x20000ee4
 8005304:	20004ae4 	.word	0x20004ae4
 8005308:	20004aec 	.word	0x20004aec
 800530c:	20004af4 	.word	0x20004af4
 8005310:	20004af0 	.word	0x20004af0
 8005314:	20004b00 	.word	0x20004b00

08005318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005320:	4b28      	ldr	r3, [pc, #160]	; (80053c4 <prvInsertBlockIntoFreeList+0xac>)
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e002      	b.n	800532c <prvInsertBlockIntoFreeList+0x14>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	429a      	cmp	r2, r3
 8005334:	d8f7      	bhi.n	8005326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	4413      	add	r3, r2
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d108      	bne.n	800535a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	441a      	add	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	441a      	add	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d118      	bne.n	80053a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d00d      	beq.n	8005396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	e008      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005396:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e003      	b.n	80053a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d002      	beq.n	80053b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20004ae4 	.word	0x20004ae4
 80053c8:	20004aec 	.word	0x20004aec

080053cc <__errno>:
 80053cc:	4b01      	ldr	r3, [pc, #4]	; (80053d4 <__errno+0x8>)
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000018 	.word	0x20000018

080053d8 <std>:
 80053d8:	2300      	movs	r3, #0
 80053da:	b510      	push	{r4, lr}
 80053dc:	4604      	mov	r4, r0
 80053de:	e9c0 3300 	strd	r3, r3, [r0]
 80053e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053e6:	6083      	str	r3, [r0, #8]
 80053e8:	8181      	strh	r1, [r0, #12]
 80053ea:	6643      	str	r3, [r0, #100]	; 0x64
 80053ec:	81c2      	strh	r2, [r0, #14]
 80053ee:	6183      	str	r3, [r0, #24]
 80053f0:	4619      	mov	r1, r3
 80053f2:	2208      	movs	r2, #8
 80053f4:	305c      	adds	r0, #92	; 0x5c
 80053f6:	f000 f91a 	bl	800562e <memset>
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <std+0x38>)
 80053fc:	6263      	str	r3, [r4, #36]	; 0x24
 80053fe:	4b05      	ldr	r3, [pc, #20]	; (8005414 <std+0x3c>)
 8005400:	62a3      	str	r3, [r4, #40]	; 0x28
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <std+0x40>)
 8005404:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005406:	4b05      	ldr	r3, [pc, #20]	; (800541c <std+0x44>)
 8005408:	6224      	str	r4, [r4, #32]
 800540a:	6323      	str	r3, [r4, #48]	; 0x30
 800540c:	bd10      	pop	{r4, pc}
 800540e:	bf00      	nop
 8005410:	08005949 	.word	0x08005949
 8005414:	0800596b 	.word	0x0800596b
 8005418:	080059a3 	.word	0x080059a3
 800541c:	080059c7 	.word	0x080059c7

08005420 <_cleanup_r>:
 8005420:	4901      	ldr	r1, [pc, #4]	; (8005428 <_cleanup_r+0x8>)
 8005422:	f000 b8af 	b.w	8005584 <_fwalk_reent>
 8005426:	bf00      	nop
 8005428:	08005ca1 	.word	0x08005ca1

0800542c <__sfmoreglue>:
 800542c:	b570      	push	{r4, r5, r6, lr}
 800542e:	2268      	movs	r2, #104	; 0x68
 8005430:	1e4d      	subs	r5, r1, #1
 8005432:	4355      	muls	r5, r2
 8005434:	460e      	mov	r6, r1
 8005436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800543a:	f000 f921 	bl	8005680 <_malloc_r>
 800543e:	4604      	mov	r4, r0
 8005440:	b140      	cbz	r0, 8005454 <__sfmoreglue+0x28>
 8005442:	2100      	movs	r1, #0
 8005444:	e9c0 1600 	strd	r1, r6, [r0]
 8005448:	300c      	adds	r0, #12
 800544a:	60a0      	str	r0, [r4, #8]
 800544c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005450:	f000 f8ed 	bl	800562e <memset>
 8005454:	4620      	mov	r0, r4
 8005456:	bd70      	pop	{r4, r5, r6, pc}

08005458 <__sfp_lock_acquire>:
 8005458:	4801      	ldr	r0, [pc, #4]	; (8005460 <__sfp_lock_acquire+0x8>)
 800545a:	f000 b8d8 	b.w	800560e <__retarget_lock_acquire_recursive>
 800545e:	bf00      	nop
 8005460:	20004b05 	.word	0x20004b05

08005464 <__sfp_lock_release>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__sfp_lock_release+0x8>)
 8005466:	f000 b8d3 	b.w	8005610 <__retarget_lock_release_recursive>
 800546a:	bf00      	nop
 800546c:	20004b05 	.word	0x20004b05

08005470 <__sinit_lock_acquire>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__sinit_lock_acquire+0x8>)
 8005472:	f000 b8cc 	b.w	800560e <__retarget_lock_acquire_recursive>
 8005476:	bf00      	nop
 8005478:	20004b06 	.word	0x20004b06

0800547c <__sinit_lock_release>:
 800547c:	4801      	ldr	r0, [pc, #4]	; (8005484 <__sinit_lock_release+0x8>)
 800547e:	f000 b8c7 	b.w	8005610 <__retarget_lock_release_recursive>
 8005482:	bf00      	nop
 8005484:	20004b06 	.word	0x20004b06

08005488 <__sinit>:
 8005488:	b510      	push	{r4, lr}
 800548a:	4604      	mov	r4, r0
 800548c:	f7ff fff0 	bl	8005470 <__sinit_lock_acquire>
 8005490:	69a3      	ldr	r3, [r4, #24]
 8005492:	b11b      	cbz	r3, 800549c <__sinit+0x14>
 8005494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005498:	f7ff bff0 	b.w	800547c <__sinit_lock_release>
 800549c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054a0:	6523      	str	r3, [r4, #80]	; 0x50
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <__sinit+0x68>)
 80054a4:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <__sinit+0x6c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80054aa:	42a3      	cmp	r3, r4
 80054ac:	bf04      	itt	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	61a3      	streq	r3, [r4, #24]
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f820 	bl	80054f8 <__sfp>
 80054b8:	6060      	str	r0, [r4, #4]
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 f81c 	bl	80054f8 <__sfp>
 80054c0:	60a0      	str	r0, [r4, #8]
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 f818 	bl	80054f8 <__sfp>
 80054c8:	2200      	movs	r2, #0
 80054ca:	60e0      	str	r0, [r4, #12]
 80054cc:	2104      	movs	r1, #4
 80054ce:	6860      	ldr	r0, [r4, #4]
 80054d0:	f7ff ff82 	bl	80053d8 <std>
 80054d4:	68a0      	ldr	r0, [r4, #8]
 80054d6:	2201      	movs	r2, #1
 80054d8:	2109      	movs	r1, #9
 80054da:	f7ff ff7d 	bl	80053d8 <std>
 80054de:	68e0      	ldr	r0, [r4, #12]
 80054e0:	2202      	movs	r2, #2
 80054e2:	2112      	movs	r1, #18
 80054e4:	f7ff ff78 	bl	80053d8 <std>
 80054e8:	2301      	movs	r3, #1
 80054ea:	61a3      	str	r3, [r4, #24]
 80054ec:	e7d2      	b.n	8005494 <__sinit+0xc>
 80054ee:	bf00      	nop
 80054f0:	080060d8 	.word	0x080060d8
 80054f4:	08005421 	.word	0x08005421

080054f8 <__sfp>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	4607      	mov	r7, r0
 80054fc:	f7ff ffac 	bl	8005458 <__sfp_lock_acquire>
 8005500:	4b1e      	ldr	r3, [pc, #120]	; (800557c <__sfp+0x84>)
 8005502:	681e      	ldr	r6, [r3, #0]
 8005504:	69b3      	ldr	r3, [r6, #24]
 8005506:	b913      	cbnz	r3, 800550e <__sfp+0x16>
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff ffbd 	bl	8005488 <__sinit>
 800550e:	3648      	adds	r6, #72	; 0x48
 8005510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005514:	3b01      	subs	r3, #1
 8005516:	d503      	bpl.n	8005520 <__sfp+0x28>
 8005518:	6833      	ldr	r3, [r6, #0]
 800551a:	b30b      	cbz	r3, 8005560 <__sfp+0x68>
 800551c:	6836      	ldr	r6, [r6, #0]
 800551e:	e7f7      	b.n	8005510 <__sfp+0x18>
 8005520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005524:	b9d5      	cbnz	r5, 800555c <__sfp+0x64>
 8005526:	4b16      	ldr	r3, [pc, #88]	; (8005580 <__sfp+0x88>)
 8005528:	60e3      	str	r3, [r4, #12]
 800552a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800552e:	6665      	str	r5, [r4, #100]	; 0x64
 8005530:	f000 f86c 	bl	800560c <__retarget_lock_init_recursive>
 8005534:	f7ff ff96 	bl	8005464 <__sfp_lock_release>
 8005538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800553c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005540:	6025      	str	r5, [r4, #0]
 8005542:	61a5      	str	r5, [r4, #24]
 8005544:	2208      	movs	r2, #8
 8005546:	4629      	mov	r1, r5
 8005548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800554c:	f000 f86f 	bl	800562e <memset>
 8005550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005558:	4620      	mov	r0, r4
 800555a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800555c:	3468      	adds	r4, #104	; 0x68
 800555e:	e7d9      	b.n	8005514 <__sfp+0x1c>
 8005560:	2104      	movs	r1, #4
 8005562:	4638      	mov	r0, r7
 8005564:	f7ff ff62 	bl	800542c <__sfmoreglue>
 8005568:	4604      	mov	r4, r0
 800556a:	6030      	str	r0, [r6, #0]
 800556c:	2800      	cmp	r0, #0
 800556e:	d1d5      	bne.n	800551c <__sfp+0x24>
 8005570:	f7ff ff78 	bl	8005464 <__sfp_lock_release>
 8005574:	230c      	movs	r3, #12
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	e7ee      	b.n	8005558 <__sfp+0x60>
 800557a:	bf00      	nop
 800557c:	080060d8 	.word	0x080060d8
 8005580:	ffff0001 	.word	0xffff0001

08005584 <_fwalk_reent>:
 8005584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005588:	4606      	mov	r6, r0
 800558a:	4688      	mov	r8, r1
 800558c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005590:	2700      	movs	r7, #0
 8005592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005596:	f1b9 0901 	subs.w	r9, r9, #1
 800559a:	d505      	bpl.n	80055a8 <_fwalk_reent+0x24>
 800559c:	6824      	ldr	r4, [r4, #0]
 800559e:	2c00      	cmp	r4, #0
 80055a0:	d1f7      	bne.n	8005592 <_fwalk_reent+0xe>
 80055a2:	4638      	mov	r0, r7
 80055a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055a8:	89ab      	ldrh	r3, [r5, #12]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d907      	bls.n	80055be <_fwalk_reent+0x3a>
 80055ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055b2:	3301      	adds	r3, #1
 80055b4:	d003      	beq.n	80055be <_fwalk_reent+0x3a>
 80055b6:	4629      	mov	r1, r5
 80055b8:	4630      	mov	r0, r6
 80055ba:	47c0      	blx	r8
 80055bc:	4307      	orrs	r7, r0
 80055be:	3568      	adds	r5, #104	; 0x68
 80055c0:	e7e9      	b.n	8005596 <_fwalk_reent+0x12>
	...

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	4d0d      	ldr	r5, [pc, #52]	; (80055fc <__libc_init_array+0x38>)
 80055c8:	4c0d      	ldr	r4, [pc, #52]	; (8005600 <__libc_init_array+0x3c>)
 80055ca:	1b64      	subs	r4, r4, r5
 80055cc:	10a4      	asrs	r4, r4, #2
 80055ce:	2600      	movs	r6, #0
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	4d0b      	ldr	r5, [pc, #44]	; (8005604 <__libc_init_array+0x40>)
 80055d6:	4c0c      	ldr	r4, [pc, #48]	; (8005608 <__libc_init_array+0x44>)
 80055d8:	f000 fca2 	bl	8005f20 <_init>
 80055dc:	1b64      	subs	r4, r4, r5
 80055de:	10a4      	asrs	r4, r4, #2
 80055e0:	2600      	movs	r6, #0
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	080060e4 	.word	0x080060e4
 8005600:	080060e4 	.word	0x080060e4
 8005604:	080060e4 	.word	0x080060e4
 8005608:	080060e8 	.word	0x080060e8

0800560c <__retarget_lock_init_recursive>:
 800560c:	4770      	bx	lr

0800560e <__retarget_lock_acquire_recursive>:
 800560e:	4770      	bx	lr

08005610 <__retarget_lock_release_recursive>:
 8005610:	4770      	bx	lr

08005612 <memcpy>:
 8005612:	440a      	add	r2, r1
 8005614:	4291      	cmp	r1, r2
 8005616:	f100 33ff 	add.w	r3, r0, #4294967295
 800561a:	d100      	bne.n	800561e <memcpy+0xc>
 800561c:	4770      	bx	lr
 800561e:	b510      	push	{r4, lr}
 8005620:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005624:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005628:	4291      	cmp	r1, r2
 800562a:	d1f9      	bne.n	8005620 <memcpy+0xe>
 800562c:	bd10      	pop	{r4, pc}

0800562e <memset>:
 800562e:	4402      	add	r2, r0
 8005630:	4603      	mov	r3, r0
 8005632:	4293      	cmp	r3, r2
 8005634:	d100      	bne.n	8005638 <memset+0xa>
 8005636:	4770      	bx	lr
 8005638:	f803 1b01 	strb.w	r1, [r3], #1
 800563c:	e7f9      	b.n	8005632 <memset+0x4>
	...

08005640 <sbrk_aligned>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4e0e      	ldr	r6, [pc, #56]	; (800567c <sbrk_aligned+0x3c>)
 8005644:	460c      	mov	r4, r1
 8005646:	6831      	ldr	r1, [r6, #0]
 8005648:	4605      	mov	r5, r0
 800564a:	b911      	cbnz	r1, 8005652 <sbrk_aligned+0x12>
 800564c:	f000 f96c 	bl	8005928 <_sbrk_r>
 8005650:	6030      	str	r0, [r6, #0]
 8005652:	4621      	mov	r1, r4
 8005654:	4628      	mov	r0, r5
 8005656:	f000 f967 	bl	8005928 <_sbrk_r>
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d00a      	beq.n	8005674 <sbrk_aligned+0x34>
 800565e:	1cc4      	adds	r4, r0, #3
 8005660:	f024 0403 	bic.w	r4, r4, #3
 8005664:	42a0      	cmp	r0, r4
 8005666:	d007      	beq.n	8005678 <sbrk_aligned+0x38>
 8005668:	1a21      	subs	r1, r4, r0
 800566a:	4628      	mov	r0, r5
 800566c:	f000 f95c 	bl	8005928 <_sbrk_r>
 8005670:	3001      	adds	r0, #1
 8005672:	d101      	bne.n	8005678 <sbrk_aligned+0x38>
 8005674:	f04f 34ff 	mov.w	r4, #4294967295
 8005678:	4620      	mov	r0, r4
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	20004b0c 	.word	0x20004b0c

08005680 <_malloc_r>:
 8005680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	1ccd      	adds	r5, r1, #3
 8005686:	f025 0503 	bic.w	r5, r5, #3
 800568a:	3508      	adds	r5, #8
 800568c:	2d0c      	cmp	r5, #12
 800568e:	bf38      	it	cc
 8005690:	250c      	movcc	r5, #12
 8005692:	2d00      	cmp	r5, #0
 8005694:	4607      	mov	r7, r0
 8005696:	db01      	blt.n	800569c <_malloc_r+0x1c>
 8005698:	42a9      	cmp	r1, r5
 800569a:	d905      	bls.n	80056a8 <_malloc_r+0x28>
 800569c:	230c      	movs	r3, #12
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	2600      	movs	r6, #0
 80056a2:	4630      	mov	r0, r6
 80056a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a8:	4e2e      	ldr	r6, [pc, #184]	; (8005764 <_malloc_r+0xe4>)
 80056aa:	f000 fbad 	bl	8005e08 <__malloc_lock>
 80056ae:	6833      	ldr	r3, [r6, #0]
 80056b0:	461c      	mov	r4, r3
 80056b2:	bb34      	cbnz	r4, 8005702 <_malloc_r+0x82>
 80056b4:	4629      	mov	r1, r5
 80056b6:	4638      	mov	r0, r7
 80056b8:	f7ff ffc2 	bl	8005640 <sbrk_aligned>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	4604      	mov	r4, r0
 80056c0:	d14d      	bne.n	800575e <_malloc_r+0xde>
 80056c2:	6834      	ldr	r4, [r6, #0]
 80056c4:	4626      	mov	r6, r4
 80056c6:	2e00      	cmp	r6, #0
 80056c8:	d140      	bne.n	800574c <_malloc_r+0xcc>
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	4631      	mov	r1, r6
 80056ce:	4638      	mov	r0, r7
 80056d0:	eb04 0803 	add.w	r8, r4, r3
 80056d4:	f000 f928 	bl	8005928 <_sbrk_r>
 80056d8:	4580      	cmp	r8, r0
 80056da:	d13a      	bne.n	8005752 <_malloc_r+0xd2>
 80056dc:	6821      	ldr	r1, [r4, #0]
 80056de:	3503      	adds	r5, #3
 80056e0:	1a6d      	subs	r5, r5, r1
 80056e2:	f025 0503 	bic.w	r5, r5, #3
 80056e6:	3508      	adds	r5, #8
 80056e8:	2d0c      	cmp	r5, #12
 80056ea:	bf38      	it	cc
 80056ec:	250c      	movcc	r5, #12
 80056ee:	4629      	mov	r1, r5
 80056f0:	4638      	mov	r0, r7
 80056f2:	f7ff ffa5 	bl	8005640 <sbrk_aligned>
 80056f6:	3001      	adds	r0, #1
 80056f8:	d02b      	beq.n	8005752 <_malloc_r+0xd2>
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	442b      	add	r3, r5
 80056fe:	6023      	str	r3, [r4, #0]
 8005700:	e00e      	b.n	8005720 <_malloc_r+0xa0>
 8005702:	6822      	ldr	r2, [r4, #0]
 8005704:	1b52      	subs	r2, r2, r5
 8005706:	d41e      	bmi.n	8005746 <_malloc_r+0xc6>
 8005708:	2a0b      	cmp	r2, #11
 800570a:	d916      	bls.n	800573a <_malloc_r+0xba>
 800570c:	1961      	adds	r1, r4, r5
 800570e:	42a3      	cmp	r3, r4
 8005710:	6025      	str	r5, [r4, #0]
 8005712:	bf18      	it	ne
 8005714:	6059      	strne	r1, [r3, #4]
 8005716:	6863      	ldr	r3, [r4, #4]
 8005718:	bf08      	it	eq
 800571a:	6031      	streq	r1, [r6, #0]
 800571c:	5162      	str	r2, [r4, r5]
 800571e:	604b      	str	r3, [r1, #4]
 8005720:	4638      	mov	r0, r7
 8005722:	f104 060b 	add.w	r6, r4, #11
 8005726:	f000 fb75 	bl	8005e14 <__malloc_unlock>
 800572a:	f026 0607 	bic.w	r6, r6, #7
 800572e:	1d23      	adds	r3, r4, #4
 8005730:	1af2      	subs	r2, r6, r3
 8005732:	d0b6      	beq.n	80056a2 <_malloc_r+0x22>
 8005734:	1b9b      	subs	r3, r3, r6
 8005736:	50a3      	str	r3, [r4, r2]
 8005738:	e7b3      	b.n	80056a2 <_malloc_r+0x22>
 800573a:	6862      	ldr	r2, [r4, #4]
 800573c:	42a3      	cmp	r3, r4
 800573e:	bf0c      	ite	eq
 8005740:	6032      	streq	r2, [r6, #0]
 8005742:	605a      	strne	r2, [r3, #4]
 8005744:	e7ec      	b.n	8005720 <_malloc_r+0xa0>
 8005746:	4623      	mov	r3, r4
 8005748:	6864      	ldr	r4, [r4, #4]
 800574a:	e7b2      	b.n	80056b2 <_malloc_r+0x32>
 800574c:	4634      	mov	r4, r6
 800574e:	6876      	ldr	r6, [r6, #4]
 8005750:	e7b9      	b.n	80056c6 <_malloc_r+0x46>
 8005752:	230c      	movs	r3, #12
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	4638      	mov	r0, r7
 8005758:	f000 fb5c 	bl	8005e14 <__malloc_unlock>
 800575c:	e7a1      	b.n	80056a2 <_malloc_r+0x22>
 800575e:	6025      	str	r5, [r4, #0]
 8005760:	e7de      	b.n	8005720 <_malloc_r+0xa0>
 8005762:	bf00      	nop
 8005764:	20004b08 	.word	0x20004b08

08005768 <_puts_r>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	460e      	mov	r6, r1
 800576c:	4605      	mov	r5, r0
 800576e:	b118      	cbz	r0, 8005778 <_puts_r+0x10>
 8005770:	6983      	ldr	r3, [r0, #24]
 8005772:	b90b      	cbnz	r3, 8005778 <_puts_r+0x10>
 8005774:	f7ff fe88 	bl	8005488 <__sinit>
 8005778:	69ab      	ldr	r3, [r5, #24]
 800577a:	68ac      	ldr	r4, [r5, #8]
 800577c:	b913      	cbnz	r3, 8005784 <_puts_r+0x1c>
 800577e:	4628      	mov	r0, r5
 8005780:	f7ff fe82 	bl	8005488 <__sinit>
 8005784:	4b2c      	ldr	r3, [pc, #176]	; (8005838 <_puts_r+0xd0>)
 8005786:	429c      	cmp	r4, r3
 8005788:	d120      	bne.n	80057cc <_puts_r+0x64>
 800578a:	686c      	ldr	r4, [r5, #4]
 800578c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800578e:	07db      	lsls	r3, r3, #31
 8005790:	d405      	bmi.n	800579e <_puts_r+0x36>
 8005792:	89a3      	ldrh	r3, [r4, #12]
 8005794:	0598      	lsls	r0, r3, #22
 8005796:	d402      	bmi.n	800579e <_puts_r+0x36>
 8005798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800579a:	f7ff ff38 	bl	800560e <__retarget_lock_acquire_recursive>
 800579e:	89a3      	ldrh	r3, [r4, #12]
 80057a0:	0719      	lsls	r1, r3, #28
 80057a2:	d51d      	bpl.n	80057e0 <_puts_r+0x78>
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	b1db      	cbz	r3, 80057e0 <_puts_r+0x78>
 80057a8:	3e01      	subs	r6, #1
 80057aa:	68a3      	ldr	r3, [r4, #8]
 80057ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057b0:	3b01      	subs	r3, #1
 80057b2:	60a3      	str	r3, [r4, #8]
 80057b4:	bb39      	cbnz	r1, 8005806 <_puts_r+0x9e>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	da38      	bge.n	800582c <_puts_r+0xc4>
 80057ba:	4622      	mov	r2, r4
 80057bc:	210a      	movs	r1, #10
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 f906 	bl	80059d0 <__swbuf_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d011      	beq.n	80057ec <_puts_r+0x84>
 80057c8:	250a      	movs	r5, #10
 80057ca:	e011      	b.n	80057f0 <_puts_r+0x88>
 80057cc:	4b1b      	ldr	r3, [pc, #108]	; (800583c <_puts_r+0xd4>)
 80057ce:	429c      	cmp	r4, r3
 80057d0:	d101      	bne.n	80057d6 <_puts_r+0x6e>
 80057d2:	68ac      	ldr	r4, [r5, #8]
 80057d4:	e7da      	b.n	800578c <_puts_r+0x24>
 80057d6:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <_puts_r+0xd8>)
 80057d8:	429c      	cmp	r4, r3
 80057da:	bf08      	it	eq
 80057dc:	68ec      	ldreq	r4, [r5, #12]
 80057de:	e7d5      	b.n	800578c <_puts_r+0x24>
 80057e0:	4621      	mov	r1, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	f000 f958 	bl	8005a98 <__swsetup_r>
 80057e8:	2800      	cmp	r0, #0
 80057ea:	d0dd      	beq.n	80057a8 <_puts_r+0x40>
 80057ec:	f04f 35ff 	mov.w	r5, #4294967295
 80057f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057f2:	07da      	lsls	r2, r3, #31
 80057f4:	d405      	bmi.n	8005802 <_puts_r+0x9a>
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	059b      	lsls	r3, r3, #22
 80057fa:	d402      	bmi.n	8005802 <_puts_r+0x9a>
 80057fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057fe:	f7ff ff07 	bl	8005610 <__retarget_lock_release_recursive>
 8005802:	4628      	mov	r0, r5
 8005804:	bd70      	pop	{r4, r5, r6, pc}
 8005806:	2b00      	cmp	r3, #0
 8005808:	da04      	bge.n	8005814 <_puts_r+0xac>
 800580a:	69a2      	ldr	r2, [r4, #24]
 800580c:	429a      	cmp	r2, r3
 800580e:	dc06      	bgt.n	800581e <_puts_r+0xb6>
 8005810:	290a      	cmp	r1, #10
 8005812:	d004      	beq.n	800581e <_puts_r+0xb6>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	6022      	str	r2, [r4, #0]
 800581a:	7019      	strb	r1, [r3, #0]
 800581c:	e7c5      	b.n	80057aa <_puts_r+0x42>
 800581e:	4622      	mov	r2, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 f8d5 	bl	80059d0 <__swbuf_r>
 8005826:	3001      	adds	r0, #1
 8005828:	d1bf      	bne.n	80057aa <_puts_r+0x42>
 800582a:	e7df      	b.n	80057ec <_puts_r+0x84>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	250a      	movs	r5, #10
 8005830:	1c5a      	adds	r2, r3, #1
 8005832:	6022      	str	r2, [r4, #0]
 8005834:	701d      	strb	r5, [r3, #0]
 8005836:	e7db      	b.n	80057f0 <_puts_r+0x88>
 8005838:	08006098 	.word	0x08006098
 800583c:	080060b8 	.word	0x080060b8
 8005840:	08006078 	.word	0x08006078

08005844 <puts>:
 8005844:	4b02      	ldr	r3, [pc, #8]	; (8005850 <puts+0xc>)
 8005846:	4601      	mov	r1, r0
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	f7ff bf8d 	b.w	8005768 <_puts_r>
 800584e:	bf00      	nop
 8005850:	20000018 	.word	0x20000018

08005854 <cleanup_glue>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	460c      	mov	r4, r1
 8005858:	6809      	ldr	r1, [r1, #0]
 800585a:	4605      	mov	r5, r0
 800585c:	b109      	cbz	r1, 8005862 <cleanup_glue+0xe>
 800585e:	f7ff fff9 	bl	8005854 <cleanup_glue>
 8005862:	4621      	mov	r1, r4
 8005864:	4628      	mov	r0, r5
 8005866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800586a:	f000 bad9 	b.w	8005e20 <_free_r>
	...

08005870 <_reclaim_reent>:
 8005870:	4b2c      	ldr	r3, [pc, #176]	; (8005924 <_reclaim_reent+0xb4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4283      	cmp	r3, r0
 8005876:	b570      	push	{r4, r5, r6, lr}
 8005878:	4604      	mov	r4, r0
 800587a:	d051      	beq.n	8005920 <_reclaim_reent+0xb0>
 800587c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800587e:	b143      	cbz	r3, 8005892 <_reclaim_reent+0x22>
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d14a      	bne.n	800591c <_reclaim_reent+0xac>
 8005886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005888:	6819      	ldr	r1, [r3, #0]
 800588a:	b111      	cbz	r1, 8005892 <_reclaim_reent+0x22>
 800588c:	4620      	mov	r0, r4
 800588e:	f000 fac7 	bl	8005e20 <_free_r>
 8005892:	6961      	ldr	r1, [r4, #20]
 8005894:	b111      	cbz	r1, 800589c <_reclaim_reent+0x2c>
 8005896:	4620      	mov	r0, r4
 8005898:	f000 fac2 	bl	8005e20 <_free_r>
 800589c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800589e:	b111      	cbz	r1, 80058a6 <_reclaim_reent+0x36>
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fabd 	bl	8005e20 <_free_r>
 80058a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80058a8:	b111      	cbz	r1, 80058b0 <_reclaim_reent+0x40>
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 fab8 	bl	8005e20 <_free_r>
 80058b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80058b2:	b111      	cbz	r1, 80058ba <_reclaim_reent+0x4a>
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 fab3 	bl	8005e20 <_free_r>
 80058ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80058bc:	b111      	cbz	r1, 80058c4 <_reclaim_reent+0x54>
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 faae 	bl	8005e20 <_free_r>
 80058c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80058c6:	b111      	cbz	r1, 80058ce <_reclaim_reent+0x5e>
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 faa9 	bl	8005e20 <_free_r>
 80058ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80058d0:	b111      	cbz	r1, 80058d8 <_reclaim_reent+0x68>
 80058d2:	4620      	mov	r0, r4
 80058d4:	f000 faa4 	bl	8005e20 <_free_r>
 80058d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058da:	b111      	cbz	r1, 80058e2 <_reclaim_reent+0x72>
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 fa9f 	bl	8005e20 <_free_r>
 80058e2:	69a3      	ldr	r3, [r4, #24]
 80058e4:	b1e3      	cbz	r3, 8005920 <_reclaim_reent+0xb0>
 80058e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058e8:	4620      	mov	r0, r4
 80058ea:	4798      	blx	r3
 80058ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80058ee:	b1b9      	cbz	r1, 8005920 <_reclaim_reent+0xb0>
 80058f0:	4620      	mov	r0, r4
 80058f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80058f6:	f7ff bfad 	b.w	8005854 <cleanup_glue>
 80058fa:	5949      	ldr	r1, [r1, r5]
 80058fc:	b941      	cbnz	r1, 8005910 <_reclaim_reent+0xa0>
 80058fe:	3504      	adds	r5, #4
 8005900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005902:	2d80      	cmp	r5, #128	; 0x80
 8005904:	68d9      	ldr	r1, [r3, #12]
 8005906:	d1f8      	bne.n	80058fa <_reclaim_reent+0x8a>
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fa89 	bl	8005e20 <_free_r>
 800590e:	e7ba      	b.n	8005886 <_reclaim_reent+0x16>
 8005910:	680e      	ldr	r6, [r1, #0]
 8005912:	4620      	mov	r0, r4
 8005914:	f000 fa84 	bl	8005e20 <_free_r>
 8005918:	4631      	mov	r1, r6
 800591a:	e7ef      	b.n	80058fc <_reclaim_reent+0x8c>
 800591c:	2500      	movs	r5, #0
 800591e:	e7ef      	b.n	8005900 <_reclaim_reent+0x90>
 8005920:	bd70      	pop	{r4, r5, r6, pc}
 8005922:	bf00      	nop
 8005924:	20000018 	.word	0x20000018

08005928 <_sbrk_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_sbrk_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fb f85a 	bl	80009ec <_sbrk>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_sbrk_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_sbrk_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	20004b10 	.word	0x20004b10

08005948 <__sread>:
 8005948:	b510      	push	{r4, lr}
 800594a:	460c      	mov	r4, r1
 800594c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005950:	f000 fab2 	bl	8005eb8 <_read_r>
 8005954:	2800      	cmp	r0, #0
 8005956:	bfab      	itete	ge
 8005958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800595a:	89a3      	ldrhlt	r3, [r4, #12]
 800595c:	181b      	addge	r3, r3, r0
 800595e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005962:	bfac      	ite	ge
 8005964:	6563      	strge	r3, [r4, #84]	; 0x54
 8005966:	81a3      	strhlt	r3, [r4, #12]
 8005968:	bd10      	pop	{r4, pc}

0800596a <__swrite>:
 800596a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596e:	461f      	mov	r7, r3
 8005970:	898b      	ldrh	r3, [r1, #12]
 8005972:	05db      	lsls	r3, r3, #23
 8005974:	4605      	mov	r5, r0
 8005976:	460c      	mov	r4, r1
 8005978:	4616      	mov	r6, r2
 800597a:	d505      	bpl.n	8005988 <__swrite+0x1e>
 800597c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005980:	2302      	movs	r3, #2
 8005982:	2200      	movs	r2, #0
 8005984:	f000 f9c8 	bl	8005d18 <_lseek_r>
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800598e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	4632      	mov	r2, r6
 8005996:	463b      	mov	r3, r7
 8005998:	4628      	mov	r0, r5
 800599a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800599e:	f000 b869 	b.w	8005a74 <_write_r>

080059a2 <__sseek>:
 80059a2:	b510      	push	{r4, lr}
 80059a4:	460c      	mov	r4, r1
 80059a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059aa:	f000 f9b5 	bl	8005d18 <_lseek_r>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	89a3      	ldrh	r3, [r4, #12]
 80059b2:	bf15      	itete	ne
 80059b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80059b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80059ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80059be:	81a3      	strheq	r3, [r4, #12]
 80059c0:	bf18      	it	ne
 80059c2:	81a3      	strhne	r3, [r4, #12]
 80059c4:	bd10      	pop	{r4, pc}

080059c6 <__sclose>:
 80059c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ca:	f000 b8d3 	b.w	8005b74 <_close_r>
	...

080059d0 <__swbuf_r>:
 80059d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d2:	460e      	mov	r6, r1
 80059d4:	4614      	mov	r4, r2
 80059d6:	4605      	mov	r5, r0
 80059d8:	b118      	cbz	r0, 80059e2 <__swbuf_r+0x12>
 80059da:	6983      	ldr	r3, [r0, #24]
 80059dc:	b90b      	cbnz	r3, 80059e2 <__swbuf_r+0x12>
 80059de:	f7ff fd53 	bl	8005488 <__sinit>
 80059e2:	4b21      	ldr	r3, [pc, #132]	; (8005a68 <__swbuf_r+0x98>)
 80059e4:	429c      	cmp	r4, r3
 80059e6:	d12b      	bne.n	8005a40 <__swbuf_r+0x70>
 80059e8:	686c      	ldr	r4, [r5, #4]
 80059ea:	69a3      	ldr	r3, [r4, #24]
 80059ec:	60a3      	str	r3, [r4, #8]
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	071a      	lsls	r2, r3, #28
 80059f2:	d52f      	bpl.n	8005a54 <__swbuf_r+0x84>
 80059f4:	6923      	ldr	r3, [r4, #16]
 80059f6:	b36b      	cbz	r3, 8005a54 <__swbuf_r+0x84>
 80059f8:	6923      	ldr	r3, [r4, #16]
 80059fa:	6820      	ldr	r0, [r4, #0]
 80059fc:	1ac0      	subs	r0, r0, r3
 80059fe:	6963      	ldr	r3, [r4, #20]
 8005a00:	b2f6      	uxtb	r6, r6
 8005a02:	4283      	cmp	r3, r0
 8005a04:	4637      	mov	r7, r6
 8005a06:	dc04      	bgt.n	8005a12 <__swbuf_r+0x42>
 8005a08:	4621      	mov	r1, r4
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f000 f948 	bl	8005ca0 <_fflush_r>
 8005a10:	bb30      	cbnz	r0, 8005a60 <__swbuf_r+0x90>
 8005a12:	68a3      	ldr	r3, [r4, #8]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	60a3      	str	r3, [r4, #8]
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	6022      	str	r2, [r4, #0]
 8005a1e:	701e      	strb	r6, [r3, #0]
 8005a20:	6963      	ldr	r3, [r4, #20]
 8005a22:	3001      	adds	r0, #1
 8005a24:	4283      	cmp	r3, r0
 8005a26:	d004      	beq.n	8005a32 <__swbuf_r+0x62>
 8005a28:	89a3      	ldrh	r3, [r4, #12]
 8005a2a:	07db      	lsls	r3, r3, #31
 8005a2c:	d506      	bpl.n	8005a3c <__swbuf_r+0x6c>
 8005a2e:	2e0a      	cmp	r6, #10
 8005a30:	d104      	bne.n	8005a3c <__swbuf_r+0x6c>
 8005a32:	4621      	mov	r1, r4
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 f933 	bl	8005ca0 <_fflush_r>
 8005a3a:	b988      	cbnz	r0, 8005a60 <__swbuf_r+0x90>
 8005a3c:	4638      	mov	r0, r7
 8005a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <__swbuf_r+0x9c>)
 8005a42:	429c      	cmp	r4, r3
 8005a44:	d101      	bne.n	8005a4a <__swbuf_r+0x7a>
 8005a46:	68ac      	ldr	r4, [r5, #8]
 8005a48:	e7cf      	b.n	80059ea <__swbuf_r+0x1a>
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <__swbuf_r+0xa0>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	bf08      	it	eq
 8005a50:	68ec      	ldreq	r4, [r5, #12]
 8005a52:	e7ca      	b.n	80059ea <__swbuf_r+0x1a>
 8005a54:	4621      	mov	r1, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 f81e 	bl	8005a98 <__swsetup_r>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	d0cb      	beq.n	80059f8 <__swbuf_r+0x28>
 8005a60:	f04f 37ff 	mov.w	r7, #4294967295
 8005a64:	e7ea      	b.n	8005a3c <__swbuf_r+0x6c>
 8005a66:	bf00      	nop
 8005a68:	08006098 	.word	0x08006098
 8005a6c:	080060b8 	.word	0x080060b8
 8005a70:	08006078 	.word	0x08006078

08005a74 <_write_r>:
 8005a74:	b538      	push	{r3, r4, r5, lr}
 8005a76:	4d07      	ldr	r5, [pc, #28]	; (8005a94 <_write_r+0x20>)
 8005a78:	4604      	mov	r4, r0
 8005a7a:	4608      	mov	r0, r1
 8005a7c:	4611      	mov	r1, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	602a      	str	r2, [r5, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	f7fa ff62 	bl	800094c <_write>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_write_r+0x1e>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_write_r+0x1e>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	20004b10 	.word	0x20004b10

08005a98 <__swsetup_r>:
 8005a98:	4b32      	ldr	r3, [pc, #200]	; (8005b64 <__swsetup_r+0xcc>)
 8005a9a:	b570      	push	{r4, r5, r6, lr}
 8005a9c:	681d      	ldr	r5, [r3, #0]
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	b125      	cbz	r5, 8005aae <__swsetup_r+0x16>
 8005aa4:	69ab      	ldr	r3, [r5, #24]
 8005aa6:	b913      	cbnz	r3, 8005aae <__swsetup_r+0x16>
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	f7ff fced 	bl	8005488 <__sinit>
 8005aae:	4b2e      	ldr	r3, [pc, #184]	; (8005b68 <__swsetup_r+0xd0>)
 8005ab0:	429c      	cmp	r4, r3
 8005ab2:	d10f      	bne.n	8005ad4 <__swsetup_r+0x3c>
 8005ab4:	686c      	ldr	r4, [r5, #4]
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005abc:	0719      	lsls	r1, r3, #28
 8005abe:	d42c      	bmi.n	8005b1a <__swsetup_r+0x82>
 8005ac0:	06dd      	lsls	r5, r3, #27
 8005ac2:	d411      	bmi.n	8005ae8 <__swsetup_r+0x50>
 8005ac4:	2309      	movs	r3, #9
 8005ac6:	6033      	str	r3, [r6, #0]
 8005ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005acc:	81a3      	strh	r3, [r4, #12]
 8005ace:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad2:	e03e      	b.n	8005b52 <__swsetup_r+0xba>
 8005ad4:	4b25      	ldr	r3, [pc, #148]	; (8005b6c <__swsetup_r+0xd4>)
 8005ad6:	429c      	cmp	r4, r3
 8005ad8:	d101      	bne.n	8005ade <__swsetup_r+0x46>
 8005ada:	68ac      	ldr	r4, [r5, #8]
 8005adc:	e7eb      	b.n	8005ab6 <__swsetup_r+0x1e>
 8005ade:	4b24      	ldr	r3, [pc, #144]	; (8005b70 <__swsetup_r+0xd8>)
 8005ae0:	429c      	cmp	r4, r3
 8005ae2:	bf08      	it	eq
 8005ae4:	68ec      	ldreq	r4, [r5, #12]
 8005ae6:	e7e6      	b.n	8005ab6 <__swsetup_r+0x1e>
 8005ae8:	0758      	lsls	r0, r3, #29
 8005aea:	d512      	bpl.n	8005b12 <__swsetup_r+0x7a>
 8005aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005aee:	b141      	cbz	r1, 8005b02 <__swsetup_r+0x6a>
 8005af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005af4:	4299      	cmp	r1, r3
 8005af6:	d002      	beq.n	8005afe <__swsetup_r+0x66>
 8005af8:	4630      	mov	r0, r6
 8005afa:	f000 f991 	bl	8005e20 <_free_r>
 8005afe:	2300      	movs	r3, #0
 8005b00:	6363      	str	r3, [r4, #52]	; 0x34
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	6923      	ldr	r3, [r4, #16]
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	f043 0308 	orr.w	r3, r3, #8
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	b94b      	cbnz	r3, 8005b32 <__swsetup_r+0x9a>
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b28:	d003      	beq.n	8005b32 <__swsetup_r+0x9a>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f000 f92b 	bl	8005d88 <__smakebuf_r>
 8005b32:	89a0      	ldrh	r0, [r4, #12]
 8005b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b38:	f010 0301 	ands.w	r3, r0, #1
 8005b3c:	d00a      	beq.n	8005b54 <__swsetup_r+0xbc>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60a3      	str	r3, [r4, #8]
 8005b42:	6963      	ldr	r3, [r4, #20]
 8005b44:	425b      	negs	r3, r3
 8005b46:	61a3      	str	r3, [r4, #24]
 8005b48:	6923      	ldr	r3, [r4, #16]
 8005b4a:	b943      	cbnz	r3, 8005b5e <__swsetup_r+0xc6>
 8005b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b50:	d1ba      	bne.n	8005ac8 <__swsetup_r+0x30>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	0781      	lsls	r1, r0, #30
 8005b56:	bf58      	it	pl
 8005b58:	6963      	ldrpl	r3, [r4, #20]
 8005b5a:	60a3      	str	r3, [r4, #8]
 8005b5c:	e7f4      	b.n	8005b48 <__swsetup_r+0xb0>
 8005b5e:	2000      	movs	r0, #0
 8005b60:	e7f7      	b.n	8005b52 <__swsetup_r+0xba>
 8005b62:	bf00      	nop
 8005b64:	20000018 	.word	0x20000018
 8005b68:	08006098 	.word	0x08006098
 8005b6c:	080060b8 	.word	0x080060b8
 8005b70:	08006078 	.word	0x08006078

08005b74 <_close_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d06      	ldr	r5, [pc, #24]	; (8005b90 <_close_r+0x1c>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	f7fa ff00 	bl	8000984 <_close>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d102      	bne.n	8005b8e <_close_r+0x1a>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	b103      	cbz	r3, 8005b8e <_close_r+0x1a>
 8005b8c:	6023      	str	r3, [r4, #0]
 8005b8e:	bd38      	pop	{r3, r4, r5, pc}
 8005b90:	20004b10 	.word	0x20004b10

08005b94 <__sflush_r>:
 8005b94:	898a      	ldrh	r2, [r1, #12]
 8005b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9a:	4605      	mov	r5, r0
 8005b9c:	0710      	lsls	r0, r2, #28
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	d458      	bmi.n	8005c54 <__sflush_r+0xc0>
 8005ba2:	684b      	ldr	r3, [r1, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	dc05      	bgt.n	8005bb4 <__sflush_r+0x20>
 8005ba8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dc02      	bgt.n	8005bb4 <__sflush_r+0x20>
 8005bae:	2000      	movs	r0, #0
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	d0f9      	beq.n	8005bae <__sflush_r+0x1a>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bc0:	682f      	ldr	r7, [r5, #0]
 8005bc2:	602b      	str	r3, [r5, #0]
 8005bc4:	d032      	beq.n	8005c2c <__sflush_r+0x98>
 8005bc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	075a      	lsls	r2, r3, #29
 8005bcc:	d505      	bpl.n	8005bda <__sflush_r+0x46>
 8005bce:	6863      	ldr	r3, [r4, #4]
 8005bd0:	1ac0      	subs	r0, r0, r3
 8005bd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bd4:	b10b      	cbz	r3, 8005bda <__sflush_r+0x46>
 8005bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bd8:	1ac0      	subs	r0, r0, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be0:	6a21      	ldr	r1, [r4, #32]
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b0      	blx	r6
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	d106      	bne.n	8005bfa <__sflush_r+0x66>
 8005bec:	6829      	ldr	r1, [r5, #0]
 8005bee:	291d      	cmp	r1, #29
 8005bf0:	d82c      	bhi.n	8005c4c <__sflush_r+0xb8>
 8005bf2:	4a2a      	ldr	r2, [pc, #168]	; (8005c9c <__sflush_r+0x108>)
 8005bf4:	40ca      	lsrs	r2, r1
 8005bf6:	07d6      	lsls	r6, r2, #31
 8005bf8:	d528      	bpl.n	8005c4c <__sflush_r+0xb8>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	6062      	str	r2, [r4, #4]
 8005bfe:	04d9      	lsls	r1, r3, #19
 8005c00:	6922      	ldr	r2, [r4, #16]
 8005c02:	6022      	str	r2, [r4, #0]
 8005c04:	d504      	bpl.n	8005c10 <__sflush_r+0x7c>
 8005c06:	1c42      	adds	r2, r0, #1
 8005c08:	d101      	bne.n	8005c0e <__sflush_r+0x7a>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	b903      	cbnz	r3, 8005c10 <__sflush_r+0x7c>
 8005c0e:	6560      	str	r0, [r4, #84]	; 0x54
 8005c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c12:	602f      	str	r7, [r5, #0]
 8005c14:	2900      	cmp	r1, #0
 8005c16:	d0ca      	beq.n	8005bae <__sflush_r+0x1a>
 8005c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c1c:	4299      	cmp	r1, r3
 8005c1e:	d002      	beq.n	8005c26 <__sflush_r+0x92>
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 f8fd 	bl	8005e20 <_free_r>
 8005c26:	2000      	movs	r0, #0
 8005c28:	6360      	str	r0, [r4, #52]	; 0x34
 8005c2a:	e7c1      	b.n	8005bb0 <__sflush_r+0x1c>
 8005c2c:	6a21      	ldr	r1, [r4, #32]
 8005c2e:	2301      	movs	r3, #1
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b0      	blx	r6
 8005c34:	1c41      	adds	r1, r0, #1
 8005c36:	d1c7      	bne.n	8005bc8 <__sflush_r+0x34>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0c4      	beq.n	8005bc8 <__sflush_r+0x34>
 8005c3e:	2b1d      	cmp	r3, #29
 8005c40:	d001      	beq.n	8005c46 <__sflush_r+0xb2>
 8005c42:	2b16      	cmp	r3, #22
 8005c44:	d101      	bne.n	8005c4a <__sflush_r+0xb6>
 8005c46:	602f      	str	r7, [r5, #0]
 8005c48:	e7b1      	b.n	8005bae <__sflush_r+0x1a>
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	e7ad      	b.n	8005bb0 <__sflush_r+0x1c>
 8005c54:	690f      	ldr	r7, [r1, #16]
 8005c56:	2f00      	cmp	r7, #0
 8005c58:	d0a9      	beq.n	8005bae <__sflush_r+0x1a>
 8005c5a:	0793      	lsls	r3, r2, #30
 8005c5c:	680e      	ldr	r6, [r1, #0]
 8005c5e:	bf08      	it	eq
 8005c60:	694b      	ldreq	r3, [r1, #20]
 8005c62:	600f      	str	r7, [r1, #0]
 8005c64:	bf18      	it	ne
 8005c66:	2300      	movne	r3, #0
 8005c68:	eba6 0807 	sub.w	r8, r6, r7
 8005c6c:	608b      	str	r3, [r1, #8]
 8005c6e:	f1b8 0f00 	cmp.w	r8, #0
 8005c72:	dd9c      	ble.n	8005bae <__sflush_r+0x1a>
 8005c74:	6a21      	ldr	r1, [r4, #32]
 8005c76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c78:	4643      	mov	r3, r8
 8005c7a:	463a      	mov	r2, r7
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	47b0      	blx	r6
 8005c80:	2800      	cmp	r0, #0
 8005c82:	dc06      	bgt.n	8005c92 <__sflush_r+0xfe>
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	e78e      	b.n	8005bb0 <__sflush_r+0x1c>
 8005c92:	4407      	add	r7, r0
 8005c94:	eba8 0800 	sub.w	r8, r8, r0
 8005c98:	e7e9      	b.n	8005c6e <__sflush_r+0xda>
 8005c9a:	bf00      	nop
 8005c9c:	20400001 	.word	0x20400001

08005ca0 <_fflush_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	690b      	ldr	r3, [r1, #16]
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	460c      	mov	r4, r1
 8005ca8:	b913      	cbnz	r3, 8005cb0 <_fflush_r+0x10>
 8005caa:	2500      	movs	r5, #0
 8005cac:	4628      	mov	r0, r5
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	b118      	cbz	r0, 8005cba <_fflush_r+0x1a>
 8005cb2:	6983      	ldr	r3, [r0, #24]
 8005cb4:	b90b      	cbnz	r3, 8005cba <_fflush_r+0x1a>
 8005cb6:	f7ff fbe7 	bl	8005488 <__sinit>
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <_fflush_r+0x6c>)
 8005cbc:	429c      	cmp	r4, r3
 8005cbe:	d11b      	bne.n	8005cf8 <_fflush_r+0x58>
 8005cc0:	686c      	ldr	r4, [r5, #4]
 8005cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ef      	beq.n	8005caa <_fflush_r+0xa>
 8005cca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ccc:	07d0      	lsls	r0, r2, #31
 8005cce:	d404      	bmi.n	8005cda <_fflush_r+0x3a>
 8005cd0:	0599      	lsls	r1, r3, #22
 8005cd2:	d402      	bmi.n	8005cda <_fflush_r+0x3a>
 8005cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cd6:	f7ff fc9a 	bl	800560e <__retarget_lock_acquire_recursive>
 8005cda:	4628      	mov	r0, r5
 8005cdc:	4621      	mov	r1, r4
 8005cde:	f7ff ff59 	bl	8005b94 <__sflush_r>
 8005ce2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ce4:	07da      	lsls	r2, r3, #31
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	d4e0      	bmi.n	8005cac <_fflush_r+0xc>
 8005cea:	89a3      	ldrh	r3, [r4, #12]
 8005cec:	059b      	lsls	r3, r3, #22
 8005cee:	d4dd      	bmi.n	8005cac <_fflush_r+0xc>
 8005cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cf2:	f7ff fc8d 	bl	8005610 <__retarget_lock_release_recursive>
 8005cf6:	e7d9      	b.n	8005cac <_fflush_r+0xc>
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <_fflush_r+0x70>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	d101      	bne.n	8005d02 <_fflush_r+0x62>
 8005cfe:	68ac      	ldr	r4, [r5, #8]
 8005d00:	e7df      	b.n	8005cc2 <_fflush_r+0x22>
 8005d02:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <_fflush_r+0x74>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	bf08      	it	eq
 8005d08:	68ec      	ldreq	r4, [r5, #12]
 8005d0a:	e7da      	b.n	8005cc2 <_fflush_r+0x22>
 8005d0c:	08006098 	.word	0x08006098
 8005d10:	080060b8 	.word	0x080060b8
 8005d14:	08006078 	.word	0x08006078

08005d18 <_lseek_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d07      	ldr	r5, [pc, #28]	; (8005d38 <_lseek_r+0x20>)
 8005d1c:	4604      	mov	r4, r0
 8005d1e:	4608      	mov	r0, r1
 8005d20:	4611      	mov	r1, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	602a      	str	r2, [r5, #0]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f7fa fe53 	bl	80009d2 <_lseek>
 8005d2c:	1c43      	adds	r3, r0, #1
 8005d2e:	d102      	bne.n	8005d36 <_lseek_r+0x1e>
 8005d30:	682b      	ldr	r3, [r5, #0]
 8005d32:	b103      	cbz	r3, 8005d36 <_lseek_r+0x1e>
 8005d34:	6023      	str	r3, [r4, #0]
 8005d36:	bd38      	pop	{r3, r4, r5, pc}
 8005d38:	20004b10 	.word	0x20004b10

08005d3c <__swhatbuf_r>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	460e      	mov	r6, r1
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	2900      	cmp	r1, #0
 8005d46:	b096      	sub	sp, #88	; 0x58
 8005d48:	4614      	mov	r4, r2
 8005d4a:	461d      	mov	r5, r3
 8005d4c:	da08      	bge.n	8005d60 <__swhatbuf_r+0x24>
 8005d4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	602a      	str	r2, [r5, #0]
 8005d56:	061a      	lsls	r2, r3, #24
 8005d58:	d410      	bmi.n	8005d7c <__swhatbuf_r+0x40>
 8005d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5e:	e00e      	b.n	8005d7e <__swhatbuf_r+0x42>
 8005d60:	466a      	mov	r2, sp
 8005d62:	f000 f8bb 	bl	8005edc <_fstat_r>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	dbf1      	blt.n	8005d4e <__swhatbuf_r+0x12>
 8005d6a:	9a01      	ldr	r2, [sp, #4]
 8005d6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d74:	425a      	negs	r2, r3
 8005d76:	415a      	adcs	r2, r3
 8005d78:	602a      	str	r2, [r5, #0]
 8005d7a:	e7ee      	b.n	8005d5a <__swhatbuf_r+0x1e>
 8005d7c:	2340      	movs	r3, #64	; 0x40
 8005d7e:	2000      	movs	r0, #0
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	b016      	add	sp, #88	; 0x58
 8005d84:	bd70      	pop	{r4, r5, r6, pc}
	...

08005d88 <__smakebuf_r>:
 8005d88:	898b      	ldrh	r3, [r1, #12]
 8005d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d8c:	079d      	lsls	r5, r3, #30
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	d507      	bpl.n	8005da4 <__smakebuf_r+0x1c>
 8005d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	6123      	str	r3, [r4, #16]
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	6163      	str	r3, [r4, #20]
 8005da0:	b002      	add	sp, #8
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	ab01      	add	r3, sp, #4
 8005da6:	466a      	mov	r2, sp
 8005da8:	f7ff ffc8 	bl	8005d3c <__swhatbuf_r>
 8005dac:	9900      	ldr	r1, [sp, #0]
 8005dae:	4605      	mov	r5, r0
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7ff fc65 	bl	8005680 <_malloc_r>
 8005db6:	b948      	cbnz	r0, 8005dcc <__smakebuf_r+0x44>
 8005db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dbc:	059a      	lsls	r2, r3, #22
 8005dbe:	d4ef      	bmi.n	8005da0 <__smakebuf_r+0x18>
 8005dc0:	f023 0303 	bic.w	r3, r3, #3
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	81a3      	strh	r3, [r4, #12]
 8005dca:	e7e3      	b.n	8005d94 <__smakebuf_r+0xc>
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <__smakebuf_r+0x7c>)
 8005dce:	62b3      	str	r3, [r6, #40]	; 0x28
 8005dd0:	89a3      	ldrh	r3, [r4, #12]
 8005dd2:	6020      	str	r0, [r4, #0]
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd8:	81a3      	strh	r3, [r4, #12]
 8005dda:	9b00      	ldr	r3, [sp, #0]
 8005ddc:	6163      	str	r3, [r4, #20]
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	6120      	str	r0, [r4, #16]
 8005de2:	b15b      	cbz	r3, 8005dfc <__smakebuf_r+0x74>
 8005de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 f889 	bl	8005f00 <_isatty_r>
 8005dee:	b128      	cbz	r0, 8005dfc <__smakebuf_r+0x74>
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f023 0303 	bic.w	r3, r3, #3
 8005df6:	f043 0301 	orr.w	r3, r3, #1
 8005dfa:	81a3      	strh	r3, [r4, #12]
 8005dfc:	89a0      	ldrh	r0, [r4, #12]
 8005dfe:	4305      	orrs	r5, r0
 8005e00:	81a5      	strh	r5, [r4, #12]
 8005e02:	e7cd      	b.n	8005da0 <__smakebuf_r+0x18>
 8005e04:	08005421 	.word	0x08005421

08005e08 <__malloc_lock>:
 8005e08:	4801      	ldr	r0, [pc, #4]	; (8005e10 <__malloc_lock+0x8>)
 8005e0a:	f7ff bc00 	b.w	800560e <__retarget_lock_acquire_recursive>
 8005e0e:	bf00      	nop
 8005e10:	20004b04 	.word	0x20004b04

08005e14 <__malloc_unlock>:
 8005e14:	4801      	ldr	r0, [pc, #4]	; (8005e1c <__malloc_unlock+0x8>)
 8005e16:	f7ff bbfb 	b.w	8005610 <__retarget_lock_release_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	20004b04 	.word	0x20004b04

08005e20 <_free_r>:
 8005e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e22:	2900      	cmp	r1, #0
 8005e24:	d044      	beq.n	8005eb0 <_free_r+0x90>
 8005e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e2a:	9001      	str	r0, [sp, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e32:	bfb8      	it	lt
 8005e34:	18e4      	addlt	r4, r4, r3
 8005e36:	f7ff ffe7 	bl	8005e08 <__malloc_lock>
 8005e3a:	4a1e      	ldr	r2, [pc, #120]	; (8005eb4 <_free_r+0x94>)
 8005e3c:	9801      	ldr	r0, [sp, #4]
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	b933      	cbnz	r3, 8005e50 <_free_r+0x30>
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	6014      	str	r4, [r2, #0]
 8005e46:	b003      	add	sp, #12
 8005e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e4c:	f7ff bfe2 	b.w	8005e14 <__malloc_unlock>
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	d908      	bls.n	8005e66 <_free_r+0x46>
 8005e54:	6825      	ldr	r5, [r4, #0]
 8005e56:	1961      	adds	r1, r4, r5
 8005e58:	428b      	cmp	r3, r1
 8005e5a:	bf01      	itttt	eq
 8005e5c:	6819      	ldreq	r1, [r3, #0]
 8005e5e:	685b      	ldreq	r3, [r3, #4]
 8005e60:	1949      	addeq	r1, r1, r5
 8005e62:	6021      	streq	r1, [r4, #0]
 8005e64:	e7ed      	b.n	8005e42 <_free_r+0x22>
 8005e66:	461a      	mov	r2, r3
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b10b      	cbz	r3, 8005e70 <_free_r+0x50>
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d9fa      	bls.n	8005e66 <_free_r+0x46>
 8005e70:	6811      	ldr	r1, [r2, #0]
 8005e72:	1855      	adds	r5, r2, r1
 8005e74:	42a5      	cmp	r5, r4
 8005e76:	d10b      	bne.n	8005e90 <_free_r+0x70>
 8005e78:	6824      	ldr	r4, [r4, #0]
 8005e7a:	4421      	add	r1, r4
 8005e7c:	1854      	adds	r4, r2, r1
 8005e7e:	42a3      	cmp	r3, r4
 8005e80:	6011      	str	r1, [r2, #0]
 8005e82:	d1e0      	bne.n	8005e46 <_free_r+0x26>
 8005e84:	681c      	ldr	r4, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	6053      	str	r3, [r2, #4]
 8005e8a:	4421      	add	r1, r4
 8005e8c:	6011      	str	r1, [r2, #0]
 8005e8e:	e7da      	b.n	8005e46 <_free_r+0x26>
 8005e90:	d902      	bls.n	8005e98 <_free_r+0x78>
 8005e92:	230c      	movs	r3, #12
 8005e94:	6003      	str	r3, [r0, #0]
 8005e96:	e7d6      	b.n	8005e46 <_free_r+0x26>
 8005e98:	6825      	ldr	r5, [r4, #0]
 8005e9a:	1961      	adds	r1, r4, r5
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf04      	itt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	6063      	str	r3, [r4, #4]
 8005ea6:	bf04      	itt	eq
 8005ea8:	1949      	addeq	r1, r1, r5
 8005eaa:	6021      	streq	r1, [r4, #0]
 8005eac:	6054      	str	r4, [r2, #4]
 8005eae:	e7ca      	b.n	8005e46 <_free_r+0x26>
 8005eb0:	b003      	add	sp, #12
 8005eb2:	bd30      	pop	{r4, r5, pc}
 8005eb4:	20004b08 	.word	0x20004b08

08005eb8 <_read_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d07      	ldr	r5, [pc, #28]	; (8005ed8 <_read_r+0x20>)
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f7fa fd23 	bl	8000912 <_read>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_read_r+0x1e>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_read_r+0x1e>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	20004b10 	.word	0x20004b10

08005edc <_fstat_r>:
 8005edc:	b538      	push	{r3, r4, r5, lr}
 8005ede:	4d07      	ldr	r5, [pc, #28]	; (8005efc <_fstat_r+0x20>)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	4608      	mov	r0, r1
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	f7fa fd57 	bl	800099c <_fstat>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	d102      	bne.n	8005ef8 <_fstat_r+0x1c>
 8005ef2:	682b      	ldr	r3, [r5, #0]
 8005ef4:	b103      	cbz	r3, 8005ef8 <_fstat_r+0x1c>
 8005ef6:	6023      	str	r3, [r4, #0]
 8005ef8:	bd38      	pop	{r3, r4, r5, pc}
 8005efa:	bf00      	nop
 8005efc:	20004b10 	.word	0x20004b10

08005f00 <_isatty_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d06      	ldr	r5, [pc, #24]	; (8005f1c <_isatty_r+0x1c>)
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	602b      	str	r3, [r5, #0]
 8005f0c:	f7fa fd56 	bl	80009bc <_isatty>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_isatty_r+0x1a>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_isatty_r+0x1a>
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	20004b10 	.word	0x20004b10

08005f20 <_init>:
 8005f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f22:	bf00      	nop
 8005f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f26:	bc08      	pop	{r3}
 8005f28:	469e      	mov	lr, r3
 8005f2a:	4770      	bx	lr

08005f2c <_fini>:
 8005f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2e:	bf00      	nop
 8005f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f32:	bc08      	pop	{r3}
 8005f34:	469e      	mov	lr, r3
 8005f36:	4770      	bx	lr
