
gps-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005908  08005908  00015908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e4  080059e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059ec  080059ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059ec  080059ec  000159ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a8c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b00  20004b00  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000141f8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e37  00000000  00000000  0003429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f48  00000000  00000000  000370d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e20  00000000  00000000  00038020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002636b  00000000  00000000  00038e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123c5  00000000  00000000  0005f1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd66e  00000000  00000000  00071570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ebde  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000444c  00000000  00000000  0014ec30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080058f0 	.word	0x080058f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080058f0 	.word	0x080058f0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <MX_FREERTOS_Init+0x18>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <MX_FREERTOS_Init+0x1c>)
 80004fe:	f001 ff19 	bl	8002334 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a03      	ldr	r2, [pc, #12]	; (8000514 <MX_FREERTOS_Init+0x20>)
 8000506:	6013      	str	r3, [r2, #0]
  */

/**
  * @}
  */
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	08005944 	.word	0x08005944
 8000510:	08000519 	.word	0x08000519
 8000514:	20000090 	.word	0x20000090

08000518 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000520:	2108      	movs	r1, #8
 8000522:	4804      	ldr	r0, [pc, #16]	; (8000534 <StartDefaultTask+0x1c>)
 8000524:	f000 fdb1 	bl	800108a <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052c:	f001 ff94 	bl	8002458 <osDelay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000530:	e7f6      	b.n	8000520 <StartDefaultTask+0x8>
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_GPIO_Init+0x7c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <MX_GPIO_Init+0x7c>)
 8000558:	f043 0310 	orr.w	r3, r3, #16
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <MX_GPIO_Init+0x7c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0310 	and.w	r3, r3, #16
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_GPIO_Init+0x7c>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <MX_GPIO_Init+0x7c>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_GPIO_Init+0x7c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2108      	movs	r1, #8
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <MX_GPIO_Init+0x80>)
 800058c:	f000 fd64 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000590:	2308      	movs	r3, #8
 8000592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	2301      	movs	r3, #1
 8000596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059c:	2300      	movs	r3, #0
 800059e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <MX_GPIO_Init+0x80>)
 80005a8:	f000 fbaa 	bl	8000d00 <HAL_GPIO_Init>

}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40021000 	.word	0x40021000

080005bc <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* redirect to USART */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80005c4:	1d39      	adds	r1, r7, #4
 80005c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ca:	2201      	movs	r2, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <__io_putchar+0x20>)
 80005ce:	f001 fa1c 	bl	8001a0a <HAL_UART_Transmit>
  return ch;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000098 	.word	0x20000098

080005e0 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 30000))
 80005ea:	bf00      	nop
 80005ec:	1df9      	adds	r1, r7, #7
 80005ee:	f247 5330 	movw	r3, #30000	; 0x7530
 80005f2:	2201      	movs	r2, #1
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <__io_getchar+0x2c>)
 80005f6:	f001 fa9a 	bl	8001b2e <HAL_UART_Receive>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f5      	bne.n	80005ec <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8000600:	79fb      	ldrb	r3, [r7, #7]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000098 	.word	0x20000098

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	osThreadId MainThreadId = NULL;
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fa19 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f811 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f7ff ff89 	bl	8000538 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 f977 	bl	8000918 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("++Start GPS Tracker++\r\n");
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <main+0x30>)
 800062c:	f004 fdf2 	bl	8005214 <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000630:	f001 fe36 	bl	80022a0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000634:	f7ff ff5e 	bl	80004f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000638:	f001 fe56 	bl	80022e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063c:	e7fe      	b.n	800063c <main+0x2c>
 800063e:	bf00      	nop
 8000640:	08005914 	.word	0x08005914

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0320 	add.w	r3, r7, #32
 800064e:	2230      	movs	r2, #48	; 0x30
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fcd3 	bl	8004ffe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	4b23      	ldr	r3, [pc, #140]	; (80006fc <SystemClock_Config+0xb8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	4a22      	ldr	r2, [pc, #136]	; (80006fc <SystemClock_Config+0xb8>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	; 0x40
 8000678:	4b20      	ldr	r3, [pc, #128]	; (80006fc <SystemClock_Config+0xb8>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <SystemClock_Config+0xbc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <SystemClock_Config+0xbc>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <SystemClock_Config+0xbc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fd01 	bl	80010c0 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006c4:	f000 f81e 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 ff64 	bl	80015b0 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ee:	f000 f809 	bl	8000704 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_MspInit+0x54>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <HAL_MspInit+0x54>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <HAL_MspInit+0x54>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_MspInit+0x54>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <HAL_MspInit+0x54>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_MspInit+0x54>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	210f      	movs	r1, #15
 8000752:	f06f 0001 	mvn.w	r0, #1
 8000756:	f000 faaa 	bl	8000cae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800076c:	e7fe      	b.n	800076c <NMI_Handler+0x4>

0800076e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <MemManage_Handler+0x4>

0800077a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <BusFault_Handler+0x4>

08000780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <UsageFault_Handler+0x4>

08000786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000798:	f000 f9ac 	bl	8000af4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800079c:	f003 fa94 	bl	8003cc8 <xTaskGetSchedulerState>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d001      	beq.n	80007aa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007a6:	f004 f87f 	bl	80048a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}

080007ae <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	e00a      	b.n	80007d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007c0:	f7ff ff0e 	bl	80005e0 <__io_getchar>
 80007c4:	4601      	mov	r1, r0
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	60ba      	str	r2, [r7, #8]
 80007cc:	b2ca      	uxtb	r2, r1
 80007ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	3301      	adds	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbf0      	blt.n	80007c0 <_read+0x12>
  }

  return len;
 80007de:	687b      	ldr	r3, [r7, #4]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3718      	adds	r7, #24
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	e009      	b.n	800080e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	1c5a      	adds	r2, r3, #1
 80007fe:	60ba      	str	r2, [r7, #8]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff feda 	bl	80005bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697a      	ldr	r2, [r7, #20]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	429a      	cmp	r2, r3
 8000814:	dbf1      	blt.n	80007fa <_write+0x12>
  }
  return len;
 8000816:	687b      	ldr	r3, [r7, #4]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <_close>:

int _close(int file)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800082c:	4618      	mov	r0, r3
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000848:	605a      	str	r2, [r3, #4]
  return 0;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <_isatty>:

int _isatty(int file)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	4618      	mov	r0, r3
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800086e:	b480      	push	{r7}
 8000870:	b085      	sub	sp, #20
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <_sbrk+0x5c>)
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <_sbrk+0x60>)
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <_sbrk+0x64>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <_sbrk+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d207      	bcs.n	80008c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b8:	f004 fa70 	bl	8004d9c <__errno>
 80008bc:	4603      	mov	r3, r0
 80008be:	220c      	movs	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	e009      	b.n	80008dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <_sbrk+0x64>)
 80008d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20030000 	.word	0x20030000
 80008e8:	00000400 	.word	0x00000400
 80008ec:	20000094 	.word	0x20000094
 80008f0:	20004b00 	.word	0x20004b00

080008f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <SystemInit+0x20>)
 80008fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fe:	4a05      	ldr	r2, [pc, #20]	; (8000914 <SystemInit+0x20>)
 8000900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART2_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000950:	f001 f80e 	bl	8001970 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f7ff fed3 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000098 	.word	0x20000098
 8000968:	40004400 	.word	0x40004400

0800096c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0x84>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d12b      	bne.n	80009e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <HAL_UART_MspInit+0x88>)
 8000998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c6:	230c      	movs	r3, #12
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d6:	2307      	movs	r3, #7
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <HAL_UART_MspInit+0x8c>)
 80009e2:	f000 f98d 	bl	8000d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40004400 	.word	0x40004400
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020000 	.word	0x40020000

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a02:	490e      	ldr	r1, [pc, #56]	; (8000a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	; (8000a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a18:	4c0b      	ldr	r4, [pc, #44]	; (8000a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a26:	f7ff ff65 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f004 fab3 	bl	8004f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fdef 	bl	8000610 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a40:	080059f4 	.word	0x080059f4
  ldr r2, =_sbss
 8000a44:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a48:	20004b00 	.word	0x20004b00

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f90d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fe44 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f917 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f8ed 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	200000dc 	.word	0x200000dc

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	200000dc 	.word	0x200000dc

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff47 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff5c 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffb0 	bl	8000c54 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e177      	b.n	800100c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 8166 	bne.w	8001006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d130      	bne.n	8000db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80c0 	beq.w	8001006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b66      	ldr	r3, [pc, #408]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a65      	ldr	r2, [pc, #404]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b63      	ldr	r3, [pc, #396]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a61      	ldr	r2, [pc, #388]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a58      	ldr	r2, [pc, #352]	; (800102c <HAL_GPIO_Init+0x32c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d037      	beq.n	8000f3e <HAL_GPIO_Init+0x23e>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a57      	ldr	r2, [pc, #348]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d031      	beq.n	8000f3a <HAL_GPIO_Init+0x23a>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a56      	ldr	r2, [pc, #344]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d02b      	beq.n	8000f36 <HAL_GPIO_Init+0x236>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a55      	ldr	r2, [pc, #340]	; (8001038 <HAL_GPIO_Init+0x338>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d025      	beq.n	8000f32 <HAL_GPIO_Init+0x232>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a54      	ldr	r2, [pc, #336]	; (800103c <HAL_GPIO_Init+0x33c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d01f      	beq.n	8000f2e <HAL_GPIO_Init+0x22e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a53      	ldr	r2, [pc, #332]	; (8001040 <HAL_GPIO_Init+0x340>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d019      	beq.n	8000f2a <HAL_GPIO_Init+0x22a>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a52      	ldr	r2, [pc, #328]	; (8001044 <HAL_GPIO_Init+0x344>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d013      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_GPIO_Init+0x348>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00d      	beq.n	8000f22 <HAL_GPIO_Init+0x222>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a50      	ldr	r2, [pc, #320]	; (800104c <HAL_GPIO_Init+0x34c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d007      	beq.n	8000f1e <HAL_GPIO_Init+0x21e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x350>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d101      	bne.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000f16:	2309      	movs	r3, #9
 8000f18:	e012      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	e010      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f1e:	2308      	movs	r3, #8
 8000f20:	e00e      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f22:	2307      	movs	r3, #7
 8000f24:	e00c      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f26:	2306      	movs	r3, #6
 8000f28:	e00a      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	e008      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e006      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e004      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <HAL_GPIO_Init+0x240>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	69fa      	ldr	r2, [r7, #28]
 8000f42:	f002 0203 	and.w	r2, r2, #3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f50:	4935      	ldr	r1, [pc, #212]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f82:	4a34      	ldr	r2, [pc, #208]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f88:	4b32      	ldr	r3, [pc, #200]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fac:	4a29      	ldr	r2, [pc, #164]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_GPIO_Init+0x354>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_GPIO_Init+0x354>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b0f      	cmp	r3, #15
 8001010:	f67f ae84 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40013800 	.word	0x40013800
 800102c:	40020000 	.word	0x40020000
 8001030:	40020400 	.word	0x40020400
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40021000 	.word	0x40021000
 8001040:	40021400 	.word	0x40021400
 8001044:	40021800 	.word	0x40021800
 8001048:	40021c00 	.word	0x40021c00
 800104c:	40022000 	.word	0x40022000
 8001050:	40022400 	.word	0x40022400
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001074:	e003      	b.n	800107e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	619a      	str	r2, [r3, #24]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800108a:	b480      	push	{r7}
 800108c:	b085      	sub	sp, #20
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800109c:	887a      	ldrh	r2, [r7, #2]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4013      	ands	r3, r2
 80010a2:	041a      	lsls	r2, r3, #16
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	400b      	ands	r3, r1
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	619a      	str	r2, [r3, #24]
}
 80010b2:	bf00      	nop
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e267      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d075      	beq.n	80011ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010de:	4b88      	ldr	r3, [pc, #544]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d00c      	beq.n	8001104 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ea:	4b85      	ldr	r3, [pc, #532]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d112      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010f6:	4b82      	ldr	r3, [pc, #520]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001102:	d10b      	bne.n	800111c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001104:	4b7e      	ldr	r3, [pc, #504]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d05b      	beq.n	80011c8 <HAL_RCC_OscConfig+0x108>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d157      	bne.n	80011c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e242      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001124:	d106      	bne.n	8001134 <HAL_RCC_OscConfig+0x74>
 8001126:	4b76      	ldr	r3, [pc, #472]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a75      	ldr	r2, [pc, #468]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0x98>
 800113e:	4b70      	ldr	r3, [pc, #448]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a6f      	ldr	r2, [pc, #444]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b6d      	ldr	r3, [pc, #436]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6c      	ldr	r2, [pc, #432]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0xb0>
 8001158:	4b69      	ldr	r3, [pc, #420]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a68      	ldr	r2, [pc, #416]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b66      	ldr	r3, [pc, #408]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a65      	ldr	r2, [pc, #404]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcd0 	bl	8000b1c <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fccc 	bl	8000b1c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e207      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xc0>
 800119e:	e014      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fcbc 	bl	8000b1c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fcb8 	bl	8000b1c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1f3      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	4b51      	ldr	r3, [pc, #324]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0xe8>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d063      	beq.n	800129e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011d6:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e2:	4b47      	ldr	r3, [pc, #284]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d11c      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ee:	4b44      	ldr	r3, [pc, #272]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b41      	ldr	r3, [pc, #260]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e1c7      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	691b      	ldr	r3, [r3, #16]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4937      	ldr	r1, [pc, #220]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e03a      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b34      	ldr	r3, [pc, #208]	; (8001304 <HAL_RCC_OscConfig+0x244>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001236:	f7ff fc71 	bl	8000b1c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fc6d 	bl	8000b1c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e1a8      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b28      	ldr	r3, [pc, #160]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	691b      	ldr	r3, [r3, #16]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4925      	ldr	r1, [pc, #148]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <HAL_RCC_OscConfig+0x244>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fc50 	bl	8000b1c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fc4c 	bl	8000b1c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e187      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d036      	beq.n	8001318 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d016      	beq.n	80012e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <HAL_RCC_OscConfig+0x248>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b8:	f7ff fc30 	bl	8000b1c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fc2c 	bl	8000b1c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e167      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_RCC_OscConfig+0x240>)
 80012d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x200>
 80012de:	e01b      	b.n	8001318 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e0:	4b09      	ldr	r3, [pc, #36]	; (8001308 <HAL_RCC_OscConfig+0x248>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fc19 	bl	8000b1c <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ec:	e00e      	b.n	800130c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ee:	f7ff fc15 	bl	8000b1c <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d907      	bls.n	800130c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e150      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
 8001300:	40023800 	.word	0x40023800
 8001304:	42470000 	.word	0x42470000
 8001308:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130c:	4b88      	ldr	r3, [pc, #544]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 800130e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ea      	bne.n	80012ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	f000 8097 	beq.w	8001454 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132a:	4b81      	ldr	r3, [pc, #516]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10f      	bne.n	8001356 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b7d      	ldr	r3, [pc, #500]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a7c      	ldr	r2, [pc, #496]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b7a      	ldr	r3, [pc, #488]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001352:	2301      	movs	r3, #1
 8001354:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b77      	ldr	r3, [pc, #476]	; (8001534 <HAL_RCC_OscConfig+0x474>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b74      	ldr	r3, [pc, #464]	; (8001534 <HAL_RCC_OscConfig+0x474>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a73      	ldr	r2, [pc, #460]	; (8001534 <HAL_RCC_OscConfig+0x474>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800136e:	f7ff fbd5 	bl	8000b1c <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001376:	f7ff fbd1 	bl	8000b1c <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e10c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001388:	4b6a      	ldr	r3, [pc, #424]	; (8001534 <HAL_RCC_OscConfig+0x474>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x2ea>
 800139c:	4b64      	ldr	r3, [pc, #400]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	4a63      	ldr	r2, [pc, #396]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6713      	str	r3, [r2, #112]	; 0x70
 80013a8:	e01c      	b.n	80013e4 <HAL_RCC_OscConfig+0x324>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x30c>
 80013b2:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b6:	4a5e      	ldr	r2, [pc, #376]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6713      	str	r3, [r2, #112]	; 0x70
 80013be:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013c2:	4a5b      	ldr	r2, [pc, #364]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ca:	e00b      	b.n	80013e4 <HAL_RCC_OscConfig+0x324>
 80013cc:	4b58      	ldr	r3, [pc, #352]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a57      	ldr	r2, [pc, #348]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	4b55      	ldr	r3, [pc, #340]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	4a54      	ldr	r2, [pc, #336]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d015      	beq.n	8001418 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fb96 	bl	8000b1c <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f2:	e00a      	b.n	800140a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013f4:	f7ff fb92 	bl	8000b1c <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001402:	4293      	cmp	r3, r2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e0cb      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 800140c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0ee      	beq.n	80013f4 <HAL_RCC_OscConfig+0x334>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fb80 	bl	8000b1c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fb7c 	bl	8000b1c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0b5      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ee      	bne.n	8001420 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d105      	bne.n	8001454 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001448:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a38      	ldr	r2, [pc, #224]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 800144e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a1 	beq.w	80015a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b08      	cmp	r3, #8
 8001468:	d05c      	beq.n	8001524 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d141      	bne.n	80014f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <HAL_RCC_OscConfig+0x478>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fb50 	bl	8000b1c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fb4c 	bl	8000b1c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e087      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69da      	ldr	r2, [r3, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	3b01      	subs	r3, #1
 80014b8:	041b      	lsls	r3, r3, #16
 80014ba:	431a      	orrs	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c0:	061b      	lsls	r3, r3, #24
 80014c2:	491b      	ldr	r1, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014c8:	4b1b      	ldr	r3, [pc, #108]	; (8001538 <HAL_RCC_OscConfig+0x478>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb25 	bl	8000b1c <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d6:	f7ff fb21 	bl	8000b1c <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e05c      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x416>
 80014f4:	e054      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <HAL_RCC_OscConfig+0x478>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb0e 	bl	8000b1c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001504:	f7ff fb0a 	bl	8000b1c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e045      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_RCC_OscConfig+0x470>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x444>
 8001522:	e03d      	b.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e038      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
 8001530:	40023800 	.word	0x40023800
 8001534:	40007000 	.word	0x40007000
 8001538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_RCC_OscConfig+0x4ec>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d028      	beq.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d121      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d11a      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800156c:	4013      	ands	r3, r2
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001574:	4293      	cmp	r3, r2
 8001576:	d111      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	085b      	lsrs	r3, r3, #1
 8001584:	3b01      	subs	r3, #1
 8001586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d107      	bne.n	800159c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0cc      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d90c      	bls.n	80015ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b65      	ldr	r3, [pc, #404]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800160e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4a52      	ldr	r2, [pc, #328]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001626:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d044      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d119      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d003      	beq.n	800166e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166a:	2b03      	cmp	r3, #3
 800166c:	d107      	bne.n	800167e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167e:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e067      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f023 0203 	bic.w	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	4934      	ldr	r1, [pc, #208]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a0:	f7ff fa3c 	bl	8000b1c <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a6:	e00a      	b.n	80016be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a8:	f7ff fa38 	bl	8000b1c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e04f      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016be:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 020c 	and.w	r2, r3, #12
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d1eb      	bne.n	80016a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d20c      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490a      	ldr	r1, [pc, #40]	; (8001770 <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f99c 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00
 800176c:	40023800 	.word	0x40023800
 8001770:	08005968 	.word	0x08005968
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001780:	b090      	sub	sp, #64	; 0x40
 8001782:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	637b      	str	r3, [r7, #52]	; 0x34
 8001788:	2300      	movs	r3, #0
 800178a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800178c:	2300      	movs	r3, #0
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d00d      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x40>
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	f200 80a1 	bhi.w	80018e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x34>
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017ae:	e09b      	b.n	80018e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_GetSysClockFreq+0x184>)
 80017b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017b4:	e09b      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b6:	4b53      	ldr	r3, [pc, #332]	; (8001904 <HAL_RCC_GetSysClockFreq+0x188>)
 80017b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ba:	e098      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017bc:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017c6:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d028      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b4a      	ldr	r3, [pc, #296]	; (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	2200      	movs	r2, #0
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	627a      	str	r2, [r7, #36]	; 0x24
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80017e4:	2100      	movs	r1, #0
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e8:	fb03 f201 	mul.w	r2, r3, r1
 80017ec:	2300      	movs	r3, #0
 80017ee:	fb00 f303 	mul.w	r3, r0, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	4a43      	ldr	r2, [pc, #268]	; (8001904 <HAL_RCC_GetSysClockFreq+0x188>)
 80017f6:	fba0 1202 	umull	r1, r2, r0, r2
 80017fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017fc:	460a      	mov	r2, r1
 80017fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8001800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001802:	4413      	add	r3, r2
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	2200      	movs	r2, #0
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	61fa      	str	r2, [r7, #28]
 800180e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001812:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001816:	f7fe fceb 	bl	80001f0 <__aeabi_uldivmod>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4613      	mov	r3, r2
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001822:	e053      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	2200      	movs	r2, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	617a      	str	r2, [r7, #20]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001836:	f04f 0b00 	mov.w	fp, #0
 800183a:	4652      	mov	r2, sl
 800183c:	465b      	mov	r3, fp
 800183e:	f04f 0000 	mov.w	r0, #0
 8001842:	f04f 0100 	mov.w	r1, #0
 8001846:	0159      	lsls	r1, r3, #5
 8001848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800184c:	0150      	lsls	r0, r2, #5
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	ebb2 080a 	subs.w	r8, r2, sl
 8001856:	eb63 090b 	sbc.w	r9, r3, fp
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001866:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800186a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800186e:	ebb2 0408 	subs.w	r4, r2, r8
 8001872:	eb63 0509 	sbc.w	r5, r3, r9
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	00eb      	lsls	r3, r5, #3
 8001880:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001884:	00e2      	lsls	r2, r4, #3
 8001886:	4614      	mov	r4, r2
 8001888:	461d      	mov	r5, r3
 800188a:	eb14 030a 	adds.w	r3, r4, sl
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	eb45 030b 	adc.w	r3, r5, fp
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018a2:	4629      	mov	r1, r5
 80018a4:	028b      	lsls	r3, r1, #10
 80018a6:	4621      	mov	r1, r4
 80018a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018ac:	4621      	mov	r1, r4
 80018ae:	028a      	lsls	r2, r1, #10
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b6:	2200      	movs	r2, #0
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	60fa      	str	r2, [r7, #12]
 80018bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c0:	f7fe fc96 	bl	80001f0 <__aeabi_uldivmod>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4613      	mov	r3, r2
 80018ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_RCC_GetSysClockFreq+0x180>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	0c1b      	lsrs	r3, r3, #16
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	3301      	adds	r3, #1
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80018dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018e6:	e002      	b.n	80018ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_RCC_GetSysClockFreq+0x184>)
 80018ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3740      	adds	r7, #64	; 0x40
 80018f4:	46bd      	mov	sp, r7
 80018f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800
 8001900:	00f42400 	.word	0x00f42400
 8001904:	017d7840 	.word	0x017d7840

08001908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_RCC_GetHCLKFreq+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000000 	.word	0x20000000

08001920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001924:	f7ff fff0 	bl	8001908 <HAL_RCC_GetHCLKFreq>
 8001928:	4602      	mov	r2, r0
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	0a9b      	lsrs	r3, r3, #10
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	4903      	ldr	r1, [pc, #12]	; (8001944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001936:	5ccb      	ldrb	r3, [r1, r3]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	08005978 	.word	0x08005978

08001948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800194c:	f7ff ffdc 	bl	8001908 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0b5b      	lsrs	r3, r3, #13
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	; (800196c <HAL_RCC_GetPCLK2Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	08005978 	.word	0x08005978

08001970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e03f      	b.n	8001a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe ffe8 	bl	800096c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2224      	movs	r2, #36	; 0x24
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f9cb 	bl	8001d50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2220      	movs	r2, #32
 80019fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b08a      	sub	sp, #40	; 0x28
 8001a0e:	af02      	add	r7, sp, #8
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	d17c      	bne.n	8001b24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <HAL_UART_Transmit+0x2c>
 8001a30:	88fb      	ldrh	r3, [r7, #6]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e075      	b.n	8001b26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_UART_Transmit+0x3e>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e06e      	b.n	8001b26 <HAL_UART_Transmit+0x11c>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2221      	movs	r2, #33	; 0x21
 8001a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a5e:	f7ff f85d 	bl	8000b1c <HAL_GetTick>
 8001a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	88fa      	ldrh	r2, [r7, #6]
 8001a68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a78:	d108      	bne.n	8001a8c <HAL_UART_Transmit+0x82>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d104      	bne.n	8001a8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	e003      	b.n	8001a94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001a9c:	e02a      	b.n	8001af4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 f8e2 	bl	8001c72 <UART_WaitOnFlagUntilTimeout>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e036      	b.n	8001b26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10b      	bne.n	8001ad6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	e007      	b.n	8001ae6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1cf      	bne.n	8001a9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2200      	movs	r2, #0
 8001b06:	2140      	movs	r1, #64	; 0x40
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f8b2 	bl	8001c72 <UART_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e006      	b.n	8001b26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2220      	movs	r2, #32
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
  }
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b08a      	sub	sp, #40	; 0x28
 8001b32:	af02      	add	r7, sp, #8
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	f040 808c 	bne.w	8001c68 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <HAL_UART_Receive+0x2e>
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e084      	b.n	8001c6a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_UART_Receive+0x40>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e07d      	b.n	8001c6a <HAL_UART_Receive+0x13c>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2222      	movs	r2, #34	; 0x22
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b8a:	f7fe ffc7 	bl	8000b1c <HAL_GetTick>
 8001b8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	88fa      	ldrh	r2, [r7, #6]
 8001b9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba4:	d108      	bne.n	8001bb8 <HAL_UART_Receive+0x8a>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d104      	bne.n	8001bb8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	e003      	b.n	8001bc0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001bc8:	e043      	b.n	8001c52 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2120      	movs	r1, #32
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f84c 	bl	8001c72 <UART_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e042      	b.n	8001c6a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	3302      	adds	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	e01f      	b.n	8001c44 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0c:	d007      	beq.n	8001c1e <HAL_UART_Receive+0xf0>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10a      	bne.n	8001c2c <HAL_UART_Receive+0xfe>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e008      	b.n	8001c3e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1b6      	bne.n	8001bca <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2220      	movs	r2, #32
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	e000      	b.n	8001c6a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b090      	sub	sp, #64	; 0x40
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c82:	e050      	b.n	8001d26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c8a:	d04c      	beq.n	8001d26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c92:	f7fe ff43 	bl	8000b1c <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d241      	bcs.n	8001d26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	330c      	adds	r3, #12
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	e853 3f00 	ldrex	r3, [r3]
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	330c      	adds	r3, #12
 8001cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cc2:	637a      	str	r2, [r7, #52]	; 0x34
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cca:	e841 2300 	strex	r3, r2, [r1]
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e5      	bne.n	8001ca2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3314      	adds	r3, #20
 8001cdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	e853 3f00 	ldrex	r3, [r3]
 8001ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3314      	adds	r3, #20
 8001cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cf6:	623a      	str	r2, [r7, #32]
 8001cf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cfa:	69f9      	ldr	r1, [r7, #28]
 8001cfc:	6a3a      	ldr	r2, [r7, #32]
 8001cfe:	e841 2300 	strex	r3, r2, [r1]
 8001d02:	61bb      	str	r3, [r7, #24]
   return(result);
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1e5      	bne.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e00f      	b.n	8001d46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	68ba      	ldr	r2, [r7, #8]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	bf0c      	ite	eq
 8001d36:	2301      	moveq	r3, #1
 8001d38:	2300      	movne	r3, #0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d09f      	beq.n	8001c84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3740      	adds	r7, #64	; 0x40
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d54:	b0c0      	sub	sp, #256	; 0x100
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6c:	68d9      	ldr	r1, [r3, #12]
 8001d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	ea40 0301 	orr.w	r3, r0, r1
 8001d78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001da8:	f021 010c 	bic.w	r1, r1, #12
 8001dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001db6:	430b      	orrs	r3, r1
 8001db8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dca:	6999      	ldr	r1, [r3, #24]
 8001dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	ea40 0301 	orr.w	r3, r0, r1
 8001dd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	4b8f      	ldr	r3, [pc, #572]	; (800201c <UART_SetConfig+0x2cc>)
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d005      	beq.n	8001df0 <UART_SetConfig+0xa0>
 8001de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b8d      	ldr	r3, [pc, #564]	; (8002020 <UART_SetConfig+0x2d0>)
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d104      	bne.n	8001dfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001df0:	f7ff fdaa 	bl	8001948 <HAL_RCC_GetPCLK2Freq>
 8001df4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001df8:	e003      	b.n	8001e02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dfa:	f7ff fd91 	bl	8001920 <HAL_RCC_GetPCLK1Freq>
 8001dfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e0c:	f040 810c 	bne.w	8002028 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e14:	2200      	movs	r2, #0
 8001e16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e22:	4622      	mov	r2, r4
 8001e24:	462b      	mov	r3, r5
 8001e26:	1891      	adds	r1, r2, r2
 8001e28:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e2a:	415b      	adcs	r3, r3
 8001e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e32:	4621      	mov	r1, r4
 8001e34:	eb12 0801 	adds.w	r8, r2, r1
 8001e38:	4629      	mov	r1, r5
 8001e3a:	eb43 0901 	adc.w	r9, r3, r1
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e52:	4690      	mov	r8, r2
 8001e54:	4699      	mov	r9, r3
 8001e56:	4623      	mov	r3, r4
 8001e58:	eb18 0303 	adds.w	r3, r8, r3
 8001e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e60:	462b      	mov	r3, r5
 8001e62:	eb49 0303 	adc.w	r3, r9, r3
 8001e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e7e:	460b      	mov	r3, r1
 8001e80:	18db      	adds	r3, r3, r3
 8001e82:	653b      	str	r3, [r7, #80]	; 0x50
 8001e84:	4613      	mov	r3, r2
 8001e86:	eb42 0303 	adc.w	r3, r2, r3
 8001e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8001e8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e94:	f7fe f9ac 	bl	80001f0 <__aeabi_uldivmod>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4b61      	ldr	r3, [pc, #388]	; (8002024 <UART_SetConfig+0x2d4>)
 8001e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	011c      	lsls	r4, r3, #4
 8001ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001eb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001eb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001eb8:	4642      	mov	r2, r8
 8001eba:	464b      	mov	r3, r9
 8001ebc:	1891      	adds	r1, r2, r2
 8001ebe:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ec0:	415b      	adcs	r3, r3
 8001ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ec4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ec8:	4641      	mov	r1, r8
 8001eca:	eb12 0a01 	adds.w	sl, r2, r1
 8001ece:	4649      	mov	r1, r9
 8001ed0:	eb43 0b01 	adc.w	fp, r3, r1
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	f04f 0300 	mov.w	r3, #0
 8001edc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ee0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ee4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ee8:	4692      	mov	sl, r2
 8001eea:	469b      	mov	fp, r3
 8001eec:	4643      	mov	r3, r8
 8001eee:	eb1a 0303 	adds.w	r3, sl, r3
 8001ef2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	eb4b 0303 	adc.w	r3, fp, r3
 8001efc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f14:	460b      	mov	r3, r1
 8001f16:	18db      	adds	r3, r3, r3
 8001f18:	643b      	str	r3, [r7, #64]	; 0x40
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	eb42 0303 	adc.w	r3, r2, r3
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
 8001f22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f2a:	f7fe f961 	bl	80001f0 <__aeabi_uldivmod>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4611      	mov	r1, r2
 8001f34:	4b3b      	ldr	r3, [pc, #236]	; (8002024 <UART_SetConfig+0x2d4>)
 8001f36:	fba3 2301 	umull	r2, r3, r3, r1
 8001f3a:	095b      	lsrs	r3, r3, #5
 8001f3c:	2264      	movs	r2, #100	; 0x64
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
 8001f42:	1acb      	subs	r3, r1, r3
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f4a:	4b36      	ldr	r3, [pc, #216]	; (8002024 <UART_SetConfig+0x2d4>)
 8001f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f58:	441c      	add	r4, r3
 8001f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f6c:	4642      	mov	r2, r8
 8001f6e:	464b      	mov	r3, r9
 8001f70:	1891      	adds	r1, r2, r2
 8001f72:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f74:	415b      	adcs	r3, r3
 8001f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	1851      	adds	r1, r2, r1
 8001f80:	6339      	str	r1, [r7, #48]	; 0x30
 8001f82:	4649      	mov	r1, r9
 8001f84:	414b      	adcs	r3, r1
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f04f 0300 	mov.w	r3, #0
 8001f90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f94:	4659      	mov	r1, fp
 8001f96:	00cb      	lsls	r3, r1, #3
 8001f98:	4651      	mov	r1, sl
 8001f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f9e:	4651      	mov	r1, sl
 8001fa0:	00ca      	lsls	r2, r1, #3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4642      	mov	r2, r8
 8001faa:	189b      	adds	r3, r3, r2
 8001fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fb0:	464b      	mov	r3, r9
 8001fb2:	460a      	mov	r2, r1
 8001fb4:	eb42 0303 	adc.w	r3, r2, r3
 8001fb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001fc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001fcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	18db      	adds	r3, r3, r3
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	eb42 0303 	adc.w	r3, r2, r3
 8001fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fe2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001fe6:	f7fe f903 	bl	80001f0 <__aeabi_uldivmod>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <UART_SetConfig+0x2d4>)
 8001ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	2164      	movs	r1, #100	; 0x64
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	3332      	adds	r3, #50	; 0x32
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <UART_SetConfig+0x2d4>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	f003 0207 	and.w	r2, r3, #7
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4422      	add	r2, r4
 8002016:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002018:	e105      	b.n	8002226 <UART_SetConfig+0x4d6>
 800201a:	bf00      	nop
 800201c:	40011000 	.word	0x40011000
 8002020:	40011400 	.word	0x40011400
 8002024:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800202c:	2200      	movs	r2, #0
 800202e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002032:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002036:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800203a:	4642      	mov	r2, r8
 800203c:	464b      	mov	r3, r9
 800203e:	1891      	adds	r1, r2, r2
 8002040:	6239      	str	r1, [r7, #32]
 8002042:	415b      	adcs	r3, r3
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
 8002046:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800204a:	4641      	mov	r1, r8
 800204c:	1854      	adds	r4, r2, r1
 800204e:	4649      	mov	r1, r9
 8002050:	eb43 0501 	adc.w	r5, r3, r1
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	00eb      	lsls	r3, r5, #3
 800205e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002062:	00e2      	lsls	r2, r4, #3
 8002064:	4614      	mov	r4, r2
 8002066:	461d      	mov	r5, r3
 8002068:	4643      	mov	r3, r8
 800206a:	18e3      	adds	r3, r4, r3
 800206c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002070:	464b      	mov	r3, r9
 8002072:	eb45 0303 	adc.w	r3, r5, r3
 8002076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800207a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002086:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002096:	4629      	mov	r1, r5
 8002098:	008b      	lsls	r3, r1, #2
 800209a:	4621      	mov	r1, r4
 800209c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020a0:	4621      	mov	r1, r4
 80020a2:	008a      	lsls	r2, r1, #2
 80020a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020a8:	f7fe f8a2 	bl	80001f0 <__aeabi_uldivmod>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4b60      	ldr	r3, [pc, #384]	; (8002234 <UART_SetConfig+0x4e4>)
 80020b2:	fba3 2302 	umull	r2, r3, r3, r2
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	011c      	lsls	r4, r3, #4
 80020ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020be:	2200      	movs	r2, #0
 80020c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80020cc:	4642      	mov	r2, r8
 80020ce:	464b      	mov	r3, r9
 80020d0:	1891      	adds	r1, r2, r2
 80020d2:	61b9      	str	r1, [r7, #24]
 80020d4:	415b      	adcs	r3, r3
 80020d6:	61fb      	str	r3, [r7, #28]
 80020d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020dc:	4641      	mov	r1, r8
 80020de:	1851      	adds	r1, r2, r1
 80020e0:	6139      	str	r1, [r7, #16]
 80020e2:	4649      	mov	r1, r9
 80020e4:	414b      	adcs	r3, r1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020f4:	4659      	mov	r1, fp
 80020f6:	00cb      	lsls	r3, r1, #3
 80020f8:	4651      	mov	r1, sl
 80020fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020fe:	4651      	mov	r1, sl
 8002100:	00ca      	lsls	r2, r1, #3
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	4603      	mov	r3, r0
 8002108:	4642      	mov	r2, r8
 800210a:	189b      	adds	r3, r3, r2
 800210c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	460a      	mov	r2, r1
 8002114:	eb42 0303 	adc.w	r3, r2, r3
 8002118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	67bb      	str	r3, [r7, #120]	; 0x78
 8002126:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002134:	4649      	mov	r1, r9
 8002136:	008b      	lsls	r3, r1, #2
 8002138:	4641      	mov	r1, r8
 800213a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800213e:	4641      	mov	r1, r8
 8002140:	008a      	lsls	r2, r1, #2
 8002142:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002146:	f7fe f853 	bl	80001f0 <__aeabi_uldivmod>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <UART_SetConfig+0x4e4>)
 8002150:	fba3 1302 	umull	r1, r3, r3, r2
 8002154:	095b      	lsrs	r3, r3, #5
 8002156:	2164      	movs	r1, #100	; 0x64
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	3332      	adds	r3, #50	; 0x32
 8002162:	4a34      	ldr	r2, [pc, #208]	; (8002234 <UART_SetConfig+0x4e4>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800216e:	441c      	add	r4, r3
 8002170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002174:	2200      	movs	r2, #0
 8002176:	673b      	str	r3, [r7, #112]	; 0x70
 8002178:	677a      	str	r2, [r7, #116]	; 0x74
 800217a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800217e:	4642      	mov	r2, r8
 8002180:	464b      	mov	r3, r9
 8002182:	1891      	adds	r1, r2, r2
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	415b      	adcs	r3, r3
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800218e:	4641      	mov	r1, r8
 8002190:	1851      	adds	r1, r2, r1
 8002192:	6039      	str	r1, [r7, #0]
 8002194:	4649      	mov	r1, r9
 8002196:	414b      	adcs	r3, r1
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021a6:	4659      	mov	r1, fp
 80021a8:	00cb      	lsls	r3, r1, #3
 80021aa:	4651      	mov	r1, sl
 80021ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021b0:	4651      	mov	r1, sl
 80021b2:	00ca      	lsls	r2, r1, #3
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	4642      	mov	r2, r8
 80021bc:	189b      	adds	r3, r3, r2
 80021be:	66bb      	str	r3, [r7, #104]	; 0x68
 80021c0:	464b      	mov	r3, r9
 80021c2:	460a      	mov	r2, r1
 80021c4:	eb42 0303 	adc.w	r3, r2, r3
 80021c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	663b      	str	r3, [r7, #96]	; 0x60
 80021d4:	667a      	str	r2, [r7, #100]	; 0x64
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80021e2:	4649      	mov	r1, r9
 80021e4:	008b      	lsls	r3, r1, #2
 80021e6:	4641      	mov	r1, r8
 80021e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ec:	4641      	mov	r1, r8
 80021ee:	008a      	lsls	r2, r1, #2
 80021f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021f4:	f7fd fffc 	bl	80001f0 <__aeabi_uldivmod>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <UART_SetConfig+0x4e4>)
 80021fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2164      	movs	r1, #100	; 0x64
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	3332      	adds	r3, #50	; 0x32
 8002210:	4a08      	ldr	r2, [pc, #32]	; (8002234 <UART_SetConfig+0x4e4>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4422      	add	r2, r4
 8002224:	609a      	str	r2, [r3, #8]
}
 8002226:	bf00      	nop
 8002228:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002232:	bf00      	nop
 8002234:	51eb851f 	.word	0x51eb851f

08002238 <__NVIC_SetPriority>:
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	db0a      	blt.n	8002262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	490c      	ldr	r1, [pc, #48]	; (8002284 <__NVIC_SetPriority+0x4c>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	440b      	add	r3, r1
 800225c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002260:	e00a      	b.n	8002278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <__NVIC_SetPriority+0x50>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3b04      	subs	r3, #4
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	440b      	add	r3, r1
 8002276:	761a      	strb	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002290:	2100      	movs	r1, #0
 8002292:	f06f 0004 	mvn.w	r0, #4
 8002296:	f7ff ffcf 	bl	8002238 <__NVIC_SetPriority>
#endif
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022a6:	f3ef 8305 	mrs	r3, IPSR
 80022aa:	603b      	str	r3, [r7, #0]
  return(result);
 80022ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80022b2:	f06f 0305 	mvn.w	r3, #5
 80022b6:	607b      	str	r3, [r7, #4]
 80022b8:	e00c      	b.n	80022d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <osKernelInitialize+0x44>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <osKernelInitialize+0x44>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	e002      	b.n	80022d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80022ce:	f04f 33ff 	mov.w	r3, #4294967295
 80022d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022d4:	687b      	ldr	r3, [r7, #4]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	200000e0 	.word	0x200000e0

080022e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022ee:	f3ef 8305 	mrs	r3, IPSR
 80022f2:	603b      	str	r3, [r7, #0]
  return(result);
 80022f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <osKernelStart+0x1a>
    stat = osErrorISR;
 80022fa:	f06f 0305 	mvn.w	r3, #5
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	e010      	b.n	8002324 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <osKernelStart+0x48>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d109      	bne.n	800231e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800230a:	f7ff ffbf 	bl	800228c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <osKernelStart+0x48>)
 8002310:	2202      	movs	r2, #2
 8002312:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002314:	f001 f87c 	bl	8003410 <vTaskStartScheduler>
      stat = osOK;
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	e002      	b.n	8002324 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800231e:	f04f 33ff 	mov.w	r3, #4294967295
 8002322:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002324:	687b      	ldr	r3, [r7, #4]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200000e0 	.word	0x200000e0

08002334 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af04      	add	r7, sp, #16
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002344:	f3ef 8305 	mrs	r3, IPSR
 8002348:	617b      	str	r3, [r7, #20]
  return(result);
 800234a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800234c:	2b00      	cmp	r3, #0
 800234e:	d17e      	bne.n	800244e <osThreadNew+0x11a>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d07b      	beq.n	800244e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800235a:	2318      	movs	r3, #24
 800235c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800235e:	2300      	movs	r3, #0
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d045      	beq.n	80023fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <osThreadNew+0x48>
        name = attr->name;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <osThreadNew+0x6e>
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	2b38      	cmp	r3, #56	; 0x38
 8002394:	d805      	bhi.n	80023a2 <osThreadNew+0x6e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <osThreadNew+0x72>
        return (NULL);
 80023a2:	2300      	movs	r3, #0
 80023a4:	e054      	b.n	8002450 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	089b      	lsrs	r3, r3, #2
 80023b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00e      	beq.n	80023dc <osThreadNew+0xa8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2bbb      	cmp	r3, #187	; 0xbb
 80023c4:	d90a      	bls.n	80023dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <osThreadNew+0xa8>
        mem = 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e010      	b.n	80023fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10c      	bne.n	80023fe <osThreadNew+0xca>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d108      	bne.n	80023fe <osThreadNew+0xca>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d104      	bne.n	80023fe <osThreadNew+0xca>
          mem = 0;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	e001      	b.n	80023fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d110      	bne.n	8002426 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800240c:	9202      	str	r2, [sp, #8]
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	6a3a      	ldr	r2, [r7, #32]
 8002418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fe0c 	bl	8003038 <xTaskCreateStatic>
 8002420:	4603      	mov	r3, r0
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	e013      	b.n	800244e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d110      	bne.n	800244e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	b29a      	uxth	r2, r3
 8002430:	f107 0310 	add.w	r3, r7, #16
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fe57 	bl	80030f2 <xTaskCreate>
 8002444:	4603      	mov	r3, r0
 8002446:	2b01      	cmp	r3, #1
 8002448:	d001      	beq.n	800244e <osThreadNew+0x11a>
            hTask = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800244e:	693b      	ldr	r3, [r7, #16]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3728      	adds	r7, #40	; 0x28
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002460:	f3ef 8305 	mrs	r3, IPSR
 8002464:	60bb      	str	r3, [r7, #8]
  return(result);
 8002466:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <osDelay+0x1c>
    stat = osErrorISR;
 800246c:	f06f 0305 	mvn.w	r3, #5
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e007      	b.n	8002484 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <osDelay+0x2c>
      vTaskDelay(ticks);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 ff92 	bl	80033a8 <vTaskDelay>
    }
  }

  return (stat);
 8002484:	68fb      	ldr	r3, [r7, #12]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <vApplicationGetIdleTaskMemory+0x2c>)
 80024a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4a06      	ldr	r2, [pc, #24]	; (80024c0 <vApplicationGetIdleTaskMemory+0x30>)
 80024a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	601a      	str	r2, [r3, #0]
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	200000e4 	.word	0x200000e4
 80024c0:	200001a0 	.word	0x200001a0

080024c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80024d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	4a06      	ldr	r2, [pc, #24]	; (80024f4 <vApplicationGetTimerTaskMemory+0x30>)
 80024da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024e2:	601a      	str	r2, [r3, #0]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	200003a0 	.word	0x200003a0
 80024f4:	2000045c 	.word	0x2000045c

080024f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f103 0208 	add.w	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f103 0208 	add.w	r2, r3, #8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0208 	add.w	r2, r3, #8
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800259a:	b480      	push	{r7}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b0:	d103      	bne.n	80025ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e00c      	b.n	80025d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3308      	adds	r3, #8
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	e002      	b.n	80025c8 <vListInsert+0x2e>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d2f6      	bcs.n	80025c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6892      	ldr	r2, [r2, #8]
 8002622:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6852      	ldr	r2, [r2, #4]
 800262c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	429a      	cmp	r2, r3
 8002636:	d103      	bne.n	8002640 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	1e5a      	subs	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10a      	bne.n	800268a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800268a:	f002 f87b 	bl	8004784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	441a      	add	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ba:	3b01      	subs	r3, #1
 80026bc:	68f9      	ldr	r1, [r7, #12]
 80026be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026c0:	fb01 f303 	mul.w	r3, r1, r3
 80026c4:	441a      	add	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	22ff      	movs	r2, #255	; 0xff
 80026ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	22ff      	movs	r2, #255	; 0xff
 80026d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d114      	bne.n	800270a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01a      	beq.n	800271e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	3310      	adds	r3, #16
 80026ec:	4618      	mov	r0, r3
 80026ee:	f001 f929 	bl	8003944 <xTaskRemoveFromEventList>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d012      	beq.n	800271e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <xQueueGenericReset+0xcc>)
 80026fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	e009      	b.n	800271e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	3310      	adds	r3, #16
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fef2 	bl	80024f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	3324      	adds	r3, #36	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff feed 	bl	80024f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800271e:	f002 f861 	bl	80047e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002722:	2301      	movs	r3, #1
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	e000ed04 	.word	0xe000ed04

08002730 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002764:	f383 8811 	msr	BASEPRI, r3
 8002768:	f3bf 8f6f 	isb	sy
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002772:	bf00      	nop
 8002774:	e7fe      	b.n	8002774 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <xQueueGenericCreateStatic+0x52>
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <xQueueGenericCreateStatic+0x56>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueGenericCreateStatic+0x58>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	623b      	str	r3, [r7, #32]
}
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <xQueueGenericCreateStatic+0x7e>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <xQueueGenericCreateStatic+0x82>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <xQueueGenericCreateStatic+0x84>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	61fb      	str	r3, [r7, #28]
}
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027ce:	2350      	movs	r3, #80	; 0x50
 80027d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b50      	cmp	r3, #80	; 0x50
 80027d6:	d00a      	beq.n	80027ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	61bb      	str	r3, [r7, #24]
}
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80027ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80027f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00d      	beq.n	8002816 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002802:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4613      	mov	r3, r2
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f805 	bl	8002820 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002818:	4618      	mov	r0, r3
 800281a:	3730      	adds	r7, #48	; 0x30
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d103      	bne.n	800283c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e002      	b.n	8002842 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800284e:	2101      	movs	r1, #1
 8002850:	69b8      	ldr	r0, [r7, #24]
 8002852:	f7ff ff05 	bl	8002660 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08e      	sub	sp, #56	; 0x38
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002876:	2300      	movs	r3, #0
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <xQueueGenericSend+0x32>
	__asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <xQueueGenericSend+0x40>
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <xQueueGenericSend+0x44>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <xQueueGenericSend+0x46>
 80028ac:	2300      	movs	r3, #0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <xQueueGenericSend+0x60>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d103      	bne.n	80028d6 <xQueueGenericSend+0x6e>
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <xQueueGenericSend+0x72>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <xQueueGenericSend+0x74>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	623b      	str	r3, [r7, #32]
}
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028f6:	f001 f9e7 	bl	8003cc8 <xTaskGetSchedulerState>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <xQueueGenericSend+0x9e>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <xQueueGenericSend+0xa2>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <xQueueGenericSend+0xa4>
 800290a:	2300      	movs	r3, #0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xQueueGenericSend+0xbe>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	61fb      	str	r3, [r7, #28]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002926:	f001 ff2d 	bl	8004784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800292a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	429a      	cmp	r2, r3
 8002934:	d302      	bcc.n	800293c <xQueueGenericSend+0xd4>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d129      	bne.n	8002990 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002942:	f000 fa0b 	bl	8002d5c <prvCopyDataToQueue>
 8002946:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	3324      	adds	r3, #36	; 0x24
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fff5 	bl	8003944 <xTaskRemoveFromEventList>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002960:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <xQueueGenericSend+0x1f8>)
 8002962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	e00a      	b.n	8002988 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <xQueueGenericSend+0x1f8>)
 800297a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002988:	f001 ff2c 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 800298c:	2301      	movs	r3, #1
 800298e:	e063      	b.n	8002a58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002996:	f001 ff25 	bl	80047e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800299a:	2300      	movs	r3, #0
 800299c:	e05c      	b.n	8002a58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800299e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 f82f 	bl	8003a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029ae:	2301      	movs	r3, #1
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029b2:	f001 ff17 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029b6:	f000 fd9b 	bl	80034f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029ba:	f001 fee3 	bl	8004784 <vPortEnterCritical>
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029c4:	b25b      	sxtb	r3, r3
 80029c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ca:	d103      	bne.n	80029d4 <xQueueGenericSend+0x16c>
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029da:	b25b      	sxtb	r3, r3
 80029dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e0:	d103      	bne.n	80029ea <xQueueGenericSend+0x182>
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029ea:	f001 fefb 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029ee:	1d3a      	adds	r2, r7, #4
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4611      	mov	r1, r2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f81e 	bl	8003a38 <xTaskCheckForTimeOut>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d124      	bne.n	8002a4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a04:	f000 faa2 	bl	8002f4c <prvIsQueueFull>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d018      	beq.n	8002a40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	3310      	adds	r3, #16
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ff44 	bl	80038a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a1e:	f000 fa2d 	bl	8002e7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a22:	f000 fd73 	bl	800350c <xTaskResumeAll>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f47f af7c 	bne.w	8002926 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <xQueueGenericSend+0x1f8>)
 8002a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	e772      	b.n	8002926 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a42:	f000 fa1b 	bl	8002e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a46:	f000 fd61 	bl	800350c <xTaskResumeAll>
 8002a4a:	e76c      	b.n	8002926 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a4e:	f000 fa15 	bl	8002e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a52:	f000 fd5b 	bl	800350c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3738      	adds	r7, #56	; 0x38
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	e000ed04 	.word	0xe000ed04

08002a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b090      	sub	sp, #64	; 0x40
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a80:	f383 8811 	msr	BASEPRI, r3
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a8e:	bf00      	nop
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <xQueueGenericSendFromISR+0x3c>
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <xQueueGenericSendFromISR+0x40>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e000      	b.n	8002aa6 <xQueueGenericSendFromISR+0x42>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002abc:	bf00      	nop
 8002abe:	e7fe      	b.n	8002abe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d103      	bne.n	8002ace <xQueueGenericSendFromISR+0x6a>
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <xQueueGenericSendFromISR+0x6e>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <xQueueGenericSendFromISR+0x70>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	623b      	str	r3, [r7, #32]
}
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aee:	f001 ff2b 	bl	8004948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002af2:	f3ef 8211 	mrs	r2, BASEPRI
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	61fa      	str	r2, [r7, #28]
 8002b08:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d302      	bcc.n	8002b20 <xQueueGenericSendFromISR+0xbc>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d12f      	bne.n	8002b80 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002b36:	f000 f911 	bl	8002d5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b3a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d112      	bne.n	8002b6a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d016      	beq.n	8002b7a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	3324      	adds	r3, #36	; 0x24
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fef7 	bl	8003944 <xTaskRemoveFromEventList>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00e      	beq.n	8002b7a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00b      	beq.n	8002b7a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e007      	b.n	8002b7a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	b25a      	sxtb	r2, r3
 8002b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002b7e:	e001      	b.n	8002b84 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b8e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3740      	adds	r7, #64	; 0x40
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <xQueueReceive+0x30>
	__asm volatile
 8002bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bba:	f383 8811 	msr	BASEPRI, r3
 8002bbe:	f3bf 8f6f 	isb	sy
 8002bc2:	f3bf 8f4f 	dsb	sy
 8002bc6:	623b      	str	r3, [r7, #32]
}
 8002bc8:	bf00      	nop
 8002bca:	e7fe      	b.n	8002bca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <xQueueReceive+0x3e>
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <xQueueReceive+0x42>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <xQueueReceive+0x44>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d10a      	bne.n	8002bfa <xQueueReceive+0x5e>
	__asm volatile
 8002be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	61fb      	str	r3, [r7, #28]
}
 8002bf6:	bf00      	nop
 8002bf8:	e7fe      	b.n	8002bf8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bfa:	f001 f865 	bl	8003cc8 <xTaskGetSchedulerState>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d102      	bne.n	8002c0a <xQueueReceive+0x6e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <xQueueReceive+0x72>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <xQueueReceive+0x74>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10a      	bne.n	8002c2a <xQueueReceive+0x8e>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	61bb      	str	r3, [r7, #24]
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c2a:	f001 fdab 	bl	8004784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01f      	beq.n	8002c7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c3e:	f000 f8f7 	bl	8002e30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00f      	beq.n	8002c72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	3310      	adds	r3, #16
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fe74 	bl	8003944 <xTaskRemoveFromEventList>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002c62:	4b3d      	ldr	r3, [pc, #244]	; (8002d58 <xQueueReceive+0x1bc>)
 8002c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c72:	f001 fdb7 	bl	80047e4 <vPortExitCritical>
				return pdPASS;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e069      	b.n	8002d4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c80:	f001 fdb0 	bl	80047e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e062      	b.n	8002d4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c8e:	f107 0310 	add.w	r3, r7, #16
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 feba 	bl	8003a0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c9c:	f001 fda2 	bl	80047e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ca0:	f000 fc26 	bl	80034f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ca4:	f001 fd6e 	bl	8004784 <vPortEnterCritical>
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cae:	b25b      	sxtb	r3, r3
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d103      	bne.n	8002cbe <xQueueReceive+0x122>
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc4:	b25b      	sxtb	r3, r3
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d103      	bne.n	8002cd4 <xQueueReceive+0x138>
 8002ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd4:	f001 fd86 	bl	80047e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cd8:	1d3a      	adds	r2, r7, #4
 8002cda:	f107 0310 	add.w	r3, r7, #16
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fea9 	bl	8003a38 <xTaskCheckForTimeOut>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d123      	bne.n	8002d34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cee:	f000 f917 	bl	8002f20 <prvIsQueueEmpty>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d017      	beq.n	8002d28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	3324      	adds	r3, #36	; 0x24
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4611      	mov	r1, r2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fdcf 	bl	80038a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d08:	f000 f8b8 	bl	8002e7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d0c:	f000 fbfe 	bl	800350c <xTaskResumeAll>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d189      	bne.n	8002c2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <xQueueReceive+0x1bc>)
 8002d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	e780      	b.n	8002c2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d2a:	f000 f8a7 	bl	8002e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d2e:	f000 fbed 	bl	800350c <xTaskResumeAll>
 8002d32:	e77a      	b.n	8002c2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d36:	f000 f8a1 	bl	8002e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d3a:	f000 fbe7 	bl	800350c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d40:	f000 f8ee 	bl	8002f20 <prvIsQueueEmpty>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f43f af6f 	beq.w	8002c2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002d4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3730      	adds	r7, #48	; 0x30
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d14d      	bne.n	8002e1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 ffbc 	bl	8003d04 <xTaskPriorityDisinherit>
 8002d8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e043      	b.n	8002e1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d119      	bne.n	8002dd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6858      	ldr	r0, [r3, #4]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	461a      	mov	r2, r3
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	f002 f91b 	bl	8004fe2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d32b      	bcc.n	8002e1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	e026      	b.n	8002e1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68d8      	ldr	r0, [r3, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	f002 f901 	bl	8004fe2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	425b      	negs	r3, r3
 8002dea:	441a      	add	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d207      	bcs.n	8002e0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	425b      	negs	r3, r3
 8002e06:	441a      	add	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d105      	bne.n	8002e1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e26:	697b      	ldr	r3, [r7, #20]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d018      	beq.n	8002e74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	441a      	add	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d303      	bcc.n	8002e64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68d9      	ldr	r1, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f002 f8b7 	bl	8004fe2 <memcpy>
	}
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e84:	f001 fc7e 	bl	8004784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e90:	e011      	b.n	8002eb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d012      	beq.n	8002ec0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3324      	adds	r3, #36	; 0x24
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fd50 	bl	8003944 <xTaskRemoveFromEventList>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002eaa:	f000 fe27 	bl	8003afc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	dce9      	bgt.n	8002e92 <prvUnlockQueue+0x16>
 8002ebe:	e000      	b.n	8002ec2 <prvUnlockQueue+0x46>
					break;
 8002ec0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002eca:	f001 fc8b 	bl	80047e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ece:	f001 fc59 	bl	8004784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eda:	e011      	b.n	8002f00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d012      	beq.n	8002f0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3310      	adds	r3, #16
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fd2b 	bl	8003944 <xTaskRemoveFromEventList>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ef4:	f000 fe02 	bl	8003afc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ef8:	7bbb      	ldrb	r3, [r7, #14]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dce9      	bgt.n	8002edc <prvUnlockQueue+0x60>
 8002f08:	e000      	b.n	8002f0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	22ff      	movs	r2, #255	; 0xff
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f14:	f001 fc66 	bl	80047e4 <vPortExitCritical>
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f28:	f001 fc2c 	bl	8004784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e001      	b.n	8002f3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f3e:	f001 fc51 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 8002f42:	68fb      	ldr	r3, [r7, #12]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f54:	f001 fc16 	bl	8004784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d102      	bne.n	8002f6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e001      	b.n	8002f6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f6e:	f001 fc39 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	e014      	b.n	8002fb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f8c:	4a0f      	ldr	r2, [pc, #60]	; (8002fcc <vQueueAddToRegistry+0x50>)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f98:	490c      	ldr	r1, [pc, #48]	; (8002fcc <vQueueAddToRegistry+0x50>)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002fa2:	4a0a      	ldr	r2, [pc, #40]	; (8002fcc <vQueueAddToRegistry+0x50>)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002fae:	e006      	b.n	8002fbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b07      	cmp	r3, #7
 8002fba:	d9e7      	bls.n	8002f8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002fbc:	bf00      	nop
 8002fbe:	bf00      	nop
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	2000085c 	.word	0x2000085c

08002fd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002fe0:	f001 fbd0 	bl	8004784 <vPortEnterCritical>
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fea:	b25b      	sxtb	r3, r3
 8002fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff0:	d103      	bne.n	8002ffa <vQueueWaitForMessageRestricted+0x2a>
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003000:	b25b      	sxtb	r3, r3
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d103      	bne.n	8003010 <vQueueWaitForMessageRestricted+0x40>
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003010:	f001 fbe8 	bl	80047e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3324      	adds	r3, #36	; 0x24
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fc61 	bl	80038ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800302a:	6978      	ldr	r0, [r7, #20]
 800302c:	f7ff ff26 	bl	8002e7c <prvUnlockQueue>
	}
 8003030:	bf00      	nop
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08e      	sub	sp, #56	; 0x38
 800303c:	af04      	add	r7, sp, #16
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xTaskCreateStatic+0x2a>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	623b      	str	r3, [r7, #32]
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <xTaskCreateStatic+0x46>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	61fb      	str	r3, [r7, #28]
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800307e:	23bc      	movs	r3, #188	; 0xbc
 8003080:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2bbc      	cmp	r3, #188	; 0xbc
 8003086:	d00a      	beq.n	800309e <xTaskCreateStatic+0x66>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	61bb      	str	r3, [r7, #24]
}
 800309a:	bf00      	nop
 800309c:	e7fe      	b.n	800309c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800309e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01e      	beq.n	80030e4 <xTaskCreateStatic+0xac>
 80030a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01b      	beq.n	80030e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030be:	2300      	movs	r3, #0
 80030c0:	9303      	str	r3, [sp, #12]
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	9302      	str	r3, [sp, #8]
 80030c6:	f107 0314 	add.w	r3, r7, #20
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f850 	bl	800317c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030de:	f000 f8f3 	bl	80032c8 <prvAddNewTaskToReadyList>
 80030e2:	e001      	b.n	80030e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030e8:	697b      	ldr	r3, [r7, #20]
	}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3728      	adds	r7, #40	; 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b08c      	sub	sp, #48	; 0x30
 80030f6:	af04      	add	r7, sp, #16
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	603b      	str	r3, [r7, #0]
 80030fe:	4613      	mov	r3, r2
 8003100:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4618      	mov	r0, r3
 8003108:	f001 fc5e 	bl	80049c8 <pvPortMalloc>
 800310c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00e      	beq.n	8003132 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003114:	20bc      	movs	r0, #188	; 0xbc
 8003116:	f001 fc57 	bl	80049c8 <pvPortMalloc>
 800311a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	631a      	str	r2, [r3, #48]	; 0x30
 8003128:	e005      	b.n	8003136 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800312a:	6978      	ldr	r0, [r7, #20]
 800312c:	f001 fd18 	bl	8004b60 <vPortFree>
 8003130:	e001      	b.n	8003136 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	2300      	movs	r3, #0
 8003148:	9303      	str	r3, [sp, #12]
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	9302      	str	r3, [sp, #8]
 800314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f80e 	bl	800317c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003160:	69f8      	ldr	r0, [r7, #28]
 8003162:	f000 f8b1 	bl	80032c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003166:	2301      	movs	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e002      	b.n	8003172 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003172:	69bb      	ldr	r3, [r7, #24]
	}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	461a      	mov	r2, r3
 8003194:	21a5      	movs	r1, #165	; 0xa5
 8003196:	f001 ff32 	bl	8004ffe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031a4:	3b01      	subs	r3, #1
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f023 0307 	bic.w	r3, r3, #7
 80031b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	617b      	str	r3, [r7, #20]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01f      	beq.n	800321a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	e012      	b.n	8003206 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	7819      	ldrb	r1, [r3, #0]
 80031e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	3334      	adds	r3, #52	; 0x34
 80031f0:	460a      	mov	r2, r1
 80031f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	4413      	add	r3, r2
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	3301      	adds	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b0f      	cmp	r3, #15
 800320a:	d9e9      	bls.n	80031e0 <prvInitialiseNewTask+0x64>
 800320c:	e000      	b.n	8003210 <prvInitialiseNewTask+0x94>
			{
				break;
 800320e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003218:	e003      	b.n	8003222 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	2b37      	cmp	r3, #55	; 0x37
 8003226:	d901      	bls.n	800322c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003228:	2337      	movs	r3, #55	; 0x37
 800322a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800322c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003230:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003236:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2200      	movs	r2, #0
 800323c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	3304      	adds	r3, #4
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff f978 	bl	8002538 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	3318      	adds	r3, #24
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f973 	bl	8002538 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003256:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800325e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003260:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003266:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	2200      	movs	r2, #0
 800326c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	2200      	movs	r2, #0
 8003274:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	3354      	adds	r3, #84	; 0x54
 800327c:	2260      	movs	r2, #96	; 0x60
 800327e:	2100      	movs	r1, #0
 8003280:	4618      	mov	r0, r3
 8003282:	f001 febc 	bl	8004ffe <memset>
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <prvInitialiseNewTask+0x140>)
 800328a:	659a      	str	r2, [r3, #88]	; 0x58
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <prvInitialiseNewTask+0x144>)
 8003290:	65da      	str	r2, [r3, #92]	; 0x5c
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	4a0b      	ldr	r2, [pc, #44]	; (80032c4 <prvInitialiseNewTask+0x148>)
 8003296:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	69b8      	ldr	r0, [r7, #24]
 800329e:	f001 f941 	bl	8004524 <pxPortInitialiseStack>
 80032a2:	4602      	mov	r2, r0
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032b4:	bf00      	nop
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	080059a0 	.word	0x080059a0
 80032c0:	080059c0 	.word	0x080059c0
 80032c4:	08005980 	.word	0x08005980

080032c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032d0:	f001 fa58 	bl	8004784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032d4:	4b2d      	ldr	r3, [pc, #180]	; (800338c <prvAddNewTaskToReadyList+0xc4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	4a2c      	ldr	r2, [pc, #176]	; (800338c <prvAddNewTaskToReadyList+0xc4>)
 80032dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032e6:	4a2a      	ldr	r2, [pc, #168]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032ec:	4b27      	ldr	r3, [pc, #156]	; (800338c <prvAddNewTaskToReadyList+0xc4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d110      	bne.n	8003316 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032f4:	f000 fc26 	bl	8003b44 <prvInitialiseTaskLists>
 80032f8:	e00d      	b.n	8003316 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <prvAddNewTaskToReadyList+0xcc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003302:	4b23      	ldr	r3, [pc, #140]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	429a      	cmp	r2, r3
 800330e:	d802      	bhi.n	8003316 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003310:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <prvAddNewTaskToReadyList+0xd0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	4a1e      	ldr	r2, [pc, #120]	; (8003398 <prvAddNewTaskToReadyList+0xd0>)
 800331e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003320:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <prvAddNewTaskToReadyList+0xd0>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	4b1b      	ldr	r3, [pc, #108]	; (800339c <prvAddNewTaskToReadyList+0xd4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d903      	bls.n	800333c <prvAddNewTaskToReadyList+0x74>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4a18      	ldr	r2, [pc, #96]	; (800339c <prvAddNewTaskToReadyList+0xd4>)
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4613      	mov	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4a15      	ldr	r2, [pc, #84]	; (80033a0 <prvAddNewTaskToReadyList+0xd8>)
 800334a:	441a      	add	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7ff f8fd 	bl	8002552 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003358:	f001 fa44 	bl	80047e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <prvAddNewTaskToReadyList+0xcc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <prvAddNewTaskToReadyList+0xc8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336e:	429a      	cmp	r2, r3
 8003370:	d207      	bcs.n	8003382 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003372:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <prvAddNewTaskToReadyList+0xdc>)
 8003374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20000d70 	.word	0x20000d70
 8003390:	2000089c 	.word	0x2000089c
 8003394:	20000d7c 	.word	0x20000d7c
 8003398:	20000d8c 	.word	0x20000d8c
 800339c:	20000d78 	.word	0x20000d78
 80033a0:	200008a0 	.word	0x200008a0
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d017      	beq.n	80033ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <vTaskDelay+0x60>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <vTaskDelay+0x30>
	__asm volatile
 80033c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	60bb      	str	r3, [r7, #8]
}
 80033d4:	bf00      	nop
 80033d6:	e7fe      	b.n	80033d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80033d8:	f000 f88a 	bl	80034f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033dc:	2100      	movs	r1, #0
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fcfe 	bl	8003de0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033e4:	f000 f892 	bl	800350c <xTaskResumeAll>
 80033e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d107      	bne.n	8003400 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <vTaskDelay+0x64>)
 80033f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	20000d98 	.word	0x20000d98
 800340c:	e000ed04 	.word	0xe000ed04

08003410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800341e:	463a      	mov	r2, r7
 8003420:	1d39      	adds	r1, r7, #4
 8003422:	f107 0308 	add.w	r3, r7, #8
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f832 	bl	8002490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	9202      	str	r2, [sp, #8]
 8003434:	9301      	str	r3, [sp, #4]
 8003436:	2300      	movs	r3, #0
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	460a      	mov	r2, r1
 800343e:	4924      	ldr	r1, [pc, #144]	; (80034d0 <vTaskStartScheduler+0xc0>)
 8003440:	4824      	ldr	r0, [pc, #144]	; (80034d4 <vTaskStartScheduler+0xc4>)
 8003442:	f7ff fdf9 	bl	8003038 <xTaskCreateStatic>
 8003446:	4603      	mov	r3, r0
 8003448:	4a23      	ldr	r2, [pc, #140]	; (80034d8 <vTaskStartScheduler+0xc8>)
 800344a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <vTaskStartScheduler+0xc8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d002      	beq.n	800345a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003454:	2301      	movs	r3, #1
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e001      	b.n	800345e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d102      	bne.n	800346a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003464:	f000 fd10 	bl	8003e88 <xTimerCreateTimerTask>
 8003468:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d11b      	bne.n	80034a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	613b      	str	r3, [r7, #16]
}
 8003482:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003484:	4b15      	ldr	r3, [pc, #84]	; (80034dc <vTaskStartScheduler+0xcc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3354      	adds	r3, #84	; 0x54
 800348a:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <vTaskStartScheduler+0xd0>)
 800348c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <vTaskStartScheduler+0xd4>)
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003496:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <vTaskStartScheduler+0xd8>)
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <vTaskStartScheduler+0xdc>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034a2:	f001 f8cd 	bl	8004640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034a6:	e00e      	b.n	80034c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d10a      	bne.n	80034c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	60fb      	str	r3, [r7, #12]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <vTaskStartScheduler+0xb4>
}
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	0800592c 	.word	0x0800592c
 80034d4:	08003b15 	.word	0x08003b15
 80034d8:	20000d94 	.word	0x20000d94
 80034dc:	2000089c 	.word	0x2000089c
 80034e0:	20000010 	.word	0x20000010
 80034e4:	20000d90 	.word	0x20000d90
 80034e8:	20000d7c 	.word	0x20000d7c
 80034ec:	20000d74 	.word	0x20000d74

080034f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <vTaskSuspendAll+0x18>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3301      	adds	r3, #1
 80034fa:	4a03      	ldr	r2, [pc, #12]	; (8003508 <vTaskSuspendAll+0x18>)
 80034fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80034fe:	bf00      	nop
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	20000d98 	.word	0x20000d98

0800350c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800351a:	4b42      	ldr	r3, [pc, #264]	; (8003624 <xTaskResumeAll+0x118>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10a      	bne.n	8003538 <xTaskResumeAll+0x2c>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	603b      	str	r3, [r7, #0]
}
 8003534:	bf00      	nop
 8003536:	e7fe      	b.n	8003536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003538:	f001 f924 	bl	8004784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <xTaskResumeAll+0x118>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3b01      	subs	r3, #1
 8003542:	4a38      	ldr	r2, [pc, #224]	; (8003624 <xTaskResumeAll+0x118>)
 8003544:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003546:	4b37      	ldr	r3, [pc, #220]	; (8003624 <xTaskResumeAll+0x118>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d162      	bne.n	8003614 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800354e:	4b36      	ldr	r3, [pc, #216]	; (8003628 <xTaskResumeAll+0x11c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d05e      	beq.n	8003614 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003556:	e02f      	b.n	80035b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003558:	4b34      	ldr	r3, [pc, #208]	; (800362c <xTaskResumeAll+0x120>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3318      	adds	r3, #24
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff f851 	bl	800260c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3304      	adds	r3, #4
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f84c 	bl	800260c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003578:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <xTaskResumeAll+0x124>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d903      	bls.n	8003588 <xTaskResumeAll+0x7c>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <xTaskResumeAll+0x124>)
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4a27      	ldr	r2, [pc, #156]	; (8003634 <xTaskResumeAll+0x128>)
 8003596:	441a      	add	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3304      	adds	r3, #4
 800359c:	4619      	mov	r1, r3
 800359e:	4610      	mov	r0, r2
 80035a0:	f7fe ffd7 	bl	8002552 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	4b23      	ldr	r3, [pc, #140]	; (8003638 <xTaskResumeAll+0x12c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <xTaskResumeAll+0x130>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035b8:	4b1c      	ldr	r3, [pc, #112]	; (800362c <xTaskResumeAll+0x120>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1cb      	bne.n	8003558 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035c6:	f000 fb5f 	bl	8003c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <xTaskResumeAll+0x134>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035d6:	f000 f847 	bl	8003668 <xTaskIncrementTick>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <xTaskResumeAll+0x130>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3b01      	subs	r3, #1
 80035ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f1      	bne.n	80035d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <xTaskResumeAll+0x134>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035f8:	4b10      	ldr	r3, [pc, #64]	; (800363c <xTaskResumeAll+0x130>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d009      	beq.n	8003614 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003600:	2301      	movs	r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <xTaskResumeAll+0x138>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003614:	f001 f8e6 	bl	80047e4 <vPortExitCritical>

	return xAlreadyYielded;
 8003618:	68bb      	ldr	r3, [r7, #8]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	20000d98 	.word	0x20000d98
 8003628:	20000d70 	.word	0x20000d70
 800362c:	20000d30 	.word	0x20000d30
 8003630:	20000d78 	.word	0x20000d78
 8003634:	200008a0 	.word	0x200008a0
 8003638:	2000089c 	.word	0x2000089c
 800363c:	20000d84 	.word	0x20000d84
 8003640:	20000d80 	.word	0x20000d80
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <xTaskGetTickCount+0x1c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003654:	687b      	ldr	r3, [r7, #4]
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000d74 	.word	0x20000d74

08003668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003672:	4b4f      	ldr	r3, [pc, #316]	; (80037b0 <xTaskIncrementTick+0x148>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 808f 	bne.w	800379a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800367c:	4b4d      	ldr	r3, [pc, #308]	; (80037b4 <xTaskIncrementTick+0x14c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3301      	adds	r3, #1
 8003682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003684:	4a4b      	ldr	r2, [pc, #300]	; (80037b4 <xTaskIncrementTick+0x14c>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d120      	bne.n	80036d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003690:	4b49      	ldr	r3, [pc, #292]	; (80037b8 <xTaskIncrementTick+0x150>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	603b      	str	r3, [r7, #0]
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <xTaskIncrementTick+0x46>
 80036b0:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <xTaskIncrementTick+0x150>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	4b41      	ldr	r3, [pc, #260]	; (80037bc <xTaskIncrementTick+0x154>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <xTaskIncrementTick+0x150>)
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4a3f      	ldr	r2, [pc, #252]	; (80037bc <xTaskIncrementTick+0x154>)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <xTaskIncrementTick+0x158>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	3301      	adds	r3, #1
 80036ca:	4a3d      	ldr	r2, [pc, #244]	; (80037c0 <xTaskIncrementTick+0x158>)
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	f000 fadb 	bl	8003c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036d2:	4b3c      	ldr	r3, [pc, #240]	; (80037c4 <xTaskIncrementTick+0x15c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d349      	bcc.n	8003770 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036dc:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <xTaskIncrementTick+0x150>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e6:	4b37      	ldr	r3, [pc, #220]	; (80037c4 <xTaskIncrementTick+0x15c>)
 80036e8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ec:	601a      	str	r2, [r3, #0]
					break;
 80036ee:	e03f      	b.n	8003770 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <xTaskIncrementTick+0x150>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d203      	bcs.n	8003710 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003708:	4a2e      	ldr	r2, [pc, #184]	; (80037c4 <xTaskIncrementTick+0x15c>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800370e:	e02f      	b.n	8003770 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	3304      	adds	r3, #4
 8003714:	4618      	mov	r0, r3
 8003716:	f7fe ff79 	bl	800260c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	d004      	beq.n	800372c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3318      	adds	r3, #24
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe ff70 	bl	800260c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <xTaskIncrementTick+0x160>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d903      	bls.n	8003740 <xTaskIncrementTick+0xd8>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <xTaskIncrementTick+0x160>)
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003744:	4613      	mov	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <xTaskIncrementTick+0x164>)
 800374e:	441a      	add	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	3304      	adds	r3, #4
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f7fe fefb 	bl	8002552 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <xTaskIncrementTick+0x168>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	429a      	cmp	r2, r3
 8003768:	d3b8      	bcc.n	80036dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800376a:	2301      	movs	r3, #1
 800376c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800376e:	e7b5      	b.n	80036dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <xTaskIncrementTick+0x168>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	4915      	ldr	r1, [pc, #84]	; (80037cc <xTaskIncrementTick+0x164>)
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d901      	bls.n	800378c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003788:	2301      	movs	r3, #1
 800378a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <xTaskIncrementTick+0x16c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d007      	beq.n	80037a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e004      	b.n	80037a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800379a:	4b0f      	ldr	r3, [pc, #60]	; (80037d8 <xTaskIncrementTick+0x170>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	4a0d      	ldr	r2, [pc, #52]	; (80037d8 <xTaskIncrementTick+0x170>)
 80037a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037a4:	697b      	ldr	r3, [r7, #20]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000d98 	.word	0x20000d98
 80037b4:	20000d74 	.word	0x20000d74
 80037b8:	20000d28 	.word	0x20000d28
 80037bc:	20000d2c 	.word	0x20000d2c
 80037c0:	20000d88 	.word	0x20000d88
 80037c4:	20000d90 	.word	0x20000d90
 80037c8:	20000d78 	.word	0x20000d78
 80037cc:	200008a0 	.word	0x200008a0
 80037d0:	2000089c 	.word	0x2000089c
 80037d4:	20000d84 	.word	0x20000d84
 80037d8:	20000d80 	.word	0x20000d80

080037dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037e2:	4b2a      	ldr	r3, [pc, #168]	; (800388c <vTaskSwitchContext+0xb0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <vTaskSwitchContext+0xb4>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037f0:	e046      	b.n	8003880 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80037f2:	4b27      	ldr	r3, [pc, #156]	; (8003890 <vTaskSwitchContext+0xb4>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f8:	4b26      	ldr	r3, [pc, #152]	; (8003894 <vTaskSwitchContext+0xb8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	e010      	b.n	8003822 <vTaskSwitchContext+0x46>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <vTaskSwitchContext+0x40>
	__asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	607b      	str	r3, [r7, #4]
}
 8003818:	bf00      	nop
 800381a:	e7fe      	b.n	800381a <vTaskSwitchContext+0x3e>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3b01      	subs	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	491d      	ldr	r1, [pc, #116]	; (8003898 <vTaskSwitchContext+0xbc>)
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0e4      	beq.n	8003800 <vTaskSwitchContext+0x24>
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4a15      	ldr	r2, [pc, #84]	; (8003898 <vTaskSwitchContext+0xbc>)
 8003842:	4413      	add	r3, r2
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	605a      	str	r2, [r3, #4]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	3308      	adds	r3, #8
 8003858:	429a      	cmp	r2, r3
 800385a:	d104      	bne.n	8003866 <vTaskSwitchContext+0x8a>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4a0b      	ldr	r2, [pc, #44]	; (800389c <vTaskSwitchContext+0xc0>)
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4a08      	ldr	r2, [pc, #32]	; (8003894 <vTaskSwitchContext+0xb8>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003876:	4b09      	ldr	r3, [pc, #36]	; (800389c <vTaskSwitchContext+0xc0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3354      	adds	r3, #84	; 0x54
 800387c:	4a08      	ldr	r2, [pc, #32]	; (80038a0 <vTaskSwitchContext+0xc4>)
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	20000d98 	.word	0x20000d98
 8003890:	20000d84 	.word	0x20000d84
 8003894:	20000d78 	.word	0x20000d78
 8003898:	200008a0 	.word	0x200008a0
 800389c:	2000089c 	.word	0x2000089c
 80038a0:	20000010 	.word	0x20000010

080038a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	60fb      	str	r3, [r7, #12]
}
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <vTaskPlaceOnEventList+0x44>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3318      	adds	r3, #24
 80038d0:	4619      	mov	r1, r3
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fe fe61 	bl	800259a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038d8:	2101      	movs	r1, #1
 80038da:	6838      	ldr	r0, [r7, #0]
 80038dc:	f000 fa80 	bl	8003de0 <prvAddCurrentTaskToDelayedList>
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	2000089c 	.word	0x2000089c

080038ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	617b      	str	r3, [r7, #20]
}
 8003910:	bf00      	nop
 8003912:	e7fe      	b.n	8003912 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <vTaskPlaceOnEventListRestricted+0x54>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3318      	adds	r3, #24
 800391a:	4619      	mov	r1, r3
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7fe fe18 	bl	8002552 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003928:	f04f 33ff 	mov.w	r3, #4294967295
 800392c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	68b8      	ldr	r0, [r7, #8]
 8003932:	f000 fa55 	bl	8003de0 <prvAddCurrentTaskToDelayedList>
	}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000089c 	.word	0x2000089c

08003944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	60fb      	str	r3, [r7, #12]
}
 800396c:	bf00      	nop
 800396e:	e7fe      	b.n	800396e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	3318      	adds	r3, #24
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fe49 	bl	800260c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <xTaskRemoveFromEventList+0xb0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d11d      	bne.n	80039be <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	3304      	adds	r3, #4
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fe40 	bl	800260c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <xTaskRemoveFromEventList+0xb4>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d903      	bls.n	80039a0 <xTaskRemoveFromEventList+0x5c>
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399c:	4a16      	ldr	r2, [pc, #88]	; (80039f8 <xTaskRemoveFromEventList+0xb4>)
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4a13      	ldr	r2, [pc, #76]	; (80039fc <xTaskRemoveFromEventList+0xb8>)
 80039ae:	441a      	add	r2, r3
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	3304      	adds	r3, #4
 80039b4:	4619      	mov	r1, r3
 80039b6:	4610      	mov	r0, r2
 80039b8:	f7fe fdcb 	bl	8002552 <vListInsertEnd>
 80039bc:	e005      	b.n	80039ca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	3318      	adds	r3, #24
 80039c2:	4619      	mov	r1, r3
 80039c4:	480e      	ldr	r0, [pc, #56]	; (8003a00 <xTaskRemoveFromEventList+0xbc>)
 80039c6:	f7fe fdc4 	bl	8002552 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ce:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <xTaskRemoveFromEventList+0xc0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d905      	bls.n	80039e4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <xTaskRemoveFromEventList+0xc4>)
 80039de:	2201      	movs	r2, #1
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e001      	b.n	80039e8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80039e8:	697b      	ldr	r3, [r7, #20]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000d98 	.word	0x20000d98
 80039f8:	20000d78 	.word	0x20000d78
 80039fc:	200008a0 	.word	0x200008a0
 8003a00:	20000d30 	.word	0x20000d30
 8003a04:	2000089c 	.word	0x2000089c
 8003a08:	20000d84 	.word	0x20000d84

08003a0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <vTaskInternalSetTimeOutState+0x24>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a1c:	4b05      	ldr	r3, [pc, #20]	; (8003a34 <vTaskInternalSetTimeOutState+0x28>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	605a      	str	r2, [r3, #4]
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	20000d88 	.word	0x20000d88
 8003a34:	20000d74 	.word	0x20000d74

08003a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d10a      	bne.n	8003a5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	613b      	str	r3, [r7, #16]
}
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	60fb      	str	r3, [r7, #12]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003a7a:	f000 fe83 	bl	8004784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	; (8003af4 <xTaskCheckForTimeOut+0xbc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d102      	bne.n	8003a9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	e023      	b.n	8003ae6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <xTaskCheckForTimeOut+0xc0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d007      	beq.n	8003aba <xTaskCheckForTimeOut+0x82>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d302      	bcc.n	8003aba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	61fb      	str	r3, [r7, #28]
 8003ab8:	e015      	b.n	8003ae6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d20b      	bcs.n	8003adc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	1ad2      	subs	r2, r2, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff ff9b 	bl	8003a0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	e004      	b.n	8003ae6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ae6:	f000 fe7d 	bl	80047e4 <vPortExitCritical>

	return xReturn;
 8003aea:	69fb      	ldr	r3, [r7, #28]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	20000d74 	.word	0x20000d74
 8003af8:	20000d88 	.word	0x20000d88

08003afc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b00:	4b03      	ldr	r3, [pc, #12]	; (8003b10 <vTaskMissedYield+0x14>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
}
 8003b06:	bf00      	nop
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	20000d84 	.word	0x20000d84

08003b14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b1c:	f000 f852 	bl	8003bc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <prvIdleTask+0x28>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d9f9      	bls.n	8003b1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <prvIdleTask+0x2c>)
 8003b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b38:	e7f0      	b.n	8003b1c <prvIdleTask+0x8>
 8003b3a:	bf00      	nop
 8003b3c:	200008a0 	.word	0x200008a0
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	e00c      	b.n	8003b6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4a12      	ldr	r2, [pc, #72]	; (8003ba4 <prvInitialiseTaskLists+0x60>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fcca 	bl	80024f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3301      	adds	r3, #1
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b37      	cmp	r3, #55	; 0x37
 8003b6e:	d9ef      	bls.n	8003b50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b70:	480d      	ldr	r0, [pc, #52]	; (8003ba8 <prvInitialiseTaskLists+0x64>)
 8003b72:	f7fe fcc1 	bl	80024f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b76:	480d      	ldr	r0, [pc, #52]	; (8003bac <prvInitialiseTaskLists+0x68>)
 8003b78:	f7fe fcbe 	bl	80024f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b7c:	480c      	ldr	r0, [pc, #48]	; (8003bb0 <prvInitialiseTaskLists+0x6c>)
 8003b7e:	f7fe fcbb 	bl	80024f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b82:	480c      	ldr	r0, [pc, #48]	; (8003bb4 <prvInitialiseTaskLists+0x70>)
 8003b84:	f7fe fcb8 	bl	80024f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b88:	480b      	ldr	r0, [pc, #44]	; (8003bb8 <prvInitialiseTaskLists+0x74>)
 8003b8a:	f7fe fcb5 	bl	80024f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <prvInitialiseTaskLists+0x78>)
 8003b90:	4a05      	ldr	r2, [pc, #20]	; (8003ba8 <prvInitialiseTaskLists+0x64>)
 8003b92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <prvInitialiseTaskLists+0x7c>)
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <prvInitialiseTaskLists+0x68>)
 8003b98:	601a      	str	r2, [r3, #0]
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	200008a0 	.word	0x200008a0
 8003ba8:	20000d00 	.word	0x20000d00
 8003bac:	20000d14 	.word	0x20000d14
 8003bb0:	20000d30 	.word	0x20000d30
 8003bb4:	20000d44 	.word	0x20000d44
 8003bb8:	20000d5c 	.word	0x20000d5c
 8003bbc:	20000d28 	.word	0x20000d28
 8003bc0:	20000d2c 	.word	0x20000d2c

08003bc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bca:	e019      	b.n	8003c00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bcc:	f000 fdda 	bl	8004784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <prvCheckTasksWaitingTermination+0x50>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fd15 	bl	800260c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003be2:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <prvCheckTasksWaitingTermination+0x54>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	4a0b      	ldr	r2, [pc, #44]	; (8003c18 <prvCheckTasksWaitingTermination+0x54>)
 8003bea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <prvCheckTasksWaitingTermination+0x58>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <prvCheckTasksWaitingTermination+0x58>)
 8003bf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bf6:	f000 fdf5 	bl	80047e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f810 	bl	8003c20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c00:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <prvCheckTasksWaitingTermination+0x58>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e1      	bne.n	8003bcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000d44 	.word	0x20000d44
 8003c18:	20000d70 	.word	0x20000d70
 8003c1c:	20000d58 	.word	0x20000d58

08003c20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3354      	adds	r3, #84	; 0x54
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 fb07 	bl	8005240 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 ff8d 	bl	8004b60 <vPortFree>
				vPortFree( pxTCB );
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 ff8a 	bl	8004b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c4c:	e018      	b.n	8003c80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d103      	bne.n	8003c60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 ff81 	bl	8004b60 <vPortFree>
	}
 8003c5e:	e00f      	b.n	8003c80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d00a      	beq.n	8003c80 <prvDeleteTCB+0x60>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	60fb      	str	r3, [r7, #12]
}
 8003c7c:	bf00      	nop
 8003c7e:	e7fe      	b.n	8003c7e <prvDeleteTCB+0x5e>
	}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <prvResetNextTaskUnblockTime+0x38>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8003c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ca0:	e008      	b.n	8003cb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca2:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <prvResetNextTaskUnblockTime+0x38>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <prvResetNextTaskUnblockTime+0x3c>)
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	20000d28 	.word	0x20000d28
 8003cc4:	20000d90 	.word	0x20000d90

08003cc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <xTaskGetSchedulerState+0x34>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	e008      	b.n	8003cee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <xTaskGetSchedulerState+0x38>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	e001      	b.n	8003cee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cea:	2300      	movs	r3, #0
 8003cec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003cee:	687b      	ldr	r3, [r7, #4]
	}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	20000d7c 	.word	0x20000d7c
 8003d00:	20000d98 	.word	0x20000d98

08003d04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d056      	beq.n	8003dc8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d1a:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <xTaskPriorityDisinherit+0xd0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d00a      	beq.n	8003d3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	60fb      	str	r3, [r7, #12]
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60bb      	str	r3, [r7, #8]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d5c:	1e5a      	subs	r2, r3, #1
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d02c      	beq.n	8003dc8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d128      	bne.n	8003dc8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe fc46 	bl	800260c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <xTaskPriorityDisinherit+0xd4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d903      	bls.n	8003da8 <xTaskPriorityDisinherit+0xa4>
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	4a0c      	ldr	r2, [pc, #48]	; (8003dd8 <xTaskPriorityDisinherit+0xd4>)
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	4a09      	ldr	r2, [pc, #36]	; (8003ddc <xTaskPriorityDisinherit+0xd8>)
 8003db6:	441a      	add	r2, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f7fe fbc7 	bl	8002552 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003dc8:	697b      	ldr	r3, [r7, #20]
	}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000089c 	.word	0x2000089c
 8003dd8:	20000d78 	.word	0x20000d78
 8003ddc:	200008a0 	.word	0x200008a0

08003de0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003dea:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <prvAddCurrentTaskToDelayedList+0x90>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003df0:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fc08 	bl	800260c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d10a      	bne.n	8003e1a <prvAddCurrentTaskToDelayedList+0x3a>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e0a:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4819      	ldr	r0, [pc, #100]	; (8003e78 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e14:	f7fe fb9d 	bl	8002552 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e18:	e026      	b.n	8003e68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d209      	bcs.n	8003e46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f7fe fbab 	bl	800259a <vListInsert>
}
 8003e44:	e010      	b.n	8003e68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e46:	4b0e      	ldr	r3, [pc, #56]	; (8003e80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	4610      	mov	r0, r2
 8003e54:	f7fe fba1 	bl	800259a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d202      	bcs.n	8003e68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e62:	4a08      	ldr	r2, [pc, #32]	; (8003e84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	6013      	str	r3, [r2, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000d74 	.word	0x20000d74
 8003e74:	2000089c 	.word	0x2000089c
 8003e78:	20000d5c 	.word	0x20000d5c
 8003e7c:	20000d2c 	.word	0x20000d2c
 8003e80:	20000d28 	.word	0x20000d28
 8003e84:	20000d90 	.word	0x20000d90

08003e88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e92:	f000 fb07 	bl	80044a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <xTimerCreateTimerTask+0x80>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d021      	beq.n	8003ee2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ea6:	1d3a      	adds	r2, r7, #4
 8003ea8:	f107 0108 	add.w	r1, r7, #8
 8003eac:	f107 030c 	add.w	r3, r7, #12
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fe fb07 	bl	80024c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003eb6:	6879      	ldr	r1, [r7, #4]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	9202      	str	r2, [sp, #8]
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	4910      	ldr	r1, [pc, #64]	; (8003f0c <xTimerCreateTimerTask+0x84>)
 8003eca:	4811      	ldr	r0, [pc, #68]	; (8003f10 <xTimerCreateTimerTask+0x88>)
 8003ecc:	f7ff f8b4 	bl	8003038 <xTaskCreateStatic>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <xTimerCreateTimerTask+0x8c>)
 8003ed4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <xTimerCreateTimerTask+0x8c>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	613b      	str	r3, [r7, #16]
}
 8003efa:	bf00      	nop
 8003efc:	e7fe      	b.n	8003efc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003efe:	697b      	ldr	r3, [r7, #20]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000dcc 	.word	0x20000dcc
 8003f0c:	08005934 	.word	0x08005934
 8003f10:	0800404d 	.word	0x0800404d
 8003f14:	20000dd0 	.word	0x20000dd0

08003f18 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	623b      	str	r3, [r7, #32]
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f46:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <xTimerGenericCommand+0x98>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02a      	beq.n	8003fa4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	dc18      	bgt.n	8003f92 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f60:	f7ff feb2 	bl	8003cc8 <xTaskGetSchedulerState>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d109      	bne.n	8003f7e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f6a:	4b11      	ldr	r3, [pc, #68]	; (8003fb0 <xTimerGenericCommand+0x98>)
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	f107 0110 	add.w	r1, r7, #16
 8003f72:	2300      	movs	r3, #0
 8003f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f76:	f7fe fc77 	bl	8002868 <xQueueGenericSend>
 8003f7a:	6278      	str	r0, [r7, #36]	; 0x24
 8003f7c:	e012      	b.n	8003fa4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f7e:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <xTimerGenericCommand+0x98>)
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	f107 0110 	add.w	r1, r7, #16
 8003f86:	2300      	movs	r3, #0
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f7fe fc6d 	bl	8002868 <xQueueGenericSend>
 8003f8e:	6278      	str	r0, [r7, #36]	; 0x24
 8003f90:	e008      	b.n	8003fa4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f92:	4b07      	ldr	r3, [pc, #28]	; (8003fb0 <xTimerGenericCommand+0x98>)
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	f107 0110 	add.w	r1, r7, #16
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	f7fe fd61 	bl	8002a64 <xQueueGenericSendFromISR>
 8003fa2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20000dcc 	.word	0x20000dcc

08003fb4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b088      	sub	sp, #32
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fbe:	4b22      	ldr	r3, [pc, #136]	; (8004048 <prvProcessExpiredTimer+0x94>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fb1d 	bl	800260c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d022      	beq.n	8004026 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	18d1      	adds	r1, r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	6978      	ldr	r0, [r7, #20]
 8003fee:	f000 f8d1 	bl	8004194 <prvInsertTimerInActiveList>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d01f      	beq.n	8004038 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	2100      	movs	r1, #0
 8004002:	6978      	ldr	r0, [r7, #20]
 8004004:	f7ff ff88 	bl	8003f18 <xTimerGenericCommand>
 8004008:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d113      	bne.n	8004038 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	60fb      	str	r3, [r7, #12]
}
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800402c:	f023 0301 	bic.w	r3, r3, #1
 8004030:	b2da      	uxtb	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	6978      	ldr	r0, [r7, #20]
 800403e:	4798      	blx	r3
}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000dc4 	.word	0x20000dc4

0800404c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004054:	f107 0308 	add.w	r3, r7, #8
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f857 	bl	800410c <prvGetNextExpireTime>
 800405e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4619      	mov	r1, r3
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f803 	bl	8004070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800406a:	f000 f8d5 	bl	8004218 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800406e:	e7f1      	b.n	8004054 <prvTimerTask+0x8>

08004070 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800407a:	f7ff fa39 	bl	80034f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800407e:	f107 0308 	add.w	r3, r7, #8
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f866 	bl	8004154 <prvSampleTimeNow>
 8004088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d130      	bne.n	80040f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <prvProcessTimerOrBlockTask+0x3c>
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	429a      	cmp	r2, r3
 800409c:	d806      	bhi.n	80040ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800409e:	f7ff fa35 	bl	800350c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040a2:	68f9      	ldr	r1, [r7, #12]
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff85 	bl	8003fb4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040aa:	e024      	b.n	80040f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d008      	beq.n	80040c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <prvProcessTimerOrBlockTask+0x90>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <prvProcessTimerOrBlockTask+0x50>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <prvProcessTimerOrBlockTask+0x52>
 80040c0:	2300      	movs	r3, #0
 80040c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <prvProcessTimerOrBlockTask+0x94>)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	4619      	mov	r1, r3
 80040d2:	f7fe ff7d 	bl	8002fd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040d6:	f7ff fa19 	bl	800350c <xTaskResumeAll>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10a      	bne.n	80040f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <prvProcessTimerOrBlockTask+0x98>)
 80040e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	f3bf 8f6f 	isb	sy
}
 80040f0:	e001      	b.n	80040f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80040f2:	f7ff fa0b 	bl	800350c <xTaskResumeAll>
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000dc8 	.word	0x20000dc8
 8004104:	20000dcc 	.word	0x20000dcc
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004114:	4b0e      	ldr	r3, [pc, #56]	; (8004150 <prvGetNextExpireTime+0x44>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <prvGetNextExpireTime+0x16>
 800411e:	2201      	movs	r2, #1
 8004120:	e000      	b.n	8004124 <prvGetNextExpireTime+0x18>
 8004122:	2200      	movs	r2, #0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d105      	bne.n	800413c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004130:	4b07      	ldr	r3, [pc, #28]	; (8004150 <prvGetNextExpireTime+0x44>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e001      	b.n	8004140 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004140:	68fb      	ldr	r3, [r7, #12]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000dc4 	.word	0x20000dc4

08004154 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800415c:	f7ff fa74 	bl	8003648 <xTaskGetTickCount>
 8004160:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004162:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <prvSampleTimeNow+0x3c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	429a      	cmp	r2, r3
 800416a:	d205      	bcs.n	8004178 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800416c:	f000 f936 	bl	80043dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	e002      	b.n	800417e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <prvSampleTimeNow+0x3c>)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000dd4 	.word	0x20000dd4

08004194 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d812      	bhi.n	80041e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d302      	bcc.n	80041ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e01b      	b.n	8004206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <prvInsertTimerInActiveList+0x7c>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3304      	adds	r3, #4
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f7fe f9de 	bl	800259a <vListInsert>
 80041de:	e012      	b.n	8004206 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d206      	bcs.n	80041f6 <prvInsertTimerInActiveList+0x62>
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d302      	bcc.n	80041f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80041f0:	2301      	movs	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e007      	b.n	8004206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <prvInsertTimerInActiveList+0x80>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f7fe f9ca 	bl	800259a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004206:	697b      	ldr	r3, [r7, #20]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000dc8 	.word	0x20000dc8
 8004214:	20000dc4 	.word	0x20000dc4

08004218 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	; 0x38
 800421c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800421e:	e0ca      	b.n	80043b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	da18      	bge.n	8004258 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004226:	1d3b      	adds	r3, r7, #4
 8004228:	3304      	adds	r3, #4
 800422a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800422c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	61fb      	str	r3, [r7, #28]
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424e:	6850      	ldr	r0, [r2, #4]
 8004250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	4611      	mov	r1, r2
 8004256:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f2c0 80aa 	blt.w	80043b4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d004      	beq.n	8004276 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	3304      	adds	r3, #4
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe f9cb 	bl	800260c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004276:	463b      	mov	r3, r7
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff6b 	bl	8004154 <prvSampleTimeNow>
 800427e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b09      	cmp	r3, #9
 8004284:	f200 8097 	bhi.w	80043b6 <prvProcessReceivedCommands+0x19e>
 8004288:	a201      	add	r2, pc, #4	; (adr r2, 8004290 <prvProcessReceivedCommands+0x78>)
 800428a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428e:	bf00      	nop
 8004290:	080042b9 	.word	0x080042b9
 8004294:	080042b9 	.word	0x080042b9
 8004298:	080042b9 	.word	0x080042b9
 800429c:	0800432d 	.word	0x0800432d
 80042a0:	08004341 	.word	0x08004341
 80042a4:	0800438b 	.word	0x0800438b
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042b9 	.word	0x080042b9
 80042b0:	0800432d 	.word	0x0800432d
 80042b4:	08004341 	.word	0x08004341
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	18d1      	adds	r1, r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d8:	f7ff ff5c 	bl	8004194 <prvInsertTimerInActiveList>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d069      	beq.n	80043b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05e      	beq.n	80043b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	441a      	add	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2300      	movs	r3, #0
 8004306:	2100      	movs	r1, #0
 8004308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800430a:	f7ff fe05 	bl	8003f18 <xTimerGenericCommand>
 800430e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d14f      	bne.n	80043b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	61bb      	str	r3, [r7, #24]
}
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800433e:	e03a      	b.n	80043b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10a      	bne.n	8004376 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004364:	f383 8811 	msr	BASEPRI, r3
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	f3bf 8f4f 	dsb	sy
 8004370:	617b      	str	r3, [r7, #20]
}
 8004372:	bf00      	nop
 8004374:	e7fe      	b.n	8004374 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	18d1      	adds	r1, r2, r3
 800437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004384:	f7ff ff06 	bl	8004194 <prvInsertTimerInActiveList>
					break;
 8004388:	e015      	b.n	80043b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d103      	bne.n	80043a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800439a:	f000 fbe1 	bl	8004b60 <vPortFree>
 800439e:	e00a      	b.n	80043b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a6:	f023 0301 	bic.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043b2:	e000      	b.n	80043b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <prvProcessReceivedCommands+0x1c0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	1d39      	adds	r1, r7, #4
 80043bc:	2200      	movs	r2, #0
 80043be:	4618      	mov	r0, r3
 80043c0:	f7fe fbec 	bl	8002b9c <xQueueReceive>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f47f af2a 	bne.w	8004220 <prvProcessReceivedCommands+0x8>
	}
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	3730      	adds	r7, #48	; 0x30
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000dcc 	.word	0x20000dcc

080043dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b088      	sub	sp, #32
 80043e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043e2:	e048      	b.n	8004476 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <prvSwitchTimerLists+0xc0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ee:	4b2b      	ldr	r3, [pc, #172]	; (800449c <prvSwitchTimerLists+0xc0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe f905 	bl	800260c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d02e      	beq.n	8004476 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4413      	add	r3, r2
 8004420:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	429a      	cmp	r2, r3
 8004428:	d90e      	bls.n	8004448 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <prvSwitchTimerLists+0xc0>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3304      	adds	r3, #4
 800443e:	4619      	mov	r1, r3
 8004440:	4610      	mov	r0, r2
 8004442:	f7fe f8aa 	bl	800259a <vListInsert>
 8004446:	e016      	b.n	8004476 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004448:	2300      	movs	r3, #0
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	2100      	movs	r1, #0
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff fd60 	bl	8003f18 <xTimerGenericCommand>
 8004458:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	603b      	str	r3, [r7, #0]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <prvSwitchTimerLists+0xc0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1b1      	bne.n	80043e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004480:	4b06      	ldr	r3, [pc, #24]	; (800449c <prvSwitchTimerLists+0xc0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <prvSwitchTimerLists+0xc4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a04      	ldr	r2, [pc, #16]	; (800449c <prvSwitchTimerLists+0xc0>)
 800448c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800448e:	4a04      	ldr	r2, [pc, #16]	; (80044a0 <prvSwitchTimerLists+0xc4>)
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	6013      	str	r3, [r2, #0]
}
 8004494:	bf00      	nop
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000dc4 	.word	0x20000dc4
 80044a0:	20000dc8 	.word	0x20000dc8

080044a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044aa:	f000 f96b 	bl	8004784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044ae:	4b15      	ldr	r3, [pc, #84]	; (8004504 <prvCheckForValidListAndQueue+0x60>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d120      	bne.n	80044f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044b6:	4814      	ldr	r0, [pc, #80]	; (8004508 <prvCheckForValidListAndQueue+0x64>)
 80044b8:	f7fe f81e 	bl	80024f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044bc:	4813      	ldr	r0, [pc, #76]	; (800450c <prvCheckForValidListAndQueue+0x68>)
 80044be:	f7fe f81b 	bl	80024f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044c2:	4b13      	ldr	r3, [pc, #76]	; (8004510 <prvCheckForValidListAndQueue+0x6c>)
 80044c4:	4a10      	ldr	r2, [pc, #64]	; (8004508 <prvCheckForValidListAndQueue+0x64>)
 80044c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044c8:	4b12      	ldr	r3, [pc, #72]	; (8004514 <prvCheckForValidListAndQueue+0x70>)
 80044ca:	4a10      	ldr	r2, [pc, #64]	; (800450c <prvCheckForValidListAndQueue+0x68>)
 80044cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80044ce:	2300      	movs	r3, #0
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <prvCheckForValidListAndQueue+0x74>)
 80044d4:	4a11      	ldr	r2, [pc, #68]	; (800451c <prvCheckForValidListAndQueue+0x78>)
 80044d6:	2110      	movs	r1, #16
 80044d8:	200a      	movs	r0, #10
 80044da:	f7fe f929 	bl	8002730 <xQueueGenericCreateStatic>
 80044de:	4603      	mov	r3, r0
 80044e0:	4a08      	ldr	r2, [pc, #32]	; (8004504 <prvCheckForValidListAndQueue+0x60>)
 80044e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <prvCheckForValidListAndQueue+0x60>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <prvCheckForValidListAndQueue+0x60>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	490b      	ldr	r1, [pc, #44]	; (8004520 <prvCheckForValidListAndQueue+0x7c>)
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fe fd42 	bl	8002f7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044f8:	f000 f974 	bl	80047e4 <vPortExitCritical>
}
 80044fc:	bf00      	nop
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000dcc 	.word	0x20000dcc
 8004508:	20000d9c 	.word	0x20000d9c
 800450c:	20000db0 	.word	0x20000db0
 8004510:	20000dc4 	.word	0x20000dc4
 8004514:	20000dc8 	.word	0x20000dc8
 8004518:	20000e78 	.word	0x20000e78
 800451c:	20000dd8 	.word	0x20000dd8
 8004520:	0800593c 	.word	0x0800593c

08004524 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b04      	subs	r3, #4
 8004534:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800453c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b04      	subs	r3, #4
 8004542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3b04      	subs	r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004554:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <pxPortInitialiseStack+0x64>)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b14      	subs	r3, #20
 800455e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b04      	subs	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f06f 0202 	mvn.w	r2, #2
 8004572:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b20      	subs	r3, #32
 8004578:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	0800458d 	.word	0x0800458d

0800458c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <prvTaskExitError+0x54>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d00a      	beq.n	80045b6 <prvTaskExitError+0x2a>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <prvTaskExitError+0x28>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	60bb      	str	r3, [r7, #8]
}
 80045c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045ca:	bf00      	nop
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0fc      	beq.n	80045cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045d2:	bf00      	nop
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	2000000c 	.word	0x2000000c
	...

080045f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <pxCurrentTCBConst2>)
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	6808      	ldr	r0, [r1, #0]
 80045f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	f380 8809 	msr	PSP, r0
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f380 8811 	msr	BASEPRI, r0
 800460a:	4770      	bx	lr
 800460c:	f3af 8000 	nop.w

08004610 <pxCurrentTCBConst2>:
 8004610:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004618:	4808      	ldr	r0, [pc, #32]	; (800463c <prvPortStartFirstTask+0x24>)
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	6800      	ldr	r0, [r0, #0]
 800461e:	f380 8808 	msr	MSP, r0
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8814 	msr	CONTROL, r0
 800462a:	b662      	cpsie	i
 800462c:	b661      	cpsie	f
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	df00      	svc	0
 8004638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800463a:	bf00      	nop
 800463c:	e000ed08 	.word	0xe000ed08

08004640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004646:	4b46      	ldr	r3, [pc, #280]	; (8004760 <xPortStartScheduler+0x120>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a46      	ldr	r2, [pc, #280]	; (8004764 <xPortStartScheduler+0x124>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10a      	bne.n	8004666 <xPortStartScheduler+0x26>
	__asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	613b      	str	r3, [r7, #16]
}
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004666:	4b3e      	ldr	r3, [pc, #248]	; (8004760 <xPortStartScheduler+0x120>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a3f      	ldr	r2, [pc, #252]	; (8004768 <xPortStartScheduler+0x128>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d10a      	bne.n	8004686 <xPortStartScheduler+0x46>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	60fb      	str	r3, [r7, #12]
}
 8004682:	bf00      	nop
 8004684:	e7fe      	b.n	8004684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004686:	4b39      	ldr	r3, [pc, #228]	; (800476c <xPortStartScheduler+0x12c>)
 8004688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	22ff      	movs	r2, #255	; 0xff
 8004696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046a0:	78fb      	ldrb	r3, [r7, #3]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	4b31      	ldr	r3, [pc, #196]	; (8004770 <xPortStartScheduler+0x130>)
 80046ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <xPortStartScheduler+0x134>)
 80046b0:	2207      	movs	r2, #7
 80046b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046b4:	e009      	b.n	80046ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80046b6:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <xPortStartScheduler+0x134>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3b01      	subs	r3, #1
 80046bc:	4a2d      	ldr	r2, [pc, #180]	; (8004774 <xPortStartScheduler+0x134>)
 80046be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b80      	cmp	r3, #128	; 0x80
 80046d4:	d0ef      	beq.n	80046b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046d6:	4b27      	ldr	r3, [pc, #156]	; (8004774 <xPortStartScheduler+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f1c3 0307 	rsb	r3, r3, #7
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d00a      	beq.n	80046f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60bb      	str	r3, [r7, #8]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046f8:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <xPortStartScheduler+0x134>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	021b      	lsls	r3, r3, #8
 80046fe:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <xPortStartScheduler+0x134>)
 8004700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <xPortStartScheduler+0x134>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800470a:	4a1a      	ldr	r2, [pc, #104]	; (8004774 <xPortStartScheduler+0x134>)
 800470c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004716:	4b18      	ldr	r3, [pc, #96]	; (8004778 <xPortStartScheduler+0x138>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a17      	ldr	r2, [pc, #92]	; (8004778 <xPortStartScheduler+0x138>)
 800471c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004722:	4b15      	ldr	r3, [pc, #84]	; (8004778 <xPortStartScheduler+0x138>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a14      	ldr	r2, [pc, #80]	; (8004778 <xPortStartScheduler+0x138>)
 8004728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800472c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800472e:	f000 f8dd 	bl	80048ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004732:	4b12      	ldr	r3, [pc, #72]	; (800477c <xPortStartScheduler+0x13c>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004738:	f000 f8fc 	bl	8004934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xPortStartScheduler+0x140>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a0f      	ldr	r2, [pc, #60]	; (8004780 <xPortStartScheduler+0x140>)
 8004742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004748:	f7ff ff66 	bl	8004618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800474c:	f7ff f846 	bl	80037dc <vTaskSwitchContext>
	prvTaskExitError();
 8004750:	f7ff ff1c 	bl	800458c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	e000ed00 	.word	0xe000ed00
 8004764:	410fc271 	.word	0x410fc271
 8004768:	410fc270 	.word	0x410fc270
 800476c:	e000e400 	.word	0xe000e400
 8004770:	20000ec8 	.word	0x20000ec8
 8004774:	20000ecc 	.word	0x20000ecc
 8004778:	e000ed20 	.word	0xe000ed20
 800477c:	2000000c 	.word	0x2000000c
 8004780:	e000ef34 	.word	0xe000ef34

08004784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	607b      	str	r3, [r7, #4]
}
 800479c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <vPortEnterCritical+0x58>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <vPortEnterCritical+0x58>)
 80047a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <vPortEnterCritical+0x58>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10f      	bne.n	80047d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <vPortEnterCritical+0x5c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	603b      	str	r3, [r7, #0]
}
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <vPortEnterCritical+0x4a>
	}
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <vPortExitCritical+0x50>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <vPortExitCritical+0x24>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <vPortExitCritical+0x50>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <vPortExitCritical+0x50>)
 8004810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <vPortExitCritical+0x50>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <vPortExitCritical+0x42>
 800481a:	2300      	movs	r3, #0
 800481c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f383 8811 	msr	BASEPRI, r3
}
 8004824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	2000000c 	.word	0x2000000c
	...

08004840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004840:	f3ef 8009 	mrs	r0, PSP
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <pxCurrentTCBConst>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	f01e 0f10 	tst.w	lr, #16
 8004850:	bf08      	it	eq
 8004852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004864:	f380 8811 	msr	BASEPRI, r0
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f7fe ffb4 	bl	80037dc <vTaskSwitchContext>
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f380 8811 	msr	BASEPRI, r0
 800487c:	bc09      	pop	{r0, r3}
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	6808      	ldr	r0, [r1, #0]
 8004882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004886:	f01e 0f10 	tst.w	lr, #16
 800488a:	bf08      	it	eq
 800488c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004890:	f380 8809 	msr	PSP, r0
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst>:
 80048a0:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
}
 80048c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048c2:	f7fe fed1 	bl	8003668 <xTaskIncrementTick>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <xPortSysTickHandler+0x40>)
 80048ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	2300      	movs	r3, #0
 80048d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f383 8811 	msr	BASEPRI, r3
}
 80048de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	e000ed04 	.word	0xe000ed04

080048ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048f0:	4b0b      	ldr	r3, [pc, #44]	; (8004920 <vPortSetupTimerInterrupt+0x34>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048f6:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <vPortSetupTimerInterrupt+0x38>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <vPortSetupTimerInterrupt+0x3c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <vPortSetupTimerInterrupt+0x40>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	099b      	lsrs	r3, r3, #6
 8004908:	4a09      	ldr	r2, [pc, #36]	; (8004930 <vPortSetupTimerInterrupt+0x44>)
 800490a:	3b01      	subs	r3, #1
 800490c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <vPortSetupTimerInterrupt+0x34>)
 8004910:	2207      	movs	r2, #7
 8004912:	601a      	str	r2, [r3, #0]
}
 8004914:	bf00      	nop
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	e000e010 	.word	0xe000e010
 8004924:	e000e018 	.word	0xe000e018
 8004928:	20000000 	.word	0x20000000
 800492c:	10624dd3 	.word	0x10624dd3
 8004930:	e000e014 	.word	0xe000e014

08004934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004944 <vPortEnableVFP+0x10>
 8004938:	6801      	ldr	r1, [r0, #0]
 800493a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800493e:	6001      	str	r1, [r0, #0]
 8004940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004942:	bf00      	nop
 8004944:	e000ed88 	.word	0xe000ed88

08004948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800494e:	f3ef 8305 	mrs	r3, IPSR
 8004952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b0f      	cmp	r3, #15
 8004958:	d914      	bls.n	8004984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800495a:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <vPortValidateInterruptPriority+0x70>)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004964:	4b15      	ldr	r3, [pc, #84]	; (80049bc <vPortValidateInterruptPriority+0x74>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	7afa      	ldrb	r2, [r7, #11]
 800496a:	429a      	cmp	r2, r3
 800496c:	d20a      	bcs.n	8004984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <vPortValidateInterruptPriority+0x78>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <vPortValidateInterruptPriority+0x7c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d90a      	bls.n	80049aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	603b      	str	r3, [r7, #0]
}
 80049a6:	bf00      	nop
 80049a8:	e7fe      	b.n	80049a8 <vPortValidateInterruptPriority+0x60>
	}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	e000e3f0 	.word	0xe000e3f0
 80049bc:	20000ec8 	.word	0x20000ec8
 80049c0:	e000ed0c 	.word	0xe000ed0c
 80049c4:	20000ecc 	.word	0x20000ecc

080049c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08a      	sub	sp, #40	; 0x28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049d4:	f7fe fd8c 	bl	80034f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049d8:	4b5b      	ldr	r3, [pc, #364]	; (8004b48 <pvPortMalloc+0x180>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049e0:	f000 f920 	bl	8004c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049e4:	4b59      	ldr	r3, [pc, #356]	; (8004b4c <pvPortMalloc+0x184>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4013      	ands	r3, r2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f040 8093 	bne.w	8004b18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d01d      	beq.n	8004a34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80049f8:	2208      	movs	r2, #8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4413      	add	r3, r2
 80049fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d014      	beq.n	8004a34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f023 0307 	bic.w	r3, r3, #7
 8004a10:	3308      	adds	r3, #8
 8004a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00a      	beq.n	8004a34 <pvPortMalloc+0x6c>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	617b      	str	r3, [r7, #20]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d06e      	beq.n	8004b18 <pvPortMalloc+0x150>
 8004a3a:	4b45      	ldr	r3, [pc, #276]	; (8004b50 <pvPortMalloc+0x188>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d869      	bhi.n	8004b18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a44:	4b43      	ldr	r3, [pc, #268]	; (8004b54 <pvPortMalloc+0x18c>)
 8004a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a48:	4b42      	ldr	r3, [pc, #264]	; (8004b54 <pvPortMalloc+0x18c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a4e:	e004      	b.n	8004a5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d903      	bls.n	8004a6c <pvPortMalloc+0xa4>
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1f1      	bne.n	8004a50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a6c:	4b36      	ldr	r3, [pc, #216]	; (8004b48 <pvPortMalloc+0x180>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d050      	beq.n	8004b18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a76:	6a3b      	ldr	r3, [r7, #32]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	4413      	add	r3, r2
 8004a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1ad2      	subs	r2, r2, r3
 8004a90:	2308      	movs	r3, #8
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d91f      	bls.n	8004ad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <pvPortMalloc+0xf8>
	__asm volatile
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	613b      	str	r3, [r7, #16]
}
 8004abc:	bf00      	nop
 8004abe:	e7fe      	b.n	8004abe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ad2:	69b8      	ldr	r0, [r7, #24]
 8004ad4:	f000 f908 	bl	8004ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <pvPortMalloc+0x188>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <pvPortMalloc+0x188>)
 8004ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <pvPortMalloc+0x188>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b1b      	ldr	r3, [pc, #108]	; (8004b58 <pvPortMalloc+0x190>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d203      	bcs.n	8004afa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <pvPortMalloc+0x188>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <pvPortMalloc+0x190>)
 8004af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <pvPortMalloc+0x184>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <pvPortMalloc+0x194>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a11      	ldr	r2, [pc, #68]	; (8004b5c <pvPortMalloc+0x194>)
 8004b16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b18:	f7fe fcf8 	bl	800350c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <pvPortMalloc+0x174>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60fb      	str	r3, [r7, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <pvPortMalloc+0x172>
	return pvReturn;
 8004b3c:	69fb      	ldr	r3, [r7, #28]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3728      	adds	r7, #40	; 0x28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20004ad8 	.word	0x20004ad8
 8004b4c:	20004aec 	.word	0x20004aec
 8004b50:	20004adc 	.word	0x20004adc
 8004b54:	20004ad0 	.word	0x20004ad0
 8004b58:	20004ae0 	.word	0x20004ae0
 8004b5c:	20004ae4 	.word	0x20004ae4

08004b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d04d      	beq.n	8004c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b72:	2308      	movs	r3, #8
 8004b74:	425b      	negs	r3, r3
 8004b76:	697a      	ldr	r2, [r7, #20]
 8004b78:	4413      	add	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	4b24      	ldr	r3, [pc, #144]	; (8004c18 <vPortFree+0xb8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <vPortFree+0x44>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	60fb      	str	r3, [r7, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <vPortFree+0x62>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60bb      	str	r3, [r7, #8]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <vPortFree+0xb8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01e      	beq.n	8004c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d11a      	bne.n	8004c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <vPortFree+0xb8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	401a      	ands	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004be8:	f7fe fc82 	bl	80034f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <vPortFree+0xbc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	4a09      	ldr	r2, [pc, #36]	; (8004c1c <vPortFree+0xbc>)
 8004bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bfa:	6938      	ldr	r0, [r7, #16]
 8004bfc:	f000 f874 	bl	8004ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c00:	4b07      	ldr	r3, [pc, #28]	; (8004c20 <vPortFree+0xc0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3301      	adds	r3, #1
 8004c06:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <vPortFree+0xc0>)
 8004c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c0a:	f7fe fc7f 	bl	800350c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20004aec 	.word	0x20004aec
 8004c1c:	20004adc 	.word	0x20004adc
 8004c20:	20004ae8 	.word	0x20004ae8

08004c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <prvHeapInit+0xac>)
 8004c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00c      	beq.n	8004c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3307      	adds	r3, #7
 8004c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0307 	bic.w	r3, r3, #7
 8004c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <prvHeapInit+0xac>)
 8004c54:	4413      	add	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <prvHeapInit+0xb0>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c62:	4b1c      	ldr	r3, [pc, #112]	; (8004cd4 <prvHeapInit+0xb0>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c70:	2208      	movs	r2, #8
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	1a9b      	subs	r3, r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f023 0307 	bic.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <prvHeapInit+0xb4>)
 8004c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c86:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <prvHeapInit+0xb4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <prvHeapInit+0xb4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <prvHeapInit+0xb4>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4a0a      	ldr	r2, [pc, #40]	; (8004cdc <prvHeapInit+0xb8>)
 8004cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	4a09      	ldr	r2, [pc, #36]	; (8004ce0 <prvHeapInit+0xbc>)
 8004cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <prvHeapInit+0xc0>)
 8004cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cc2:	601a      	str	r2, [r3, #0]
}
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	20000ed0 	.word	0x20000ed0
 8004cd4:	20004ad0 	.word	0x20004ad0
 8004cd8:	20004ad8 	.word	0x20004ad8
 8004cdc:	20004ae0 	.word	0x20004ae0
 8004ce0:	20004adc 	.word	0x20004adc
 8004ce4:	20004aec 	.word	0x20004aec

08004ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cf0:	4b28      	ldr	r3, [pc, #160]	; (8004d94 <prvInsertBlockIntoFreeList+0xac>)
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e002      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x14>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d8f7      	bhi.n	8004cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	4413      	add	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d108      	bne.n	8004d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	441a      	add	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	441a      	add	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d118      	bne.n	8004d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <prvInsertBlockIntoFreeList+0xb0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d00d      	beq.n	8004d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	441a      	add	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e008      	b.n	8004d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <prvInsertBlockIntoFreeList+0xb0>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	e003      	b.n	8004d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d002      	beq.n	8004d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d86:	bf00      	nop
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20004ad0 	.word	0x20004ad0
 8004d98:	20004ad8 	.word	0x20004ad8

08004d9c <__errno>:
 8004d9c:	4b01      	ldr	r3, [pc, #4]	; (8004da4 <__errno+0x8>)
 8004d9e:	6818      	ldr	r0, [r3, #0]
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000010 	.word	0x20000010

08004da8 <std>:
 8004da8:	2300      	movs	r3, #0
 8004daa:	b510      	push	{r4, lr}
 8004dac:	4604      	mov	r4, r0
 8004dae:	e9c0 3300 	strd	r3, r3, [r0]
 8004db2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004db6:	6083      	str	r3, [r0, #8]
 8004db8:	8181      	strh	r1, [r0, #12]
 8004dba:	6643      	str	r3, [r0, #100]	; 0x64
 8004dbc:	81c2      	strh	r2, [r0, #14]
 8004dbe:	6183      	str	r3, [r0, #24]
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	305c      	adds	r0, #92	; 0x5c
 8004dc6:	f000 f91a 	bl	8004ffe <memset>
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <std+0x38>)
 8004dcc:	6263      	str	r3, [r4, #36]	; 0x24
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <std+0x3c>)
 8004dd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004dd2:	4b05      	ldr	r3, [pc, #20]	; (8004de8 <std+0x40>)
 8004dd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <std+0x44>)
 8004dd8:	6224      	str	r4, [r4, #32]
 8004dda:	6323      	str	r3, [r4, #48]	; 0x30
 8004ddc:	bd10      	pop	{r4, pc}
 8004dde:	bf00      	nop
 8004de0:	08005319 	.word	0x08005319
 8004de4:	0800533b 	.word	0x0800533b
 8004de8:	08005373 	.word	0x08005373
 8004dec:	08005397 	.word	0x08005397

08004df0 <_cleanup_r>:
 8004df0:	4901      	ldr	r1, [pc, #4]	; (8004df8 <_cleanup_r+0x8>)
 8004df2:	f000 b8af 	b.w	8004f54 <_fwalk_reent>
 8004df6:	bf00      	nop
 8004df8:	08005671 	.word	0x08005671

08004dfc <__sfmoreglue>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	2268      	movs	r2, #104	; 0x68
 8004e00:	1e4d      	subs	r5, r1, #1
 8004e02:	4355      	muls	r5, r2
 8004e04:	460e      	mov	r6, r1
 8004e06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e0a:	f000 f921 	bl	8005050 <_malloc_r>
 8004e0e:	4604      	mov	r4, r0
 8004e10:	b140      	cbz	r0, 8004e24 <__sfmoreglue+0x28>
 8004e12:	2100      	movs	r1, #0
 8004e14:	e9c0 1600 	strd	r1, r6, [r0]
 8004e18:	300c      	adds	r0, #12
 8004e1a:	60a0      	str	r0, [r4, #8]
 8004e1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e20:	f000 f8ed 	bl	8004ffe <memset>
 8004e24:	4620      	mov	r0, r4
 8004e26:	bd70      	pop	{r4, r5, r6, pc}

08004e28 <__sfp_lock_acquire>:
 8004e28:	4801      	ldr	r0, [pc, #4]	; (8004e30 <__sfp_lock_acquire+0x8>)
 8004e2a:	f000 b8d8 	b.w	8004fde <__retarget_lock_acquire_recursive>
 8004e2e:	bf00      	nop
 8004e30:	20004af1 	.word	0x20004af1

08004e34 <__sfp_lock_release>:
 8004e34:	4801      	ldr	r0, [pc, #4]	; (8004e3c <__sfp_lock_release+0x8>)
 8004e36:	f000 b8d3 	b.w	8004fe0 <__retarget_lock_release_recursive>
 8004e3a:	bf00      	nop
 8004e3c:	20004af1 	.word	0x20004af1

08004e40 <__sinit_lock_acquire>:
 8004e40:	4801      	ldr	r0, [pc, #4]	; (8004e48 <__sinit_lock_acquire+0x8>)
 8004e42:	f000 b8cc 	b.w	8004fde <__retarget_lock_acquire_recursive>
 8004e46:	bf00      	nop
 8004e48:	20004af2 	.word	0x20004af2

08004e4c <__sinit_lock_release>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	; (8004e54 <__sinit_lock_release+0x8>)
 8004e4e:	f000 b8c7 	b.w	8004fe0 <__retarget_lock_release_recursive>
 8004e52:	bf00      	nop
 8004e54:	20004af2 	.word	0x20004af2

08004e58 <__sinit>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	f7ff fff0 	bl	8004e40 <__sinit_lock_acquire>
 8004e60:	69a3      	ldr	r3, [r4, #24]
 8004e62:	b11b      	cbz	r3, 8004e6c <__sinit+0x14>
 8004e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e68:	f7ff bff0 	b.w	8004e4c <__sinit_lock_release>
 8004e6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e70:	6523      	str	r3, [r4, #80]	; 0x50
 8004e72:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <__sinit+0x68>)
 8004e74:	4a13      	ldr	r2, [pc, #76]	; (8004ec4 <__sinit+0x6c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e7a:	42a3      	cmp	r3, r4
 8004e7c:	bf04      	itt	eq
 8004e7e:	2301      	moveq	r3, #1
 8004e80:	61a3      	streq	r3, [r4, #24]
 8004e82:	4620      	mov	r0, r4
 8004e84:	f000 f820 	bl	8004ec8 <__sfp>
 8004e88:	6060      	str	r0, [r4, #4]
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	f000 f81c 	bl	8004ec8 <__sfp>
 8004e90:	60a0      	str	r0, [r4, #8]
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 f818 	bl	8004ec8 <__sfp>
 8004e98:	2200      	movs	r2, #0
 8004e9a:	60e0      	str	r0, [r4, #12]
 8004e9c:	2104      	movs	r1, #4
 8004e9e:	6860      	ldr	r0, [r4, #4]
 8004ea0:	f7ff ff82 	bl	8004da8 <std>
 8004ea4:	68a0      	ldr	r0, [r4, #8]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	2109      	movs	r1, #9
 8004eaa:	f7ff ff7d 	bl	8004da8 <std>
 8004eae:	68e0      	ldr	r0, [r4, #12]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	2112      	movs	r1, #18
 8004eb4:	f7ff ff78 	bl	8004da8 <std>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	61a3      	str	r3, [r4, #24]
 8004ebc:	e7d2      	b.n	8004e64 <__sinit+0xc>
 8004ebe:	bf00      	nop
 8004ec0:	080059e0 	.word	0x080059e0
 8004ec4:	08004df1 	.word	0x08004df1

08004ec8 <__sfp>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	4607      	mov	r7, r0
 8004ecc:	f7ff ffac 	bl	8004e28 <__sfp_lock_acquire>
 8004ed0:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <__sfp+0x84>)
 8004ed2:	681e      	ldr	r6, [r3, #0]
 8004ed4:	69b3      	ldr	r3, [r6, #24]
 8004ed6:	b913      	cbnz	r3, 8004ede <__sfp+0x16>
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f7ff ffbd 	bl	8004e58 <__sinit>
 8004ede:	3648      	adds	r6, #72	; 0x48
 8004ee0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	d503      	bpl.n	8004ef0 <__sfp+0x28>
 8004ee8:	6833      	ldr	r3, [r6, #0]
 8004eea:	b30b      	cbz	r3, 8004f30 <__sfp+0x68>
 8004eec:	6836      	ldr	r6, [r6, #0]
 8004eee:	e7f7      	b.n	8004ee0 <__sfp+0x18>
 8004ef0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004ef4:	b9d5      	cbnz	r5, 8004f2c <__sfp+0x64>
 8004ef6:	4b16      	ldr	r3, [pc, #88]	; (8004f50 <__sfp+0x88>)
 8004ef8:	60e3      	str	r3, [r4, #12]
 8004efa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004efe:	6665      	str	r5, [r4, #100]	; 0x64
 8004f00:	f000 f86c 	bl	8004fdc <__retarget_lock_init_recursive>
 8004f04:	f7ff ff96 	bl	8004e34 <__sfp_lock_release>
 8004f08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f10:	6025      	str	r5, [r4, #0]
 8004f12:	61a5      	str	r5, [r4, #24]
 8004f14:	2208      	movs	r2, #8
 8004f16:	4629      	mov	r1, r5
 8004f18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f1c:	f000 f86f 	bl	8004ffe <memset>
 8004f20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f28:	4620      	mov	r0, r4
 8004f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2c:	3468      	adds	r4, #104	; 0x68
 8004f2e:	e7d9      	b.n	8004ee4 <__sfp+0x1c>
 8004f30:	2104      	movs	r1, #4
 8004f32:	4638      	mov	r0, r7
 8004f34:	f7ff ff62 	bl	8004dfc <__sfmoreglue>
 8004f38:	4604      	mov	r4, r0
 8004f3a:	6030      	str	r0, [r6, #0]
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d1d5      	bne.n	8004eec <__sfp+0x24>
 8004f40:	f7ff ff78 	bl	8004e34 <__sfp_lock_release>
 8004f44:	230c      	movs	r3, #12
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	e7ee      	b.n	8004f28 <__sfp+0x60>
 8004f4a:	bf00      	nop
 8004f4c:	080059e0 	.word	0x080059e0
 8004f50:	ffff0001 	.word	0xffff0001

08004f54 <_fwalk_reent>:
 8004f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f58:	4606      	mov	r6, r0
 8004f5a:	4688      	mov	r8, r1
 8004f5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f60:	2700      	movs	r7, #0
 8004f62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f66:	f1b9 0901 	subs.w	r9, r9, #1
 8004f6a:	d505      	bpl.n	8004f78 <_fwalk_reent+0x24>
 8004f6c:	6824      	ldr	r4, [r4, #0]
 8004f6e:	2c00      	cmp	r4, #0
 8004f70:	d1f7      	bne.n	8004f62 <_fwalk_reent+0xe>
 8004f72:	4638      	mov	r0, r7
 8004f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f78:	89ab      	ldrh	r3, [r5, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d907      	bls.n	8004f8e <_fwalk_reent+0x3a>
 8004f7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f82:	3301      	adds	r3, #1
 8004f84:	d003      	beq.n	8004f8e <_fwalk_reent+0x3a>
 8004f86:	4629      	mov	r1, r5
 8004f88:	4630      	mov	r0, r6
 8004f8a:	47c0      	blx	r8
 8004f8c:	4307      	orrs	r7, r0
 8004f8e:	3568      	adds	r5, #104	; 0x68
 8004f90:	e7e9      	b.n	8004f66 <_fwalk_reent+0x12>
	...

08004f94 <__libc_init_array>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4d0d      	ldr	r5, [pc, #52]	; (8004fcc <__libc_init_array+0x38>)
 8004f98:	4c0d      	ldr	r4, [pc, #52]	; (8004fd0 <__libc_init_array+0x3c>)
 8004f9a:	1b64      	subs	r4, r4, r5
 8004f9c:	10a4      	asrs	r4, r4, #2
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	42a6      	cmp	r6, r4
 8004fa2:	d109      	bne.n	8004fb8 <__libc_init_array+0x24>
 8004fa4:	4d0b      	ldr	r5, [pc, #44]	; (8004fd4 <__libc_init_array+0x40>)
 8004fa6:	4c0c      	ldr	r4, [pc, #48]	; (8004fd8 <__libc_init_array+0x44>)
 8004fa8:	f000 fca2 	bl	80058f0 <_init>
 8004fac:	1b64      	subs	r4, r4, r5
 8004fae:	10a4      	asrs	r4, r4, #2
 8004fb0:	2600      	movs	r6, #0
 8004fb2:	42a6      	cmp	r6, r4
 8004fb4:	d105      	bne.n	8004fc2 <__libc_init_array+0x2e>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbc:	4798      	blx	r3
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	e7ee      	b.n	8004fa0 <__libc_init_array+0xc>
 8004fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc6:	4798      	blx	r3
 8004fc8:	3601      	adds	r6, #1
 8004fca:	e7f2      	b.n	8004fb2 <__libc_init_array+0x1e>
 8004fcc:	080059ec 	.word	0x080059ec
 8004fd0:	080059ec 	.word	0x080059ec
 8004fd4:	080059ec 	.word	0x080059ec
 8004fd8:	080059f0 	.word	0x080059f0

08004fdc <__retarget_lock_init_recursive>:
 8004fdc:	4770      	bx	lr

08004fde <__retarget_lock_acquire_recursive>:
 8004fde:	4770      	bx	lr

08004fe0 <__retarget_lock_release_recursive>:
 8004fe0:	4770      	bx	lr

08004fe2 <memcpy>:
 8004fe2:	440a      	add	r2, r1
 8004fe4:	4291      	cmp	r1, r2
 8004fe6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fea:	d100      	bne.n	8004fee <memcpy+0xc>
 8004fec:	4770      	bx	lr
 8004fee:	b510      	push	{r4, lr}
 8004ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ff8:	4291      	cmp	r1, r2
 8004ffa:	d1f9      	bne.n	8004ff0 <memcpy+0xe>
 8004ffc:	bd10      	pop	{r4, pc}

08004ffe <memset>:
 8004ffe:	4402      	add	r2, r0
 8005000:	4603      	mov	r3, r0
 8005002:	4293      	cmp	r3, r2
 8005004:	d100      	bne.n	8005008 <memset+0xa>
 8005006:	4770      	bx	lr
 8005008:	f803 1b01 	strb.w	r1, [r3], #1
 800500c:	e7f9      	b.n	8005002 <memset+0x4>
	...

08005010 <sbrk_aligned>:
 8005010:	b570      	push	{r4, r5, r6, lr}
 8005012:	4e0e      	ldr	r6, [pc, #56]	; (800504c <sbrk_aligned+0x3c>)
 8005014:	460c      	mov	r4, r1
 8005016:	6831      	ldr	r1, [r6, #0]
 8005018:	4605      	mov	r5, r0
 800501a:	b911      	cbnz	r1, 8005022 <sbrk_aligned+0x12>
 800501c:	f000 f96c 	bl	80052f8 <_sbrk_r>
 8005020:	6030      	str	r0, [r6, #0]
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f000 f967 	bl	80052f8 <_sbrk_r>
 800502a:	1c43      	adds	r3, r0, #1
 800502c:	d00a      	beq.n	8005044 <sbrk_aligned+0x34>
 800502e:	1cc4      	adds	r4, r0, #3
 8005030:	f024 0403 	bic.w	r4, r4, #3
 8005034:	42a0      	cmp	r0, r4
 8005036:	d007      	beq.n	8005048 <sbrk_aligned+0x38>
 8005038:	1a21      	subs	r1, r4, r0
 800503a:	4628      	mov	r0, r5
 800503c:	f000 f95c 	bl	80052f8 <_sbrk_r>
 8005040:	3001      	adds	r0, #1
 8005042:	d101      	bne.n	8005048 <sbrk_aligned+0x38>
 8005044:	f04f 34ff 	mov.w	r4, #4294967295
 8005048:	4620      	mov	r0, r4
 800504a:	bd70      	pop	{r4, r5, r6, pc}
 800504c:	20004af8 	.word	0x20004af8

08005050 <_malloc_r>:
 8005050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005054:	1ccd      	adds	r5, r1, #3
 8005056:	f025 0503 	bic.w	r5, r5, #3
 800505a:	3508      	adds	r5, #8
 800505c:	2d0c      	cmp	r5, #12
 800505e:	bf38      	it	cc
 8005060:	250c      	movcc	r5, #12
 8005062:	2d00      	cmp	r5, #0
 8005064:	4607      	mov	r7, r0
 8005066:	db01      	blt.n	800506c <_malloc_r+0x1c>
 8005068:	42a9      	cmp	r1, r5
 800506a:	d905      	bls.n	8005078 <_malloc_r+0x28>
 800506c:	230c      	movs	r3, #12
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	2600      	movs	r6, #0
 8005072:	4630      	mov	r0, r6
 8005074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005078:	4e2e      	ldr	r6, [pc, #184]	; (8005134 <_malloc_r+0xe4>)
 800507a:	f000 fbad 	bl	80057d8 <__malloc_lock>
 800507e:	6833      	ldr	r3, [r6, #0]
 8005080:	461c      	mov	r4, r3
 8005082:	bb34      	cbnz	r4, 80050d2 <_malloc_r+0x82>
 8005084:	4629      	mov	r1, r5
 8005086:	4638      	mov	r0, r7
 8005088:	f7ff ffc2 	bl	8005010 <sbrk_aligned>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	4604      	mov	r4, r0
 8005090:	d14d      	bne.n	800512e <_malloc_r+0xde>
 8005092:	6834      	ldr	r4, [r6, #0]
 8005094:	4626      	mov	r6, r4
 8005096:	2e00      	cmp	r6, #0
 8005098:	d140      	bne.n	800511c <_malloc_r+0xcc>
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	4631      	mov	r1, r6
 800509e:	4638      	mov	r0, r7
 80050a0:	eb04 0803 	add.w	r8, r4, r3
 80050a4:	f000 f928 	bl	80052f8 <_sbrk_r>
 80050a8:	4580      	cmp	r8, r0
 80050aa:	d13a      	bne.n	8005122 <_malloc_r+0xd2>
 80050ac:	6821      	ldr	r1, [r4, #0]
 80050ae:	3503      	adds	r5, #3
 80050b0:	1a6d      	subs	r5, r5, r1
 80050b2:	f025 0503 	bic.w	r5, r5, #3
 80050b6:	3508      	adds	r5, #8
 80050b8:	2d0c      	cmp	r5, #12
 80050ba:	bf38      	it	cc
 80050bc:	250c      	movcc	r5, #12
 80050be:	4629      	mov	r1, r5
 80050c0:	4638      	mov	r0, r7
 80050c2:	f7ff ffa5 	bl	8005010 <sbrk_aligned>
 80050c6:	3001      	adds	r0, #1
 80050c8:	d02b      	beq.n	8005122 <_malloc_r+0xd2>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	442b      	add	r3, r5
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	e00e      	b.n	80050f0 <_malloc_r+0xa0>
 80050d2:	6822      	ldr	r2, [r4, #0]
 80050d4:	1b52      	subs	r2, r2, r5
 80050d6:	d41e      	bmi.n	8005116 <_malloc_r+0xc6>
 80050d8:	2a0b      	cmp	r2, #11
 80050da:	d916      	bls.n	800510a <_malloc_r+0xba>
 80050dc:	1961      	adds	r1, r4, r5
 80050de:	42a3      	cmp	r3, r4
 80050e0:	6025      	str	r5, [r4, #0]
 80050e2:	bf18      	it	ne
 80050e4:	6059      	strne	r1, [r3, #4]
 80050e6:	6863      	ldr	r3, [r4, #4]
 80050e8:	bf08      	it	eq
 80050ea:	6031      	streq	r1, [r6, #0]
 80050ec:	5162      	str	r2, [r4, r5]
 80050ee:	604b      	str	r3, [r1, #4]
 80050f0:	4638      	mov	r0, r7
 80050f2:	f104 060b 	add.w	r6, r4, #11
 80050f6:	f000 fb75 	bl	80057e4 <__malloc_unlock>
 80050fa:	f026 0607 	bic.w	r6, r6, #7
 80050fe:	1d23      	adds	r3, r4, #4
 8005100:	1af2      	subs	r2, r6, r3
 8005102:	d0b6      	beq.n	8005072 <_malloc_r+0x22>
 8005104:	1b9b      	subs	r3, r3, r6
 8005106:	50a3      	str	r3, [r4, r2]
 8005108:	e7b3      	b.n	8005072 <_malloc_r+0x22>
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	42a3      	cmp	r3, r4
 800510e:	bf0c      	ite	eq
 8005110:	6032      	streq	r2, [r6, #0]
 8005112:	605a      	strne	r2, [r3, #4]
 8005114:	e7ec      	b.n	80050f0 <_malloc_r+0xa0>
 8005116:	4623      	mov	r3, r4
 8005118:	6864      	ldr	r4, [r4, #4]
 800511a:	e7b2      	b.n	8005082 <_malloc_r+0x32>
 800511c:	4634      	mov	r4, r6
 800511e:	6876      	ldr	r6, [r6, #4]
 8005120:	e7b9      	b.n	8005096 <_malloc_r+0x46>
 8005122:	230c      	movs	r3, #12
 8005124:	603b      	str	r3, [r7, #0]
 8005126:	4638      	mov	r0, r7
 8005128:	f000 fb5c 	bl	80057e4 <__malloc_unlock>
 800512c:	e7a1      	b.n	8005072 <_malloc_r+0x22>
 800512e:	6025      	str	r5, [r4, #0]
 8005130:	e7de      	b.n	80050f0 <_malloc_r+0xa0>
 8005132:	bf00      	nop
 8005134:	20004af4 	.word	0x20004af4

08005138 <_puts_r>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	460e      	mov	r6, r1
 800513c:	4605      	mov	r5, r0
 800513e:	b118      	cbz	r0, 8005148 <_puts_r+0x10>
 8005140:	6983      	ldr	r3, [r0, #24]
 8005142:	b90b      	cbnz	r3, 8005148 <_puts_r+0x10>
 8005144:	f7ff fe88 	bl	8004e58 <__sinit>
 8005148:	69ab      	ldr	r3, [r5, #24]
 800514a:	68ac      	ldr	r4, [r5, #8]
 800514c:	b913      	cbnz	r3, 8005154 <_puts_r+0x1c>
 800514e:	4628      	mov	r0, r5
 8005150:	f7ff fe82 	bl	8004e58 <__sinit>
 8005154:	4b2c      	ldr	r3, [pc, #176]	; (8005208 <_puts_r+0xd0>)
 8005156:	429c      	cmp	r4, r3
 8005158:	d120      	bne.n	800519c <_puts_r+0x64>
 800515a:	686c      	ldr	r4, [r5, #4]
 800515c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800515e:	07db      	lsls	r3, r3, #31
 8005160:	d405      	bmi.n	800516e <_puts_r+0x36>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	0598      	lsls	r0, r3, #22
 8005166:	d402      	bmi.n	800516e <_puts_r+0x36>
 8005168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516a:	f7ff ff38 	bl	8004fde <__retarget_lock_acquire_recursive>
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	0719      	lsls	r1, r3, #28
 8005172:	d51d      	bpl.n	80051b0 <_puts_r+0x78>
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	b1db      	cbz	r3, 80051b0 <_puts_r+0x78>
 8005178:	3e01      	subs	r6, #1
 800517a:	68a3      	ldr	r3, [r4, #8]
 800517c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005180:	3b01      	subs	r3, #1
 8005182:	60a3      	str	r3, [r4, #8]
 8005184:	bb39      	cbnz	r1, 80051d6 <_puts_r+0x9e>
 8005186:	2b00      	cmp	r3, #0
 8005188:	da38      	bge.n	80051fc <_puts_r+0xc4>
 800518a:	4622      	mov	r2, r4
 800518c:	210a      	movs	r1, #10
 800518e:	4628      	mov	r0, r5
 8005190:	f000 f906 	bl	80053a0 <__swbuf_r>
 8005194:	3001      	adds	r0, #1
 8005196:	d011      	beq.n	80051bc <_puts_r+0x84>
 8005198:	250a      	movs	r5, #10
 800519a:	e011      	b.n	80051c0 <_puts_r+0x88>
 800519c:	4b1b      	ldr	r3, [pc, #108]	; (800520c <_puts_r+0xd4>)
 800519e:	429c      	cmp	r4, r3
 80051a0:	d101      	bne.n	80051a6 <_puts_r+0x6e>
 80051a2:	68ac      	ldr	r4, [r5, #8]
 80051a4:	e7da      	b.n	800515c <_puts_r+0x24>
 80051a6:	4b1a      	ldr	r3, [pc, #104]	; (8005210 <_puts_r+0xd8>)
 80051a8:	429c      	cmp	r4, r3
 80051aa:	bf08      	it	eq
 80051ac:	68ec      	ldreq	r4, [r5, #12]
 80051ae:	e7d5      	b.n	800515c <_puts_r+0x24>
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 f958 	bl	8005468 <__swsetup_r>
 80051b8:	2800      	cmp	r0, #0
 80051ba:	d0dd      	beq.n	8005178 <_puts_r+0x40>
 80051bc:	f04f 35ff 	mov.w	r5, #4294967295
 80051c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051c2:	07da      	lsls	r2, r3, #31
 80051c4:	d405      	bmi.n	80051d2 <_puts_r+0x9a>
 80051c6:	89a3      	ldrh	r3, [r4, #12]
 80051c8:	059b      	lsls	r3, r3, #22
 80051ca:	d402      	bmi.n	80051d2 <_puts_r+0x9a>
 80051cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051ce:	f7ff ff07 	bl	8004fe0 <__retarget_lock_release_recursive>
 80051d2:	4628      	mov	r0, r5
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	da04      	bge.n	80051e4 <_puts_r+0xac>
 80051da:	69a2      	ldr	r2, [r4, #24]
 80051dc:	429a      	cmp	r2, r3
 80051de:	dc06      	bgt.n	80051ee <_puts_r+0xb6>
 80051e0:	290a      	cmp	r1, #10
 80051e2:	d004      	beq.n	80051ee <_puts_r+0xb6>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	6022      	str	r2, [r4, #0]
 80051ea:	7019      	strb	r1, [r3, #0]
 80051ec:	e7c5      	b.n	800517a <_puts_r+0x42>
 80051ee:	4622      	mov	r2, r4
 80051f0:	4628      	mov	r0, r5
 80051f2:	f000 f8d5 	bl	80053a0 <__swbuf_r>
 80051f6:	3001      	adds	r0, #1
 80051f8:	d1bf      	bne.n	800517a <_puts_r+0x42>
 80051fa:	e7df      	b.n	80051bc <_puts_r+0x84>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	250a      	movs	r5, #10
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	6022      	str	r2, [r4, #0]
 8005204:	701d      	strb	r5, [r3, #0]
 8005206:	e7db      	b.n	80051c0 <_puts_r+0x88>
 8005208:	080059a0 	.word	0x080059a0
 800520c:	080059c0 	.word	0x080059c0
 8005210:	08005980 	.word	0x08005980

08005214 <puts>:
 8005214:	4b02      	ldr	r3, [pc, #8]	; (8005220 <puts+0xc>)
 8005216:	4601      	mov	r1, r0
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	f7ff bf8d 	b.w	8005138 <_puts_r>
 800521e:	bf00      	nop
 8005220:	20000010 	.word	0x20000010

08005224 <cleanup_glue>:
 8005224:	b538      	push	{r3, r4, r5, lr}
 8005226:	460c      	mov	r4, r1
 8005228:	6809      	ldr	r1, [r1, #0]
 800522a:	4605      	mov	r5, r0
 800522c:	b109      	cbz	r1, 8005232 <cleanup_glue+0xe>
 800522e:	f7ff fff9 	bl	8005224 <cleanup_glue>
 8005232:	4621      	mov	r1, r4
 8005234:	4628      	mov	r0, r5
 8005236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800523a:	f000 bad9 	b.w	80057f0 <_free_r>
	...

08005240 <_reclaim_reent>:
 8005240:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <_reclaim_reent+0xb4>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4283      	cmp	r3, r0
 8005246:	b570      	push	{r4, r5, r6, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	d051      	beq.n	80052f0 <_reclaim_reent+0xb0>
 800524c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800524e:	b143      	cbz	r3, 8005262 <_reclaim_reent+0x22>
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d14a      	bne.n	80052ec <_reclaim_reent+0xac>
 8005256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005258:	6819      	ldr	r1, [r3, #0]
 800525a:	b111      	cbz	r1, 8005262 <_reclaim_reent+0x22>
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fac7 	bl	80057f0 <_free_r>
 8005262:	6961      	ldr	r1, [r4, #20]
 8005264:	b111      	cbz	r1, 800526c <_reclaim_reent+0x2c>
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fac2 	bl	80057f0 <_free_r>
 800526c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800526e:	b111      	cbz	r1, 8005276 <_reclaim_reent+0x36>
 8005270:	4620      	mov	r0, r4
 8005272:	f000 fabd 	bl	80057f0 <_free_r>
 8005276:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005278:	b111      	cbz	r1, 8005280 <_reclaim_reent+0x40>
 800527a:	4620      	mov	r0, r4
 800527c:	f000 fab8 	bl	80057f0 <_free_r>
 8005280:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005282:	b111      	cbz	r1, 800528a <_reclaim_reent+0x4a>
 8005284:	4620      	mov	r0, r4
 8005286:	f000 fab3 	bl	80057f0 <_free_r>
 800528a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800528c:	b111      	cbz	r1, 8005294 <_reclaim_reent+0x54>
 800528e:	4620      	mov	r0, r4
 8005290:	f000 faae 	bl	80057f0 <_free_r>
 8005294:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005296:	b111      	cbz	r1, 800529e <_reclaim_reent+0x5e>
 8005298:	4620      	mov	r0, r4
 800529a:	f000 faa9 	bl	80057f0 <_free_r>
 800529e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80052a0:	b111      	cbz	r1, 80052a8 <_reclaim_reent+0x68>
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 faa4 	bl	80057f0 <_free_r>
 80052a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052aa:	b111      	cbz	r1, 80052b2 <_reclaim_reent+0x72>
 80052ac:	4620      	mov	r0, r4
 80052ae:	f000 fa9f 	bl	80057f0 <_free_r>
 80052b2:	69a3      	ldr	r3, [r4, #24]
 80052b4:	b1e3      	cbz	r3, 80052f0 <_reclaim_reent+0xb0>
 80052b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052b8:	4620      	mov	r0, r4
 80052ba:	4798      	blx	r3
 80052bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80052be:	b1b9      	cbz	r1, 80052f0 <_reclaim_reent+0xb0>
 80052c0:	4620      	mov	r0, r4
 80052c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80052c6:	f7ff bfad 	b.w	8005224 <cleanup_glue>
 80052ca:	5949      	ldr	r1, [r1, r5]
 80052cc:	b941      	cbnz	r1, 80052e0 <_reclaim_reent+0xa0>
 80052ce:	3504      	adds	r5, #4
 80052d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052d2:	2d80      	cmp	r5, #128	; 0x80
 80052d4:	68d9      	ldr	r1, [r3, #12]
 80052d6:	d1f8      	bne.n	80052ca <_reclaim_reent+0x8a>
 80052d8:	4620      	mov	r0, r4
 80052da:	f000 fa89 	bl	80057f0 <_free_r>
 80052de:	e7ba      	b.n	8005256 <_reclaim_reent+0x16>
 80052e0:	680e      	ldr	r6, [r1, #0]
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 fa84 	bl	80057f0 <_free_r>
 80052e8:	4631      	mov	r1, r6
 80052ea:	e7ef      	b.n	80052cc <_reclaim_reent+0x8c>
 80052ec:	2500      	movs	r5, #0
 80052ee:	e7ef      	b.n	80052d0 <_reclaim_reent+0x90>
 80052f0:	bd70      	pop	{r4, r5, r6, pc}
 80052f2:	bf00      	nop
 80052f4:	20000010 	.word	0x20000010

080052f8 <_sbrk_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d06      	ldr	r5, [pc, #24]	; (8005314 <_sbrk_r+0x1c>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	602b      	str	r3, [r5, #0]
 8005304:	f7fb fac0 	bl	8000888 <_sbrk>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d102      	bne.n	8005312 <_sbrk_r+0x1a>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b103      	cbz	r3, 8005312 <_sbrk_r+0x1a>
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	bd38      	pop	{r3, r4, r5, pc}
 8005314:	20004afc 	.word	0x20004afc

08005318 <__sread>:
 8005318:	b510      	push	{r4, lr}
 800531a:	460c      	mov	r4, r1
 800531c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005320:	f000 fab2 	bl	8005888 <_read_r>
 8005324:	2800      	cmp	r0, #0
 8005326:	bfab      	itete	ge
 8005328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800532a:	89a3      	ldrhlt	r3, [r4, #12]
 800532c:	181b      	addge	r3, r3, r0
 800532e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005332:	bfac      	ite	ge
 8005334:	6563      	strge	r3, [r4, #84]	; 0x54
 8005336:	81a3      	strhlt	r3, [r4, #12]
 8005338:	bd10      	pop	{r4, pc}

0800533a <__swrite>:
 800533a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800533e:	461f      	mov	r7, r3
 8005340:	898b      	ldrh	r3, [r1, #12]
 8005342:	05db      	lsls	r3, r3, #23
 8005344:	4605      	mov	r5, r0
 8005346:	460c      	mov	r4, r1
 8005348:	4616      	mov	r6, r2
 800534a:	d505      	bpl.n	8005358 <__swrite+0x1e>
 800534c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005350:	2302      	movs	r3, #2
 8005352:	2200      	movs	r2, #0
 8005354:	f000 f9c8 	bl	80056e8 <_lseek_r>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800535e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	4632      	mov	r2, r6
 8005366:	463b      	mov	r3, r7
 8005368:	4628      	mov	r0, r5
 800536a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800536e:	f000 b869 	b.w	8005444 <_write_r>

08005372 <__sseek>:
 8005372:	b510      	push	{r4, lr}
 8005374:	460c      	mov	r4, r1
 8005376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537a:	f000 f9b5 	bl	80056e8 <_lseek_r>
 800537e:	1c43      	adds	r3, r0, #1
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	bf15      	itete	ne
 8005384:	6560      	strne	r0, [r4, #84]	; 0x54
 8005386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800538a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800538e:	81a3      	strheq	r3, [r4, #12]
 8005390:	bf18      	it	ne
 8005392:	81a3      	strhne	r3, [r4, #12]
 8005394:	bd10      	pop	{r4, pc}

08005396 <__sclose>:
 8005396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539a:	f000 b8d3 	b.w	8005544 <_close_r>
	...

080053a0 <__swbuf_r>:
 80053a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053a2:	460e      	mov	r6, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	4605      	mov	r5, r0
 80053a8:	b118      	cbz	r0, 80053b2 <__swbuf_r+0x12>
 80053aa:	6983      	ldr	r3, [r0, #24]
 80053ac:	b90b      	cbnz	r3, 80053b2 <__swbuf_r+0x12>
 80053ae:	f7ff fd53 	bl	8004e58 <__sinit>
 80053b2:	4b21      	ldr	r3, [pc, #132]	; (8005438 <__swbuf_r+0x98>)
 80053b4:	429c      	cmp	r4, r3
 80053b6:	d12b      	bne.n	8005410 <__swbuf_r+0x70>
 80053b8:	686c      	ldr	r4, [r5, #4]
 80053ba:	69a3      	ldr	r3, [r4, #24]
 80053bc:	60a3      	str	r3, [r4, #8]
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	071a      	lsls	r2, r3, #28
 80053c2:	d52f      	bpl.n	8005424 <__swbuf_r+0x84>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	b36b      	cbz	r3, 8005424 <__swbuf_r+0x84>
 80053c8:	6923      	ldr	r3, [r4, #16]
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	1ac0      	subs	r0, r0, r3
 80053ce:	6963      	ldr	r3, [r4, #20]
 80053d0:	b2f6      	uxtb	r6, r6
 80053d2:	4283      	cmp	r3, r0
 80053d4:	4637      	mov	r7, r6
 80053d6:	dc04      	bgt.n	80053e2 <__swbuf_r+0x42>
 80053d8:	4621      	mov	r1, r4
 80053da:	4628      	mov	r0, r5
 80053dc:	f000 f948 	bl	8005670 <_fflush_r>
 80053e0:	bb30      	cbnz	r0, 8005430 <__swbuf_r+0x90>
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	60a3      	str	r3, [r4, #8]
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	6022      	str	r2, [r4, #0]
 80053ee:	701e      	strb	r6, [r3, #0]
 80053f0:	6963      	ldr	r3, [r4, #20]
 80053f2:	3001      	adds	r0, #1
 80053f4:	4283      	cmp	r3, r0
 80053f6:	d004      	beq.n	8005402 <__swbuf_r+0x62>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	07db      	lsls	r3, r3, #31
 80053fc:	d506      	bpl.n	800540c <__swbuf_r+0x6c>
 80053fe:	2e0a      	cmp	r6, #10
 8005400:	d104      	bne.n	800540c <__swbuf_r+0x6c>
 8005402:	4621      	mov	r1, r4
 8005404:	4628      	mov	r0, r5
 8005406:	f000 f933 	bl	8005670 <_fflush_r>
 800540a:	b988      	cbnz	r0, 8005430 <__swbuf_r+0x90>
 800540c:	4638      	mov	r0, r7
 800540e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <__swbuf_r+0x9c>)
 8005412:	429c      	cmp	r4, r3
 8005414:	d101      	bne.n	800541a <__swbuf_r+0x7a>
 8005416:	68ac      	ldr	r4, [r5, #8]
 8005418:	e7cf      	b.n	80053ba <__swbuf_r+0x1a>
 800541a:	4b09      	ldr	r3, [pc, #36]	; (8005440 <__swbuf_r+0xa0>)
 800541c:	429c      	cmp	r4, r3
 800541e:	bf08      	it	eq
 8005420:	68ec      	ldreq	r4, [r5, #12]
 8005422:	e7ca      	b.n	80053ba <__swbuf_r+0x1a>
 8005424:	4621      	mov	r1, r4
 8005426:	4628      	mov	r0, r5
 8005428:	f000 f81e 	bl	8005468 <__swsetup_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	d0cb      	beq.n	80053c8 <__swbuf_r+0x28>
 8005430:	f04f 37ff 	mov.w	r7, #4294967295
 8005434:	e7ea      	b.n	800540c <__swbuf_r+0x6c>
 8005436:	bf00      	nop
 8005438:	080059a0 	.word	0x080059a0
 800543c:	080059c0 	.word	0x080059c0
 8005440:	08005980 	.word	0x08005980

08005444 <_write_r>:
 8005444:	b538      	push	{r3, r4, r5, lr}
 8005446:	4d07      	ldr	r5, [pc, #28]	; (8005464 <_write_r+0x20>)
 8005448:	4604      	mov	r4, r0
 800544a:	4608      	mov	r0, r1
 800544c:	4611      	mov	r1, r2
 800544e:	2200      	movs	r2, #0
 8005450:	602a      	str	r2, [r5, #0]
 8005452:	461a      	mov	r2, r3
 8005454:	f7fb f9c8 	bl	80007e8 <_write>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_write_r+0x1e>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_write_r+0x1e>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	20004afc 	.word	0x20004afc

08005468 <__swsetup_r>:
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <__swsetup_r+0xcc>)
 800546a:	b570      	push	{r4, r5, r6, lr}
 800546c:	681d      	ldr	r5, [r3, #0]
 800546e:	4606      	mov	r6, r0
 8005470:	460c      	mov	r4, r1
 8005472:	b125      	cbz	r5, 800547e <__swsetup_r+0x16>
 8005474:	69ab      	ldr	r3, [r5, #24]
 8005476:	b913      	cbnz	r3, 800547e <__swsetup_r+0x16>
 8005478:	4628      	mov	r0, r5
 800547a:	f7ff fced 	bl	8004e58 <__sinit>
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <__swsetup_r+0xd0>)
 8005480:	429c      	cmp	r4, r3
 8005482:	d10f      	bne.n	80054a4 <__swsetup_r+0x3c>
 8005484:	686c      	ldr	r4, [r5, #4]
 8005486:	89a3      	ldrh	r3, [r4, #12]
 8005488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800548c:	0719      	lsls	r1, r3, #28
 800548e:	d42c      	bmi.n	80054ea <__swsetup_r+0x82>
 8005490:	06dd      	lsls	r5, r3, #27
 8005492:	d411      	bmi.n	80054b8 <__swsetup_r+0x50>
 8005494:	2309      	movs	r3, #9
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800549c:	81a3      	strh	r3, [r4, #12]
 800549e:	f04f 30ff 	mov.w	r0, #4294967295
 80054a2:	e03e      	b.n	8005522 <__swsetup_r+0xba>
 80054a4:	4b25      	ldr	r3, [pc, #148]	; (800553c <__swsetup_r+0xd4>)
 80054a6:	429c      	cmp	r4, r3
 80054a8:	d101      	bne.n	80054ae <__swsetup_r+0x46>
 80054aa:	68ac      	ldr	r4, [r5, #8]
 80054ac:	e7eb      	b.n	8005486 <__swsetup_r+0x1e>
 80054ae:	4b24      	ldr	r3, [pc, #144]	; (8005540 <__swsetup_r+0xd8>)
 80054b0:	429c      	cmp	r4, r3
 80054b2:	bf08      	it	eq
 80054b4:	68ec      	ldreq	r4, [r5, #12]
 80054b6:	e7e6      	b.n	8005486 <__swsetup_r+0x1e>
 80054b8:	0758      	lsls	r0, r3, #29
 80054ba:	d512      	bpl.n	80054e2 <__swsetup_r+0x7a>
 80054bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054be:	b141      	cbz	r1, 80054d2 <__swsetup_r+0x6a>
 80054c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054c4:	4299      	cmp	r1, r3
 80054c6:	d002      	beq.n	80054ce <__swsetup_r+0x66>
 80054c8:	4630      	mov	r0, r6
 80054ca:	f000 f991 	bl	80057f0 <_free_r>
 80054ce:	2300      	movs	r3, #0
 80054d0:	6363      	str	r3, [r4, #52]	; 0x34
 80054d2:	89a3      	ldrh	r3, [r4, #12]
 80054d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80054d8:	81a3      	strh	r3, [r4, #12]
 80054da:	2300      	movs	r3, #0
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	6923      	ldr	r3, [r4, #16]
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f043 0308 	orr.w	r3, r3, #8
 80054e8:	81a3      	strh	r3, [r4, #12]
 80054ea:	6923      	ldr	r3, [r4, #16]
 80054ec:	b94b      	cbnz	r3, 8005502 <__swsetup_r+0x9a>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80054f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f8:	d003      	beq.n	8005502 <__swsetup_r+0x9a>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4630      	mov	r0, r6
 80054fe:	f000 f92b 	bl	8005758 <__smakebuf_r>
 8005502:	89a0      	ldrh	r0, [r4, #12]
 8005504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005508:	f010 0301 	ands.w	r3, r0, #1
 800550c:	d00a      	beq.n	8005524 <__swsetup_r+0xbc>
 800550e:	2300      	movs	r3, #0
 8005510:	60a3      	str	r3, [r4, #8]
 8005512:	6963      	ldr	r3, [r4, #20]
 8005514:	425b      	negs	r3, r3
 8005516:	61a3      	str	r3, [r4, #24]
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	b943      	cbnz	r3, 800552e <__swsetup_r+0xc6>
 800551c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005520:	d1ba      	bne.n	8005498 <__swsetup_r+0x30>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	0781      	lsls	r1, r0, #30
 8005526:	bf58      	it	pl
 8005528:	6963      	ldrpl	r3, [r4, #20]
 800552a:	60a3      	str	r3, [r4, #8]
 800552c:	e7f4      	b.n	8005518 <__swsetup_r+0xb0>
 800552e:	2000      	movs	r0, #0
 8005530:	e7f7      	b.n	8005522 <__swsetup_r+0xba>
 8005532:	bf00      	nop
 8005534:	20000010 	.word	0x20000010
 8005538:	080059a0 	.word	0x080059a0
 800553c:	080059c0 	.word	0x080059c0
 8005540:	08005980 	.word	0x08005980

08005544 <_close_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4d06      	ldr	r5, [pc, #24]	; (8005560 <_close_r+0x1c>)
 8005548:	2300      	movs	r3, #0
 800554a:	4604      	mov	r4, r0
 800554c:	4608      	mov	r0, r1
 800554e:	602b      	str	r3, [r5, #0]
 8005550:	f7fb f966 	bl	8000820 <_close>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_close_r+0x1a>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_close_r+0x1a>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20004afc 	.word	0x20004afc

08005564 <__sflush_r>:
 8005564:	898a      	ldrh	r2, [r1, #12]
 8005566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800556a:	4605      	mov	r5, r0
 800556c:	0710      	lsls	r0, r2, #28
 800556e:	460c      	mov	r4, r1
 8005570:	d458      	bmi.n	8005624 <__sflush_r+0xc0>
 8005572:	684b      	ldr	r3, [r1, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	dc05      	bgt.n	8005584 <__sflush_r+0x20>
 8005578:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	dc02      	bgt.n	8005584 <__sflush_r+0x20>
 800557e:	2000      	movs	r0, #0
 8005580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005584:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005586:	2e00      	cmp	r6, #0
 8005588:	d0f9      	beq.n	800557e <__sflush_r+0x1a>
 800558a:	2300      	movs	r3, #0
 800558c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005590:	682f      	ldr	r7, [r5, #0]
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	d032      	beq.n	80055fc <__sflush_r+0x98>
 8005596:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	075a      	lsls	r2, r3, #29
 800559c:	d505      	bpl.n	80055aa <__sflush_r+0x46>
 800559e:	6863      	ldr	r3, [r4, #4]
 80055a0:	1ac0      	subs	r0, r0, r3
 80055a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80055a4:	b10b      	cbz	r3, 80055aa <__sflush_r+0x46>
 80055a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055a8:	1ac0      	subs	r0, r0, r3
 80055aa:	2300      	movs	r3, #0
 80055ac:	4602      	mov	r2, r0
 80055ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055b0:	6a21      	ldr	r1, [r4, #32]
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b0      	blx	r6
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	89a3      	ldrh	r3, [r4, #12]
 80055ba:	d106      	bne.n	80055ca <__sflush_r+0x66>
 80055bc:	6829      	ldr	r1, [r5, #0]
 80055be:	291d      	cmp	r1, #29
 80055c0:	d82c      	bhi.n	800561c <__sflush_r+0xb8>
 80055c2:	4a2a      	ldr	r2, [pc, #168]	; (800566c <__sflush_r+0x108>)
 80055c4:	40ca      	lsrs	r2, r1
 80055c6:	07d6      	lsls	r6, r2, #31
 80055c8:	d528      	bpl.n	800561c <__sflush_r+0xb8>
 80055ca:	2200      	movs	r2, #0
 80055cc:	6062      	str	r2, [r4, #4]
 80055ce:	04d9      	lsls	r1, r3, #19
 80055d0:	6922      	ldr	r2, [r4, #16]
 80055d2:	6022      	str	r2, [r4, #0]
 80055d4:	d504      	bpl.n	80055e0 <__sflush_r+0x7c>
 80055d6:	1c42      	adds	r2, r0, #1
 80055d8:	d101      	bne.n	80055de <__sflush_r+0x7a>
 80055da:	682b      	ldr	r3, [r5, #0]
 80055dc:	b903      	cbnz	r3, 80055e0 <__sflush_r+0x7c>
 80055de:	6560      	str	r0, [r4, #84]	; 0x54
 80055e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055e2:	602f      	str	r7, [r5, #0]
 80055e4:	2900      	cmp	r1, #0
 80055e6:	d0ca      	beq.n	800557e <__sflush_r+0x1a>
 80055e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055ec:	4299      	cmp	r1, r3
 80055ee:	d002      	beq.n	80055f6 <__sflush_r+0x92>
 80055f0:	4628      	mov	r0, r5
 80055f2:	f000 f8fd 	bl	80057f0 <_free_r>
 80055f6:	2000      	movs	r0, #0
 80055f8:	6360      	str	r0, [r4, #52]	; 0x34
 80055fa:	e7c1      	b.n	8005580 <__sflush_r+0x1c>
 80055fc:	6a21      	ldr	r1, [r4, #32]
 80055fe:	2301      	movs	r3, #1
 8005600:	4628      	mov	r0, r5
 8005602:	47b0      	blx	r6
 8005604:	1c41      	adds	r1, r0, #1
 8005606:	d1c7      	bne.n	8005598 <__sflush_r+0x34>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0c4      	beq.n	8005598 <__sflush_r+0x34>
 800560e:	2b1d      	cmp	r3, #29
 8005610:	d001      	beq.n	8005616 <__sflush_r+0xb2>
 8005612:	2b16      	cmp	r3, #22
 8005614:	d101      	bne.n	800561a <__sflush_r+0xb6>
 8005616:	602f      	str	r7, [r5, #0]
 8005618:	e7b1      	b.n	800557e <__sflush_r+0x1a>
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	e7ad      	b.n	8005580 <__sflush_r+0x1c>
 8005624:	690f      	ldr	r7, [r1, #16]
 8005626:	2f00      	cmp	r7, #0
 8005628:	d0a9      	beq.n	800557e <__sflush_r+0x1a>
 800562a:	0793      	lsls	r3, r2, #30
 800562c:	680e      	ldr	r6, [r1, #0]
 800562e:	bf08      	it	eq
 8005630:	694b      	ldreq	r3, [r1, #20]
 8005632:	600f      	str	r7, [r1, #0]
 8005634:	bf18      	it	ne
 8005636:	2300      	movne	r3, #0
 8005638:	eba6 0807 	sub.w	r8, r6, r7
 800563c:	608b      	str	r3, [r1, #8]
 800563e:	f1b8 0f00 	cmp.w	r8, #0
 8005642:	dd9c      	ble.n	800557e <__sflush_r+0x1a>
 8005644:	6a21      	ldr	r1, [r4, #32]
 8005646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005648:	4643      	mov	r3, r8
 800564a:	463a      	mov	r2, r7
 800564c:	4628      	mov	r0, r5
 800564e:	47b0      	blx	r6
 8005650:	2800      	cmp	r0, #0
 8005652:	dc06      	bgt.n	8005662 <__sflush_r+0xfe>
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565a:	81a3      	strh	r3, [r4, #12]
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
 8005660:	e78e      	b.n	8005580 <__sflush_r+0x1c>
 8005662:	4407      	add	r7, r0
 8005664:	eba8 0800 	sub.w	r8, r8, r0
 8005668:	e7e9      	b.n	800563e <__sflush_r+0xda>
 800566a:	bf00      	nop
 800566c:	20400001 	.word	0x20400001

08005670 <_fflush_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	690b      	ldr	r3, [r1, #16]
 8005674:	4605      	mov	r5, r0
 8005676:	460c      	mov	r4, r1
 8005678:	b913      	cbnz	r3, 8005680 <_fflush_r+0x10>
 800567a:	2500      	movs	r5, #0
 800567c:	4628      	mov	r0, r5
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	b118      	cbz	r0, 800568a <_fflush_r+0x1a>
 8005682:	6983      	ldr	r3, [r0, #24]
 8005684:	b90b      	cbnz	r3, 800568a <_fflush_r+0x1a>
 8005686:	f7ff fbe7 	bl	8004e58 <__sinit>
 800568a:	4b14      	ldr	r3, [pc, #80]	; (80056dc <_fflush_r+0x6c>)
 800568c:	429c      	cmp	r4, r3
 800568e:	d11b      	bne.n	80056c8 <_fflush_r+0x58>
 8005690:	686c      	ldr	r4, [r5, #4]
 8005692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0ef      	beq.n	800567a <_fflush_r+0xa>
 800569a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800569c:	07d0      	lsls	r0, r2, #31
 800569e:	d404      	bmi.n	80056aa <_fflush_r+0x3a>
 80056a0:	0599      	lsls	r1, r3, #22
 80056a2:	d402      	bmi.n	80056aa <_fflush_r+0x3a>
 80056a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056a6:	f7ff fc9a 	bl	8004fde <__retarget_lock_acquire_recursive>
 80056aa:	4628      	mov	r0, r5
 80056ac:	4621      	mov	r1, r4
 80056ae:	f7ff ff59 	bl	8005564 <__sflush_r>
 80056b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b4:	07da      	lsls	r2, r3, #31
 80056b6:	4605      	mov	r5, r0
 80056b8:	d4e0      	bmi.n	800567c <_fflush_r+0xc>
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	d4dd      	bmi.n	800567c <_fflush_r+0xc>
 80056c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056c2:	f7ff fc8d 	bl	8004fe0 <__retarget_lock_release_recursive>
 80056c6:	e7d9      	b.n	800567c <_fflush_r+0xc>
 80056c8:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <_fflush_r+0x70>)
 80056ca:	429c      	cmp	r4, r3
 80056cc:	d101      	bne.n	80056d2 <_fflush_r+0x62>
 80056ce:	68ac      	ldr	r4, [r5, #8]
 80056d0:	e7df      	b.n	8005692 <_fflush_r+0x22>
 80056d2:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <_fflush_r+0x74>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	bf08      	it	eq
 80056d8:	68ec      	ldreq	r4, [r5, #12]
 80056da:	e7da      	b.n	8005692 <_fflush_r+0x22>
 80056dc:	080059a0 	.word	0x080059a0
 80056e0:	080059c0 	.word	0x080059c0
 80056e4:	08005980 	.word	0x08005980

080056e8 <_lseek_r>:
 80056e8:	b538      	push	{r3, r4, r5, lr}
 80056ea:	4d07      	ldr	r5, [pc, #28]	; (8005708 <_lseek_r+0x20>)
 80056ec:	4604      	mov	r4, r0
 80056ee:	4608      	mov	r0, r1
 80056f0:	4611      	mov	r1, r2
 80056f2:	2200      	movs	r2, #0
 80056f4:	602a      	str	r2, [r5, #0]
 80056f6:	461a      	mov	r2, r3
 80056f8:	f7fb f8b9 	bl	800086e <_lseek>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d102      	bne.n	8005706 <_lseek_r+0x1e>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	b103      	cbz	r3, 8005706 <_lseek_r+0x1e>
 8005704:	6023      	str	r3, [r4, #0]
 8005706:	bd38      	pop	{r3, r4, r5, pc}
 8005708:	20004afc 	.word	0x20004afc

0800570c <__swhatbuf_r>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	460e      	mov	r6, r1
 8005710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005714:	2900      	cmp	r1, #0
 8005716:	b096      	sub	sp, #88	; 0x58
 8005718:	4614      	mov	r4, r2
 800571a:	461d      	mov	r5, r3
 800571c:	da08      	bge.n	8005730 <__swhatbuf_r+0x24>
 800571e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	602a      	str	r2, [r5, #0]
 8005726:	061a      	lsls	r2, r3, #24
 8005728:	d410      	bmi.n	800574c <__swhatbuf_r+0x40>
 800572a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800572e:	e00e      	b.n	800574e <__swhatbuf_r+0x42>
 8005730:	466a      	mov	r2, sp
 8005732:	f000 f8bb 	bl	80058ac <_fstat_r>
 8005736:	2800      	cmp	r0, #0
 8005738:	dbf1      	blt.n	800571e <__swhatbuf_r+0x12>
 800573a:	9a01      	ldr	r2, [sp, #4]
 800573c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005740:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005744:	425a      	negs	r2, r3
 8005746:	415a      	adcs	r2, r3
 8005748:	602a      	str	r2, [r5, #0]
 800574a:	e7ee      	b.n	800572a <__swhatbuf_r+0x1e>
 800574c:	2340      	movs	r3, #64	; 0x40
 800574e:	2000      	movs	r0, #0
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	b016      	add	sp, #88	; 0x58
 8005754:	bd70      	pop	{r4, r5, r6, pc}
	...

08005758 <__smakebuf_r>:
 8005758:	898b      	ldrh	r3, [r1, #12]
 800575a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800575c:	079d      	lsls	r5, r3, #30
 800575e:	4606      	mov	r6, r0
 8005760:	460c      	mov	r4, r1
 8005762:	d507      	bpl.n	8005774 <__smakebuf_r+0x1c>
 8005764:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	6123      	str	r3, [r4, #16]
 800576c:	2301      	movs	r3, #1
 800576e:	6163      	str	r3, [r4, #20]
 8005770:	b002      	add	sp, #8
 8005772:	bd70      	pop	{r4, r5, r6, pc}
 8005774:	ab01      	add	r3, sp, #4
 8005776:	466a      	mov	r2, sp
 8005778:	f7ff ffc8 	bl	800570c <__swhatbuf_r>
 800577c:	9900      	ldr	r1, [sp, #0]
 800577e:	4605      	mov	r5, r0
 8005780:	4630      	mov	r0, r6
 8005782:	f7ff fc65 	bl	8005050 <_malloc_r>
 8005786:	b948      	cbnz	r0, 800579c <__smakebuf_r+0x44>
 8005788:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800578c:	059a      	lsls	r2, r3, #22
 800578e:	d4ef      	bmi.n	8005770 <__smakebuf_r+0x18>
 8005790:	f023 0303 	bic.w	r3, r3, #3
 8005794:	f043 0302 	orr.w	r3, r3, #2
 8005798:	81a3      	strh	r3, [r4, #12]
 800579a:	e7e3      	b.n	8005764 <__smakebuf_r+0xc>
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <__smakebuf_r+0x7c>)
 800579e:	62b3      	str	r3, [r6, #40]	; 0x28
 80057a0:	89a3      	ldrh	r3, [r4, #12]
 80057a2:	6020      	str	r0, [r4, #0]
 80057a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a8:	81a3      	strh	r3, [r4, #12]
 80057aa:	9b00      	ldr	r3, [sp, #0]
 80057ac:	6163      	str	r3, [r4, #20]
 80057ae:	9b01      	ldr	r3, [sp, #4]
 80057b0:	6120      	str	r0, [r4, #16]
 80057b2:	b15b      	cbz	r3, 80057cc <__smakebuf_r+0x74>
 80057b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057b8:	4630      	mov	r0, r6
 80057ba:	f000 f889 	bl	80058d0 <_isatty_r>
 80057be:	b128      	cbz	r0, 80057cc <__smakebuf_r+0x74>
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	f023 0303 	bic.w	r3, r3, #3
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	81a3      	strh	r3, [r4, #12]
 80057cc:	89a0      	ldrh	r0, [r4, #12]
 80057ce:	4305      	orrs	r5, r0
 80057d0:	81a5      	strh	r5, [r4, #12]
 80057d2:	e7cd      	b.n	8005770 <__smakebuf_r+0x18>
 80057d4:	08004df1 	.word	0x08004df1

080057d8 <__malloc_lock>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__malloc_lock+0x8>)
 80057da:	f7ff bc00 	b.w	8004fde <__retarget_lock_acquire_recursive>
 80057de:	bf00      	nop
 80057e0:	20004af0 	.word	0x20004af0

080057e4 <__malloc_unlock>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__malloc_unlock+0x8>)
 80057e6:	f7ff bbfb 	b.w	8004fe0 <__retarget_lock_release_recursive>
 80057ea:	bf00      	nop
 80057ec:	20004af0 	.word	0x20004af0

080057f0 <_free_r>:
 80057f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057f2:	2900      	cmp	r1, #0
 80057f4:	d044      	beq.n	8005880 <_free_r+0x90>
 80057f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057fa:	9001      	str	r0, [sp, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005802:	bfb8      	it	lt
 8005804:	18e4      	addlt	r4, r4, r3
 8005806:	f7ff ffe7 	bl	80057d8 <__malloc_lock>
 800580a:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <_free_r+0x94>)
 800580c:	9801      	ldr	r0, [sp, #4]
 800580e:	6813      	ldr	r3, [r2, #0]
 8005810:	b933      	cbnz	r3, 8005820 <_free_r+0x30>
 8005812:	6063      	str	r3, [r4, #4]
 8005814:	6014      	str	r4, [r2, #0]
 8005816:	b003      	add	sp, #12
 8005818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800581c:	f7ff bfe2 	b.w	80057e4 <__malloc_unlock>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d908      	bls.n	8005836 <_free_r+0x46>
 8005824:	6825      	ldr	r5, [r4, #0]
 8005826:	1961      	adds	r1, r4, r5
 8005828:	428b      	cmp	r3, r1
 800582a:	bf01      	itttt	eq
 800582c:	6819      	ldreq	r1, [r3, #0]
 800582e:	685b      	ldreq	r3, [r3, #4]
 8005830:	1949      	addeq	r1, r1, r5
 8005832:	6021      	streq	r1, [r4, #0]
 8005834:	e7ed      	b.n	8005812 <_free_r+0x22>
 8005836:	461a      	mov	r2, r3
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	b10b      	cbz	r3, 8005840 <_free_r+0x50>
 800583c:	42a3      	cmp	r3, r4
 800583e:	d9fa      	bls.n	8005836 <_free_r+0x46>
 8005840:	6811      	ldr	r1, [r2, #0]
 8005842:	1855      	adds	r5, r2, r1
 8005844:	42a5      	cmp	r5, r4
 8005846:	d10b      	bne.n	8005860 <_free_r+0x70>
 8005848:	6824      	ldr	r4, [r4, #0]
 800584a:	4421      	add	r1, r4
 800584c:	1854      	adds	r4, r2, r1
 800584e:	42a3      	cmp	r3, r4
 8005850:	6011      	str	r1, [r2, #0]
 8005852:	d1e0      	bne.n	8005816 <_free_r+0x26>
 8005854:	681c      	ldr	r4, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	6053      	str	r3, [r2, #4]
 800585a:	4421      	add	r1, r4
 800585c:	6011      	str	r1, [r2, #0]
 800585e:	e7da      	b.n	8005816 <_free_r+0x26>
 8005860:	d902      	bls.n	8005868 <_free_r+0x78>
 8005862:	230c      	movs	r3, #12
 8005864:	6003      	str	r3, [r0, #0]
 8005866:	e7d6      	b.n	8005816 <_free_r+0x26>
 8005868:	6825      	ldr	r5, [r4, #0]
 800586a:	1961      	adds	r1, r4, r5
 800586c:	428b      	cmp	r3, r1
 800586e:	bf04      	itt	eq
 8005870:	6819      	ldreq	r1, [r3, #0]
 8005872:	685b      	ldreq	r3, [r3, #4]
 8005874:	6063      	str	r3, [r4, #4]
 8005876:	bf04      	itt	eq
 8005878:	1949      	addeq	r1, r1, r5
 800587a:	6021      	streq	r1, [r4, #0]
 800587c:	6054      	str	r4, [r2, #4]
 800587e:	e7ca      	b.n	8005816 <_free_r+0x26>
 8005880:	b003      	add	sp, #12
 8005882:	bd30      	pop	{r4, r5, pc}
 8005884:	20004af4 	.word	0x20004af4

08005888 <_read_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d07      	ldr	r5, [pc, #28]	; (80058a8 <_read_r+0x20>)
 800588c:	4604      	mov	r4, r0
 800588e:	4608      	mov	r0, r1
 8005890:	4611      	mov	r1, r2
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	f7fa ff89 	bl	80007ae <_read>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_read_r+0x1e>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_read_r+0x1e>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	20004afc 	.word	0x20004afc

080058ac <_fstat_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4d07      	ldr	r5, [pc, #28]	; (80058cc <_fstat_r+0x20>)
 80058b0:	2300      	movs	r3, #0
 80058b2:	4604      	mov	r4, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	f7fa ffbd 	bl	8000838 <_fstat>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	d102      	bne.n	80058c8 <_fstat_r+0x1c>
 80058c2:	682b      	ldr	r3, [r5, #0]
 80058c4:	b103      	cbz	r3, 80058c8 <_fstat_r+0x1c>
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	bd38      	pop	{r3, r4, r5, pc}
 80058ca:	bf00      	nop
 80058cc:	20004afc 	.word	0x20004afc

080058d0 <_isatty_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d06      	ldr	r5, [pc, #24]	; (80058ec <_isatty_r+0x1c>)
 80058d4:	2300      	movs	r3, #0
 80058d6:	4604      	mov	r4, r0
 80058d8:	4608      	mov	r0, r1
 80058da:	602b      	str	r3, [r5, #0]
 80058dc:	f7fa ffbc 	bl	8000858 <_isatty>
 80058e0:	1c43      	adds	r3, r0, #1
 80058e2:	d102      	bne.n	80058ea <_isatty_r+0x1a>
 80058e4:	682b      	ldr	r3, [r5, #0]
 80058e6:	b103      	cbz	r3, 80058ea <_isatty_r+0x1a>
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	bd38      	pop	{r3, r4, r5, pc}
 80058ec:	20004afc 	.word	0x20004afc

080058f0 <_init>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	bf00      	nop
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr

080058fc <_fini>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr
