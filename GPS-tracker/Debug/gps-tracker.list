
gps-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5c8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018dc  0800f778  0800f778  0001f778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011054  08011054  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011054  08011054  00021054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801105c  0801105c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801105c  0801105c  0002105c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011060  08011060  00021060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08011064  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          00005c14  200001e8  200001e8  000301e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005dfc  20005dfc  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020771  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044ad  00000000  00000000  00050989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  00054e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a8  00000000  00000000  00056698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cc1  00000000  00000000  00057d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000087da  00000000  00000000  0006da01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000761db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c5c  00000000  00000000  0007622c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f760 	.word	0x0800f760

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800f760 	.word	0x0800f760

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//	evtGrpHandle = xEventGroupCreate();

	GPS_TaskHandle = osThreadNew(StartGPSTask, NULL, &GPS_Task_attributes);
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <MX_FREERTOS_Init+0x18>)
 800103e:	2100      	movs	r1, #0
 8001040:	4804      	ldr	r0, [pc, #16]	; (8001054 <MX_FREERTOS_Init+0x1c>)
 8001042:	f003 fb7b 	bl	800473c <osThreadNew>
 8001046:	4603      	mov	r3, r0
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <MX_FREERTOS_Init+0x20>)
 800104a:	6013      	str	r3, [r2, #0]
  */

/**
  * @}
  */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	08010b64 	.word	0x08010b64
 8001054:	0800105d 	.word	0x0800105d
 8001058:	200005c0 	.word	0x200005c0

0800105c <StartGPSTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void *argument)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGPSTask */
	GNSSParser_Status_t status, check;
	const GNSS_MsgTypeDef *gnssMsg;

	gnssDataMutexHandle = osMutexNew(&gnssDataMutex_attributes);
 8001064:	4837      	ldr	r0, [pc, #220]	; (8001144 <StartGPSTask+0xe8>)
 8001066:	f003 fbfb 	bl	8004860 <osMutexNew>
 800106a:	4603      	mov	r3, r0
 800106c:	4a36      	ldr	r2, [pc, #216]	; (8001148 <StartGPSTask+0xec>)
 800106e:	6013      	str	r3, [r2, #0]

	consoleMutexHandle = osMutexNew(&consolMutex_attributes);
 8001070:	4836      	ldr	r0, [pc, #216]	; (800114c <StartGPSTask+0xf0>)
 8001072:	f003 fbf5 	bl	8004860 <osMutexNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a35      	ldr	r2, [pc, #212]	; (8001150 <StartGPSTask+0xf4>)
 800107a:	6013      	str	r3, [r2, #0]

	printf("Teseo Consumer Task running\r\n");
 800107c:	4835      	ldr	r0, [pc, #212]	; (8001154 <StartGPSTask+0xf8>)
 800107e:	f00a fde9 	bl	800bc54 <puts>
	GNSS_PARSER_Init(&GNSSParser_Data);
 8001082:	4835      	ldr	r0, [pc, #212]	; (8001158 <StartGPSTask+0xfc>)
 8001084:	f006 fdaa 	bl	8007bdc <GNSS_PARSER_Init>

	for(;;){
	    gnssMsg = teseo_queue_claim_rd_buffer(GPS.pQueue);
 8001088:	4b34      	ldr	r3, [pc, #208]	; (800115c <StartGPSTask+0x100>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	4618      	mov	r0, r3
 800108e:	f009 fc9b 	bl	800a9c8 <teseo_queue_claim_rd_buffer>
 8001092:	6138      	str	r0, [r7, #16]

	    check = GNSS_PARSER_CheckSanity((uint8_t *)gnssMsg->buf, gnssMsg->len);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	6819      	ldr	r1, [r3, #0]
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	461c      	mov	r4, r3
 80010a0:	4615      	mov	r5, r2
 80010a2:	4622      	mov	r2, r4
 80010a4:	462b      	mov	r3, r5
 80010a6:	4608      	mov	r0, r1
 80010a8:	f006 fe29 	bl	8007cfe <GNSS_PARSER_CheckSanity>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
	    (check == GNSS_PARSER_OK) ? printf("Good sentence: ") : printf("!!!Bad sentence: ");
	    printf((uint8_t *)gnssMsg->buf);
	    printf("\n\r");
#endif

	    if(check != GNSS_PARSER_ERROR){
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d03e      	beq.n	8001134 <StartGPSTask+0xd8>

	      for(int m = 0; m < NMEA_MSGS_NUM; m++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e038      	b.n	800112e <StartGPSTask+0xd2>

#ifndef USE_STM32L0XX_NUCLEO
	    	osMutexAcquire(gnssDataMutexHandle, osWaitForever);
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <StartGPSTask+0xec>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f04f 31ff 	mov.w	r1, #4294967295
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 fc51 	bl	800496c <osMutexAcquire>
	        status = GNSS_PARSER_ParseMsg(&GNSSParser_Data, (eNMEAMsg)m, (uint8_t *)gnssMsg->buf);
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	4820      	ldr	r0, [pc, #128]	; (8001158 <StartGPSTask+0xfc>)
 80010d6:	f006 fe6f 	bl	8007db8 <GNSS_PARSER_ParseMsg>
 80010da:	4603      	mov	r3, r0
 80010dc:	73bb      	strb	r3, [r7, #14]
	        osMutexRelease(gnssDataMutexHandle);
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <StartGPSTask+0xec>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f003 fc8d 	bl	8004a02 <osMutexRelease>
//	        }
//	        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == GPRMC)) {
//	        	GNSS_DATA_IF_GetGPRMCInfo(&GNSSParser_Data);
//	        }

	        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == GPGGA)) {
 80010e8:	7bbb      	ldrb	r3, [r7, #14]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d006      	beq.n	80010fc <StartGPSTask+0xa0>
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d102      	bne.n	80010fc <StartGPSTask+0xa0>
	            GNSS_DATA_IF_GetValidInfo(&GNSSParser_Data);
 80010f6:	4818      	ldr	r0, [pc, #96]	; (8001158 <StartGPSTask+0xfc>)
 80010f8:	f009 f918 	bl	800a32c <GNSS_DATA_IF_GetValidInfo>
	          GNSS_DATA_IF_GetDatalogInfo(&pGNSS, &GNSSParser_Data);
	        }
#endif /* configUSE_DATALOG */

#ifndef USE_STM32L0XX_NUCLEO
	        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == PSTMSGL)) {
 80010fc:	7bbb      	ldrb	r3, [r7, #14]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d007      	beq.n	8001112 <StartGPSTask+0xb6>
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b0c      	cmp	r3, #12
 8001108:	d103      	bne.n	8001112 <StartGPSTask+0xb6>
	          GNSS_DATA_IF_GetMsglistAck(&pGNSS, &GNSSParser_Data);
 800110a:	4913      	ldr	r1, [pc, #76]	; (8001158 <StartGPSTask+0xfc>)
 800110c:	4814      	ldr	r0, [pc, #80]	; (8001160 <StartGPSTask+0x104>)
 800110e:	f009 fa3d 	bl	800a58c <GNSS_DATA_IF_GetMsglistAck>
	        }

	        if((status != GNSS_PARSER_ERROR) && ((eNMEAMsg)m == PSTMSAVEPAR)) {
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d007      	beq.n	8001128 <StartGPSTask+0xcc>
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b0d      	cmp	r3, #13
 800111e:	d103      	bne.n	8001128 <StartGPSTask+0xcc>
	          GNSS_DATA_IF_GetGNSSAck(&pGNSS, &GNSSParser_Data);
 8001120:	490d      	ldr	r1, [pc, #52]	; (8001158 <StartGPSTask+0xfc>)
 8001122:	480f      	ldr	r0, [pc, #60]	; (8001160 <StartGPSTask+0x104>)
 8001124:	f009 fa58 	bl	800a5d8 <GNSS_DATA_IF_GetGNSSAck>
	      for(int m = 0; m < NMEA_MSGS_NUM; m++) {
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b0d      	cmp	r3, #13
 8001132:	ddc3      	ble.n	80010bc <StartGPSTask+0x60>
	        }
#endif /* USE_STM32L0XX_NUCLEO */
	      }
	    }
	    //Teseo_Release_Buffer(&pGNSS, gnssMsg);
	    teseo_queue_release_rd_buffer(GPS.pQueue, gnssMsg);
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <StartGPSTask+0x100>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	4618      	mov	r0, r3
 800113c:	f009 fc86 	bl	800aa4c <teseo_queue_release_rd_buffer>
	    gnssMsg = teseo_queue_claim_rd_buffer(GPS.pQueue);
 8001140:	e7a2      	b.n	8001088 <StartGPSTask+0x2c>
 8001142:	bf00      	nop
 8001144:	08010b88 	.word	0x08010b88
 8001148:	200005c4 	.word	0x200005c4
 800114c:	08010b54 	.word	0x08010b54
 8001150:	200005bc 	.word	0x200005bc
 8001154:	0800f7a8 	.word	0x0800f7a8
 8001158:	20000208 	.word	0x20000208
 800115c:	200005c8 	.word	0x200005c8
 8001160:	200005b0 	.word	0x200005b0

08001164 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_GPIO_Init+0xc4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a29      	ldr	r2, [pc, #164]	; (8001228 <MX_GPIO_Init+0xc4>)
 8001184:	f043 0310 	orr.w	r3, r3, #16
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_GPIO_Init+0xc4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <MX_GPIO_Init+0xc4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a22      	ldr	r2, [pc, #136]	; (8001228 <MX_GPIO_Init+0xc4>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <MX_GPIO_Init+0xc4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_GPIO_Init+0xc4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <MX_GPIO_Init+0xc4>)
 80011bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_GPIO_Init+0xc4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2118      	movs	r1, #24
 80011d2:	4816      	ldr	r0, [pc, #88]	; (800122c <MX_GPIO_Init+0xc8>)
 80011d4:	f001 f98a 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_PWR_ON_GPIO_Port, GPS_PWR_ON_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011de:	4814      	ldr	r0, [pc, #80]	; (8001230 <MX_GPIO_Init+0xcc>)
 80011e0:	f001 f984 	bl	80024ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80011e4:	2318      	movs	r3, #24
 80011e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_GPIO_Init+0xc8>)
 80011fc:	f000 febe 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_PWR_ON_Pin;
 8001200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPS_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_GPIO_Init+0xcc>)
 800121a:	f000 feaf 	bl	8001f7c <HAL_GPIO_Init>

}
 800121e:	bf00      	nop
 8001220:	3720      	adds	r7, #32
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800
 800122c:	40021000 	.word	0x40021000
 8001230:	40021800 	.word	0x40021800

08001234 <GPS_setDrvParam>:
 * Instance of UART private data handler
 */
GPS_DrvTypeDef GPS;

uint32_t GPS_setDrvParam(uint32_t param, uint32_t value)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
	uint32_t status = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]

	switch(param)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d043      	beq.n	80012d0 <GPS_setDrvParam+0x9c>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d84b      	bhi.n	80012e6 <GPS_setDrvParam+0xb2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <GPS_setDrvParam+0x28>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d011      	beq.n	800127e <GPS_setDrvParam+0x4a>
 800125a:	e044      	b.n	80012e6 <GPS_setDrvParam+0xb2>
	{
		case GPS_PWR_CTRL:
			if(value){
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <GPS_setDrvParam+0x3c>
				//#define GPS_PWR_ON_Pin GPIO_PIN_12
				//#define GPS_PWR_ON_GPIO_Port GPIOG
				HAL_GPIO_WritePin(GPS_PWR_ON_GPIO_Port, GPS_PWR_ON_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001268:	4821      	ldr	r0, [pc, #132]	; (80012f0 <GPS_setDrvParam+0xbc>)
 800126a:	f001 f93f 	bl	80024ec <HAL_GPIO_WritePin>
			}
			else{
				HAL_GPIO_WritePin(GPS_PWR_ON_GPIO_Port, GPS_PWR_ON_Pin, GPIO_PIN_RESET);
			}
			break;
 800126e:	e03a      	b.n	80012e6 <GPS_setDrvParam+0xb2>
				HAL_GPIO_WritePin(GPS_PWR_ON_GPIO_Port, GPS_PWR_ON_Pin, GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001276:	481e      	ldr	r0, [pc, #120]	; (80012f0 <GPS_setDrvParam+0xbc>)
 8001278:	f001 f938 	bl	80024ec <HAL_GPIO_WritePin>
			break;
 800127c:	e033      	b.n	80012e6 <GPS_setDrvParam+0xb2>

		case GPS_UART_INT_ON:
			if ((GPS.fsm_state == fsm_discard) && (value == 0U)){
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <GPS_setDrvParam+0xc0>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <GPS_setDrvParam+0x5a>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d02a      	beq.n	80012e4 <GPS_setDrvParam+0xb0>
			    break;
			}

			if (value == 0U){
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d109      	bne.n	80012a8 <GPS_setDrvParam+0x74>
			    GPS.fsm_next_state = fsm_stop;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <GPS_setDrvParam+0xc0>)
 8001296:	2202      	movs	r2, #2
 8001298:	705a      	strb	r2, [r3, #1]

			    while (GPS.fsm_state != fsm_stop) {};
 800129a:	bf00      	nop
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <GPS_setDrvParam+0xc0>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d1fa      	bne.n	800129c <GPS_setDrvParam+0x68>
			    break;
 80012a6:	e01e      	b.n	80012e6 <GPS_setDrvParam+0xb2>
			}

			GPS.pQueue = teseo_queue_init();
 80012a8:	f009 fab2 	bl	800a810 <teseo_queue_init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <GPS_setDrvParam+0xc0>)
 80012b0:	60d3      	str	r3, [r2, #12]
			GPS.wr_msg = NULL;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <GPS_setDrvParam+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
			GPS.fsm_state = fsm_discard;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <GPS_setDrvParam+0xc0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
			GPS.fsm_next_state = fsm_discard;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <GPS_setDrvParam+0xc0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	705a      	strb	r2, [r3, #1]

			(void)HAL_UART_Receive_IT(&huart6, &GPS.dummy_char, 1);
 80012c4:	2201      	movs	r2, #1
 80012c6:	490c      	ldr	r1, [pc, #48]	; (80012f8 <GPS_setDrvParam+0xc4>)
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <GPS_setDrvParam+0xc8>)
 80012ca:	f002 fa11 	bl	80036f0 <HAL_UART_Receive_IT>
			break;
 80012ce:	e00a      	b.n	80012e6 <GPS_setDrvParam+0xb2>

		case GPS_UART_RESET:
			if(value == 0){
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d103      	bne.n	80012de <GPS_setDrvParam+0xaa>
				HAL_UART_DeInit(&huart6);
 80012d6:	4809      	ldr	r0, [pc, #36]	; (80012fc <GPS_setDrvParam+0xc8>)
 80012d8:	f002 f8a7 	bl	800342a <HAL_UART_DeInit>
			}
			else{
				MX_USART6_UART_Init();
			}
			break;
 80012dc:	e003      	b.n	80012e6 <GPS_setDrvParam+0xb2>
				MX_USART6_UART_Init();
 80012de:	f000 fa9f 	bl	8001820 <MX_USART6_UART_Init>
			break;
 80012e2:	e000      	b.n	80012e6 <GPS_setDrvParam+0xb2>
			    break;
 80012e4:	bf00      	nop

	}

	return status;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021800 	.word	0x40021800
 80012f4:	200005c8 	.word	0x200005c8
 80012f8:	200005ca 	.word	0x200005ca
 80012fc:	20000668 	.word	0x20000668

08001300 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* redirect to USART */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001308:	1d39      	adds	r1, r7, #4
 800130a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130e:	2201      	movs	r2, #1
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <__io_putchar+0x20>)
 8001312:	f002 f8b9 	bl	8003488 <HAL_UART_Transmit>
  return ch;
 8001316:	687b      	ldr	r3, [r7, #4]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000624 	.word	0x20000624

08001324 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 30000))
 800132e:	bf00      	nop
 8001330:	1df9      	adds	r1, r7, #7
 8001332:	f247 5330 	movw	r3, #30000	; 0x7530
 8001336:	2201      	movs	r2, #1
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <__io_getchar+0x2c>)
 800133a:	f002 f937 	bl	80035ac <HAL_UART_Receive>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f5      	bne.n	8001330 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8001344:	79fb      	ldrb	r3, [r7, #7]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000624 	.word	0x20000624

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001358:	f000 fc28 	bl	8001bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135c:	f000 f81e 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001360:	f7ff ff00 	bl	8001164 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001364:	f000 fa32 	bl	80017cc <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001368:	f000 fa5a 	bl	8001820 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("++Start GPS Tracker++\r\n");
 800136c:	480a      	ldr	r0, [pc, #40]	; (8001398 <main+0x44>)
 800136e:	f00a fc71 	bl	800bc54 <puts>

  GPS_setDrvParam(GPS_UART_INT_ON, 0);
 8001372:	2100      	movs	r1, #0
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff ff5d 	bl	8001234 <GPS_setDrvParam>
  GPS_setDrvParam(GPS_UART_INT_ON, 1);
 800137a:	2101      	movs	r1, #1
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff ff59 	bl	8001234 <GPS_setDrvParam>

  GPS_setDrvParam(GPS_PWR_CTRL, 1);
 8001382:	2101      	movs	r1, #1
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ff55 	bl	8001234 <GPS_setDrvParam>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800138a:	f003 f98d 	bl	80046a8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800138e:	f7ff fe53 	bl	8001038 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001392:	f003 f9ad 	bl	80046f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001396:	e7fe      	b.n	8001396 <main+0x42>
 8001398:	0800f7c8 	.word	0x0800f7c8

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	; 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	2230      	movs	r2, #48	; 0x30
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f009 fcb5 	bl	800ad1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <SystemClock_Config+0xb8>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a22      	ldr	r2, [pc, #136]	; (8001454 <SystemClock_Config+0xb8>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <SystemClock_Config+0xb8>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <SystemClock_Config+0xbc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013e8:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <SystemClock_Config+0xbc>)
 80013ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <SystemClock_Config+0xbc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f8:	607b      	str	r3, [r7, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001400:	2301      	movs	r3, #1
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001404:	2310      	movs	r3, #16
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f001 f885 	bl	8002520 <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800141c:	f000 f830 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001420:	230f      	movs	r3, #15
 8001422:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fae8 	bl	8002a10 <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001446:	f000 f81b 	bl	8001480 <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	3750      	adds	r7, #80	; 0x50
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000

0800145c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800146e:	f000 fbbf 	bl	8001bf0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010000 	.word	0x40010000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_MspInit+0x54>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_MspInit+0x54>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_MspInit+0x54>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_MspInit+0x54>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_MspInit+0x54>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <HAL_MspInit+0x54>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	210f      	movs	r1, #15
 80014ce:	f06f 0001 	mvn.w	r0, #1
 80014d2:	f000 fc89 	bl	8001de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	; 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <HAL_InitTick+0xd0>)
 80014fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fc:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <HAL_InitTick+0xd0>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6453      	str	r3, [r2, #68]	; 0x44
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_InitTick+0xd0>)
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001510:	f107 020c 	add.w	r2, r7, #12
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f001 fc58 	bl	8002dd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001520:	f001 fc42 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8001524:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001528:	4a23      	ldr	r2, [pc, #140]	; (80015b8 <HAL_InitTick+0xd4>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9b      	lsrs	r3, r3, #18
 8001530:	3b01      	subs	r3, #1
 8001532:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001534:	4b21      	ldr	r3, [pc, #132]	; (80015bc <HAL_InitTick+0xd8>)
 8001536:	4a22      	ldr	r2, [pc, #136]	; (80015c0 <HAL_InitTick+0xdc>)
 8001538:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_InitTick+0xd8>)
 800153c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001540:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001542:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_InitTick+0xd8>)
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001548:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <HAL_InitTick+0xd8>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <HAL_InitTick+0xd8>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001554:	4b19      	ldr	r3, [pc, #100]	; (80015bc <HAL_InitTick+0xd8>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800155a:	4818      	ldr	r0, [pc, #96]	; (80015bc <HAL_InitTick+0xd8>)
 800155c:	f001 fc6a 	bl	8002e34 <HAL_TIM_Base_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800156a:	2b00      	cmp	r3, #0
 800156c:	d11b      	bne.n	80015a6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800156e:	4813      	ldr	r0, [pc, #76]	; (80015bc <HAL_InitTick+0xd8>)
 8001570:	f001 fcba 	bl	8002ee8 <HAL_TIM_Base_Start_IT>
 8001574:	4603      	mov	r3, r0
 8001576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800157a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800157e:	2b00      	cmp	r3, #0
 8001580:	d111      	bne.n	80015a6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001582:	2019      	movs	r0, #25
 8001584:	f000 fc4c 	bl	8001e20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d808      	bhi.n	80015a0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800158e:	2200      	movs	r2, #0
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	2019      	movs	r0, #25
 8001594:	f000 fc28 	bl	8001de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_InitTick+0xe0>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e002      	b.n	80015a6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3730      	adds	r7, #48	; 0x30
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	431bde83 	.word	0x431bde83
 80015bc:	200005d8 	.word	0x200005d8
 80015c0:	40010000 	.word	0x40010000
 80015c4:	20000004 	.word	0x20000004

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015fa:	f001 fce5 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	200005d8 	.word	0x200005d8

08001608 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <USART6_IRQHandler+0x10>)
 800160e:	f002 f89f 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000668 	.word	0x20000668

0800161c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_kill>:

int _kill(int pid, int sig)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001636:	f009 fa35 	bl	800aaa4 <__errno>
 800163a:	4603      	mov	r3, r0
 800163c:	2216      	movs	r2, #22
 800163e:	601a      	str	r2, [r3, #0]
  return -1;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_exit>:

void _exit (int status)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ffe7 	bl	800162c <_kill>
  while (1) {}    /* Make sure we hang here */
 800165e:	e7fe      	b.n	800165e <_exit+0x12>

08001660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e00a      	b.n	8001688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001672:	f7ff fe57 	bl	8001324 <__io_getchar>
 8001676:	4601      	mov	r1, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	b2ca      	uxtb	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf0      	blt.n	8001672 <_read+0x12>
  }

  return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e009      	b.n	80016c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fe23 	bl	8001300 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf1      	blt.n	80016ac <_write+0x12>
  }
  return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:

int _close(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fa:	605a      	str	r2, [r3, #4]
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_isatty>:

int _isatty(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f009 f99a 	bl	800aaa4 <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20030000 	.word	0x20030000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000620 	.word	0x20000620
 80017a4:	20005e00 	.word	0x20005e00

080017a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 80017d2:	4a12      	ldr	r2, [pc, #72]	; (800181c <MX_USART2_UART_Init+0x50>)
 80017d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 80017d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 80017f2:	220c      	movs	r2, #12
 80017f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_USART2_UART_Init+0x4c>)
 8001804:	f001 fdc4 	bl	8003390 <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800180e:	f7ff fe37 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000624 	.word	0x20000624
 800181c:	40004400 	.word	0x40004400

08001820 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <MX_USART6_UART_Init+0x50>)
 8001828:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <MX_USART6_UART_Init+0x4c>)
 800182c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001830:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001832:	4b0e      	ldr	r3, [pc, #56]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <MX_USART6_UART_Init+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001846:	220c      	movs	r2, #12
 8001848:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <MX_USART6_UART_Init+0x4c>)
 800184c:	2200      	movs	r2, #0
 800184e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_USART6_UART_Init+0x4c>)
 8001858:	f001 fd9a 	bl	8003390 <HAL_UART_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001862:	f7ff fe0d 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000668 	.word	0x20000668
 8001870:	40011400 	.word	0x40011400

08001874 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	; 0x30
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a36      	ldr	r2, [pc, #216]	; (800196c <HAL_UART_MspInit+0xf8>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12c      	bne.n	80018f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	4b35      	ldr	r3, [pc, #212]	; (8001970 <HAL_UART_MspInit+0xfc>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a34      	ldr	r2, [pc, #208]	; (8001970 <HAL_UART_MspInit+0xfc>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_UART_MspInit+0xfc>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	4b2e      	ldr	r3, [pc, #184]	; (8001970 <HAL_UART_MspInit+0xfc>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <HAL_UART_MspInit+0xfc>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_UART_MspInit+0xfc>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80018ce:	230c      	movs	r3, #12
 80018d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018de:	2307      	movs	r3, #7
 80018e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	4822      	ldr	r0, [pc, #136]	; (8001974 <HAL_UART_MspInit+0x100>)
 80018ea:	f000 fb47 	bl	8001f7c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80018ee:	e039      	b.n	8001964 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a20      	ldr	r2, [pc, #128]	; (8001978 <HAL_UART_MspInit+0x104>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d134      	bne.n	8001964 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_UART_MspInit+0xfc>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a1b      	ldr	r2, [pc, #108]	; (8001970 <HAL_UART_MspInit+0xfc>)
 8001904:	f043 0320 	orr.w	r3, r3, #32
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_UART_MspInit+0xfc>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <HAL_UART_MspInit+0xfc>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_UART_MspInit+0xfc>)
 8001920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_UART_MspInit+0xfc>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_RXD_3V3_Pin|GPS_TXD_3V3_Pin;
 8001932:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001944:	2308      	movs	r3, #8
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_UART_MspInit+0x108>)
 8001950:	f000 fb14 	bl	8001f7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 15, 0);
 8001954:	2200      	movs	r2, #0
 8001956:	210f      	movs	r1, #15
 8001958:	2047      	movs	r0, #71	; 0x47
 800195a:	f000 fa45 	bl	8001de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800195e:	2047      	movs	r0, #71	; 0x47
 8001960:	f000 fa5e 	bl	8001e20 <HAL_NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40004400 	.word	0x40004400
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40011400 	.word	0x40011400
 800197c:	40021800 	.word	0x40021800

08001980 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_UART_MspDeInit+0x58>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10a      	bne.n	80019a8 <HAL_UART_MspDeInit+0x28>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_UART_MspDeInit+0x5c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a11      	ldr	r2, [pc, #68]	; (80019dc <HAL_UART_MspDeInit+0x5c>)
 8001998:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800199c:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, DEBUG_TX_Pin|DEBUG_RX_Pin);
 800199e:	210c      	movs	r1, #12
 80019a0:	480f      	ldr	r0, [pc, #60]	; (80019e0 <HAL_UART_MspDeInit+0x60>)
 80019a2:	f000 fc97 	bl	80022d4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }
}
 80019a6:	e012      	b.n	80019ce <HAL_UART_MspDeInit+0x4e>
  else if(uartHandle->Instance==USART6)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <HAL_UART_MspDeInit+0x64>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10d      	bne.n	80019ce <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART6_CLK_DISABLE();
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_UART_MspDeInit+0x5c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a09      	ldr	r2, [pc, #36]	; (80019dc <HAL_UART_MspDeInit+0x5c>)
 80019b8:	f023 0320 	bic.w	r3, r3, #32
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOG, GPS_RXD_3V3_Pin|GPS_TXD_3V3_Pin);
 80019be:	f44f 4184 	mov.w	r1, #16896	; 0x4200
 80019c2:	4809      	ldr	r0, [pc, #36]	; (80019e8 <HAL_UART_MspDeInit+0x68>)
 80019c4:	f000 fc86 	bl	80022d4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80019c8:	2047      	movs	r0, #71	; 0x47
 80019ca:	f000 fa37 	bl	8001e3c <HAL_NVIC_DisableIRQ>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020000 	.word	0x40020000
 80019e4:	40011400 	.word	0x40011400
 80019e8:	40021800 	.word	0x40021800

080019ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(huart->Instance == USART6){
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a53      	ldr	r2, [pc, #332]	; (8001b48 <HAL_UART_RxCpltCallback+0x15c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	f040 80a0 	bne.w	8001b40 <HAL_UART_RxCpltCallback+0x154>
//		if (huart != teseo_io_data->huart)
//		{
//		return;
//		}

		GPS.fsm_restart = 1;
 8001a00:	4b52      	ldr	r3, [pc, #328]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	721a      	strb	r2, [r3, #8]

		while(GPS.fsm_restart == 1)
 8001a06:	e095      	b.n	8001b34 <HAL_UART_RxCpltCallback+0x148>
		{

			GPS.fsm_state = GPS.fsm_next_state;
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a0a:	785b      	ldrb	r3, [r3, #1]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b4f      	ldr	r3, [pc, #316]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a10:	701a      	strb	r2, [r3, #0]

			switch (GPS.fsm_state)
 8001a12:	4b4e      	ldr	r3, [pc, #312]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <HAL_UART_RxCpltCallback+0x36>
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d045      	beq.n	8001aac <HAL_UART_RxCpltCallback+0xc0>
 8001a20:	e084      	b.n	8001b2c <HAL_UART_RxCpltCallback+0x140>
			{

			case fsm_discard:
			  GPS.fsm_restart = 0;
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	721a      	strb	r2, [r3, #8]
			  GPS.fsm_next_state = fsm_discard;
 8001a28:	4b48      	ldr	r3, [pc, #288]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	705a      	strb	r2, [r3, #1]

			  if (GPS.dummy_char != (uint8_t)'$')
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a30:	789b      	ldrb	r3, [r3, #2]
 8001a32:	2b24      	cmp	r3, #36	; 0x24
 8001a34:	d005      	beq.n	8001a42 <HAL_UART_RxCpltCallback+0x56>
			  {
				//Console_Debug((uint8_t *)".");
				(void)HAL_UART_Receive_IT(&huart6, &GPS.dummy_char, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	4945      	ldr	r1, [pc, #276]	; (8001b50 <HAL_UART_RxCpltCallback+0x164>)
 8001a3a:	4846      	ldr	r0, [pc, #280]	; (8001b54 <HAL_UART_RxCpltCallback+0x168>)
 8001a3c:	f001 fe58 	bl	80036f0 <HAL_UART_Receive_IT>
				break;
 8001a40:	e078      	b.n	8001b34 <HAL_UART_RxCpltCallback+0x148>
			  }

			  if (GPS.wr_msg == NULL)
 8001a42:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d107      	bne.n	8001a5a <HAL_UART_RxCpltCallback+0x6e>
			  {
				GPS.wr_msg = teseo_queue_claim_wr_buffer(GPS.pQueue);
 8001a4a:	4b40      	ldr	r3, [pc, #256]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f008 ff2c 	bl	800a8ac <teseo_queue_claim_wr_buffer>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a58:	6053      	str	r3, [r2, #4]
			  }

			  if (GPS.wr_msg == NULL)
 8001a5a:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_UART_RxCpltCallback+0x82>
			  {
				//Console_Debug((uint8_t *)".");
				(void)HAL_UART_Receive_IT(&huart6, &GPS.dummy_char, 1);
 8001a62:	2201      	movs	r2, #1
 8001a64:	493a      	ldr	r1, [pc, #232]	; (8001b50 <HAL_UART_RxCpltCallback+0x164>)
 8001a66:	483b      	ldr	r0, [pc, #236]	; (8001b54 <HAL_UART_RxCpltCallback+0x168>)
 8001a68:	f001 fe42 	bl	80036f0 <HAL_UART_Receive_IT>
				break;
 8001a6c:	e062      	b.n	8001b34 <HAL_UART_RxCpltCallback+0x148>
			  }
			  //Console_Debug((uint8_t *)"S");

			  /* save '$' */
			  GPS.wr_msg->buf[GPS.wr_msg->len] = GPS.dummy_char;
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	4a33      	ldr	r2, [pc, #204]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a7e:	7892      	ldrb	r2, [r2, #2]
 8001a80:	701a      	strb	r2, [r3, #0]
			  GPS.wr_msg->len++;
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	3201      	adds	r2, #1
 8001a8a:	605a      	str	r2, [r3, #4]
			  GPS.fsm_next_state = fsm_synch ;
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	705a      	strb	r2, [r3, #1]
			  (void)HAL_UART_Receive_IT(&huart6,(uint8_t *)&GPS.wr_msg->buf[GPS.wr_msg->len], 1);
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b2c      	ldr	r3, [pc, #176]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	482b      	ldr	r0, [pc, #172]	; (8001b54 <HAL_UART_RxCpltCallback+0x168>)
 8001aa6:	f001 fe23 	bl	80036f0 <HAL_UART_Receive_IT>
			   break;
 8001aaa:	e043      	b.n	8001b34 <HAL_UART_RxCpltCallback+0x148>

			case fsm_synch:
			  GPS.fsm_restart = 0;
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	721a      	strb	r2, [r3, #8]

			  if (GPS.wr_msg->buf[GPS.wr_msg->len] == (uint8_t)'$')
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4413      	add	r3, r2
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	2b24      	cmp	r3, #36	; 0x24
 8001ac4:	d11d      	bne.n	8001b02 <HAL_UART_RxCpltCallback+0x116>
			  {
				GPS.dummy_char = (uint8_t)'$';
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001ac8:	2224      	movs	r2, #36	; 0x24
 8001aca:	709a      	strb	r2, [r3, #2]
				GPS.wr_msg->buf[GPS.wr_msg->len] = (uint8_t)'\0';
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	2200      	movs	r2, #0
 8001adc:	701a      	strb	r2, [r3, #0]
				teseo_queue_release_wr_buffer(GPS.pQueue, GPS.wr_msg);
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	4a1a      	ldr	r2, [pc, #104]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001ae4:	6852      	ldr	r2, [r2, #4]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f008 ff27 	bl	800a93c <teseo_queue_release_wr_buffer>
				GPS.wr_msg = NULL;
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
				GPS.fsm_next_state = fsm_discard ;
 8001af4:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	705a      	strb	r2, [r3, #1]
				/* check if we can resynch the new sentence */
				GPS.fsm_restart = 1;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	721a      	strb	r2, [r3, #8]
				break;
 8001b00:	e018      	b.n	8001b34 <HAL_UART_RxCpltCallback+0x148>
			  }

			  //Console_Debug((uint8_t *)"+");
			  GPS.wr_msg->len++;
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	3201      	adds	r2, #1
 8001b0a:	605a      	str	r2, [r3, #4]
				GPS.wr_msg->len = 0;
				GPS.fsm_restart = 1;
				break;
			  }
			#endif
			  GPS.fsm_next_state = fsm_synch;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	705a      	strb	r2, [r3, #1]
			  (void)HAL_UART_Receive_IT(&huart6,(uint8_t *)&GPS.wr_msg->buf[GPS.wr_msg->len],1);
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	4413      	add	r3, r2
 8001b20:	2201      	movs	r2, #1
 8001b22:	4619      	mov	r1, r3
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <HAL_UART_RxCpltCallback+0x168>)
 8001b26:	f001 fde3 	bl	80036f0 <HAL_UART_Receive_IT>
			  break;
 8001b2a:	e003      	b.n	8001b34 <HAL_UART_RxCpltCallback+0x148>

			case fsm_stop:
			default:
			  GPS.fsm_restart = 0;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	721a      	strb	r2, [r3, #8]
			  break;
 8001b32:	bf00      	nop
		while(GPS.fsm_restart == 1)
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_UART_RxCpltCallback+0x160>)
 8001b36:	7a1b      	ldrb	r3, [r3, #8]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	f43f af64 	beq.w	8001a08 <HAL_UART_RxCpltCallback+0x1c>

	}
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40011400 	.word	0x40011400
 8001b4c:	200005c8 	.word	0x200005c8
 8001b50:	200005ca 	.word	0x200005ca
 8001b54:	20000668 	.word	0x20000668

08001b58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b90 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b5c:	480d      	ldr	r0, [pc, #52]	; (8001b94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5e:	490e      	ldr	r1, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b60:	4a0e      	ldr	r2, [pc, #56]	; (8001b9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b74:	4c0b      	ldr	r4, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b82:	f7ff fe11 	bl	80017a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b86:	f009 f893 	bl	800acb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8a:	f7ff fbe3 	bl	8001354 <main>
  bx  lr    
 8001b8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001b90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b98:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001b9c:	08011064 	.word	0x08011064
  ldr r2, =_sbss
 8001ba0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ba4:	20005dfc 	.word	0x20005dfc

08001ba8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba8:	e7fe      	b.n	8001ba8 <ADC_IRQHandler>
	...

08001bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	; (8001bec <HAL_Init+0x40>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <HAL_Init+0x40>)
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <HAL_Init+0x40>)
 8001bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd4:	2003      	movs	r0, #3
 8001bd6:	f000 f8fc 	bl	8001dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bda:	200f      	movs	r0, #15
 8001bdc:	f7ff fc82 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be0:	f7ff fc54 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023c00 	.word	0x40023c00

08001bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <HAL_IncTick+0x20>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_IncTick+0x24>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4413      	add	r3, r2
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_IncTick+0x24>)
 8001c02:	6013      	str	r3, [r2, #0]
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008
 8001c14:	200006ac 	.word	0x200006ac

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200006ac 	.word	0x200006ac

08001c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c62:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <__NVIC_SetPriorityGrouping+0x44>)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	60d3      	str	r3, [r2, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_GetPriorityGrouping+0x18>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	0a1b      	lsrs	r3, r3, #8
 8001c82:	f003 0307 	and.w	r3, r3, #7
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db0b      	blt.n	8001cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	4907      	ldr	r1, [pc, #28]	; (8001ccc <__NVIC_EnableIRQ+0x38>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000e100 	.word	0xe000e100

08001cd0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db12      	blt.n	8001d08 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	490a      	ldr	r1, [pc, #40]	; (8001d14 <__NVIC_DisableIRQ+0x44>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	3320      	adds	r3, #32
 8001cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cfc:	f3bf 8f4f 	dsb	sy
}
 8001d00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d02:	f3bf 8f6f 	isb	sy
}
 8001d06:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000e100 	.word	0xe000e100

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	; (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	; (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	; 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	; 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff28 	bl	8001c30 <__NVIC_SetPriorityGrouping>
}
 8001de0:	bf00      	nop
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfa:	f7ff ff3d 	bl	8001c78 <__NVIC_GetPriorityGrouping>
 8001dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	68b9      	ldr	r1, [r7, #8]
 8001e04:	6978      	ldr	r0, [r7, #20]
 8001e06:	f7ff ffb1 	bl	8001d6c <NVIC_EncodePriority>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e10:	4611      	mov	r1, r2
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff80 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e18:	bf00      	nop
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff30 	bl	8001c94 <__NVIC_EnableIRQ>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff40 	bl	8001cd0 <__NVIC_DisableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e66:	f7ff fed7 	bl	8001c18 <HAL_GetTick>
 8001e6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d008      	beq.n	8001e8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2280      	movs	r2, #128	; 0x80
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e052      	b.n	8001f30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0216 	bic.w	r2, r2, #22
 8001e98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	695a      	ldr	r2, [r3, #20]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <HAL_DMA_Abort+0x62>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0208 	bic.w	r2, r2, #8
 8001ec8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eda:	e013      	b.n	8001f04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001edc:	f7ff fe9c 	bl	8001c18 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b05      	cmp	r3, #5
 8001ee8:	d90c      	bls.n	8001f04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2220      	movs	r2, #32
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e015      	b.n	8001f30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e4      	bne.n	8001edc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f16:	223f      	movs	r2, #63	; 0x3f
 8001f18:	409a      	lsls	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d004      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2280      	movs	r2, #128	; 0x80
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00c      	b.n	8001f70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2205      	movs	r2, #5
 8001f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e177      	b.n	8002288 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8166 	bne.w	8002282 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d130      	bne.n	8002030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0201 	and.w	r2, r3, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d017      	beq.n	800206c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d123      	bne.n	80020c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80c0 	beq.w	8002282 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b66      	ldr	r3, [pc, #408]	; (80022a0 <HAL_GPIO_Init+0x324>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a65      	ldr	r2, [pc, #404]	; (80022a0 <HAL_GPIO_Init+0x324>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <HAL_GPIO_Init+0x324>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211e:	4a61      	ldr	r2, [pc, #388]	; (80022a4 <HAL_GPIO_Init+0x328>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_GPIO_Init+0x32c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d037      	beq.n	80021ba <HAL_GPIO_Init+0x23e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a57      	ldr	r2, [pc, #348]	; (80022ac <HAL_GPIO_Init+0x330>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d031      	beq.n	80021b6 <HAL_GPIO_Init+0x23a>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a56      	ldr	r2, [pc, #344]	; (80022b0 <HAL_GPIO_Init+0x334>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <HAL_GPIO_Init+0x236>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a55      	ldr	r2, [pc, #340]	; (80022b4 <HAL_GPIO_Init+0x338>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d025      	beq.n	80021ae <HAL_GPIO_Init+0x232>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a54      	ldr	r2, [pc, #336]	; (80022b8 <HAL_GPIO_Init+0x33c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01f      	beq.n	80021aa <HAL_GPIO_Init+0x22e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a53      	ldr	r2, [pc, #332]	; (80022bc <HAL_GPIO_Init+0x340>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_GPIO_Init+0x22a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a52      	ldr	r2, [pc, #328]	; (80022c0 <HAL_GPIO_Init+0x344>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x226>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a51      	ldr	r2, [pc, #324]	; (80022c4 <HAL_GPIO_Init+0x348>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x222>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a50      	ldr	r2, [pc, #320]	; (80022c8 <HAL_GPIO_Init+0x34c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x21e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a4f      	ldr	r2, [pc, #316]	; (80022cc <HAL_GPIO_Init+0x350>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x21a>
 8002192:	2309      	movs	r3, #9
 8002194:	e012      	b.n	80021bc <HAL_GPIO_Init+0x240>
 8002196:	230a      	movs	r3, #10
 8002198:	e010      	b.n	80021bc <HAL_GPIO_Init+0x240>
 800219a:	2308      	movs	r3, #8
 800219c:	e00e      	b.n	80021bc <HAL_GPIO_Init+0x240>
 800219e:	2307      	movs	r3, #7
 80021a0:	e00c      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021a2:	2306      	movs	r3, #6
 80021a4:	e00a      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021a6:	2305      	movs	r3, #5
 80021a8:	e008      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x240>
 80021ba:	2300      	movs	r3, #0
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021cc:	4935      	ldr	r1, [pc, #212]	; (80022a4 <HAL_GPIO_Init+0x328>)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_GPIO_Init+0x354>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fe:	4a34      	ldr	r2, [pc, #208]	; (80022d0 <HAL_GPIO_Init+0x354>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <HAL_GPIO_Init+0x354>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002228:	4a29      	ldr	r2, [pc, #164]	; (80022d0 <HAL_GPIO_Init+0x354>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222e:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <HAL_GPIO_Init+0x354>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002252:	4a1f      	ldr	r2, [pc, #124]	; (80022d0 <HAL_GPIO_Init+0x354>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_GPIO_Init+0x354>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_GPIO_Init+0x354>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	f67f ae84 	bls.w	8001f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40013800 	.word	0x40013800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40021400 	.word	0x40021400
 80022c0:	40021800 	.word	0x40021800
 80022c4:	40021c00 	.word	0x40021c00
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40022400 	.word	0x40022400
 80022d0:	40013c00 	.word	0x40013c00

080022d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e0d9      	b.n	80024a4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f0:	2201      	movs	r2, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	429a      	cmp	r2, r3
 8002308:	f040 80c9 	bne.w	800249e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800230c:	4a6b      	ldr	r2, [pc, #428]	; (80024bc <HAL_GPIO_DeInit+0x1e8>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002318:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	4013      	ands	r3, r2
 800232c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a63      	ldr	r2, [pc, #396]	; (80024c0 <HAL_GPIO_DeInit+0x1ec>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d037      	beq.n	80023a6 <HAL_GPIO_DeInit+0xd2>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a62      	ldr	r2, [pc, #392]	; (80024c4 <HAL_GPIO_DeInit+0x1f0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d031      	beq.n	80023a2 <HAL_GPIO_DeInit+0xce>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a61      	ldr	r2, [pc, #388]	; (80024c8 <HAL_GPIO_DeInit+0x1f4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02b      	beq.n	800239e <HAL_GPIO_DeInit+0xca>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a60      	ldr	r2, [pc, #384]	; (80024cc <HAL_GPIO_DeInit+0x1f8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d025      	beq.n	800239a <HAL_GPIO_DeInit+0xc6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a5f      	ldr	r2, [pc, #380]	; (80024d0 <HAL_GPIO_DeInit+0x1fc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d01f      	beq.n	8002396 <HAL_GPIO_DeInit+0xc2>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a5e      	ldr	r2, [pc, #376]	; (80024d4 <HAL_GPIO_DeInit+0x200>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d019      	beq.n	8002392 <HAL_GPIO_DeInit+0xbe>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a5d      	ldr	r2, [pc, #372]	; (80024d8 <HAL_GPIO_DeInit+0x204>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_GPIO_DeInit+0xba>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a5c      	ldr	r2, [pc, #368]	; (80024dc <HAL_GPIO_DeInit+0x208>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d00d      	beq.n	800238a <HAL_GPIO_DeInit+0xb6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <HAL_GPIO_DeInit+0x20c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d007      	beq.n	8002386 <HAL_GPIO_DeInit+0xb2>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <HAL_GPIO_DeInit+0x210>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_GPIO_DeInit+0xae>
 800237e:	2309      	movs	r3, #9
 8002380:	e012      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 8002382:	230a      	movs	r3, #10
 8002384:	e010      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 8002386:	2308      	movs	r3, #8
 8002388:	e00e      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 800238a:	2307      	movs	r3, #7
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 800238e:	2306      	movs	r3, #6
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_DeInit+0xd4>
 80023a6:	2300      	movs	r3, #0
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d132      	bne.n	800241e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80023b8:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_GPIO_DeInit+0x214>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43db      	mvns	r3, r3
 80023c0:	4949      	ldr	r1, [pc, #292]	; (80024e8 <HAL_GPIO_DeInit+0x214>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80023c6:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <HAL_GPIO_DeInit+0x214>)
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4946      	ldr	r1, [pc, #280]	; (80024e8 <HAL_GPIO_DeInit+0x214>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80023d4:	4b44      	ldr	r3, [pc, #272]	; (80024e8 <HAL_GPIO_DeInit+0x214>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	43db      	mvns	r3, r3
 80023dc:	4942      	ldr	r1, [pc, #264]	; (80024e8 <HAL_GPIO_DeInit+0x214>)
 80023de:	4013      	ands	r3, r2
 80023e0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_GPIO_DeInit+0x214>)
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	493f      	ldr	r1, [pc, #252]	; (80024e8 <HAL_GPIO_DeInit+0x214>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002400:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <HAL_GPIO_DeInit+0x1e8>)
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	3302      	adds	r3, #2
 8002408:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	43da      	mvns	r2, r3
 8002410:	482a      	ldr	r0, [pc, #168]	; (80024bc <HAL_GPIO_DeInit+0x1e8>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	400a      	ands	r2, r1
 8002418:	3302      	adds	r3, #2
 800241a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2103      	movs	r1, #3
 8002428:	fa01 f303 	lsl.w	r3, r1, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	08d2      	lsrs	r2, r2, #3
 8002454:	4019      	ands	r1, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	2103      	movs	r1, #3
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	2101      	movs	r1, #1
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	401a      	ands	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2103      	movs	r1, #3
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	401a      	ands	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f af22 	bls.w	80022f0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40021400 	.word	0x40021400
 80024d8:	40021800 	.word	0x40021800
 80024dc:	40021c00 	.word	0x40021c00
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40022400 	.word	0x40022400
 80024e8:	40013c00 	.word	0x40013c00

080024ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
 80024f8:	4613      	mov	r3, r2
 80024fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024fc:	787b      	ldrb	r3, [r7, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002508:	e003      	b.n	8002512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800250a:	887b      	ldrh	r3, [r7, #2]
 800250c:	041a      	lsls	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	619a      	str	r2, [r3, #24]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e267      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d075      	beq.n	800262a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253e:	4b88      	ldr	r3, [pc, #544]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00c      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800254a:	4b85      	ldr	r3, [pc, #532]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002552:	2b08      	cmp	r3, #8
 8002554:	d112      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002556:	4b82      	ldr	r3, [pc, #520]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05b      	beq.n	8002628 <HAL_RCC_OscConfig+0x108>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d157      	bne.n	8002628 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e242      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002584:	d106      	bne.n	8002594 <HAL_RCC_OscConfig+0x74>
 8002586:	4b76      	ldr	r3, [pc, #472]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a75      	ldr	r2, [pc, #468]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e01d      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x98>
 800259e:	4b70      	ldr	r3, [pc, #448]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a6f      	ldr	r2, [pc, #444]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025a8:	6013      	str	r3, [r2, #0]
 80025aa:	4b6d      	ldr	r3, [pc, #436]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a6c      	ldr	r2, [pc, #432]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0xb0>
 80025b8:	4b69      	ldr	r3, [pc, #420]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a68      	ldr	r2, [pc, #416]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	4b66      	ldr	r3, [pc, #408]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a65      	ldr	r2, [pc, #404]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d013      	beq.n	8002600 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7ff fb1e 	bl	8001c18 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7ff fb1a 	bl	8001c18 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e207      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b5b      	ldr	r3, [pc, #364]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xc0>
 80025fe:	e014      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fb0a 	bl	8001c18 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002608:	f7ff fb06 	bl	8001c18 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b64      	cmp	r3, #100	; 0x64
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e1f3      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261a:	4b51      	ldr	r3, [pc, #324]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0xe8>
 8002626:	e000      	b.n	800262a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d063      	beq.n	80026fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002636:	4b4a      	ldr	r3, [pc, #296]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002642:	4b47      	ldr	r3, [pc, #284]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11c      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800264e:	4b44      	ldr	r3, [pc, #272]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800265a:	4b41      	ldr	r3, [pc, #260]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d005      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e1c7      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4937      	ldr	r1, [pc, #220]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002686:	e03a      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d020      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RCC_OscConfig+0x244>)
 8002692:	2201      	movs	r2, #1
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7ff fabf 	bl	8001c18 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7ff fabb 	bl	8001c18 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1a8      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4925      	ldr	r1, [pc, #148]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e015      	b.n	80026fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_OscConfig+0x244>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff fa9e 	bl	8001c18 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e0:	f7ff fa9a 	bl	8001c18 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e187      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f2:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d036      	beq.n	8002778 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d016      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_RCC_OscConfig+0x248>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7ff fa7e 	bl	8001c18 <HAL_GetTick>
 800271c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002720:	f7ff fa7a 	bl	8001c18 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e167      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_OscConfig+0x240>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f0      	beq.n	8002720 <HAL_RCC_OscConfig+0x200>
 800273e:	e01b      	b.n	8002778 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_OscConfig+0x248>)
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7ff fa67 	bl	8001c18 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	e00e      	b.n	800276c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800274e:	f7ff fa63 	bl	8001c18 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d907      	bls.n	800276c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e150      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002760:	40023800 	.word	0x40023800
 8002764:	42470000 	.word	0x42470000
 8002768:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b88      	ldr	r3, [pc, #544]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ea      	bne.n	800274e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8097 	beq.w	80028b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800278a:	4b81      	ldr	r3, [pc, #516]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	4b7d      	ldr	r3, [pc, #500]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a7c      	ldr	r2, [pc, #496]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b7a      	ldr	r3, [pc, #488]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b2:	2301      	movs	r3, #1
 80027b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b6:	4b77      	ldr	r3, [pc, #476]	; (8002994 <HAL_RCC_OscConfig+0x474>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d118      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c2:	4b74      	ldr	r3, [pc, #464]	; (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a73      	ldr	r2, [pc, #460]	; (8002994 <HAL_RCC_OscConfig+0x474>)
 80027c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ce:	f7ff fa23 	bl	8001c18 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d6:	f7ff fa1f 	bl	8001c18 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e10c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	4b6a      	ldr	r3, [pc, #424]	; (8002994 <HAL_RCC_OscConfig+0x474>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x2ea>
 80027fc:	4b64      	ldr	r3, [pc, #400]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a63      	ldr	r2, [pc, #396]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d10c      	bne.n	800282c <HAL_RCC_OscConfig+0x30c>
 8002812:	4b5f      	ldr	r3, [pc, #380]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a5e      	ldr	r2, [pc, #376]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 0304 	orr.w	r3, r3, #4
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	4b5c      	ldr	r3, [pc, #368]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a5b      	ldr	r2, [pc, #364]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002824:	f043 0301 	orr.w	r3, r3, #1
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
 800282a:	e00b      	b.n	8002844 <HAL_RCC_OscConfig+0x324>
 800282c:	4b58      	ldr	r3, [pc, #352]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	4b55      	ldr	r3, [pc, #340]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	4a54      	ldr	r2, [pc, #336]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7ff f9e4 	bl	8001c18 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7ff f9e0 	bl	8001c18 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e0cb      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0ee      	beq.n	8002854 <HAL_RCC_OscConfig+0x334>
 8002876:	e014      	b.n	80028a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002878:	f7ff f9ce 	bl	8001c18 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7ff f9ca 	bl	8001c18 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e0b5      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002896:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1ee      	bne.n	8002880 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a8:	4b39      	ldr	r3, [pc, #228]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	4a38      	ldr	r2, [pc, #224]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80028ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a1 	beq.w	8002a00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028be:	4b34      	ldr	r3, [pc, #208]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d05c      	beq.n	8002984 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d141      	bne.n	8002956 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4b31      	ldr	r3, [pc, #196]	; (8002998 <HAL_RCC_OscConfig+0x478>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff f99e 	bl	8001c18 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7ff f99a 	bl	8001c18 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e087      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f2:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	3b01      	subs	r3, #1
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	061b      	lsls	r3, r3, #24
 8002922:	491b      	ldr	r1, [pc, #108]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCC_OscConfig+0x478>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800292e:	f7ff f973 	bl	8001c18 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002936:	f7ff f96f 	bl	8001c18 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e05c      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x416>
 8002954:	e054      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002956:	4b10      	ldr	r3, [pc, #64]	; (8002998 <HAL_RCC_OscConfig+0x478>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7ff f95c 	bl	8001c18 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff f958 	bl	8001c18 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e045      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_OscConfig+0x470>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x444>
 8002982:	e03d      	b.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d107      	bne.n	800299c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e038      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
 8002990:	40023800 	.word	0x40023800
 8002994:	40007000 	.word	0x40007000
 8002998:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800299c:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x4ec>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d028      	beq.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d121      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11a      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	3b01      	subs	r3, #1
 80029e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40023800 	.word	0x40023800

08002a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0cc      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d90c      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d044      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d119      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e06f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e067      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b37      	ldr	r3, [pc, #220]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4934      	ldr	r1, [pc, #208]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7ff f88a 	bl	8001c18 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7ff f886 	bl	8001c18 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e04f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d20c      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490a      	ldr	r1, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fc94 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08010b98 	.word	0x08010b98
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002be0:	b090      	sub	sp, #64	; 0x40
 8002be2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	637b      	str	r3, [r7, #52]	; 0x34
 8002be8:	2300      	movs	r3, #0
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bec:	2300      	movs	r3, #0
 8002bee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf4:	4b59      	ldr	r3, [pc, #356]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	f200 80a1 	bhi.w	8002d48 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0x34>
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d003      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c0e:	e09b      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b53      	ldr	r3, [pc, #332]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c14:	e09b      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c16:	4b53      	ldr	r3, [pc, #332]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c1a:	e098      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c1c:	4b4f      	ldr	r3, [pc, #316]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c26:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d028      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b4a      	ldr	r3, [pc, #296]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	623b      	str	r3, [r7, #32]
 8002c3c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c44:	2100      	movs	r1, #0
 8002c46:	4b47      	ldr	r3, [pc, #284]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c48:	fb03 f201 	mul.w	r2, r3, r1
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	fb00 f303 	mul.w	r3, r0, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	4a43      	ldr	r2, [pc, #268]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c56:	fba0 1202 	umull	r1, r2, r0, r2
 8002c5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c62:	4413      	add	r3, r2
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c68:	2200      	movs	r2, #0
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	61fa      	str	r2, [r7, #28]
 8002c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c76:	f7fe f827 	bl	8000cc8 <__aeabi_uldivmod>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4613      	mov	r3, r2
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c82:	e053      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c84:	4b35      	ldr	r3, [pc, #212]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	617a      	str	r2, [r7, #20]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c96:	f04f 0b00 	mov.w	fp, #0
 8002c9a:	4652      	mov	r2, sl
 8002c9c:	465b      	mov	r3, fp
 8002c9e:	f04f 0000 	mov.w	r0, #0
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	0159      	lsls	r1, r3, #5
 8002ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cac:	0150      	lsls	r0, r2, #5
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	ebb2 080a 	subs.w	r8, r2, sl
 8002cb6:	eb63 090b 	sbc.w	r9, r3, fp
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cce:	ebb2 0408 	subs.w	r4, r2, r8
 8002cd2:	eb63 0509 	sbc.w	r5, r3, r9
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	00eb      	lsls	r3, r5, #3
 8002ce0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce4:	00e2      	lsls	r2, r4, #3
 8002ce6:	4614      	mov	r4, r2
 8002ce8:	461d      	mov	r5, r3
 8002cea:	eb14 030a 	adds.w	r3, r4, sl
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	eb45 030b 	adc.w	r3, r5, fp
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d02:	4629      	mov	r1, r5
 8002d04:	028b      	lsls	r3, r1, #10
 8002d06:	4621      	mov	r1, r4
 8002d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	028a      	lsls	r2, r1, #10
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d16:	2200      	movs	r2, #0
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	60fa      	str	r2, [r7, #12]
 8002d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d20:	f7fd ffd2 	bl	8000cc8 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4613      	mov	r3, r2
 8002d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	3301      	adds	r3, #1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d46:	e002      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3740      	adds	r7, #64	; 0x40
 8002d54:	46bd      	mov	sp, r7
 8002d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	017d7840 	.word	0x017d7840

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000000 	.word	0x20000000

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a9b      	lsrs	r3, r3, #10
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4903      	ldr	r1, [pc, #12]	; (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	08010ba8 	.word	0x08010ba8

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dac:	f7ff ffdc 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0b5b      	lsrs	r3, r3, #13
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4903      	ldr	r1, [pc, #12]	; (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	08010ba8 	.word	0x08010ba8

08002dd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	220f      	movs	r2, #15
 8002dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002de0:	4b12      	ldr	r3, [pc, #72]	; (8002e2c <HAL_RCC_GetClockConfig+0x5c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0203 	and.w	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dec:	4b0f      	ldr	r3, [pc, #60]	; (8002e2c <HAL_RCC_GetClockConfig+0x5c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <HAL_RCC_GetClockConfig+0x5c>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <HAL_RCC_GetClockConfig+0x5c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	08db      	lsrs	r3, r3, #3
 8002e0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <HAL_RCC_GetClockConfig+0x60>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 020f 	and.w	r2, r3, #15
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	601a      	str	r2, [r3, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40023c00 	.word	0x40023c00

08002e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e041      	b.n	8002eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f839 	bl	8002ed2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 f9d8 	bl	8003228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d001      	beq.n	8002f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e04e      	b.n	8002f9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	; (8002fac <HAL_TIM_Base_Start_IT+0xc4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d022      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d01d      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	; (8002fb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1c      	ldr	r2, [pc, #112]	; (8002fb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1b      	ldr	r2, [pc, #108]	; (8002fbc <HAL_TIM_Base_Start_IT+0xd4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d010      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	e007      	b.n	8002f9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40010400 	.word	0x40010400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40001800 	.word	0x40001800

08002fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d122      	bne.n	8003024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d11b      	bne.n	8003024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0202 	mvn.w	r2, #2
 8002ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8ee 	bl	80031ec <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8e0 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f8f1 	bl	8003200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d122      	bne.n	8003078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b04      	cmp	r3, #4
 800303e:	d11b      	bne.n	8003078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0204 	mvn.w	r2, #4
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8c4 	bl	80031ec <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8b6 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8c7 	bl	8003200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d122      	bne.n	80030cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b08      	cmp	r3, #8
 8003092:	d11b      	bne.n	80030cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0208 	mvn.w	r2, #8
 800309c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2204      	movs	r2, #4
 80030a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f89a 	bl	80031ec <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f88c 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f89d 	bl	8003200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d122      	bne.n	8003120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d11b      	bne.n	8003120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0210 	mvn.w	r2, #16
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2208      	movs	r2, #8
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f870 	bl	80031ec <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f862 	bl	80031d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f873 	bl	8003200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0201 	mvn.w	r2, #1
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fe f988 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003164:	2b80      	cmp	r3, #128	; 0x80
 8003166:	d107      	bne.n	8003178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f902 	bl	800337c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d10e      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003190:	2b40      	cmp	r3, #64	; 0x40
 8003192:	d107      	bne.n	80031a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f838 	bl	8003214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b20      	cmp	r3, #32
 80031b0:	d10e      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d107      	bne.n	80031d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0220 	mvn.w	r2, #32
 80031c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8cc 	bl	8003368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a40      	ldr	r2, [pc, #256]	; (800333c <TIM_Base_SetConfig+0x114>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d00f      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a3d      	ldr	r2, [pc, #244]	; (8003340 <TIM_Base_SetConfig+0x118>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00b      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3c      	ldr	r2, [pc, #240]	; (8003344 <TIM_Base_SetConfig+0x11c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3b      	ldr	r2, [pc, #236]	; (8003348 <TIM_Base_SetConfig+0x120>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d003      	beq.n	8003268 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3a      	ldr	r2, [pc, #232]	; (800334c <TIM_Base_SetConfig+0x124>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2f      	ldr	r2, [pc, #188]	; (800333c <TIM_Base_SetConfig+0x114>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003288:	d027      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2c      	ldr	r2, [pc, #176]	; (8003340 <TIM_Base_SetConfig+0x118>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d023      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2b      	ldr	r2, [pc, #172]	; (8003344 <TIM_Base_SetConfig+0x11c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01f      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2a      	ldr	r2, [pc, #168]	; (8003348 <TIM_Base_SetConfig+0x120>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a29      	ldr	r2, [pc, #164]	; (800334c <TIM_Base_SetConfig+0x124>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d017      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a28      	ldr	r2, [pc, #160]	; (8003350 <TIM_Base_SetConfig+0x128>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d013      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a27      	ldr	r2, [pc, #156]	; (8003354 <TIM_Base_SetConfig+0x12c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d00f      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a26      	ldr	r2, [pc, #152]	; (8003358 <TIM_Base_SetConfig+0x130>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00b      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a25      	ldr	r2, [pc, #148]	; (800335c <TIM_Base_SetConfig+0x134>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a24      	ldr	r2, [pc, #144]	; (8003360 <TIM_Base_SetConfig+0x138>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d003      	beq.n	80032da <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a23      	ldr	r2, [pc, #140]	; (8003364 <TIM_Base_SetConfig+0x13c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d108      	bne.n	80032ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <TIM_Base_SetConfig+0x114>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0xf8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a0c      	ldr	r2, [pc, #48]	; (800334c <TIM_Base_SetConfig+0x124>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d103      	bne.n	8003328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	615a      	str	r2, [r3, #20]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40010400 	.word	0x40010400
 8003350:	40014000 	.word	0x40014000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800
 800335c:	40001800 	.word	0x40001800
 8003360:	40001c00 	.word	0x40001c00
 8003364:	40002000 	.word	0x40002000

08003368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e03f      	b.n	8003422 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe fa5c 	bl	8001874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2224      	movs	r2, #36	; 0x24
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 feaf 	bl	8004138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e021      	b.n	8003480 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2224      	movs	r2, #36	; 0x24
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003452:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fe fa93 	bl	8001980 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08a      	sub	sp, #40	; 0x28
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	603b      	str	r3, [r7, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b20      	cmp	r3, #32
 80034a6:	d17c      	bne.n	80035a2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_UART_Transmit+0x2c>
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e075      	b.n	80035a4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d101      	bne.n	80034c6 <HAL_UART_Transmit+0x3e>
 80034c2:	2302      	movs	r3, #2
 80034c4:	e06e      	b.n	80035a4 <HAL_UART_Transmit+0x11c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2221      	movs	r2, #33	; 0x21
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034dc:	f7fe fb9c 	bl	8001c18 <HAL_GetTick>
 80034e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	88fa      	ldrh	r2, [r7, #6]
 80034e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	88fa      	ldrh	r2, [r7, #6]
 80034ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f6:	d108      	bne.n	800350a <HAL_UART_Transmit+0x82>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d104      	bne.n	800350a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003500:	2300      	movs	r3, #0
 8003502:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	61bb      	str	r3, [r7, #24]
 8003508:	e003      	b.n	8003512 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800351a:	e02a      	b.n	8003572 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2200      	movs	r2, #0
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 fbc0 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e036      	b.n	80035a4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	3302      	adds	r3, #2
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e007      	b.n	8003564 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	781a      	ldrb	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3301      	adds	r3, #1
 8003562:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1cf      	bne.n	800351c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	2140      	movs	r1, #64	; 0x40
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb90 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e006      	b.n	80035a4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08a      	sub	sp, #40	; 0x28
 80035b0:	af02      	add	r7, sp, #8
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	f040 808c 	bne.w	80036e6 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_UART_Receive+0x2e>
 80035d4:	88fb      	ldrh	r3, [r7, #6]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e084      	b.n	80036e8 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Receive+0x40>
 80035e8:	2302      	movs	r3, #2
 80035ea:	e07d      	b.n	80036e8 <HAL_UART_Receive+0x13c>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2222      	movs	r2, #34	; 0x22
 80035fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003608:	f7fe fb06 	bl	8001c18 <HAL_GetTick>
 800360c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	88fa      	ldrh	r2, [r7, #6]
 8003612:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	88fa      	ldrh	r2, [r7, #6]
 8003618:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003622:	d108      	bne.n	8003636 <HAL_UART_Receive+0x8a>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	61bb      	str	r3, [r7, #24]
 8003634:	e003      	b.n	800363e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003646:	e043      	b.n	80036d0 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2200      	movs	r2, #0
 8003650:	2120      	movs	r1, #32
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fb2a 	bl	8003cac <UART_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e042      	b.n	80036e8 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10c      	bne.n	8003682 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	b29b      	uxth	r3, r3
 8003670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003674:	b29a      	uxth	r2, r3
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	3302      	adds	r3, #2
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	e01f      	b.n	80036c2 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800368a:	d007      	beq.n	800369c <HAL_UART_Receive+0xf0>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_UART_Receive+0xfe>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e008      	b.n	80036bc <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1b6      	bne.n	8003648 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	e000      	b.n	80036e8 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80036e6:	2302      	movs	r3, #2
  }
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3720      	adds	r7, #32
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	d11d      	bne.n	8003746 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_UART_Receive_IT+0x26>
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e016      	b.n	8003748 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_UART_Receive_IT+0x38>
 8003724:	2302      	movs	r3, #2
 8003726:	e00f      	b.n	8003748 <HAL_UART_Receive_IT+0x58>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	461a      	mov	r2, r3
 800373a:	68b9      	ldr	r1, [r7, #8]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fb23 	bl	8003d88 <UART_Start_Receive_IT>
 8003742:	4603      	mov	r3, r0
 8003744:	e000      	b.n	8003748 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b0ba      	sub	sp, #232	; 0xe8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800378e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_UART_IRQHandler+0x66>
 80037a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fc07 	bl	8003fc2 <UART_Receive_IT>
      return;
 80037b4:	e256      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80de 	beq.w	800397c <HAL_UART_IRQHandler+0x22c>
 80037c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80d1 	beq.w	800397c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_UART_IRQHandler+0xae>
 80037e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d005      	beq.n	80037fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_UART_IRQHandler+0xd2>
 800380a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d005      	beq.n	8003822 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f043 0202 	orr.w	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_UART_IRQHandler+0xf6>
 800382e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d011      	beq.n	8003876 <HAL_UART_IRQHandler+0x126>
 8003852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b00      	cmp	r3, #0
 800385c:	d105      	bne.n	800386a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800385e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	f043 0208 	orr.w	r2, r3, #8
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 81ed 	beq.w	8003c5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003884:	f003 0320 	and.w	r3, r3, #32
 8003888:	2b00      	cmp	r3, #0
 800388a:	d008      	beq.n	800389e <HAL_UART_IRQHandler+0x14e>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fb92 	bl	8003fc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d103      	bne.n	80038ca <HAL_UART_IRQHandler+0x17a>
 80038c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04f      	beq.n	800396a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 fa9a 	bl	8003e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038da:	2b40      	cmp	r3, #64	; 0x40
 80038dc:	d141      	bne.n	8003962 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800390a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800390e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1d9      	bne.n	80038de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392e:	2b00      	cmp	r3, #0
 8003930:	d013      	beq.n	800395a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	4a7d      	ldr	r2, [pc, #500]	; (8003b2c <HAL_UART_IRQHandler+0x3dc>)
 8003938:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	4618      	mov	r0, r3
 8003940:	f7fe fafa 	bl	8001f38 <HAL_DMA_Abort_IT>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d016      	beq.n	8003978 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003954:	4610      	mov	r0, r2
 8003956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	e00e      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f990 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	e00a      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f98c 	bl	8003c80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	e006      	b.n	8003978 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f988 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003976:	e170      	b.n	8003c5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003978:	bf00      	nop
    return;
 800397a:	e16e      	b.n	8003c5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 814a 	bne.w	8003c1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 8143 	beq.w	8003c1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 813c 	beq.w	8003c1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c2:	2b40      	cmp	r3, #64	; 0x40
 80039c4:	f040 80b4 	bne.w	8003b30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8140 	beq.w	8003c5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039e6:	429a      	cmp	r2, r3
 80039e8:	f080 8139 	bcs.w	8003c5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fe:	f000 8088 	beq.w	8003b12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a10:	e853 3f00 	ldrex	r3, [r3]
 8003a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	330c      	adds	r3, #12
 8003a2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a2e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1d9      	bne.n	8003a02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e1      	bne.n	8003a4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003aae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ab0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e3      	bne.n	8003a8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003af4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003af6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003afa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e3      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fe f9a3 	bl	8001e58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8b6 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b28:	e099      	b.n	8003c5e <HAL_UART_IRQHandler+0x50e>
 8003b2a:	bf00      	nop
 8003b2c:	08003ecb 	.word	0x08003ecb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 808b 	beq.w	8003c62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003b4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 8086 	beq.w	8003c62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	330c      	adds	r3, #12
 8003b5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	330c      	adds	r3, #12
 8003b76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b7a:	647a      	str	r2, [r7, #68]	; 0x44
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3314      	adds	r3, #20
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	e853 3f00 	ldrex	r3, [r3]
 8003b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3314      	adds	r3, #20
 8003bae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bb2:	633a      	str	r2, [r7, #48]	; 0x30
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e3      	bne.n	8003b8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	330c      	adds	r3, #12
 8003bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0310 	bic.w	r3, r3, #16
 8003bea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bf8:	61fa      	str	r2, [r7, #28]
 8003bfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	69b9      	ldr	r1, [r7, #24]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	617b      	str	r3, [r7, #20]
   return(result);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e3      	bne.n	8003bd4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 f83e 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c18:	e023      	b.n	8003c62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_UART_IRQHandler+0x4ea>
 8003c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f95d 	bl	8003ef2 <UART_Transmit_IT>
    return;
 8003c38:	e014      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00e      	beq.n	8003c64 <HAL_UART_IRQHandler+0x514>
 8003c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f99d 	bl	8003f92 <UART_EndTransmit_IT>
    return;
 8003c58:	e004      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
    return;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
      return;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_UART_IRQHandler+0x514>
      return;
 8003c62:	bf00      	nop
  }
}
 8003c64:	37e8      	adds	r7, #232	; 0xe8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop

08003c6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b090      	sub	sp, #64	; 0x40
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbc:	e050      	b.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d04c      	beq.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d007      	beq.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ccc:	f7fd ffa4 	bl	8001c18 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d241      	bcs.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8003cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e5      	bne.n	8003cdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f023 0301 	bic.w	r3, r3, #1
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3314      	adds	r3, #20
 8003d2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d30:	623a      	str	r2, [r7, #32]
 8003d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d34:	69f9      	ldr	r1, [r7, #28]
 8003d36:	6a3a      	ldr	r2, [r7, #32]
 8003d38:	e841 2300 	strex	r3, r2, [r1]
 8003d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1e5      	bne.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2220      	movs	r2, #32
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e00f      	b.n	8003d80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	bf0c      	ite	eq
 8003d70:	2301      	moveq	r3, #1
 8003d72:	2300      	movne	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	461a      	mov	r2, r3
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d09f      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3740      	adds	r7, #64	; 0x40
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	88fa      	ldrh	r2, [r7, #6]
 8003da6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2222      	movs	r2, #34	; 0x22
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d007      	beq.n	8003dd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003dd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0220 	orr.w	r2, r2, #32
 8003df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b095      	sub	sp, #84	; 0x54
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	330c      	adds	r3, #12
 8003e12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	330c      	adds	r3, #12
 8003e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e2c:	643a      	str	r2, [r7, #64]	; 0x40
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e5      	bne.n	8003e0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3314      	adds	r3, #20
 8003e46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	e853 3f00 	ldrex	r3, [r3]
 8003e4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3314      	adds	r3, #20
 8003e5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1e5      	bne.n	8003e40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d119      	bne.n	8003eb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	647b      	str	r3, [r7, #68]	; 0x44
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e9c:	61ba      	str	r2, [r7, #24]
 8003e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea0:	6979      	ldr	r1, [r7, #20]
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e5      	bne.n	8003e7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ebe:	bf00      	nop
 8003ec0:	3754      	adds	r7, #84	; 0x54
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fecb 	bl	8003c80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b085      	sub	sp, #20
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b21      	cmp	r3, #33	; 0x21
 8003f04:	d13e      	bne.n	8003f84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d114      	bne.n	8003f3a <UART_Transmit_IT+0x48>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d110      	bne.n	8003f3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	461a      	mov	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	1c9a      	adds	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	621a      	str	r2, [r3, #32]
 8003f38:	e008      	b.n	8003f4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	1c59      	adds	r1, r3, #1
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6211      	str	r1, [r2, #32]
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10f      	bne.n	8003f80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f84:	2302      	movs	r3, #2
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2220      	movs	r2, #32
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fe5a 	bl	8003c6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b08c      	sub	sp, #48	; 0x30
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b22      	cmp	r3, #34	; 0x22
 8003fd4:	f040 80ab 	bne.w	800412e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe0:	d117      	bne.n	8004012 <UART_Receive_IT+0x50>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d113      	bne.n	8004012 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004000:	b29a      	uxth	r2, r3
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	1c9a      	adds	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	629a      	str	r2, [r3, #40]	; 0x28
 8004010:	e026      	b.n	8004060 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004016:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004024:	d007      	beq.n	8004036 <UART_Receive_IT+0x74>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <UART_Receive_IT+0x82>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	b2da      	uxtb	r2, r3
 800403e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	e008      	b.n	8004056 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004050:	b2da      	uxtb	r2, r3
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29b      	uxth	r3, r3
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4619      	mov	r1, r3
 800406e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004070:	2b00      	cmp	r3, #0
 8004072:	d15a      	bne.n	800412a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0220 	bic.w	r2, r2, #32
 8004082:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 0201 	bic.w	r2, r2, #1
 80040a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d135      	bne.n	8004120 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	330c      	adds	r3, #12
 80040c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f023 0310 	bic.w	r3, r3, #16
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040da:	623a      	str	r2, [r7, #32]
 80040dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	69f9      	ldr	r1, [r7, #28]
 80040e0:	6a3a      	ldr	r2, [r7, #32]
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e5      	bne.n	80040ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0310 	and.w	r3, r3, #16
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d10a      	bne.n	8004112 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60fb      	str	r3, [r7, #12]
 8004110:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fdbb 	bl	8003c94 <HAL_UARTEx_RxEventCallback>
 800411e:	e002      	b.n	8004126 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7fd fc63 	bl	80019ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e002      	b.n	8004130 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800412a:	2300      	movs	r3, #0
 800412c:	e000      	b.n	8004130 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
  }
}
 8004130:	4618      	mov	r0, r3
 8004132:	3730      	adds	r7, #48	; 0x30
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800413c:	b0c0      	sub	sp, #256	; 0x100
 800413e:	af00      	add	r7, sp, #0
 8004140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	68d9      	ldr	r1, [r3, #12]
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	ea40 0301 	orr.w	r3, r0, r1
 8004160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004190:	f021 010c 	bic.w	r1, r1, #12
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800419e:	430b      	orrs	r3, r1
 80041a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b2:	6999      	ldr	r1, [r3, #24]
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	ea40 0301 	orr.w	r3, r0, r1
 80041be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b8f      	ldr	r3, [pc, #572]	; (8004404 <UART_SetConfig+0x2cc>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d005      	beq.n	80041d8 <UART_SetConfig+0xa0>
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <UART_SetConfig+0x2d0>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d104      	bne.n	80041e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe fde6 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 80041dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041e0:	e003      	b.n	80041ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041e2:	f7fe fdcd 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 80041e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f4:	f040 810c 	bne.w	8004410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	1891      	adds	r1, r2, r2
 8004210:	65b9      	str	r1, [r7, #88]	; 0x58
 8004212:	415b      	adcs	r3, r3
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800421a:	4621      	mov	r1, r4
 800421c:	eb12 0801 	adds.w	r8, r2, r1
 8004220:	4629      	mov	r1, r5
 8004222:	eb43 0901 	adc.w	r9, r3, r1
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800423a:	4690      	mov	r8, r2
 800423c:	4699      	mov	r9, r3
 800423e:	4623      	mov	r3, r4
 8004240:	eb18 0303 	adds.w	r3, r8, r3
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004248:	462b      	mov	r3, r5
 800424a:	eb49 0303 	adc.w	r3, r9, r3
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800425e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004266:	460b      	mov	r3, r1
 8004268:	18db      	adds	r3, r3, r3
 800426a:	653b      	str	r3, [r7, #80]	; 0x50
 800426c:	4613      	mov	r3, r2
 800426e:	eb42 0303 	adc.w	r3, r2, r3
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
 8004274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800427c:	f7fc fd24 	bl	8000cc8 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <UART_SetConfig+0x2d4>)
 8004286:	fba3 2302 	umull	r2, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	011c      	lsls	r4, r3, #4
 800428e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800429c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042a8:	415b      	adcs	r3, r3
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042b0:	4641      	mov	r1, r8
 80042b2:	eb12 0a01 	adds.w	sl, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb43 0b01 	adc.w	fp, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d0:	4692      	mov	sl, r2
 80042d2:	469b      	mov	fp, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	eb1a 0303 	adds.w	r3, sl, r3
 80042da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042de:	464b      	mov	r3, r9
 80042e0:	eb4b 0303 	adc.w	r3, fp, r3
 80042e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042fc:	460b      	mov	r3, r1
 80042fe:	18db      	adds	r3, r3, r3
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
 8004302:	4613      	mov	r3, r2
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	647b      	str	r3, [r7, #68]	; 0x44
 800430a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800430e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004312:	f7fc fcd9 	bl	8000cc8 <__aeabi_uldivmod>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4611      	mov	r1, r2
 800431c:	4b3b      	ldr	r3, [pc, #236]	; (800440c <UART_SetConfig+0x2d4>)
 800431e:	fba3 2301 	umull	r2, r3, r3, r1
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2264      	movs	r2, #100	; 0x64
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	1acb      	subs	r3, r1, r3
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <UART_SetConfig+0x2d4>)
 8004334:	fba3 2302 	umull	r2, r3, r3, r2
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004340:	441c      	add	r4, r3
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800434c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	63b9      	str	r1, [r7, #56]	; 0x38
 800435c:	415b      	adcs	r3, r3
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6339      	str	r1, [r7, #48]	; 0x30
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ce:	f7fc fc7b 	bl	8000cc8 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <UART_SetConfig+0x2d4>)
 80043d8:	fba3 1302 	umull	r1, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	2164      	movs	r1, #100	; 0x64
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	3332      	adds	r3, #50	; 0x32
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <UART_SetConfig+0x2d4>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	f003 0207 	and.w	r2, r3, #7
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4422      	add	r2, r4
 80043fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004400:	e105      	b.n	800460e <UART_SetConfig+0x4d6>
 8004402:	bf00      	nop
 8004404:	40011000 	.word	0x40011000
 8004408:	40011400 	.word	0x40011400
 800440c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800441a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800441e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004422:	4642      	mov	r2, r8
 8004424:	464b      	mov	r3, r9
 8004426:	1891      	adds	r1, r2, r2
 8004428:	6239      	str	r1, [r7, #32]
 800442a:	415b      	adcs	r3, r3
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004432:	4641      	mov	r1, r8
 8004434:	1854      	adds	r4, r2, r1
 8004436:	4649      	mov	r1, r9
 8004438:	eb43 0501 	adc.w	r5, r3, r1
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	00eb      	lsls	r3, r5, #3
 8004446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444a:	00e2      	lsls	r2, r4, #3
 800444c:	4614      	mov	r4, r2
 800444e:	461d      	mov	r5, r3
 8004450:	4643      	mov	r3, r8
 8004452:	18e3      	adds	r3, r4, r3
 8004454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004458:	464b      	mov	r3, r9
 800445a:	eb45 0303 	adc.w	r3, r5, r3
 800445e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800446e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800447e:	4629      	mov	r1, r5
 8004480:	008b      	lsls	r3, r1, #2
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004488:	4621      	mov	r1, r4
 800448a:	008a      	lsls	r2, r1, #2
 800448c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004490:	f7fc fc1a 	bl	8000cc8 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b60      	ldr	r3, [pc, #384]	; (800461c <UART_SetConfig+0x4e4>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	61b9      	str	r1, [r7, #24]
 80044bc:	415b      	adcs	r3, r3
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6139      	str	r1, [r7, #16]
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044f8:	464b      	mov	r3, r9
 80044fa:	460a      	mov	r2, r1
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	67bb      	str	r3, [r7, #120]	; 0x78
 800450e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800451c:	4649      	mov	r1, r9
 800451e:	008b      	lsls	r3, r1, #2
 8004520:	4641      	mov	r1, r8
 8004522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004526:	4641      	mov	r1, r8
 8004528:	008a      	lsls	r2, r1, #2
 800452a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800452e:	f7fc fbcb 	bl	8000cc8 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <UART_SetConfig+0x4e4>)
 8004538:	fba3 1302 	umull	r1, r3, r3, r2
 800453c:	095b      	lsrs	r3, r3, #5
 800453e:	2164      	movs	r1, #100	; 0x64
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	3332      	adds	r3, #50	; 0x32
 800454a:	4a34      	ldr	r2, [pc, #208]	; (800461c <UART_SetConfig+0x4e4>)
 800454c:	fba2 2303 	umull	r2, r3, r2, r3
 8004550:	095b      	lsrs	r3, r3, #5
 8004552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004556:	441c      	add	r4, r3
 8004558:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455c:	2200      	movs	r2, #0
 800455e:	673b      	str	r3, [r7, #112]	; 0x70
 8004560:	677a      	str	r2, [r7, #116]	; 0x74
 8004562:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004566:	4642      	mov	r2, r8
 8004568:	464b      	mov	r3, r9
 800456a:	1891      	adds	r1, r2, r2
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	415b      	adcs	r3, r3
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004576:	4641      	mov	r1, r8
 8004578:	1851      	adds	r1, r2, r1
 800457a:	6039      	str	r1, [r7, #0]
 800457c:	4649      	mov	r1, r9
 800457e:	414b      	adcs	r3, r1
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800458e:	4659      	mov	r1, fp
 8004590:	00cb      	lsls	r3, r1, #3
 8004592:	4651      	mov	r1, sl
 8004594:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004598:	4651      	mov	r1, sl
 800459a:	00ca      	lsls	r2, r1, #3
 800459c:	4610      	mov	r0, r2
 800459e:	4619      	mov	r1, r3
 80045a0:	4603      	mov	r3, r0
 80045a2:	4642      	mov	r2, r8
 80045a4:	189b      	adds	r3, r3, r2
 80045a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a8:	464b      	mov	r3, r9
 80045aa:	460a      	mov	r2, r1
 80045ac:	eb42 0303 	adc.w	r3, r2, r3
 80045b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	663b      	str	r3, [r7, #96]	; 0x60
 80045bc:	667a      	str	r2, [r7, #100]	; 0x64
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045ca:	4649      	mov	r1, r9
 80045cc:	008b      	lsls	r3, r1, #2
 80045ce:	4641      	mov	r1, r8
 80045d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d4:	4641      	mov	r1, r8
 80045d6:	008a      	lsls	r2, r1, #2
 80045d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045dc:	f7fc fb74 	bl	8000cc8 <__aeabi_uldivmod>
 80045e0:	4602      	mov	r2, r0
 80045e2:	460b      	mov	r3, r1
 80045e4:	4b0d      	ldr	r3, [pc, #52]	; (800461c <UART_SetConfig+0x4e4>)
 80045e6:	fba3 1302 	umull	r1, r3, r3, r2
 80045ea:	095b      	lsrs	r3, r3, #5
 80045ec:	2164      	movs	r1, #100	; 0x64
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	3332      	adds	r3, #50	; 0x32
 80045f8:	4a08      	ldr	r2, [pc, #32]	; (800461c <UART_SetConfig+0x4e4>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	095b      	lsrs	r3, r3, #5
 8004600:	f003 020f 	and.w	r2, r3, #15
 8004604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4422      	add	r2, r4
 800460c:	609a      	str	r2, [r3, #8]
}
 800460e:	bf00      	nop
 8004610:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004614:	46bd      	mov	sp, r7
 8004616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461a:	bf00      	nop
 800461c:	51eb851f 	.word	0x51eb851f

08004620 <__NVIC_SetPriority>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db0a      	blt.n	800464a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	490c      	ldr	r1, [pc, #48]	; (800466c <__NVIC_SetPriority+0x4c>)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	0112      	lsls	r2, r2, #4
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	440b      	add	r3, r1
 8004644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004648:	e00a      	b.n	8004660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4908      	ldr	r1, [pc, #32]	; (8004670 <__NVIC_SetPriority+0x50>)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	3b04      	subs	r3, #4
 8004658:	0112      	lsls	r2, r2, #4
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	440b      	add	r3, r1
 800465e:	761a      	strb	r2, [r3, #24]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000e100 	.word	0xe000e100
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <SysTick_Handler+0x1c>)
 800467a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800467c:	f002 f94a 	bl	8006914 <xTaskGetSchedulerState>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d001      	beq.n	800468a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004686:	f003 f82f 	bl	80076e8 <xPortSysTickHandler>
  }
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	e000e010 	.word	0xe000e010

08004694 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004698:	2100      	movs	r1, #0
 800469a:	f06f 0004 	mvn.w	r0, #4
 800469e:	f7ff ffbf 	bl	8004620 <__NVIC_SetPriority>
#endif
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ae:	f3ef 8305 	mrs	r3, IPSR
 80046b2:	603b      	str	r3, [r7, #0]
  return(result);
 80046b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046ba:	f06f 0305 	mvn.w	r3, #5
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e00c      	b.n	80046dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <osKernelInitialize+0x44>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <osKernelInitialize+0x44>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e002      	b.n	80046dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046d6:	f04f 33ff 	mov.w	r3, #4294967295
 80046da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046dc:	687b      	ldr	r3, [r7, #4]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	200006b0 	.word	0x200006b0

080046f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f6:	f3ef 8305 	mrs	r3, IPSR
 80046fa:	603b      	str	r3, [r7, #0]
  return(result);
 80046fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004702:	f06f 0305 	mvn.w	r3, #5
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	e010      	b.n	800472c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <osKernelStart+0x48>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d109      	bne.n	8004726 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004712:	f7ff ffbf 	bl	8004694 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <osKernelStart+0x48>)
 8004718:	2202      	movs	r2, #2
 800471a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800471c:	f001 fc8e 	bl	800603c <vTaskStartScheduler>
      stat = osOK;
 8004720:	2300      	movs	r3, #0
 8004722:	607b      	str	r3, [r7, #4]
 8004724:	e002      	b.n	800472c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800472c:	687b      	ldr	r3, [r7, #4]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200006b0 	.word	0x200006b0

0800473c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b08e      	sub	sp, #56	; 0x38
 8004740:	af04      	add	r7, sp, #16
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474c:	f3ef 8305 	mrs	r3, IPSR
 8004750:	617b      	str	r3, [r7, #20]
  return(result);
 8004752:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004754:	2b00      	cmp	r3, #0
 8004756:	d17e      	bne.n	8004856 <osThreadNew+0x11a>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d07b      	beq.n	8004856 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004762:	2318      	movs	r3, #24
 8004764:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d045      	beq.n	8004802 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <osThreadNew+0x48>
        name = attr->name;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <osThreadNew+0x6e>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b38      	cmp	r3, #56	; 0x38
 800479c:	d805      	bhi.n	80047aa <osThreadNew+0x6e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <osThreadNew+0x72>
        return (NULL);
 80047aa:	2300      	movs	r3, #0
 80047ac:	e054      	b.n	8004858 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00e      	beq.n	80047e4 <osThreadNew+0xa8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2bbb      	cmp	r3, #187	; 0xbb
 80047cc:	d90a      	bls.n	80047e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d006      	beq.n	80047e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <osThreadNew+0xa8>
        mem = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e010      	b.n	8004806 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10c      	bne.n	8004806 <osThreadNew+0xca>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d108      	bne.n	8004806 <osThreadNew+0xca>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <osThreadNew+0xca>
          mem = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e001      	b.n	8004806 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d110      	bne.n	800482e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004814:	9202      	str	r2, [sp, #8]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6a3a      	ldr	r2, [r7, #32]
 8004820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f001 fa1e 	bl	8005c64 <xTaskCreateStatic>
 8004828:	4603      	mov	r3, r0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	e013      	b.n	8004856 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d110      	bne.n	8004856 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	b29a      	uxth	r2, r3
 8004838:	f107 0310 	add.w	r3, r7, #16
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f001 fa69 	bl	8005d1e <xTaskCreate>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d001      	beq.n	8004856 <osThreadNew+0x11a>
            hTask = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004856:	693b      	ldr	r3, [r7, #16]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3728      	adds	r7, #40	; 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004868:	2300      	movs	r3, #0
 800486a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486c:	f3ef 8305 	mrs	r3, IPSR
 8004870:	60bb      	str	r3, [r7, #8]
  return(result);
 8004872:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004874:	2b00      	cmp	r3, #0
 8004876:	d174      	bne.n	8004962 <osMutexNew+0x102>
    if (attr != NULL) {
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <osMutexNew+0x26>
      type = attr->attr_bits;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	e001      	b.n	800488a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <osMutexNew+0x3a>
      rmtx = 1U;
 8004894:	2301      	movs	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e001      	b.n	800489e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	f003 0308 	and.w	r3, r3, #8
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d15c      	bne.n	8004962 <osMutexNew+0x102>
      mem = -1;
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295
 80048ac:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d015      	beq.n	80048e0 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d006      	beq.n	80048ca <osMutexNew+0x6a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b4f      	cmp	r3, #79	; 0x4f
 80048c2:	d902      	bls.n	80048ca <osMutexNew+0x6a>
          mem = 1;
 80048c4:	2301      	movs	r3, #1
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	e00c      	b.n	80048e4 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <osMutexNew+0x84>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d104      	bne.n	80048e4 <osMutexNew+0x84>
            mem = 0;
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	e001      	b.n	80048e4 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d112      	bne.n	8004910 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d007      	beq.n	8004900 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4619      	mov	r1, r3
 80048f6:	2004      	movs	r0, #4
 80048f8:	f000 fb17 	bl	8004f2a <xQueueCreateMutexStatic>
 80048fc:	61f8      	str	r0, [r7, #28]
 80048fe:	e016      	b.n	800492e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4619      	mov	r1, r3
 8004906:	2001      	movs	r0, #1
 8004908:	f000 fb0f 	bl	8004f2a <xQueueCreateMutexStatic>
 800490c:	61f8      	str	r0, [r7, #28]
 800490e:	e00e      	b.n	800492e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d004      	beq.n	8004926 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800491c:	2004      	movs	r0, #4
 800491e:	f000 faec 	bl	8004efa <xQueueCreateMutex>
 8004922:	61f8      	str	r0, [r7, #28]
 8004924:	e003      	b.n	800492e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004926:	2001      	movs	r0, #1
 8004928:	f000 fae7 	bl	8004efa <xQueueCreateMutex>
 800492c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00c      	beq.n	800494e <osMutexNew+0xee>
        if (attr != NULL) {
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <osMutexNew+0xe2>
          name = attr->name;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e001      	b.n	8004946 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	69f8      	ldr	r0, [r7, #28]
 800494a:	f001 f92d 	bl	8005ba8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d006      	beq.n	8004962 <osMutexNew+0x102>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004962:	69fb      	ldr	r3, [r7, #28]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3720      	adds	r7, #32
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800496c:	b580      	push	{r7, lr}
 800496e:	b086      	sub	sp, #24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f023 0301 	bic.w	r3, r3, #1
 800497c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800498a:	f3ef 8305 	mrs	r3, IPSR
 800498e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004990:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004996:	f06f 0305 	mvn.w	r3, #5
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e02c      	b.n	80049f8 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80049a4:	f06f 0303 	mvn.w	r3, #3
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e025      	b.n	80049f8 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d011      	beq.n	80049d6 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	6938      	ldr	r0, [r7, #16]
 80049b6:	f000 fb07 	bl	8004fc8 <xQueueTakeMutexRecursive>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d01b      	beq.n	80049f8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80049c6:	f06f 0301 	mvn.w	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e014      	b.n	80049f8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80049ce:	f06f 0302 	mvn.w	r3, #2
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	e010      	b.n	80049f8 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	6938      	ldr	r0, [r7, #16]
 80049da:	f000 fe31 	bl	8005640 <xQueueSemaphoreTake>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d009      	beq.n	80049f8 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80049ea:	f06f 0301 	mvn.w	r3, #1
 80049ee:	617b      	str	r3, [r7, #20]
 80049f0:	e002      	b.n	80049f8 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80049f2:	f06f 0302 	mvn.w	r3, #2
 80049f6:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80049f8:	697b      	ldr	r3, [r7, #20]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b086      	sub	sp, #24
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a1e:	f3ef 8305 	mrs	r3, IPSR
 8004a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004a2a:	f06f 0305 	mvn.w	r3, #5
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	e01f      	b.n	8004a72 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004a38:	f06f 0303 	mvn.w	r3, #3
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	e018      	b.n	8004a72 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004a46:	6938      	ldr	r0, [r7, #16]
 8004a48:	f000 fa8a 	bl	8004f60 <xQueueGiveMutexRecursive>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d00f      	beq.n	8004a72 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004a52:	f06f 0302 	mvn.w	r3, #2
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e00b      	b.n	8004a72 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2100      	movs	r1, #0
 8004a60:	6938      	ldr	r0, [r7, #16]
 8004a62:	f000 fae7 	bl	8005034 <xQueueGenericSend>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d002      	beq.n	8004a72 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004a6c:	f06f 0302 	mvn.w	r3, #2
 8004a70:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4a07      	ldr	r2, [pc, #28]	; (8004aa8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a06      	ldr	r2, [pc, #24]	; (8004aac <vApplicationGetIdleTaskMemory+0x30>)
 8004a92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2280      	movs	r2, #128	; 0x80
 8004a98:	601a      	str	r2, [r3, #0]
}
 8004a9a:	bf00      	nop
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	200006b4 	.word	0x200006b4
 8004aac:	20000770 	.word	0x20000770

08004ab0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a07      	ldr	r2, [pc, #28]	; (8004adc <vApplicationGetTimerTaskMemory+0x2c>)
 8004ac0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <vApplicationGetTimerTaskMemory+0x30>)
 8004ac6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ace:	601a      	str	r2, [r3, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	20000970 	.word	0x20000970
 8004ae0:	20000a2c 	.word	0x20000a2c

08004ae4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f103 0208 	add.w	r2, r3, #8
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f04f 32ff 	mov.w	r2, #4294967295
 8004afc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f103 0208 	add.w	r2, r3, #8
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f103 0208 	add.w	r2, r3, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b085      	sub	sp, #20
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d103      	bne.n	8004ba6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	e00c      	b.n	8004bc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	e002      	b.n	8004bb4 <vListInsert+0x2e>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d2f6      	bcs.n	8004bae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	1c5a      	adds	r2, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6892      	ldr	r2, [r2, #8]
 8004c0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	6852      	ldr	r2, [r2, #4]
 8004c18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d103      	bne.n	8004c2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	1e5a      	subs	r2, r3, #1
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c76:	f002 fca5 	bl	80075c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	441a      	add	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	68f9      	ldr	r1, [r7, #12]
 8004caa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cac:	fb01 f303 	mul.w	r3, r1, r3
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	22ff      	movs	r2, #255	; 0xff
 8004cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d114      	bne.n	8004cf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d01a      	beq.n	8004d0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3310      	adds	r3, #16
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fc49 	bl	8006570 <xTaskRemoveFromEventList>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d012      	beq.n	8004d0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <xQueueGenericReset+0xcc>)
 8004ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	e009      	b.n	8004d0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fef2 	bl	8004ae4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	3324      	adds	r3, #36	; 0x24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff feed 	bl	8004ae4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d0a:	f002 fc8b 	bl	8007624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d0e:	2301      	movs	r3, #1
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08e      	sub	sp, #56	; 0x38
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <xQueueGenericCreateStatic+0x52>
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <xQueueGenericCreateStatic+0x56>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <xQueueGenericCreateStatic+0x58>
 8004d72:	2300      	movs	r3, #0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10a      	bne.n	8004d8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	623b      	str	r3, [r7, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <xQueueGenericCreateStatic+0x7e>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <xQueueGenericCreateStatic+0x82>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueGenericCreateStatic+0x84>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	61fb      	str	r3, [r7, #28]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dba:	2350      	movs	r3, #80	; 0x50
 8004dbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b50      	cmp	r3, #80	; 0x50
 8004dc2:	d00a      	beq.n	8004dda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	61bb      	str	r3, [r7, #24]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004dda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00d      	beq.n	8004e02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	4613      	mov	r3, r2
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f83f 	bl	8004e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3730      	adds	r7, #48	; 0x30
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08a      	sub	sp, #40	; 0x28
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	613b      	str	r3, [r7, #16]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	fb02 f303 	mul.w	r3, r2, r3
 8004e3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	3350      	adds	r3, #80	; 0x50
 8004e44:	4618      	mov	r0, r3
 8004e46:	f002 fcdf 	bl	8007808 <pvPortMalloc>
 8004e4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d011      	beq.n	8004e76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	3350      	adds	r3, #80	; 0x50
 8004e5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e64:	79fa      	ldrb	r2, [r7, #7]
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f805 	bl	8004e80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e76:	69bb      	ldr	r3, [r7, #24]
	}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3720      	adds	r7, #32
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d103      	bne.n	8004e9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e002      	b.n	8004ea2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eae:	2101      	movs	r1, #1
 8004eb0:	69b8      	ldr	r0, [r7, #24]
 8004eb2:	f7ff fecb 	bl	8004c4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	78fa      	ldrb	r2, [r7, #3]
 8004eba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2100      	movs	r1, #0
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f8a1 	bl	8005034 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b086      	sub	sp, #24
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	4603      	mov	r3, r0
 8004f02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004f04:	2301      	movs	r3, #1
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6939      	ldr	r1, [r7, #16]
 8004f12:	6978      	ldr	r0, [r7, #20]
 8004f14:	f7ff ff7a 	bl	8004e0c <xQueueGenericCreate>
 8004f18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ffd3 	bl	8004ec6 <prvInitialiseMutex>

		return xNewQueue;
 8004f20:	68fb      	ldr	r3, [r7, #12]
	}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b088      	sub	sp, #32
 8004f2e:	af02      	add	r7, sp, #8
 8004f30:	4603      	mov	r3, r0
 8004f32:	6039      	str	r1, [r7, #0]
 8004f34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004f36:	2301      	movs	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	2200      	movs	r2, #0
 8004f46:	6939      	ldr	r1, [r7, #16]
 8004f48:	6978      	ldr	r0, [r7, #20]
 8004f4a:	f7ff fee7 	bl	8004d1c <xQueueGenericCreateStatic>
 8004f4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f7ff ffb8 	bl	8004ec6 <prvInitialiseMutex>

		return xNewQueue;
 8004f56:	68fb      	ldr	r3, [r7, #12]
	}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	689c      	ldr	r4, [r3, #8]
 8004f8c:	f001 fcb2 	bl	80068f4 <xTaskGetCurrentTaskHandle>
 8004f90:	4603      	mov	r3, r0
 8004f92:	429c      	cmp	r4, r3
 8004f94:	d111      	bne.n	8004fba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	1e5a      	subs	r2, r3, #1
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d105      	bne.n	8004fb4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	6938      	ldr	r0, [r7, #16]
 8004fb0:	f000 f840 	bl	8005034 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e001      	b.n	8004fbe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004fbe:	697b      	ldr	r3, [r7, #20]
	}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd90      	pop	{r4, r7, pc}

08004fc8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10a      	bne.n	8004ff2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	60fb      	str	r3, [r7, #12]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	689c      	ldr	r4, [r3, #8]
 8004ff6:	f001 fc7d 	bl	80068f4 <xTaskGetCurrentTaskHandle>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	429c      	cmp	r4, r3
 8004ffe:	d107      	bne.n	8005010 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800500a:	2301      	movs	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e00c      	b.n	800502a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005010:	6839      	ldr	r1, [r7, #0]
 8005012:	6938      	ldr	r0, [r7, #16]
 8005014:	f000 fb14 	bl	8005640 <xQueueSemaphoreTake>
 8005018:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d004      	beq.n	800502a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800502a:	697b      	ldr	r3, [r7, #20]
	}
 800502c:	4618      	mov	r0, r3
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	bd90      	pop	{r4, r7, pc}

08005034 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08e      	sub	sp, #56	; 0x38
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005042:	2300      	movs	r3, #0
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xQueueGenericSend+0x32>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <xQueueGenericSend+0x40>
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <xQueueGenericSend+0x44>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <xQueueGenericSend+0x46>
 8005078:	2300      	movs	r3, #0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <xQueueGenericSend+0x60>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d103      	bne.n	80050a2 <xQueueGenericSend+0x6e>
 800509a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <xQueueGenericSend+0x72>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <xQueueGenericSend+0x74>
 80050a6:	2300      	movs	r3, #0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10a      	bne.n	80050c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	623b      	str	r3, [r7, #32]
}
 80050be:	bf00      	nop
 80050c0:	e7fe      	b.n	80050c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050c2:	f001 fc27 	bl	8006914 <xTaskGetSchedulerState>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d102      	bne.n	80050d2 <xQueueGenericSend+0x9e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <xQueueGenericSend+0xa2>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <xQueueGenericSend+0xa4>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	61fb      	str	r3, [r7, #28]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050f2:	f002 fa67 	bl	80075c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fe:	429a      	cmp	r2, r3
 8005100:	d302      	bcc.n	8005108 <xQueueGenericSend+0xd4>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b02      	cmp	r3, #2
 8005106:	d129      	bne.n	800515c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800510e:	f000 fc3b 	bl	8005988 <prvCopyDataToQueue>
 8005112:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d010      	beq.n	800513e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	3324      	adds	r3, #36	; 0x24
 8005120:	4618      	mov	r0, r3
 8005122:	f001 fa25 	bl	8006570 <xTaskRemoveFromEventList>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d013      	beq.n	8005154 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800512c:	4b3f      	ldr	r3, [pc, #252]	; (800522c <xQueueGenericSend+0x1f8>)
 800512e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	e00a      	b.n	8005154 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800513e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005144:	4b39      	ldr	r3, [pc, #228]	; (800522c <xQueueGenericSend+0x1f8>)
 8005146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005154:	f002 fa66 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 8005158:	2301      	movs	r3, #1
 800515a:	e063      	b.n	8005224 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005162:	f002 fa5f 	bl	8007624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005166:	2300      	movs	r3, #0
 8005168:	e05c      	b.n	8005224 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	2b00      	cmp	r3, #0
 800516e:	d106      	bne.n	800517e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005170:	f107 0314 	add.w	r3, r7, #20
 8005174:	4618      	mov	r0, r3
 8005176:	f001 fa5f 	bl	8006638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800517a:	2301      	movs	r3, #1
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800517e:	f002 fa51 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005182:	f000 ffcb 	bl	800611c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005186:	f002 fa1d 	bl	80075c4 <vPortEnterCritical>
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005190:	b25b      	sxtb	r3, r3
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d103      	bne.n	80051a0 <xQueueGenericSend+0x16c>
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a6:	b25b      	sxtb	r3, r3
 80051a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ac:	d103      	bne.n	80051b6 <xQueueGenericSend+0x182>
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051b6:	f002 fa35 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ba:	1d3a      	adds	r2, r7, #4
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4611      	mov	r1, r2
 80051c2:	4618      	mov	r0, r3
 80051c4:	f001 fa4e 	bl	8006664 <xTaskCheckForTimeOut>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d124      	bne.n	8005218 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051d0:	f000 fcd2 	bl	8005b78 <prvIsQueueFull>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d018      	beq.n	800520c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	3310      	adds	r3, #16
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 f974 	bl	80064d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ea:	f000 fc5d 	bl	8005aa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051ee:	f000 ffa3 	bl	8006138 <xTaskResumeAll>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f47f af7c 	bne.w	80050f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80051fa:	4b0c      	ldr	r3, [pc, #48]	; (800522c <xQueueGenericSend+0x1f8>)
 80051fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	e772      	b.n	80050f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800520c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800520e:	f000 fc4b 	bl	8005aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005212:	f000 ff91 	bl	8006138 <xTaskResumeAll>
 8005216:	e76c      	b.n	80050f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800521a:	f000 fc45 	bl	8005aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800521e:	f000 ff8b 	bl	8006138 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005222:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005224:	4618      	mov	r0, r3
 8005226:	3738      	adds	r7, #56	; 0x38
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	e000ed04 	.word	0xe000ed04

08005230 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b090      	sub	sp, #64	; 0x40
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d103      	bne.n	800526c <xQueueGenericSendFromISR+0x3c>
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <xQueueGenericSendFromISR+0x40>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <xQueueGenericSendFromISR+0x42>
 8005270:	2300      	movs	r3, #0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d103      	bne.n	800529a <xQueueGenericSendFromISR+0x6a>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <xQueueGenericSendFromISR+0x6e>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <xQueueGenericSendFromISR+0x70>
 800529e:	2300      	movs	r3, #0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	623b      	str	r3, [r7, #32]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052ba:	f002 fa65 	bl	8007788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80052be:	f3ef 8211 	mrs	r2, BASEPRI
 80052c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c6:	f383 8811 	msr	BASEPRI, r3
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	61fa      	str	r2, [r7, #28]
 80052d4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80052d6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d302      	bcc.n	80052ec <xQueueGenericSendFromISR+0xbc>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d12f      	bne.n	800534c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005302:	f000 fb41 	bl	8005988 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005306:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d112      	bne.n	8005336 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005314:	2b00      	cmp	r3, #0
 8005316:	d016      	beq.n	8005346 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	3324      	adds	r3, #36	; 0x24
 800531c:	4618      	mov	r0, r3
 800531e:	f001 f927 	bl	8006570 <xTaskRemoveFromEventList>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00e      	beq.n	8005346 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	e007      	b.n	8005346 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005336:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800533a:	3301      	adds	r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	b25a      	sxtb	r2, r3
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005346:	2301      	movs	r3, #1
 8005348:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800534a:	e001      	b.n	8005350 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800534c:	2300      	movs	r3, #0
 800534e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005352:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800535a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800535e:	4618      	mov	r0, r3
 8005360:	3740      	adds	r7, #64	; 0x40
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b08e      	sub	sp, #56	; 0x38
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	623b      	str	r3, [r7, #32]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	61fb      	str	r3, [r7, #28]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <xQueueGiveFromISR+0x58>
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <xQueueGiveFromISR+0x5c>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <xQueueGiveFromISR+0x5e>
 80053c2:	2300      	movs	r3, #0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <xQueueGiveFromISR+0x78>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	61bb      	str	r3, [r7, #24]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053de:	f002 f9d3 	bl	8007788 <vPortValidateInterruptPriority>
	__asm volatile
 80053e2:	f3ef 8211 	mrs	r2, BASEPRI
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	617a      	str	r2, [r7, #20]
 80053f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80053fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540a:	429a      	cmp	r2, r3
 800540c:	d22b      	bcs.n	8005466 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d112      	bne.n	8005450 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	2b00      	cmp	r3, #0
 8005430:	d016      	beq.n	8005460 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	3324      	adds	r3, #36	; 0x24
 8005436:	4618      	mov	r0, r3
 8005438:	f001 f89a 	bl	8006570 <xTaskRemoveFromEventList>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e007      	b.n	8005460 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005454:	3301      	adds	r3, #1
 8005456:	b2db      	uxtb	r3, r3
 8005458:	b25a      	sxtb	r2, r3
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005460:	2301      	movs	r3, #1
 8005462:	637b      	str	r3, [r7, #52]	; 0x34
 8005464:	e001      	b.n	800546a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005466:	2300      	movs	r3, #0
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f383 8811 	msr	BASEPRI, r3
}
 8005474:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005478:	4618      	mov	r0, r3
 800547a:	3738      	adds	r7, #56	; 0x38
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08c      	sub	sp, #48	; 0x30
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800548c:	2300      	movs	r3, #0
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10a      	bne.n	80054b0 <xQueueReceive+0x30>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	623b      	str	r3, [r7, #32]
}
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <xQueueReceive+0x3e>
 80054b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <xQueueReceive+0x42>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <xQueueReceive+0x44>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10a      	bne.n	80054de <xQueueReceive+0x5e>
	__asm volatile
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	61fb      	str	r3, [r7, #28]
}
 80054da:	bf00      	nop
 80054dc:	e7fe      	b.n	80054dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054de:	f001 fa19 	bl	8006914 <xTaskGetSchedulerState>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <xQueueReceive+0x6e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <xQueueReceive+0x72>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <xQueueReceive+0x74>
 80054f2:	2300      	movs	r3, #0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueReceive+0x8e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	61bb      	str	r3, [r7, #24]
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800550e:	f002 f859 	bl	80075c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01f      	beq.n	800555e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005522:	f000 fa9b 	bl	8005a5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1e5a      	subs	r2, r3, #1
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00f      	beq.n	8005556 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	3310      	adds	r3, #16
 800553a:	4618      	mov	r0, r3
 800553c:	f001 f818 	bl	8006570 <xTaskRemoveFromEventList>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005546:	4b3d      	ldr	r3, [pc, #244]	; (800563c <xQueueReceive+0x1bc>)
 8005548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005556:	f002 f865 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 800555a:	2301      	movs	r3, #1
 800555c:	e069      	b.n	8005632 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d103      	bne.n	800556c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005564:	f002 f85e 	bl	8007624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005568:	2300      	movs	r3, #0
 800556a:	e062      	b.n	8005632 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005572:	f107 0310 	add.w	r3, r7, #16
 8005576:	4618      	mov	r0, r3
 8005578:	f001 f85e 	bl	8006638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800557c:	2301      	movs	r3, #1
 800557e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005580:	f002 f850 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005584:	f000 fdca 	bl	800611c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005588:	f002 f81c 	bl	80075c4 <vPortEnterCritical>
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005592:	b25b      	sxtb	r3, r3
 8005594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005598:	d103      	bne.n	80055a2 <xQueueReceive+0x122>
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a8:	b25b      	sxtb	r3, r3
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d103      	bne.n	80055b8 <xQueueReceive+0x138>
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055b8:	f002 f834 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055bc:	1d3a      	adds	r2, r7, #4
 80055be:	f107 0310 	add.w	r3, r7, #16
 80055c2:	4611      	mov	r1, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f001 f84d 	bl	8006664 <xTaskCheckForTimeOut>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d123      	bne.n	8005618 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055d2:	f000 fabb 	bl	8005b4c <prvIsQueueEmpty>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d017      	beq.n	800560c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	3324      	adds	r3, #36	; 0x24
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 ff73 	bl	80064d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ec:	f000 fa5c 	bl	8005aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055f0:	f000 fda2 	bl	8006138 <xTaskResumeAll>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d189      	bne.n	800550e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <xQueueReceive+0x1bc>)
 80055fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	e780      	b.n	800550e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800560c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800560e:	f000 fa4b 	bl	8005aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005612:	f000 fd91 	bl	8006138 <xTaskResumeAll>
 8005616:	e77a      	b.n	800550e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561a:	f000 fa45 	bl	8005aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800561e:	f000 fd8b 	bl	8006138 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005624:	f000 fa92 	bl	8005b4c <prvIsQueueEmpty>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	f43f af6f 	beq.w	800550e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005630:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005632:	4618      	mov	r0, r3
 8005634:	3730      	adds	r7, #48	; 0x30
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b08e      	sub	sp, #56	; 0x38
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005652:	2300      	movs	r3, #0
 8005654:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	623b      	str	r3, [r7, #32]
}
 800566e:	bf00      	nop
 8005670:	e7fe      	b.n	8005670 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	61fb      	str	r3, [r7, #28]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005690:	f001 f940 	bl	8006914 <xTaskGetSchedulerState>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <xQueueSemaphoreTake+0x60>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <xQueueSemaphoreTake+0x64>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <xQueueSemaphoreTake+0x66>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	61bb      	str	r3, [r7, #24]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056c0:	f001 ff80 	bl	80075c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80056c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80056ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d024      	beq.n	800571a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80056d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d2:	1e5a      	subs	r2, r3, #1
 80056d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d104      	bne.n	80056ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80056e0:	f001 fa8e 	bl	8006c00 <pvTaskIncrementMutexHeldCount>
 80056e4:	4602      	mov	r2, r0
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00f      	beq.n	8005712 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f4:	3310      	adds	r3, #16
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 ff3a 	bl	8006570 <xTaskRemoveFromEventList>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005702:	4b54      	ldr	r3, [pc, #336]	; (8005854 <xQueueSemaphoreTake+0x214>)
 8005704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005712:	f001 ff87 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 8005716:	2301      	movs	r3, #1
 8005718:	e097      	b.n	800584a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d111      	bne.n	8005744 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	617b      	str	r3, [r7, #20]
}
 8005738:	bf00      	nop
 800573a:	e7fe      	b.n	800573a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800573c:	f001 ff72 	bl	8007624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005740:	2300      	movs	r3, #0
 8005742:	e082      	b.n	800584a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800574a:	f107 030c 	add.w	r3, r7, #12
 800574e:	4618      	mov	r0, r3
 8005750:	f000 ff72 	bl	8006638 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005758:	f001 ff64 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800575c:	f000 fcde 	bl	800611c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005760:	f001 ff30 	bl	80075c4 <vPortEnterCritical>
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800576a:	b25b      	sxtb	r3, r3
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d103      	bne.n	800577a <xQueueSemaphoreTake+0x13a>
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005780:	b25b      	sxtb	r3, r3
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d103      	bne.n	8005790 <xQueueSemaphoreTake+0x150>
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005790:	f001 ff48 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005794:	463a      	mov	r2, r7
 8005796:	f107 030c 	add.w	r3, r7, #12
 800579a:	4611      	mov	r1, r2
 800579c:	4618      	mov	r0, r3
 800579e:	f000 ff61 	bl	8006664 <xTaskCheckForTimeOut>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d132      	bne.n	800580e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057aa:	f000 f9cf 	bl	8005b4c <prvIsQueueEmpty>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d026      	beq.n	8005802 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80057bc:	f001 ff02 	bl	80075c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 f8c3 	bl	8006950 <xTaskPriorityInherit>
 80057ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80057cc:	f001 ff2a 	bl	8007624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d2:	3324      	adds	r3, #36	; 0x24
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	4611      	mov	r1, r2
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 fe79 	bl	80064d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057e0:	f000 f962 	bl	8005aa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057e4:	f000 fca8 	bl	8006138 <xTaskResumeAll>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f47f af68 	bne.w	80056c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80057f0:	4b18      	ldr	r3, [pc, #96]	; (8005854 <xQueueSemaphoreTake+0x214>)
 80057f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	e75e      	b.n	80056c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005802:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005804:	f000 f950 	bl	8005aa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005808:	f000 fc96 	bl	8006138 <xTaskResumeAll>
 800580c:	e758      	b.n	80056c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800580e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005810:	f000 f94a 	bl	8005aa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005814:	f000 fc90 	bl	8006138 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800581a:	f000 f997 	bl	8005b4c <prvIsQueueEmpty>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	f43f af4d 	beq.w	80056c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00d      	beq.n	8005848 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800582c:	f001 feca 	bl	80075c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005830:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005832:	f000 f891 	bl	8005958 <prvGetDisinheritPriorityAfterTimeout>
 8005836:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800583e:	4618      	mov	r0, r3
 8005840:	f001 f95c 	bl	8006afc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005844:	f001 feee 	bl	8007624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800584a:	4618      	mov	r0, r3
 800584c:	3738      	adds	r7, #56	; 0x38
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08e      	sub	sp, #56	; 0x38
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	623b      	str	r3, [r7, #32]
}
 8005880:	bf00      	nop
 8005882:	e7fe      	b.n	8005882 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <xQueueReceiveFromISR+0x3a>
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <xQueueReceiveFromISR+0x3e>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <xQueueReceiveFromISR+0x40>
 8005896:	2300      	movs	r3, #0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	61fb      	str	r3, [r7, #28]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058b2:	f001 ff69 	bl	8007788 <vPortValidateInterruptPriority>
	__asm volatile
 80058b6:	f3ef 8211 	mrs	r2, BASEPRI
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	61ba      	str	r2, [r7, #24]
 80058cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d02f      	beq.n	800593e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ec:	f000 f8b6 	bl	8005a5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f2:	1e5a      	subs	r2, r3, #1
 80058f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80058f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80058fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005900:	d112      	bne.n	8005928 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d016      	beq.n	8005938 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590c:	3310      	adds	r3, #16
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fe2e 	bl	8006570 <xTaskRemoveFromEventList>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00e      	beq.n	8005938 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	e007      	b.n	8005938 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800592c:	3301      	adds	r3, #1
 800592e:	b2db      	uxtb	r3, r3
 8005930:	b25a      	sxtb	r2, r3
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005938:	2301      	movs	r3, #1
 800593a:	637b      	str	r3, [r7, #52]	; 0x34
 800593c:	e001      	b.n	8005942 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f383 8811 	msr	BASEPRI, r3
}
 800594c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800594e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005950:	4618      	mov	r0, r3
 8005952:	3738      	adds	r7, #56	; 0x38
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	d006      	beq.n	8005976 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	e001      	b.n	800597a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800597a:	68fb      	ldr	r3, [r7, #12]
	}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10d      	bne.n	80059c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d14d      	bne.n	8005a4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f001 f834 	bl	8006a20 <xTaskPriorityDisinherit>
 80059b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	609a      	str	r2, [r3, #8]
 80059c0:	e043      	b.n	8005a4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d119      	bne.n	80059fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6858      	ldr	r0, [r3, #4]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	461a      	mov	r2, r3
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	f005 f993 	bl	800acfe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	441a      	add	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d32b      	bcc.n	8005a4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	e026      	b.n	8005a4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	68d8      	ldr	r0, [r3, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a04:	461a      	mov	r2, r3
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	f005 f979 	bl	800acfe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	68da      	ldr	r2, [r3, #12]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	425b      	negs	r3, r3
 8005a16:	441a      	add	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d207      	bcs.n	8005a38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	425b      	negs	r3, r3
 8005a32:	441a      	add	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d105      	bne.n	8005a4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	3b01      	subs	r3, #1
 8005a48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005a52:	697b      	ldr	r3, [r7, #20]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d018      	beq.n	8005aa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a76:	441a      	add	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d303      	bcc.n	8005a90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68d9      	ldr	r1, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	461a      	mov	r2, r3
 8005a9a:	6838      	ldr	r0, [r7, #0]
 8005a9c:	f005 f92f 	bl	800acfe <memcpy>
	}
}
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ab0:	f001 fd88 	bl	80075c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005abc:	e011      	b.n	8005ae2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d012      	beq.n	8005aec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3324      	adds	r3, #36	; 0x24
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fd50 	bl	8006570 <xTaskRemoveFromEventList>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ad6:	f000 fe27 	bl	8006728 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dce9      	bgt.n	8005abe <prvUnlockQueue+0x16>
 8005aea:	e000      	b.n	8005aee <prvUnlockQueue+0x46>
					break;
 8005aec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	22ff      	movs	r2, #255	; 0xff
 8005af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005af6:	f001 fd95 	bl	8007624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005afa:	f001 fd63 	bl	80075c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b06:	e011      	b.n	8005b2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d012      	beq.n	8005b36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3310      	adds	r3, #16
 8005b14:	4618      	mov	r0, r3
 8005b16:	f000 fd2b 	bl	8006570 <xTaskRemoveFromEventList>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b20:	f000 fe02 	bl	8006728 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b24:	7bbb      	ldrb	r3, [r7, #14]
 8005b26:	3b01      	subs	r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	dce9      	bgt.n	8005b08 <prvUnlockQueue+0x60>
 8005b34:	e000      	b.n	8005b38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	22ff      	movs	r2, #255	; 0xff
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005b40:	f001 fd70 	bl	8007624 <vPortExitCritical>
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b54:	f001 fd36 	bl	80075c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d102      	bne.n	8005b66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e001      	b.n	8005b6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b6a:	f001 fd5b 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b80:	f001 fd20 	bl	80075c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d102      	bne.n	8005b96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b90:	2301      	movs	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	e001      	b.n	8005b9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b9a:	f001 fd43 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e014      	b.n	8005be2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bb8:	4a0f      	ldr	r2, [pc, #60]	; (8005bf8 <vQueueAddToRegistry+0x50>)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10b      	bne.n	8005bdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bc4:	490c      	ldr	r1, [pc, #48]	; (8005bf8 <vQueueAddToRegistry+0x50>)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <vQueueAddToRegistry+0x50>)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bda:	e006      	b.n	8005bea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3301      	adds	r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2b07      	cmp	r3, #7
 8005be6:	d9e7      	bls.n	8005bb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000e2c 	.word	0x20000e2c

08005bfc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c0c:	f001 fcda 	bl	80075c4 <vPortEnterCritical>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c16:	b25b      	sxtb	r3, r3
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d103      	bne.n	8005c26 <vQueueWaitForMessageRestricted+0x2a>
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c2c:	b25b      	sxtb	r3, r3
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d103      	bne.n	8005c3c <vQueueWaitForMessageRestricted+0x40>
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c3c:	f001 fcf2 	bl	8007624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3324      	adds	r3, #36	; 0x24
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 fc61 	bl	8006518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c56:	6978      	ldr	r0, [r7, #20]
 8005c58:	f7ff ff26 	bl	8005aa8 <prvUnlockQueue>
	}
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b08e      	sub	sp, #56	; 0x38
 8005c68:	af04      	add	r7, sp, #16
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10a      	bne.n	8005c8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	623b      	str	r3, [r7, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <xTaskCreateStatic+0x46>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	61fb      	str	r3, [r7, #28]
}
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005caa:	23bc      	movs	r3, #188	; 0xbc
 8005cac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2bbc      	cmp	r3, #188	; 0xbc
 8005cb2:	d00a      	beq.n	8005cca <xTaskCreateStatic+0x66>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	61bb      	str	r3, [r7, #24]
}
 8005cc6:	bf00      	nop
 8005cc8:	e7fe      	b.n	8005cc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01e      	beq.n	8005d10 <xTaskCreateStatic+0xac>
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cea:	2300      	movs	r3, #0
 8005cec:	9303      	str	r3, [sp, #12]
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	9302      	str	r3, [sp, #8]
 8005cf2:	f107 0314 	add.w	r3, r7, #20
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f000 f850 	bl	8005da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d0a:	f000 f8f3 	bl	8005ef4 <prvAddNewTaskToReadyList>
 8005d0e:	e001      	b.n	8005d14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d14:	697b      	ldr	r3, [r7, #20]
	}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3728      	adds	r7, #40	; 0x28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b08c      	sub	sp, #48	; 0x30
 8005d22:	af04      	add	r7, sp, #16
 8005d24:	60f8      	str	r0, [r7, #12]
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	603b      	str	r3, [r7, #0]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 fd68 	bl	8007808 <pvPortMalloc>
 8005d38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00e      	beq.n	8005d5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d40:	20bc      	movs	r0, #188	; 0xbc
 8005d42:	f001 fd61 	bl	8007808 <pvPortMalloc>
 8005d46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
 8005d54:	e005      	b.n	8005d62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d56:	6978      	ldr	r0, [r7, #20]
 8005d58:	f001 fe22 	bl	80079a0 <vPortFree>
 8005d5c:	e001      	b.n	8005d62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d017      	beq.n	8005d98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d70:	88fa      	ldrh	r2, [r7, #6]
 8005d72:	2300      	movs	r3, #0
 8005d74:	9303      	str	r3, [sp, #12]
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	9302      	str	r3, [sp, #8]
 8005d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f000 f80e 	bl	8005da8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d8c:	69f8      	ldr	r0, [r7, #28]
 8005d8e:	f000 f8b1 	bl	8005ef4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d92:	2301      	movs	r3, #1
 8005d94:	61bb      	str	r3, [r7, #24]
 8005d96:	e002      	b.n	8005d9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d98:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d9e:	69bb      	ldr	r3, [r7, #24]
	}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	21a5      	movs	r1, #165	; 0xa5
 8005dc2:	f004 ffaa 	bl	800ad1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	f023 0307 	bic.w	r3, r3, #7
 8005dde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	617b      	str	r3, [r7, #20]
}
 8005dfc:	bf00      	nop
 8005dfe:	e7fe      	b.n	8005dfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d01f      	beq.n	8005e46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	e012      	b.n	8005e32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	7819      	ldrb	r1, [r3, #0]
 8005e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	4413      	add	r3, r2
 8005e1a:	3334      	adds	r3, #52	; 0x34
 8005e1c:	460a      	mov	r2, r1
 8005e1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4413      	add	r3, r2
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d006      	beq.n	8005e3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	2b0f      	cmp	r3, #15
 8005e36:	d9e9      	bls.n	8005e0c <prvInitialiseNewTask+0x64>
 8005e38:	e000      	b.n	8005e3c <prvInitialiseNewTask+0x94>
			{
				break;
 8005e3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e44:	e003      	b.n	8005e4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	2b37      	cmp	r3, #55	; 0x37
 8005e52:	d901      	bls.n	8005e58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e54:	2337      	movs	r3, #55	; 0x37
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	2200      	movs	r2, #0
 8005e68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe fe58 	bl	8004b24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	3318      	adds	r3, #24
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fe fe53 	bl	8004b24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	3354      	adds	r3, #84	; 0x54
 8005ea8:	2260      	movs	r2, #96	; 0x60
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f004 ff34 	bl	800ad1a <memset>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <prvInitialiseNewTask+0x140>)
 8005eb6:	659a      	str	r2, [r3, #88]	; 0x58
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <prvInitialiseNewTask+0x144>)
 8005ebc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	4a0b      	ldr	r2, [pc, #44]	; (8005ef0 <prvInitialiseNewTask+0x148>)
 8005ec2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	68f9      	ldr	r1, [r7, #12]
 8005ec8:	69b8      	ldr	r0, [r7, #24]
 8005eca:	f001 fa4f 	bl	800736c <pxPortInitialiseStack>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ede:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ee0:	bf00      	nop
 8005ee2:	3720      	adds	r7, #32
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	08010bd0 	.word	0x08010bd0
 8005eec:	08010bf0 	.word	0x08010bf0
 8005ef0:	08010bb0 	.word	0x08010bb0

08005ef4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005efc:	f001 fb62 	bl	80075c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f00:	4b2d      	ldr	r3, [pc, #180]	; (8005fb8 <prvAddNewTaskToReadyList+0xc4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	4a2c      	ldr	r2, [pc, #176]	; (8005fb8 <prvAddNewTaskToReadyList+0xc4>)
 8005f08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f0a:	4b2c      	ldr	r3, [pc, #176]	; (8005fbc <prvAddNewTaskToReadyList+0xc8>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f12:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <prvAddNewTaskToReadyList+0xc8>)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f18:	4b27      	ldr	r3, [pc, #156]	; (8005fb8 <prvAddNewTaskToReadyList+0xc4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d110      	bne.n	8005f42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f20:	f000 fc26 	bl	8006770 <prvInitialiseTaskLists>
 8005f24:	e00d      	b.n	8005f42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f26:	4b26      	ldr	r3, [pc, #152]	; (8005fc0 <prvAddNewTaskToReadyList+0xcc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d109      	bne.n	8005f42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f2e:	4b23      	ldr	r3, [pc, #140]	; (8005fbc <prvAddNewTaskToReadyList+0xc8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d802      	bhi.n	8005f42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f3c:	4a1f      	ldr	r2, [pc, #124]	; (8005fbc <prvAddNewTaskToReadyList+0xc8>)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f42:	4b20      	ldr	r3, [pc, #128]	; (8005fc4 <prvAddNewTaskToReadyList+0xd0>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3301      	adds	r3, #1
 8005f48:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <prvAddNewTaskToReadyList+0xd0>)
 8005f4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f4c:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <prvAddNewTaskToReadyList+0xd0>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <prvAddNewTaskToReadyList+0xd4>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d903      	bls.n	8005f68 <prvAddNewTaskToReadyList+0x74>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f64:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <prvAddNewTaskToReadyList+0xd4>)
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <prvAddNewTaskToReadyList+0xd8>)
 8005f76:	441a      	add	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fe fddd 	bl	8004b3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f84:	f001 fb4e 	bl	8007624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f88:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <prvAddNewTaskToReadyList+0xcc>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00e      	beq.n	8005fae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f90:	4b0a      	ldr	r3, [pc, #40]	; (8005fbc <prvAddNewTaskToReadyList+0xc8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d207      	bcs.n	8005fae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <prvAddNewTaskToReadyList+0xdc>)
 8005fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20001340 	.word	0x20001340
 8005fbc:	20000e6c 	.word	0x20000e6c
 8005fc0:	2000134c 	.word	0x2000134c
 8005fc4:	2000135c 	.word	0x2000135c
 8005fc8:	20001348 	.word	0x20001348
 8005fcc:	20000e70 	.word	0x20000e70
 8005fd0:	e000ed04 	.word	0xe000ed04

08005fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d017      	beq.n	8006016 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fe6:	4b13      	ldr	r3, [pc, #76]	; (8006034 <vTaskDelay+0x60>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <vTaskDelay+0x30>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	60bb      	str	r3, [r7, #8]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006004:	f000 f88a 	bl	800611c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006008:	2100      	movs	r1, #0
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 fe0c 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006010:	f000 f892 	bl	8006138 <xTaskResumeAll>
 8006014:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d107      	bne.n	800602c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800601c:	4b06      	ldr	r3, [pc, #24]	; (8006038 <vTaskDelay+0x64>)
 800601e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	20001368 	.word	0x20001368
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006046:	2300      	movs	r3, #0
 8006048:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800604a:	463a      	mov	r2, r7
 800604c:	1d39      	adds	r1, r7, #4
 800604e:	f107 0308 	add.w	r3, r7, #8
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe fd12 	bl	8004a7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	9202      	str	r2, [sp, #8]
 8006060:	9301      	str	r3, [sp, #4]
 8006062:	2300      	movs	r3, #0
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	2300      	movs	r3, #0
 8006068:	460a      	mov	r2, r1
 800606a:	4924      	ldr	r1, [pc, #144]	; (80060fc <vTaskStartScheduler+0xc0>)
 800606c:	4824      	ldr	r0, [pc, #144]	; (8006100 <vTaskStartScheduler+0xc4>)
 800606e:	f7ff fdf9 	bl	8005c64 <xTaskCreateStatic>
 8006072:	4603      	mov	r3, r0
 8006074:	4a23      	ldr	r2, [pc, #140]	; (8006104 <vTaskStartScheduler+0xc8>)
 8006076:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006078:	4b22      	ldr	r3, [pc, #136]	; (8006104 <vTaskStartScheduler+0xc8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006080:	2301      	movs	r3, #1
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	e001      	b.n	800608a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006086:	2300      	movs	r3, #0
 8006088:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d102      	bne.n	8006096 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006090:	f000 fe1e 	bl	8006cd0 <xTimerCreateTimerTask>
 8006094:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d11b      	bne.n	80060d4 <vTaskStartScheduler+0x98>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	613b      	str	r3, [r7, #16]
}
 80060ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060b0:	4b15      	ldr	r3, [pc, #84]	; (8006108 <vTaskStartScheduler+0xcc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3354      	adds	r3, #84	; 0x54
 80060b6:	4a15      	ldr	r2, [pc, #84]	; (800610c <vTaskStartScheduler+0xd0>)
 80060b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060ba:	4b15      	ldr	r3, [pc, #84]	; (8006110 <vTaskStartScheduler+0xd4>)
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
 80060c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060c2:	4b14      	ldr	r3, [pc, #80]	; (8006114 <vTaskStartScheduler+0xd8>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80060c8:	4b13      	ldr	r3, [pc, #76]	; (8006118 <vTaskStartScheduler+0xdc>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060ce:	f001 f9d7 	bl	8007480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060d2:	e00e      	b.n	80060f2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d10a      	bne.n	80060f2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80060dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e0:	f383 8811 	msr	BASEPRI, r3
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	60fb      	str	r3, [r7, #12]
}
 80060ee:	bf00      	nop
 80060f0:	e7fe      	b.n	80060f0 <vTaskStartScheduler+0xb4>
}
 80060f2:	bf00      	nop
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	0800f7e0 	.word	0x0800f7e0
 8006100:	08006741 	.word	0x08006741
 8006104:	20001364 	.word	0x20001364
 8006108:	20000e6c 	.word	0x20000e6c
 800610c:	20000014 	.word	0x20000014
 8006110:	20001360 	.word	0x20001360
 8006114:	2000134c 	.word	0x2000134c
 8006118:	20001344 	.word	0x20001344

0800611c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006120:	4b04      	ldr	r3, [pc, #16]	; (8006134 <vTaskSuspendAll+0x18>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3301      	adds	r3, #1
 8006126:	4a03      	ldr	r2, [pc, #12]	; (8006134 <vTaskSuspendAll+0x18>)
 8006128:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	20001368 	.word	0x20001368

08006138 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006142:	2300      	movs	r3, #0
 8006144:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006146:	4b42      	ldr	r3, [pc, #264]	; (8006250 <xTaskResumeAll+0x118>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <xTaskResumeAll+0x2c>
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	603b      	str	r3, [r7, #0]
}
 8006160:	bf00      	nop
 8006162:	e7fe      	b.n	8006162 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006164:	f001 fa2e 	bl	80075c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006168:	4b39      	ldr	r3, [pc, #228]	; (8006250 <xTaskResumeAll+0x118>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3b01      	subs	r3, #1
 800616e:	4a38      	ldr	r2, [pc, #224]	; (8006250 <xTaskResumeAll+0x118>)
 8006170:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006172:	4b37      	ldr	r3, [pc, #220]	; (8006250 <xTaskResumeAll+0x118>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d162      	bne.n	8006240 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800617a:	4b36      	ldr	r3, [pc, #216]	; (8006254 <xTaskResumeAll+0x11c>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d05e      	beq.n	8006240 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006182:	e02f      	b.n	80061e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006184:	4b34      	ldr	r3, [pc, #208]	; (8006258 <xTaskResumeAll+0x120>)
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3318      	adds	r3, #24
 8006190:	4618      	mov	r0, r3
 8006192:	f7fe fd31 	bl	8004bf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3304      	adds	r3, #4
 800619a:	4618      	mov	r0, r3
 800619c:	f7fe fd2c 	bl	8004bf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	4b2d      	ldr	r3, [pc, #180]	; (800625c <xTaskResumeAll+0x124>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d903      	bls.n	80061b4 <xTaskResumeAll+0x7c>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b0:	4a2a      	ldr	r2, [pc, #168]	; (800625c <xTaskResumeAll+0x124>)
 80061b2:	6013      	str	r3, [r2, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4a27      	ldr	r2, [pc, #156]	; (8006260 <xTaskResumeAll+0x128>)
 80061c2:	441a      	add	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f7fe fcb7 	bl	8004b3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	4b23      	ldr	r3, [pc, #140]	; (8006264 <xTaskResumeAll+0x12c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	429a      	cmp	r2, r3
 80061dc:	d302      	bcc.n	80061e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80061de:	4b22      	ldr	r3, [pc, #136]	; (8006268 <xTaskResumeAll+0x130>)
 80061e0:	2201      	movs	r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061e4:	4b1c      	ldr	r3, [pc, #112]	; (8006258 <xTaskResumeAll+0x120>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1cb      	bne.n	8006184 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061f2:	f000 fb5f 	bl	80068b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061f6:	4b1d      	ldr	r3, [pc, #116]	; (800626c <xTaskResumeAll+0x134>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006202:	f000 f847 	bl	8006294 <xTaskIncrementTick>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800620c:	4b16      	ldr	r3, [pc, #88]	; (8006268 <xTaskResumeAll+0x130>)
 800620e:	2201      	movs	r2, #1
 8006210:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	3b01      	subs	r3, #1
 8006216:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f1      	bne.n	8006202 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800621e:	4b13      	ldr	r3, [pc, #76]	; (800626c <xTaskResumeAll+0x134>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006224:	4b10      	ldr	r3, [pc, #64]	; (8006268 <xTaskResumeAll+0x130>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d009      	beq.n	8006240 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800622c:	2301      	movs	r3, #1
 800622e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <xTaskResumeAll+0x138>)
 8006232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006240:	f001 f9f0 	bl	8007624 <vPortExitCritical>

	return xAlreadyYielded;
 8006244:	68bb      	ldr	r3, [r7, #8]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20001368 	.word	0x20001368
 8006254:	20001340 	.word	0x20001340
 8006258:	20001300 	.word	0x20001300
 800625c:	20001348 	.word	0x20001348
 8006260:	20000e70 	.word	0x20000e70
 8006264:	20000e6c 	.word	0x20000e6c
 8006268:	20001354 	.word	0x20001354
 800626c:	20001350 	.word	0x20001350
 8006270:	e000ed04 	.word	0xe000ed04

08006274 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <xTaskGetTickCount+0x1c>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006280:	687b      	ldr	r3, [r7, #4]
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20001344 	.word	0x20001344

08006294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800629e:	4b4f      	ldr	r3, [pc, #316]	; (80063dc <xTaskIncrementTick+0x148>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f040 808f 	bne.w	80063c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062a8:	4b4d      	ldr	r3, [pc, #308]	; (80063e0 <xTaskIncrementTick+0x14c>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3301      	adds	r3, #1
 80062ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062b0:	4a4b      	ldr	r2, [pc, #300]	; (80063e0 <xTaskIncrementTick+0x14c>)
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d120      	bne.n	80062fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80062bc:	4b49      	ldr	r3, [pc, #292]	; (80063e4 <xTaskIncrementTick+0x150>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <xTaskIncrementTick+0x48>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	603b      	str	r3, [r7, #0]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xTaskIncrementTick+0x46>
 80062dc:	4b41      	ldr	r3, [pc, #260]	; (80063e4 <xTaskIncrementTick+0x150>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	4b41      	ldr	r3, [pc, #260]	; (80063e8 <xTaskIncrementTick+0x154>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a3f      	ldr	r2, [pc, #252]	; (80063e4 <xTaskIncrementTick+0x150>)
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	4a3f      	ldr	r2, [pc, #252]	; (80063e8 <xTaskIncrementTick+0x154>)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	4b3e      	ldr	r3, [pc, #248]	; (80063ec <xTaskIncrementTick+0x158>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	4a3d      	ldr	r2, [pc, #244]	; (80063ec <xTaskIncrementTick+0x158>)
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	f000 fadb 	bl	80068b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062fe:	4b3c      	ldr	r3, [pc, #240]	; (80063f0 <xTaskIncrementTick+0x15c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	429a      	cmp	r2, r3
 8006306:	d349      	bcc.n	800639c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006308:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <xTaskIncrementTick+0x150>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d104      	bne.n	800631c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006312:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <xTaskIncrementTick+0x15c>)
 8006314:	f04f 32ff 	mov.w	r2, #4294967295
 8006318:	601a      	str	r2, [r3, #0]
					break;
 800631a:	e03f      	b.n	800639c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800631c:	4b31      	ldr	r3, [pc, #196]	; (80063e4 <xTaskIncrementTick+0x150>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	429a      	cmp	r2, r3
 8006332:	d203      	bcs.n	800633c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006334:	4a2e      	ldr	r2, [pc, #184]	; (80063f0 <xTaskIncrementTick+0x15c>)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800633a:	e02f      	b.n	800639c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	3304      	adds	r3, #4
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe fc59 	bl	8004bf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	3318      	adds	r3, #24
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fc50 	bl	8004bf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4b25      	ldr	r3, [pc, #148]	; (80063f4 <xTaskIncrementTick+0x160>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d903      	bls.n	800636c <xTaskIncrementTick+0xd8>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	4a22      	ldr	r2, [pc, #136]	; (80063f4 <xTaskIncrementTick+0x160>)
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <xTaskIncrementTick+0x164>)
 800637a:	441a      	add	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f7fe fbdb 	bl	8004b3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638c:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <xTaskIncrementTick+0x168>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	429a      	cmp	r2, r3
 8006394:	d3b8      	bcc.n	8006308 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006396:	2301      	movs	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800639a:	e7b5      	b.n	8006308 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800639c:	4b17      	ldr	r3, [pc, #92]	; (80063fc <xTaskIncrementTick+0x168>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	4915      	ldr	r1, [pc, #84]	; (80063f8 <xTaskIncrementTick+0x164>)
 80063a4:	4613      	mov	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4413      	add	r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	440b      	add	r3, r1
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d901      	bls.n	80063b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063b8:	4b11      	ldr	r3, [pc, #68]	; (8006400 <xTaskIncrementTick+0x16c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d007      	beq.n	80063d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80063c0:	2301      	movs	r3, #1
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	e004      	b.n	80063d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063c6:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <xTaskIncrementTick+0x170>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3301      	adds	r3, #1
 80063cc:	4a0d      	ldr	r2, [pc, #52]	; (8006404 <xTaskIncrementTick+0x170>)
 80063ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063d0:	697b      	ldr	r3, [r7, #20]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3718      	adds	r7, #24
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	20001368 	.word	0x20001368
 80063e0:	20001344 	.word	0x20001344
 80063e4:	200012f8 	.word	0x200012f8
 80063e8:	200012fc 	.word	0x200012fc
 80063ec:	20001358 	.word	0x20001358
 80063f0:	20001360 	.word	0x20001360
 80063f4:	20001348 	.word	0x20001348
 80063f8:	20000e70 	.word	0x20000e70
 80063fc:	20000e6c 	.word	0x20000e6c
 8006400:	20001354 	.word	0x20001354
 8006404:	20001350 	.word	0x20001350

08006408 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800640e:	4b2a      	ldr	r3, [pc, #168]	; (80064b8 <vTaskSwitchContext+0xb0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006416:	4b29      	ldr	r3, [pc, #164]	; (80064bc <vTaskSwitchContext+0xb4>)
 8006418:	2201      	movs	r2, #1
 800641a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800641c:	e046      	b.n	80064ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800641e:	4b27      	ldr	r3, [pc, #156]	; (80064bc <vTaskSwitchContext+0xb4>)
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006424:	4b26      	ldr	r3, [pc, #152]	; (80064c0 <vTaskSwitchContext+0xb8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e010      	b.n	800644e <vTaskSwitchContext+0x46>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <vTaskSwitchContext+0x40>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	607b      	str	r3, [r7, #4]
}
 8006444:	bf00      	nop
 8006446:	e7fe      	b.n	8006446 <vTaskSwitchContext+0x3e>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3b01      	subs	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	491d      	ldr	r1, [pc, #116]	; (80064c4 <vTaskSwitchContext+0xbc>)
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d0e4      	beq.n	800642c <vTaskSwitchContext+0x24>
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4613      	mov	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4a15      	ldr	r2, [pc, #84]	; (80064c4 <vTaskSwitchContext+0xbc>)
 800646e:	4413      	add	r3, r2
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	3308      	adds	r3, #8
 8006484:	429a      	cmp	r2, r3
 8006486:	d104      	bne.n	8006492 <vTaskSwitchContext+0x8a>
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	605a      	str	r2, [r3, #4]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4a0b      	ldr	r2, [pc, #44]	; (80064c8 <vTaskSwitchContext+0xc0>)
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	4a08      	ldr	r2, [pc, #32]	; (80064c0 <vTaskSwitchContext+0xb8>)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064a2:	4b09      	ldr	r3, [pc, #36]	; (80064c8 <vTaskSwitchContext+0xc0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3354      	adds	r3, #84	; 0x54
 80064a8:	4a08      	ldr	r2, [pc, #32]	; (80064cc <vTaskSwitchContext+0xc4>)
 80064aa:	6013      	str	r3, [r2, #0]
}
 80064ac:	bf00      	nop
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	20001368 	.word	0x20001368
 80064bc:	20001354 	.word	0x20001354
 80064c0:	20001348 	.word	0x20001348
 80064c4:	20000e70 	.word	0x20000e70
 80064c8:	20000e6c 	.word	0x20000e6c
 80064cc:	20000014 	.word	0x20000014

080064d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064f6:	4b07      	ldr	r3, [pc, #28]	; (8006514 <vTaskPlaceOnEventList+0x44>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	3318      	adds	r3, #24
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fe fb41 	bl	8004b86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006504:	2101      	movs	r1, #1
 8006506:	6838      	ldr	r0, [r7, #0]
 8006508:	f000 fb8e 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
}
 800650c:	bf00      	nop
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000e6c 	.word	0x20000e6c

08006518 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	617b      	str	r3, [r7, #20]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <vTaskPlaceOnEventListRestricted+0x54>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3318      	adds	r3, #24
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7fe faf8 	bl	8004b3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	68b8      	ldr	r0, [r7, #8]
 800655e:	f000 fb63 	bl	8006c28 <prvAddCurrentTaskToDelayedList>
	}
 8006562:	bf00      	nop
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000e6c 	.word	0x20000e6c

08006570 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10a      	bne.n	800659c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	60fb      	str	r3, [r7, #12]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	3318      	adds	r3, #24
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fb29 	bl	8004bf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065a6:	4b1e      	ldr	r3, [pc, #120]	; (8006620 <xTaskRemoveFromEventList+0xb0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d11d      	bne.n	80065ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fb20 	bl	8004bf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	4b19      	ldr	r3, [pc, #100]	; (8006624 <xTaskRemoveFromEventList+0xb4>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d903      	bls.n	80065cc <xTaskRemoveFromEventList+0x5c>
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	4a16      	ldr	r2, [pc, #88]	; (8006624 <xTaskRemoveFromEventList+0xb4>)
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4a13      	ldr	r2, [pc, #76]	; (8006628 <xTaskRemoveFromEventList+0xb8>)
 80065da:	441a      	add	r2, r3
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7fe faab 	bl	8004b3e <vListInsertEnd>
 80065e8:	e005      	b.n	80065f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3318      	adds	r3, #24
 80065ee:	4619      	mov	r1, r3
 80065f0:	480e      	ldr	r0, [pc, #56]	; (800662c <xTaskRemoveFromEventList+0xbc>)
 80065f2:	f7fe faa4 	bl	8004b3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <xTaskRemoveFromEventList+0xc0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	429a      	cmp	r2, r3
 8006602:	d905      	bls.n	8006610 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <xTaskRemoveFromEventList+0xc4>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e001      	b.n	8006614 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006614:	697b      	ldr	r3, [r7, #20]
}
 8006616:	4618      	mov	r0, r3
 8006618:	3718      	adds	r7, #24
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20001368 	.word	0x20001368
 8006624:	20001348 	.word	0x20001348
 8006628:	20000e70 	.word	0x20000e70
 800662c:	20001300 	.word	0x20001300
 8006630:	20000e6c 	.word	0x20000e6c
 8006634:	20001354 	.word	0x20001354

08006638 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <vTaskInternalSetTimeOutState+0x24>)
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <vTaskInternalSetTimeOutState+0x28>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	605a      	str	r2, [r3, #4]
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	20001358 	.word	0x20001358
 8006660:	20001344 	.word	0x20001344

08006664 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10a      	bne.n	800668a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006678:	f383 8811 	msr	BASEPRI, r3
 800667c:	f3bf 8f6f 	isb	sy
 8006680:	f3bf 8f4f 	dsb	sy
 8006684:	613b      	str	r3, [r7, #16]
}
 8006686:	bf00      	nop
 8006688:	e7fe      	b.n	8006688 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10a      	bne.n	80066a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	60fb      	str	r3, [r7, #12]
}
 80066a2:	bf00      	nop
 80066a4:	e7fe      	b.n	80066a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80066a6:	f000 ff8d 	bl	80075c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066aa:	4b1d      	ldr	r3, [pc, #116]	; (8006720 <xTaskCheckForTimeOut+0xbc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c2:	d102      	bne.n	80066ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	e023      	b.n	8006712 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b15      	ldr	r3, [pc, #84]	; (8006724 <xTaskCheckForTimeOut+0xc0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d007      	beq.n	80066e6 <xTaskCheckForTimeOut+0x82>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	69ba      	ldr	r2, [r7, #24]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d302      	bcc.n	80066e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	61fb      	str	r3, [r7, #28]
 80066e4:	e015      	b.n	8006712 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d20b      	bcs.n	8006708 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	1ad2      	subs	r2, r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff ff9b 	bl	8006638 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006702:	2300      	movs	r3, #0
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	e004      	b.n	8006712 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800670e:	2301      	movs	r3, #1
 8006710:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006712:	f000 ff87 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8006716:	69fb      	ldr	r3, [r7, #28]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20001344 	.word	0x20001344
 8006724:	20001358 	.word	0x20001358

08006728 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006728:	b480      	push	{r7}
 800672a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800672c:	4b03      	ldr	r3, [pc, #12]	; (800673c <vTaskMissedYield+0x14>)
 800672e:	2201      	movs	r2, #1
 8006730:	601a      	str	r2, [r3, #0]
}
 8006732:	bf00      	nop
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	20001354 	.word	0x20001354

08006740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006748:	f000 f852 	bl	80067f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800674c:	4b06      	ldr	r3, [pc, #24]	; (8006768 <prvIdleTask+0x28>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d9f9      	bls.n	8006748 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <prvIdleTask+0x2c>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006764:	e7f0      	b.n	8006748 <prvIdleTask+0x8>
 8006766:	bf00      	nop
 8006768:	20000e70 	.word	0x20000e70
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
 800677a:	e00c      	b.n	8006796 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4613      	mov	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <prvInitialiseTaskLists+0x60>)
 8006788:	4413      	add	r3, r2
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe f9aa 	bl	8004ae4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3301      	adds	r3, #1
 8006794:	607b      	str	r3, [r7, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b37      	cmp	r3, #55	; 0x37
 800679a:	d9ef      	bls.n	800677c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800679c:	480d      	ldr	r0, [pc, #52]	; (80067d4 <prvInitialiseTaskLists+0x64>)
 800679e:	f7fe f9a1 	bl	8004ae4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067a2:	480d      	ldr	r0, [pc, #52]	; (80067d8 <prvInitialiseTaskLists+0x68>)
 80067a4:	f7fe f99e 	bl	8004ae4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067a8:	480c      	ldr	r0, [pc, #48]	; (80067dc <prvInitialiseTaskLists+0x6c>)
 80067aa:	f7fe f99b 	bl	8004ae4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ae:	480c      	ldr	r0, [pc, #48]	; (80067e0 <prvInitialiseTaskLists+0x70>)
 80067b0:	f7fe f998 	bl	8004ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067b4:	480b      	ldr	r0, [pc, #44]	; (80067e4 <prvInitialiseTaskLists+0x74>)
 80067b6:	f7fe f995 	bl	8004ae4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067ba:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <prvInitialiseTaskLists+0x78>)
 80067bc:	4a05      	ldr	r2, [pc, #20]	; (80067d4 <prvInitialiseTaskLists+0x64>)
 80067be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067c0:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <prvInitialiseTaskLists+0x7c>)
 80067c2:	4a05      	ldr	r2, [pc, #20]	; (80067d8 <prvInitialiseTaskLists+0x68>)
 80067c4:	601a      	str	r2, [r3, #0]
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000e70 	.word	0x20000e70
 80067d4:	200012d0 	.word	0x200012d0
 80067d8:	200012e4 	.word	0x200012e4
 80067dc:	20001300 	.word	0x20001300
 80067e0:	20001314 	.word	0x20001314
 80067e4:	2000132c 	.word	0x2000132c
 80067e8:	200012f8 	.word	0x200012f8
 80067ec:	200012fc 	.word	0x200012fc

080067f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067f6:	e019      	b.n	800682c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067f8:	f000 fee4 	bl	80075c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067fc:	4b10      	ldr	r3, [pc, #64]	; (8006840 <prvCheckTasksWaitingTermination+0x50>)
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe f9f5 	bl	8004bf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800680e:	4b0d      	ldr	r3, [pc, #52]	; (8006844 <prvCheckTasksWaitingTermination+0x54>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3b01      	subs	r3, #1
 8006814:	4a0b      	ldr	r2, [pc, #44]	; (8006844 <prvCheckTasksWaitingTermination+0x54>)
 8006816:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	4a0a      	ldr	r2, [pc, #40]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 8006820:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006822:	f000 feff 	bl	8007624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f810 	bl	800684c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <prvCheckTasksWaitingTermination+0x58>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e1      	bne.n	80067f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20001314 	.word	0x20001314
 8006844:	20001340 	.word	0x20001340
 8006848:	20001328 	.word	0x20001328

0800684c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3354      	adds	r3, #84	; 0x54
 8006858:	4618      	mov	r0, r3
 800685a:	f005 fa11 	bl	800bc80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006864:	2b00      	cmp	r3, #0
 8006866:	d108      	bne.n	800687a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	4618      	mov	r0, r3
 800686e:	f001 f897 	bl	80079a0 <vPortFree>
				vPortFree( pxTCB );
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f894 	bl	80079a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006878:	e018      	b.n	80068ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006880:	2b01      	cmp	r3, #1
 8006882:	d103      	bne.n	800688c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 f88b 	bl	80079a0 <vPortFree>
	}
 800688a:	e00f      	b.n	80068ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006892:	2b02      	cmp	r3, #2
 8006894:	d00a      	beq.n	80068ac <prvDeleteTCB+0x60>
	__asm volatile
 8006896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689a:	f383 8811 	msr	BASEPRI, r3
 800689e:	f3bf 8f6f 	isb	sy
 80068a2:	f3bf 8f4f 	dsb	sy
 80068a6:	60fb      	str	r3, [r7, #12]
}
 80068a8:	bf00      	nop
 80068aa:	e7fe      	b.n	80068aa <prvDeleteTCB+0x5e>
	}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ba:	4b0c      	ldr	r3, [pc, #48]	; (80068ec <prvResetNextTaskUnblockTime+0x38>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d104      	bne.n	80068ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <prvResetNextTaskUnblockTime+0x3c>)
 80068c6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068cc:	e008      	b.n	80068e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ce:	4b07      	ldr	r3, [pc, #28]	; (80068ec <prvResetNextTaskUnblockTime+0x38>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	4a04      	ldr	r2, [pc, #16]	; (80068f0 <prvResetNextTaskUnblockTime+0x3c>)
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	200012f8 	.word	0x200012f8
 80068f0:	20001360 	.word	0x20001360

080068f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80068fa:	4b05      	ldr	r3, [pc, #20]	; (8006910 <xTaskGetCurrentTaskHandle+0x1c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006900:	687b      	ldr	r3, [r7, #4]
	}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000e6c 	.word	0x20000e6c

08006914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800691a:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <xTaskGetSchedulerState+0x34>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006922:	2301      	movs	r3, #1
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	e008      	b.n	800693a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006928:	4b08      	ldr	r3, [pc, #32]	; (800694c <xTaskGetSchedulerState+0x38>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006930:	2302      	movs	r3, #2
 8006932:	607b      	str	r3, [r7, #4]
 8006934:	e001      	b.n	800693a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006936:	2300      	movs	r3, #0
 8006938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800693a:	687b      	ldr	r3, [r7, #4]
	}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	2000134c 	.word	0x2000134c
 800694c:	20001368 	.word	0x20001368

08006950 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d051      	beq.n	8006a0a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800696a:	4b2a      	ldr	r3, [pc, #168]	; (8006a14 <xTaskPriorityInherit+0xc4>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	429a      	cmp	r2, r3
 8006972:	d241      	bcs.n	80069f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	2b00      	cmp	r3, #0
 800697a:	db06      	blt.n	800698a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800697c:	4b25      	ldr	r3, [pc, #148]	; (8006a14 <xTaskPriorityInherit+0xc4>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6959      	ldr	r1, [r3, #20]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <xTaskPriorityInherit+0xc8>)
 800699c:	4413      	add	r3, r2
 800699e:	4299      	cmp	r1, r3
 80069a0:	d122      	bne.n	80069e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe f926 	bl	8004bf8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069ac:	4b19      	ldr	r3, [pc, #100]	; (8006a14 <xTaskPriorityInherit+0xc4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ba:	4b18      	ldr	r3, [pc, #96]	; (8006a1c <xTaskPriorityInherit+0xcc>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d903      	bls.n	80069ca <xTaskPriorityInherit+0x7a>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <xTaskPriorityInherit+0xcc>)
 80069c8:	6013      	str	r3, [r2, #0]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4a10      	ldr	r2, [pc, #64]	; (8006a18 <xTaskPriorityInherit+0xc8>)
 80069d8:	441a      	add	r2, r3
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7fe f8ac 	bl	8004b3e <vListInsertEnd>
 80069e6:	e004      	b.n	80069f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <xTaskPriorityInherit+0xc4>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80069f2:	2301      	movs	r3, #1
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e008      	b.n	8006a0a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <xTaskPriorityInherit+0xc4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d201      	bcs.n	8006a0a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
	}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000e6c 	.word	0x20000e6c
 8006a18:	20000e70 	.word	0x20000e70
 8006a1c:	20001348 	.word	0x20001348

08006a20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d056      	beq.n	8006ae4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a36:	4b2e      	ldr	r3, [pc, #184]	; (8006af0 <xTaskPriorityDisinherit+0xd0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d00a      	beq.n	8006a56 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	60bb      	str	r3, [r7, #8]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a78:	1e5a      	subs	r2, r3, #1
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d02c      	beq.n	8006ae4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d128      	bne.n	8006ae4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3304      	adds	r3, #4
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe f8ae 	bl	8004bf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <xTaskPriorityDisinherit+0xd4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d903      	bls.n	8006ac4 <xTaskPriorityDisinherit+0xa4>
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	4a0c      	ldr	r2, [pc, #48]	; (8006af4 <xTaskPriorityDisinherit+0xd4>)
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <xTaskPriorityDisinherit+0xd8>)
 8006ad2:	441a      	add	r2, r3
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fe f82f 	bl	8004b3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ae4:	697b      	ldr	r3, [r7, #20]
	}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000e6c 	.word	0x20000e6c
 8006af4:	20001348 	.word	0x20001348
 8006af8:	20000e70 	.word	0x20000e70

08006afc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d06a      	beq.n	8006bea <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10a      	bne.n	8006b32 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	60fb      	str	r3, [r7, #12]
}
 8006b2e:	bf00      	nop
 8006b30:	e7fe      	b.n	8006b30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d902      	bls.n	8006b42 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	61fb      	str	r3, [r7, #28]
 8006b40:	e002      	b.n	8006b48 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d04b      	beq.n	8006bea <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d146      	bne.n	8006bea <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b5c:	4b25      	ldr	r3, [pc, #148]	; (8006bf4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d10a      	bne.n	8006b7c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6a:	f383 8811 	msr	BASEPRI, r3
 8006b6e:	f3bf 8f6f 	isb	sy
 8006b72:	f3bf 8f4f 	dsb	sy
 8006b76:	60bb      	str	r3, [r7, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	e7fe      	b.n	8006b7a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	69fa      	ldr	r2, [r7, #28]
 8006b86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	db04      	blt.n	8006b9a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	6959      	ldr	r1, [r3, #20]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4a13      	ldr	r2, [pc, #76]	; (8006bf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006baa:	4413      	add	r3, r2
 8006bac:	4299      	cmp	r1, r3
 8006bae:	d11c      	bne.n	8006bea <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe f81f 	bl	8004bf8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bbe:	4b0f      	ldr	r3, [pc, #60]	; (8006bfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d903      	bls.n	8006bce <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	4a0c      	ldr	r2, [pc, #48]	; (8006bfc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bcc:	6013      	str	r3, [r2, #0]
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4a07      	ldr	r2, [pc, #28]	; (8006bf8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006bdc:	441a      	add	r2, r3
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fd ffaa 	bl	8004b3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bea:	bf00      	nop
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000e6c 	.word	0x20000e6c
 8006bf8:	20000e70 	.word	0x20000e70
 8006bfc:	20001348 	.word	0x20001348

08006c00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c04:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d004      	beq.n	8006c16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c12:	3201      	adds	r2, #1
 8006c14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006c16:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c18:	681b      	ldr	r3, [r3, #0]
	}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	20000e6c 	.word	0x20000e6c

08006c28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c32:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c38:	4b20      	ldr	r3, [pc, #128]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fd ffda 	bl	8004bf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4a:	d10a      	bne.n	8006c62 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c52:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4619      	mov	r1, r3
 8006c5a:	4819      	ldr	r0, [pc, #100]	; (8006cc0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c5c:	f7fd ff6f 	bl	8004b3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c60:	e026      	b.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4413      	add	r3, r2
 8006c68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c6a:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d209      	bcs.n	8006c8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3304      	adds	r3, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4610      	mov	r0, r2
 8006c88:	f7fd ff7d 	bl	8004b86 <vListInsert>
}
 8006c8c:	e010      	b.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c8e:	4b0e      	ldr	r3, [pc, #56]	; (8006cc8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b0a      	ldr	r3, [pc, #40]	; (8006cbc <prvAddCurrentTaskToDelayedList+0x94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fd ff73 	bl	8004b86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d202      	bcs.n	8006cb0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006caa:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	6013      	str	r3, [r2, #0]
}
 8006cb0:	bf00      	nop
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	20001344 	.word	0x20001344
 8006cbc:	20000e6c 	.word	0x20000e6c
 8006cc0:	2000132c 	.word	0x2000132c
 8006cc4:	200012fc 	.word	0x200012fc
 8006cc8:	200012f8 	.word	0x200012f8
 8006ccc:	20001360 	.word	0x20001360

08006cd0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	; 0x28
 8006cd4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cda:	f000 fb07 	bl	80072ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cde:	4b1c      	ldr	r3, [pc, #112]	; (8006d50 <xTimerCreateTimerTask+0x80>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d021      	beq.n	8006d2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006cee:	1d3a      	adds	r2, r7, #4
 8006cf0:	f107 0108 	add.w	r1, r7, #8
 8006cf4:	f107 030c 	add.w	r3, r7, #12
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fd fed9 	bl	8004ab0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	9202      	str	r2, [sp, #8]
 8006d06:	9301      	str	r3, [sp, #4]
 8006d08:	2302      	movs	r3, #2
 8006d0a:	9300      	str	r3, [sp, #0]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	460a      	mov	r2, r1
 8006d10:	4910      	ldr	r1, [pc, #64]	; (8006d54 <xTimerCreateTimerTask+0x84>)
 8006d12:	4811      	ldr	r0, [pc, #68]	; (8006d58 <xTimerCreateTimerTask+0x88>)
 8006d14:	f7fe ffa6 	bl	8005c64 <xTaskCreateStatic>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <xTimerCreateTimerTask+0x8c>)
 8006d1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <xTimerCreateTimerTask+0x8c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d26:	2301      	movs	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10a      	bne.n	8006d46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	613b      	str	r3, [r7, #16]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d46:	697b      	ldr	r3, [r7, #20]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}
 8006d50:	2000139c 	.word	0x2000139c
 8006d54:	0800f7e8 	.word	0x0800f7e8
 8006d58:	08006e95 	.word	0x08006e95
 8006d5c:	200013a0 	.word	0x200013a0

08006d60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	; 0x28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	623b      	str	r3, [r7, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d8e:	4b1a      	ldr	r3, [pc, #104]	; (8006df8 <xTimerGenericCommand+0x98>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d02a      	beq.n	8006dec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b05      	cmp	r3, #5
 8006da6:	dc18      	bgt.n	8006dda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006da8:	f7ff fdb4 	bl	8006914 <xTaskGetSchedulerState>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d109      	bne.n	8006dc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006db2:	4b11      	ldr	r3, [pc, #68]	; (8006df8 <xTimerGenericCommand+0x98>)
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	f107 0110 	add.w	r1, r7, #16
 8006dba:	2300      	movs	r3, #0
 8006dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dbe:	f7fe f939 	bl	8005034 <xQueueGenericSend>
 8006dc2:	6278      	str	r0, [r7, #36]	; 0x24
 8006dc4:	e012      	b.n	8006dec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <xTimerGenericCommand+0x98>)
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	f107 0110 	add.w	r1, r7, #16
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f7fe f92f 	bl	8005034 <xQueueGenericSend>
 8006dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8006dd8:	e008      	b.n	8006dec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dda:	4b07      	ldr	r3, [pc, #28]	; (8006df8 <xTimerGenericCommand+0x98>)
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	f107 0110 	add.w	r1, r7, #16
 8006de2:	2300      	movs	r3, #0
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	f7fe fa23 	bl	8005230 <xQueueGenericSendFromISR>
 8006dea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2000139c 	.word	0x2000139c

08006dfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af02      	add	r7, sp, #8
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e06:	4b22      	ldr	r3, [pc, #136]	; (8006e90 <prvProcessExpiredTimer+0x94>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd feef 	bl	8004bf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e20:	f003 0304 	and.w	r3, r3, #4
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d022      	beq.n	8006e6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	699a      	ldr	r2, [r3, #24]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	18d1      	adds	r1, r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	6978      	ldr	r0, [r7, #20]
 8006e36:	f000 f8d1 	bl	8006fdc <prvInsertTimerInActiveList>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d01f      	beq.n	8006e80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e40:	2300      	movs	r3, #0
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2300      	movs	r3, #0
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	2100      	movs	r1, #0
 8006e4a:	6978      	ldr	r0, [r7, #20]
 8006e4c:	f7ff ff88 	bl	8006d60 <xTimerGenericCommand>
 8006e50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d113      	bne.n	8006e80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	60fb      	str	r3, [r7, #12]
}
 8006e6a:	bf00      	nop
 8006e6c:	e7fe      	b.n	8006e6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	6978      	ldr	r0, [r7, #20]
 8006e86:	4798      	blx	r3
}
 8006e88:	bf00      	nop
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20001394 	.word	0x20001394

08006e94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e9c:	f107 0308 	add.w	r3, r7, #8
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 f857 	bl	8006f54 <prvGetNextExpireTime>
 8006ea6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f000 f803 	bl	8006eb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006eb2:	f000 f8d5 	bl	8007060 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eb6:	e7f1      	b.n	8006e9c <prvTimerTask+0x8>

08006eb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b084      	sub	sp, #16
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ec2:	f7ff f92b 	bl	800611c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ec6:	f107 0308 	add.w	r3, r7, #8
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f866 	bl	8006f9c <prvSampleTimeNow>
 8006ed0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d130      	bne.n	8006f3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10a      	bne.n	8006ef4 <prvProcessTimerOrBlockTask+0x3c>
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d806      	bhi.n	8006ef4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006ee6:	f7ff f927 	bl	8006138 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7ff ff85 	bl	8006dfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006ef2:	e024      	b.n	8006f3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d008      	beq.n	8006f0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006efa:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <prvProcessTimerOrBlockTask+0x90>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <prvProcessTimerOrBlockTask+0x50>
 8006f04:	2301      	movs	r3, #1
 8006f06:	e000      	b.n	8006f0a <prvProcessTimerOrBlockTask+0x52>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f0c:	4b0f      	ldr	r3, [pc, #60]	; (8006f4c <prvProcessTimerOrBlockTask+0x94>)
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	f7fe fe6f 	bl	8005bfc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f1e:	f7ff f90b 	bl	8006138 <xTaskResumeAll>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f28:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <prvProcessTimerOrBlockTask+0x98>)
 8006f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2e:	601a      	str	r2, [r3, #0]
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	f3bf 8f6f 	isb	sy
}
 8006f38:	e001      	b.n	8006f3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f3a:	f7ff f8fd 	bl	8006138 <xTaskResumeAll>
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	20001398 	.word	0x20001398
 8006f4c:	2000139c 	.word	0x2000139c
 8006f50:	e000ed04 	.word	0xe000ed04

08006f54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <prvGetNextExpireTime+0x44>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <prvGetNextExpireTime+0x16>
 8006f66:	2201      	movs	r2, #1
 8006f68:	e000      	b.n	8006f6c <prvGetNextExpireTime+0x18>
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d105      	bne.n	8006f84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f78:	4b07      	ldr	r3, [pc, #28]	; (8006f98 <prvGetNextExpireTime+0x44>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e001      	b.n	8006f88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f88:	68fb      	ldr	r3, [r7, #12]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	20001394 	.word	0x20001394

08006f9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fa4:	f7ff f966 	bl	8006274 <xTaskGetTickCount>
 8006fa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006faa:	4b0b      	ldr	r3, [pc, #44]	; (8006fd8 <prvSampleTimeNow+0x3c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d205      	bcs.n	8006fc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fb4:	f000 f936 	bl	8007224 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e002      	b.n	8006fc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fc6:	4a04      	ldr	r2, [pc, #16]	; (8006fd8 <prvSampleTimeNow+0x3c>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200013a4 	.word	0x200013a4

08006fdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d812      	bhi.n	8007028 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	429a      	cmp	r2, r3
 800700e:	d302      	bcc.n	8007016 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007010:	2301      	movs	r3, #1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	e01b      	b.n	800704e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007016:	4b10      	ldr	r3, [pc, #64]	; (8007058 <prvInsertTimerInActiveList+0x7c>)
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3304      	adds	r3, #4
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f7fd fdb0 	bl	8004b86 <vListInsert>
 8007026:	e012      	b.n	800704e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d206      	bcs.n	800703e <prvInsertTimerInActiveList+0x62>
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	429a      	cmp	r2, r3
 8007036:	d302      	bcc.n	800703e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007038:	2301      	movs	r3, #1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	e007      	b.n	800704e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800703e:	4b07      	ldr	r3, [pc, #28]	; (800705c <prvInsertTimerInActiveList+0x80>)
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3304      	adds	r3, #4
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f7fd fd9c 	bl	8004b86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800704e:	697b      	ldr	r3, [r7, #20]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20001398 	.word	0x20001398
 800705c:	20001394 	.word	0x20001394

08007060 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08e      	sub	sp, #56	; 0x38
 8007064:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007066:	e0ca      	b.n	80071fe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	da18      	bge.n	80070a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800706e:	1d3b      	adds	r3, r7, #4
 8007070:	3304      	adds	r3, #4
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	61fb      	str	r3, [r7, #28]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007096:	6850      	ldr	r0, [r2, #4]
 8007098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800709a:	6892      	ldr	r2, [r2, #8]
 800709c:	4611      	mov	r1, r2
 800709e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f2c0 80aa 	blt.w	80071fc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	3304      	adds	r3, #4
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fd fd9d 	bl	8004bf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070be:	463b      	mov	r3, r7
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7ff ff6b 	bl	8006f9c <prvSampleTimeNow>
 80070c6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b09      	cmp	r3, #9
 80070cc:	f200 8097 	bhi.w	80071fe <prvProcessReceivedCommands+0x19e>
 80070d0:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <prvProcessReceivedCommands+0x78>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	08007101 	.word	0x08007101
 80070dc:	08007101 	.word	0x08007101
 80070e0:	08007101 	.word	0x08007101
 80070e4:	08007175 	.word	0x08007175
 80070e8:	08007189 	.word	0x08007189
 80070ec:	080071d3 	.word	0x080071d3
 80070f0:	08007101 	.word	0x08007101
 80070f4:	08007101 	.word	0x08007101
 80070f8:	08007175 	.word	0x08007175
 80070fc:	08007189 	.word	0x08007189
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	b2da      	uxtb	r2, r3
 800710c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800710e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	18d1      	adds	r1, r2, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007120:	f7ff ff5c 	bl	8006fdc <prvInsertTimerInActiveList>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d069      	beq.n	80071fe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007130:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d05e      	beq.n	80071fe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	441a      	add	r2, r3
 8007148:	2300      	movs	r3, #0
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	2300      	movs	r3, #0
 800714e:	2100      	movs	r1, #0
 8007150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007152:	f7ff fe05 	bl	8006d60 <xTimerGenericCommand>
 8007156:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d14f      	bne.n	80071fe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	61bb      	str	r3, [r7, #24]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800717a:	f023 0301 	bic.w	r3, r3, #1
 800717e:	b2da      	uxtb	r2, r3
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007186:	e03a      	b.n	80071fe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	b2da      	uxtb	r2, r3
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800719a:	68ba      	ldr	r2, [r7, #8]
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	699b      	ldr	r3, [r3, #24]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	617b      	str	r3, [r7, #20]
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	18d1      	adds	r1, r2, r3
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071cc:	f7ff ff06 	bl	8006fdc <prvInsertTimerInActiveList>
					break;
 80071d0:	e015      	b.n	80071fe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d103      	bne.n	80071e8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80071e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e2:	f000 fbdd 	bl	80079a0 <vPortFree>
 80071e6:	e00a      	b.n	80071fe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ee:	f023 0301 	bic.w	r3, r3, #1
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80071fa:	e000      	b.n	80071fe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80071fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071fe:	4b08      	ldr	r3, [pc, #32]	; (8007220 <prvProcessReceivedCommands+0x1c0>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	1d39      	adds	r1, r7, #4
 8007204:	2200      	movs	r2, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f7fe f93a 	bl	8005480 <xQueueReceive>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	f47f af2a 	bne.w	8007068 <prvProcessReceivedCommands+0x8>
	}
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	3730      	adds	r7, #48	; 0x30
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	2000139c 	.word	0x2000139c

08007224 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800722a:	e048      	b.n	80072be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800722c:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007236:	4b2b      	ldr	r3, [pc, #172]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3304      	adds	r3, #4
 8007244:	4618      	mov	r0, r3
 8007246:	f7fd fcd7 	bl	8004bf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b00      	cmp	r3, #0
 800725e:	d02e      	beq.n	80072be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4413      	add	r3, r2
 8007268:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	429a      	cmp	r2, r3
 8007270:	d90e      	bls.n	8007290 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800727e:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3304      	adds	r3, #4
 8007286:	4619      	mov	r1, r3
 8007288:	4610      	mov	r0, r2
 800728a:	f7fd fc7c 	bl	8004b86 <vListInsert>
 800728e:	e016      	b.n	80072be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007290:	2300      	movs	r3, #0
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	2300      	movs	r3, #0
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	2100      	movs	r1, #0
 800729a:	68f8      	ldr	r0, [r7, #12]
 800729c:	f7ff fd60 	bl	8006d60 <xTimerGenericCommand>
 80072a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	603b      	str	r3, [r7, #0]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072be:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1b1      	bne.n	800722c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072c8:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <prvSwitchTimerLists+0xc4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <prvSwitchTimerLists+0xc0>)
 80072d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072d6:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <prvSwitchTimerLists+0xc4>)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	6013      	str	r3, [r2, #0]
}
 80072dc:	bf00      	nop
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20001394 	.word	0x20001394
 80072e8:	20001398 	.word	0x20001398

080072ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80072f2:	f000 f967 	bl	80075c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80072f6:	4b15      	ldr	r3, [pc, #84]	; (800734c <prvCheckForValidListAndQueue+0x60>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d120      	bne.n	8007340 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80072fe:	4814      	ldr	r0, [pc, #80]	; (8007350 <prvCheckForValidListAndQueue+0x64>)
 8007300:	f7fd fbf0 	bl	8004ae4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007304:	4813      	ldr	r0, [pc, #76]	; (8007354 <prvCheckForValidListAndQueue+0x68>)
 8007306:	f7fd fbed 	bl	8004ae4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800730a:	4b13      	ldr	r3, [pc, #76]	; (8007358 <prvCheckForValidListAndQueue+0x6c>)
 800730c:	4a10      	ldr	r2, [pc, #64]	; (8007350 <prvCheckForValidListAndQueue+0x64>)
 800730e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007310:	4b12      	ldr	r3, [pc, #72]	; (800735c <prvCheckForValidListAndQueue+0x70>)
 8007312:	4a10      	ldr	r2, [pc, #64]	; (8007354 <prvCheckForValidListAndQueue+0x68>)
 8007314:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007316:	2300      	movs	r3, #0
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	4b11      	ldr	r3, [pc, #68]	; (8007360 <prvCheckForValidListAndQueue+0x74>)
 800731c:	4a11      	ldr	r2, [pc, #68]	; (8007364 <prvCheckForValidListAndQueue+0x78>)
 800731e:	2110      	movs	r1, #16
 8007320:	200a      	movs	r0, #10
 8007322:	f7fd fcfb 	bl	8004d1c <xQueueGenericCreateStatic>
 8007326:	4603      	mov	r3, r0
 8007328:	4a08      	ldr	r2, [pc, #32]	; (800734c <prvCheckForValidListAndQueue+0x60>)
 800732a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <prvCheckForValidListAndQueue+0x60>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <prvCheckForValidListAndQueue+0x60>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	490b      	ldr	r1, [pc, #44]	; (8007368 <prvCheckForValidListAndQueue+0x7c>)
 800733a:	4618      	mov	r0, r3
 800733c:	f7fe fc34 	bl	8005ba8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007340:	f000 f970 	bl	8007624 <vPortExitCritical>
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	2000139c 	.word	0x2000139c
 8007350:	2000136c 	.word	0x2000136c
 8007354:	20001380 	.word	0x20001380
 8007358:	20001394 	.word	0x20001394
 800735c:	20001398 	.word	0x20001398
 8007360:	20001448 	.word	0x20001448
 8007364:	200013a8 	.word	0x200013a8
 8007368:	0800f7f0 	.word	0x0800f7f0

0800736c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	3b04      	subs	r3, #4
 800737c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3b04      	subs	r3, #4
 800738a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f023 0201 	bic.w	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3b04      	subs	r3, #4
 800739a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800739c:	4a0c      	ldr	r2, [pc, #48]	; (80073d0 <pxPortInitialiseStack+0x64>)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3b14      	subs	r3, #20
 80073a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3b04      	subs	r3, #4
 80073b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f06f 0202 	mvn.w	r2, #2
 80073ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	3b20      	subs	r3, #32
 80073c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073c2:	68fb      	ldr	r3, [r7, #12]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	080073d5 	.word	0x080073d5

080073d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073de:	4b12      	ldr	r3, [pc, #72]	; (8007428 <prvTaskExitError+0x54>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e6:	d00a      	beq.n	80073fe <prvTaskExitError+0x2a>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	60fb      	str	r3, [r7, #12]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <prvTaskExitError+0x28>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	60bb      	str	r3, [r7, #8]
}
 8007410:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007412:	bf00      	nop
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d0fc      	beq.n	8007414 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800741a:	bf00      	nop
 800741c:	bf00      	nop
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	2000000c 	.word	0x2000000c
 800742c:	00000000 	.word	0x00000000

08007430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007430:	4b07      	ldr	r3, [pc, #28]	; (8007450 <pxCurrentTCBConst2>)
 8007432:	6819      	ldr	r1, [r3, #0]
 8007434:	6808      	ldr	r0, [r1, #0]
 8007436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743a:	f380 8809 	msr	PSP, r0
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f380 8811 	msr	BASEPRI, r0
 800744a:	4770      	bx	lr
 800744c:	f3af 8000 	nop.w

08007450 <pxCurrentTCBConst2>:
 8007450:	20000e6c 	.word	0x20000e6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop

08007458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007458:	4808      	ldr	r0, [pc, #32]	; (800747c <prvPortStartFirstTask+0x24>)
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	6800      	ldr	r0, [r0, #0]
 800745e:	f380 8808 	msr	MSP, r0
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f380 8814 	msr	CONTROL, r0
 800746a:	b662      	cpsie	i
 800746c:	b661      	cpsie	f
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	df00      	svc	0
 8007478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800747a:	bf00      	nop
 800747c:	e000ed08 	.word	0xe000ed08

08007480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007486:	4b46      	ldr	r3, [pc, #280]	; (80075a0 <xPortStartScheduler+0x120>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a46      	ldr	r2, [pc, #280]	; (80075a4 <xPortStartScheduler+0x124>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d10a      	bne.n	80074a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	613b      	str	r3, [r7, #16]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074a6:	4b3e      	ldr	r3, [pc, #248]	; (80075a0 <xPortStartScheduler+0x120>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a3f      	ldr	r2, [pc, #252]	; (80075a8 <xPortStartScheduler+0x128>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10a      	bne.n	80074c6 <xPortStartScheduler+0x46>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074c6:	4b39      	ldr	r3, [pc, #228]	; (80075ac <xPortStartScheduler+0x12c>)
 80074c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	22ff      	movs	r2, #255	; 0xff
 80074d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4b31      	ldr	r3, [pc, #196]	; (80075b0 <xPortStartScheduler+0x130>)
 80074ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ee:	4b31      	ldr	r3, [pc, #196]	; (80075b4 <xPortStartScheduler+0x134>)
 80074f0:	2207      	movs	r2, #7
 80074f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074f4:	e009      	b.n	800750a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074f6:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <xPortStartScheduler+0x134>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	4a2d      	ldr	r2, [pc, #180]	; (80075b4 <xPortStartScheduler+0x134>)
 80074fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b2db      	uxtb	r3, r3
 8007508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d0ef      	beq.n	80074f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007516:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <xPortStartScheduler+0x134>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f1c3 0307 	rsb	r3, r3, #7
 800751e:	2b04      	cmp	r3, #4
 8007520:	d00a      	beq.n	8007538 <xPortStartScheduler+0xb8>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60bb      	str	r3, [r7, #8]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007538:	4b1e      	ldr	r3, [pc, #120]	; (80075b4 <xPortStartScheduler+0x134>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <xPortStartScheduler+0x134>)
 8007540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <xPortStartScheduler+0x134>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800754a:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <xPortStartScheduler+0x134>)
 800754c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	b2da      	uxtb	r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007556:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <xPortStartScheduler+0x138>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <xPortStartScheduler+0x138>)
 800755c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <xPortStartScheduler+0x138>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <xPortStartScheduler+0x138>)
 8007568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800756c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800756e:	f000 f8dd 	bl	800772c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <xPortStartScheduler+0x13c>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007578:	f000 f8fc 	bl	8007774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800757c:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <xPortStartScheduler+0x140>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0f      	ldr	r2, [pc, #60]	; (80075c0 <xPortStartScheduler+0x140>)
 8007582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007588:	f7ff ff66 	bl	8007458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800758c:	f7fe ff3c 	bl	8006408 <vTaskSwitchContext>
	prvTaskExitError();
 8007590:	f7ff ff20 	bl	80073d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	e000ed00 	.word	0xe000ed00
 80075a4:	410fc271 	.word	0x410fc271
 80075a8:	410fc270 	.word	0x410fc270
 80075ac:	e000e400 	.word	0xe000e400
 80075b0:	20001498 	.word	0x20001498
 80075b4:	2000149c 	.word	0x2000149c
 80075b8:	e000ed20 	.word	0xe000ed20
 80075bc:	2000000c 	.word	0x2000000c
 80075c0:	e000ef34 	.word	0xe000ef34

080075c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	607b      	str	r3, [r7, #4]
}
 80075dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075de:	4b0f      	ldr	r3, [pc, #60]	; (800761c <vPortEnterCritical+0x58>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	4a0d      	ldr	r2, [pc, #52]	; (800761c <vPortEnterCritical+0x58>)
 80075e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075e8:	4b0c      	ldr	r3, [pc, #48]	; (800761c <vPortEnterCritical+0x58>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10f      	bne.n	8007610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <vPortEnterCritical+0x5c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <vPortEnterCritical+0x4c>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	603b      	str	r3, [r7, #0]
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <vPortEnterCritical+0x4a>
	}
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000000c 	.word	0x2000000c
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800762a:	4b12      	ldr	r3, [pc, #72]	; (8007674 <vPortExitCritical+0x50>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <vPortExitCritical+0x24>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	607b      	str	r3, [r7, #4]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <vPortExitCritical+0x50>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3b01      	subs	r3, #1
 800764e:	4a09      	ldr	r2, [pc, #36]	; (8007674 <vPortExitCritical+0x50>)
 8007650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007652:	4b08      	ldr	r3, [pc, #32]	; (8007674 <vPortExitCritical+0x50>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <vPortExitCritical+0x42>
 800765a:	2300      	movs	r3, #0
 800765c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f383 8811 	msr	BASEPRI, r3
}
 8007664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	2000000c 	.word	0x2000000c
	...

08007680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007680:	f3ef 8009 	mrs	r0, PSP
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <pxCurrentTCBConst>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	f01e 0f10 	tst.w	lr, #16
 8007690:	bf08      	it	eq
 8007692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	6010      	str	r0, [r2, #0]
 800769c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076a4:	f380 8811 	msr	BASEPRI, r0
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f7fe feaa 	bl	8006408 <vTaskSwitchContext>
 80076b4:	f04f 0000 	mov.w	r0, #0
 80076b8:	f380 8811 	msr	BASEPRI, r0
 80076bc:	bc09      	pop	{r0, r3}
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	6808      	ldr	r0, [r1, #0]
 80076c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c6:	f01e 0f10 	tst.w	lr, #16
 80076ca:	bf08      	it	eq
 80076cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076d0:	f380 8809 	msr	PSP, r0
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	f3af 8000 	nop.w

080076e0 <pxCurrentTCBConst>:
 80076e0:	20000e6c 	.word	0x20000e6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop

080076e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	607b      	str	r3, [r7, #4]
}
 8007700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007702:	f7fe fdc7 	bl	8006294 <xTaskIncrementTick>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <xPortSysTickHandler+0x40>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f383 8811 	msr	BASEPRI, r3
}
 800771e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <vPortSetupTimerInterrupt+0x34>)
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <vPortSetupTimerInterrupt+0x38>)
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <vPortSetupTimerInterrupt+0x3c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0a      	ldr	r2, [pc, #40]	; (800776c <vPortSetupTimerInterrupt+0x40>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	4a09      	ldr	r2, [pc, #36]	; (8007770 <vPortSetupTimerInterrupt+0x44>)
 800774a:	3b01      	subs	r3, #1
 800774c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800774e:	4b04      	ldr	r3, [pc, #16]	; (8007760 <vPortSetupTimerInterrupt+0x34>)
 8007750:	2207      	movs	r2, #7
 8007752:	601a      	str	r2, [r3, #0]
}
 8007754:	bf00      	nop
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000e010 	.word	0xe000e010
 8007764:	e000e018 	.word	0xe000e018
 8007768:	20000000 	.word	0x20000000
 800776c:	10624dd3 	.word	0x10624dd3
 8007770:	e000e014 	.word	0xe000e014

08007774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007784 <vPortEnableVFP+0x10>
 8007778:	6801      	ldr	r1, [r0, #0]
 800777a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800777e:	6001      	str	r1, [r0, #0]
 8007780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007782:	bf00      	nop
 8007784:	e000ed88 	.word	0xe000ed88

08007788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800778e:	f3ef 8305 	mrs	r3, IPSR
 8007792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b0f      	cmp	r3, #15
 8007798:	d914      	bls.n	80077c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800779a:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <vPortValidateInterruptPriority+0x70>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077a4:	4b15      	ldr	r3, [pc, #84]	; (80077fc <vPortValidateInterruptPriority+0x74>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	7afa      	ldrb	r2, [r7, #11]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d20a      	bcs.n	80077c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <vPortValidateInterruptPriority+0x78>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <vPortValidateInterruptPriority+0x7c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d90a      	bls.n	80077ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	603b      	str	r3, [r7, #0]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <vPortValidateInterruptPriority+0x60>
	}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	e000e3f0 	.word	0xe000e3f0
 80077fc:	20001498 	.word	0x20001498
 8007800:	e000ed0c 	.word	0xe000ed0c
 8007804:	2000149c 	.word	0x2000149c

08007808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	; 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007814:	f7fe fc82 	bl	800611c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007818:	4b5b      	ldr	r3, [pc, #364]	; (8007988 <pvPortMalloc+0x180>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007820:	f000 f920 	bl	8007a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007824:	4b59      	ldr	r3, [pc, #356]	; (800798c <pvPortMalloc+0x184>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 8093 	bne.w	8007958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01d      	beq.n	8007874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007838:	2208      	movs	r2, #8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0307 	and.w	r3, r3, #7
 8007846:	2b00      	cmp	r3, #0
 8007848:	d014      	beq.n	8007874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f023 0307 	bic.w	r3, r3, #7
 8007850:	3308      	adds	r3, #8
 8007852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <pvPortMalloc+0x6c>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	617b      	str	r3, [r7, #20]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d06e      	beq.n	8007958 <pvPortMalloc+0x150>
 800787a:	4b45      	ldr	r3, [pc, #276]	; (8007990 <pvPortMalloc+0x188>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d869      	bhi.n	8007958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007884:	4b43      	ldr	r3, [pc, #268]	; (8007994 <pvPortMalloc+0x18c>)
 8007886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007888:	4b42      	ldr	r3, [pc, #264]	; (8007994 <pvPortMalloc+0x18c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800788e:	e004      	b.n	800789a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d903      	bls.n	80078ac <pvPortMalloc+0xa4>
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f1      	bne.n	8007890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078ac:	4b36      	ldr	r3, [pc, #216]	; (8007988 <pvPortMalloc+0x180>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d050      	beq.n	8007958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2208      	movs	r2, #8
 80078bc:	4413      	add	r3, r2
 80078be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	2308      	movs	r3, #8
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d91f      	bls.n	8007918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <pvPortMalloc+0xf8>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	613b      	str	r3, [r7, #16]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	1ad2      	subs	r2, r2, r3
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007912:	69b8      	ldr	r0, [r7, #24]
 8007914:	f000 f908 	bl	8007b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <pvPortMalloc+0x188>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <pvPortMalloc+0x188>)
 8007924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007926:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <pvPortMalloc+0x188>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b1b      	ldr	r3, [pc, #108]	; (8007998 <pvPortMalloc+0x190>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d203      	bcs.n	800793a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <pvPortMalloc+0x188>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a18      	ldr	r2, [pc, #96]	; (8007998 <pvPortMalloc+0x190>)
 8007938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	4b13      	ldr	r3, [pc, #76]	; (800798c <pvPortMalloc+0x184>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	431a      	orrs	r2, r3
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <pvPortMalloc+0x194>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	4a11      	ldr	r2, [pc, #68]	; (800799c <pvPortMalloc+0x194>)
 8007956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007958:	f7fe fbee 	bl	8006138 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <pvPortMalloc+0x174>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60fb      	str	r3, [r7, #12]
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <pvPortMalloc+0x172>
	return pvReturn;
 800797c:	69fb      	ldr	r3, [r7, #28]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3728      	adds	r7, #40	; 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200050a8 	.word	0x200050a8
 800798c:	200050bc 	.word	0x200050bc
 8007990:	200050ac 	.word	0x200050ac
 8007994:	200050a0 	.word	0x200050a0
 8007998:	200050b0 	.word	0x200050b0
 800799c:	200050b4 	.word	0x200050b4

080079a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d04d      	beq.n	8007a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079b2:	2308      	movs	r3, #8
 80079b4:	425b      	negs	r3, r3
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4413      	add	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <vPortFree+0xb8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <vPortFree+0x44>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60fb      	str	r3, [r7, #12]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <vPortFree+0x62>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	60bb      	str	r3, [r7, #8]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <vPortFree+0xb8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01e      	beq.n	8007a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11a      	bne.n	8007a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <vPortFree+0xb8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	401a      	ands	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a28:	f7fe fb78 	bl	800611c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <vPortFree+0xbc>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <vPortFree+0xbc>)
 8007a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a3a:	6938      	ldr	r0, [r7, #16]
 8007a3c:	f000 f874 	bl	8007b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <vPortFree+0xc0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <vPortFree+0xc0>)
 8007a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a4a:	f7fe fb75 	bl	8006138 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a4e:	bf00      	nop
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200050bc 	.word	0x200050bc
 8007a5c:	200050ac 	.word	0x200050ac
 8007a60:	200050b8 	.word	0x200050b8

08007a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a70:	4b27      	ldr	r3, [pc, #156]	; (8007b10 <prvHeapInit+0xac>)
 8007a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00c      	beq.n	8007a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3307      	adds	r3, #7
 8007a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	4a1f      	ldr	r2, [pc, #124]	; (8007b10 <prvHeapInit+0xac>)
 8007a94:	4413      	add	r3, r2
 8007a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <prvHeapInit+0xb0>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <prvHeapInit+0xb0>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4413      	add	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <prvHeapInit+0xb4>)
 8007ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <prvHeapInit+0xb4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2200      	movs	r2, #0
 8007acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ace:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <prvHeapInit+0xb4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvHeapInit+0xb4>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <prvHeapInit+0xb8>)
 8007af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <prvHeapInit+0xbc>)
 8007afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007afc:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <prvHeapInit+0xc0>)
 8007afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	200014a0 	.word	0x200014a0
 8007b14:	200050a0 	.word	0x200050a0
 8007b18:	200050a8 	.word	0x200050a8
 8007b1c:	200050b0 	.word	0x200050b0
 8007b20:	200050ac 	.word	0x200050ac
 8007b24:	200050bc 	.word	0x200050bc

08007b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <prvInsertBlockIntoFreeList+0xac>)
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e002      	b.n	8007b3c <prvInsertBlockIntoFreeList+0x14>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d8f7      	bhi.n	8007b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	4413      	add	r3, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d108      	bne.n	8007b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	441a      	add	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d118      	bne.n	8007bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d00d      	beq.n	8007ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e008      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e003      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d002      	beq.n	8007bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	200050a0 	.word	0x200050a0
 8007bd8:	200050a8 	.word	0x200050a8

08007bdc <GNSS_PARSER_Init>:
#endif /* USE_FREE_RTOS */

/* Exported functions --------------------------------------------------------*/

GNSSParser_Status_t GNSS_PARSER_Init(GNSSParser_Data_t *pGNSSParser_Data)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  if (pGNSSParser_Data == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <GNSS_PARSER_Init+0x12>
  {
    return GNSS_PARSER_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e083      	b.n	8007cf6 <GNSS_PARSER_Init+0x11a>
  }

  pGNSSParser_Data->debug = DEBUG_ON;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	701a      	strb	r2, [r3, #0]
  (void)memset((void *)(&pGNSSParser_Data->gpgga_data), 0, sizeof(GPGGA_Info_t));
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3308      	adds	r3, #8
 8007bf8:	2250      	movs	r2, #80	; 0x50
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f003 f88c 	bl	800ad1a <memset>
  pGNSSParser_Data->gpgga_data.xyz.ew = (uint8_t)' ';
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pGNSSParser_Data->gpgga_data.xyz.ns = (uint8_t)' ';
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pGNSSParser_Data->gpgga_data.xyz.mis = (uint8_t)' ';
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  (void)memset((void *)(&pGNSSParser_Data->gns_data), 0, sizeof(GNS_Info_t));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3358      	adds	r3, #88	; 0x58
 8007c1e:	2268      	movs	r2, #104	; 0x68
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f003 f879 	bl	800ad1a <memset>
  pGNSSParser_Data->gns_data.xyz.ew = (uint8_t)' ';
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  pGNSSParser_Data->gns_data.xyz.ns = (uint8_t)' ';
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  (void)memset((void *)(&pGNSSParser_Data->gpgst_data), 0, sizeof(GPGST_Info_t));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	33c0      	adds	r3, #192	; 0xc0
 8007c3c:	2230      	movs	r2, #48	; 0x30
 8007c3e:	2100      	movs	r1, #0
 8007c40:	4618      	mov	r0, r3
 8007c42:	f003 f86a 	bl	800ad1a <memset>

  (void)memset((void *)(&pGNSSParser_Data->gprmc_data), 0, sizeof(GPRMC_Info_t));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	33f0      	adds	r3, #240	; 0xf0
 8007c4a:	2250      	movs	r2, #80	; 0x50
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f003 f863 	bl	800ad1a <memset>
  pGNSSParser_Data->gprmc_data.xyz.ew = (uint8_t)' ';
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2220      	movs	r2, #32
 8007c58:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  pGNSSParser_Data->gprmc_data.xyz.ns = (uint8_t)' ';
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

  (void)memset((void *)(&pGNSSParser_Data->gsa_data), 0, sizeof(GSA_Info_t));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007c6a:	2268      	movs	r2, #104	; 0x68
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f003 f853 	bl	800ad1a <memset>
  (void)memset((void *)(&pGNSSParser_Data->gsv_data), 0, sizeof(GSV_Info_t));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007c7a:	22f4      	movs	r2, #244	; 0xf4
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f003 f84b 	bl	800ad1a <memset>
  (void)memset((void *)(&pGNSSParser_Data->pstmver_data), 0, sizeof(PSTMVER_Info_t));
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f003 f843 	bl	800ad1a <memset>
  (void)memset((void *)(&pGNSSParser_Data->pstmpass_data), 0, sizeof(PSTMPASSRTN_Info_t));
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8007c9a:	2261      	movs	r2, #97	; 0x61
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f003 f83b 	bl	800ad1a <memset>
  (void)memset((void *)(&pGNSSParser_Data->pstmagps_data), 0, sizeof(PSTMAGPS_Info_t));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8007caa:	220c      	movs	r2, #12
 8007cac:	2100      	movs	r1, #0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f003 f833 	bl	800ad1a <memset>
  (void)memset((void *)(&pGNSSParser_Data->geofence_data), 0, sizeof(Geofence_Info_t));
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8007cba:	2270      	movs	r2, #112	; 0x70
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f003 f82b 	bl	800ad1a <memset>
  (void)memset((void *)(&pGNSSParser_Data->odo_data), 0, sizeof(Odometer_Info_t));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8007cca:	2202      	movs	r2, #2
 8007ccc:	2100      	movs	r1, #0
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f003 f823 	bl	800ad1a <memset>
  (void)memset((void *)(&pGNSSParser_Data->datalog_data), 0, sizeof(Datalog_Info_t));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8007cda:	2202      	movs	r2, #2
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f003 f81b 	bl	800ad1a <memset>
  (void)memset((void *)(&pGNSSParser_Data->result), 0, sizeof(OpResult_t));
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8007cea:	2201      	movs	r2, #1
 8007cec:	2100      	movs	r1, #0
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f003 f813 	bl	800ad1a <memset>

  return GNSS_PARSER_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <GNSS_PARSER_CheckSanity>:

GNSSParser_Status_t GNSS_PARSER_CheckSanity(uint8_t *pSentence, uint64_t len)
{
 8007cfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d02:	b08b      	sub	sp, #44	; 0x2c
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	e9c7 2300 	strd	r2, r3, [r7]
  uint32_t checksum, check = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if((len > 0U) && (len < 5U)) {
 8007d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	d007      	beq.n	8007d28 <GNSS_PARSER_CheckSanity+0x2a>
 8007d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d1c:	2a05      	cmp	r2, #5
 8007d1e:	f173 0300 	sbcs.w	r3, r3, #0
 8007d22:	d201      	bcs.n	8007d28 <GNSS_PARSER_CheckSanity+0x2a>
    return GNSS_PARSER_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e042      	b.n	8007dae <GNSS_PARSER_CheckSanity+0xb0>
  }
  if(len == 0U) {
 8007d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	d101      	bne.n	8007d34 <GNSS_PARSER_CheckSanity+0x36>
    return GNSS_PARSER_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e03c      	b.n	8007dae <GNSS_PARSER_CheckSanity+0xb0>
  }
  checksum = (char2int(pSentence[len-4U]) << 4) | char2int(pSentence[len-3U]);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	3b04      	subs	r3, #4
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f002 fa8e 	bl	800a260 <char2int>
 8007d44:	4603      	mov	r3, r0
 8007d46:	011e      	lsls	r6, r3, #4
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	3b03      	subs	r3, #3
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	4413      	add	r3, r2
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f002 fa84 	bl	800a260 <char2int>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	4333      	orrs	r3, r6
 8007d5c:	617b      	str	r3, [r7, #20]
  
  for(uint64_t c = 1U; c < (len-5U); c++) {
 8007d5e:	f04f 0201 	mov.w	r2, #1
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8007d6a:	e00f      	b.n	8007d8c <GNSS_PARSER_CheckSanity+0x8e>
    check = (check ^ pSentence[c]);
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	4053      	eors	r3, r2
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
  for(uint64_t c = 1U; c < (len-5U); c++) {
 8007d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d80:	f112 0801 	adds.w	r8, r2, #1
 8007d84:	f143 0900 	adc.w	r9, r3, #0
 8007d88:	e9c7 8906 	strd	r8, r9, [r7, #24]
 8007d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d90:	1f54      	subs	r4, r2, #5
 8007d92:	f143 35ff 	adc.w	r5, r3, #4294967295
 8007d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d9a:	42a2      	cmp	r2, r4
 8007d9c:	41ab      	sbcs	r3, r5
 8007d9e:	d3e5      	bcc.n	8007d6c <GNSS_PARSER_CheckSanity+0x6e>
  }
  
  return (check == checksum) ? GNSS_PARSER_OK : GNSS_PARSER_ERROR;
 8007da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	bf14      	ite	ne
 8007da8:	2301      	movne	r3, #1
 8007daa:	2300      	moveq	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	372c      	adds	r7, #44	; 0x2c
 8007db2:	46bd      	mov	sp, r7
 8007db4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007db8 <GNSS_PARSER_ParseMsg>:

GNSSParser_Status_t GNSS_PARSER_ParseMsg(GNSSParser_Data_t *pGNSSParser_Data, uint8_t msg, uint8_t *pBuffer)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	72fb      	strb	r3, [r7, #11]
  ParseStatus_t status = PARSE_FAIL;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]

  switch(msg) {
 8007dca:	7afb      	ldrb	r3, [r7, #11]
 8007dcc:	2b0d      	cmp	r3, #13
 8007dce:	f200 80a7 	bhi.w	8007f20 <GNSS_PARSER_ParseMsg+0x168>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <GNSS_PARSER_ParseMsg+0x20>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007e11 	.word	0x08007e11
 8007ddc:	08007e23 	.word	0x08007e23
 8007de0:	08007e35 	.word	0x08007e35
 8007de4:	08007e47 	.word	0x08007e47
 8007de8:	08007e59 	.word	0x08007e59
 8007dec:	08007e6d 	.word	0x08007e6d
 8007df0:	08007e81 	.word	0x08007e81
 8007df4:	08007e95 	.word	0x08007e95
 8007df8:	08007ea9 	.word	0x08007ea9
 8007dfc:	08007ebd 	.word	0x08007ebd
 8007e00:	08007ed1 	.word	0x08007ed1
 8007e04:	08007ee5 	.word	0x08007ee5
 8007e08:	08007ef9 	.word	0x08007ef9
 8007e0c:	08007f0d 	.word	0x08007f0d
  case GPGGA:
    status = NMEA_ParseGPGGA(&pGNSSParser_Data->gpgga_data, pBuffer);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3308      	adds	r3, #8
 8007e14:	6879      	ldr	r1, [r7, #4]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 fce2 	bl	80087e0 <NMEA_ParseGPGGA>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]
    break;
 8007e20:	e07f      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case GNS:
    status = NMEA_ParseGNS(&pGNSSParser_Data->gns_data, pBuffer);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3358      	adds	r3, #88	; 0x58
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fde1 	bl	80089f0 <NMEA_ParseGNS>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	75fb      	strb	r3, [r7, #23]
    break;
 8007e32:	e076      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case GPGST:
    status = NMEA_ParseGPGST(&pGNSSParser_Data->gpgst_data, pBuffer);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	33c0      	adds	r3, #192	; 0xc0
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 fede 	bl	8008bfc <NMEA_ParseGPGST>
 8007e40:	4603      	mov	r3, r0
 8007e42:	75fb      	strb	r3, [r7, #23]
    break;
 8007e44:	e06d      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case GPRMC:
    status = NMEA_ParseGPRMC(&pGNSSParser_Data->gprmc_data, pBuffer);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	33f0      	adds	r3, #240	; 0xf0
 8007e4a:	6879      	ldr	r1, [r7, #4]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 ffb7 	bl	8008dc0 <NMEA_ParseGPRMC>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]
    break;
 8007e56:	e064      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case GSA:
    status = NMEA_ParseGSA(&pGNSSParser_Data->gsa_data, pBuffer);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 f89d 	bl	8008fa0 <NMEA_ParseGSA>
 8007e66:	4603      	mov	r3, r0
 8007e68:	75fb      	strb	r3, [r7, #23]
    break;
 8007e6a:	e05a      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case GSV:
    status = NMEA_ParseGSV(&pGNSSParser_Data->gsv_data, pBuffer);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 f979 	bl	800916c <NMEA_ParseGSV>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	75fb      	strb	r3, [r7, #23]
    break;
 8007e7e:	e050      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMVER:
    status = NMEA_ParsePSTMVER(&pGNSSParser_Data->pstmver_data, pBuffer);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f001 fa9f 	bl	80093cc <NMEA_ParsePSTMVER>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	75fb      	strb	r3, [r7, #23]
    break;
 8007e92:	e046      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMPASSRTN:
    status = NMEA_ParsePSTMPASSRTN(&pGNSSParser_Data->pstmpass_data, pBuffer);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8007e9a:	6879      	ldr	r1, [r7, #4]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 ffd5 	bl	8009e4c <NMEA_ParsePSTMPASSRTN>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ea6:	e03c      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMAGPSSTATUS:
    status = NMEA_ParsePSTMAGPS(&pGNSSParser_Data->pstmagps_data, pBuffer);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f002 f87b 	bl	8009fac <NMEA_ParsePSTMAGPS>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]
    break;
 8007eba:	e032      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMGEOFENCE:
    status = NMEA_ParsePSTMGeofence(&pGNSSParser_Data->geofence_data, pBuffer);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f001 fb0f 	bl	80094e8 <NMEA_ParsePSTMGeofence>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]
    break;
 8007ece:	e028      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMODO:
    status = NMEA_ParsePSTMOdo(&pGNSSParser_Data->odo_data, pBuffer);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 fc7b 	bl	80097d4 <NMEA_ParsePSTMOdo>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75fb      	strb	r3, [r7, #23]
    break;
 8007ee2:	e01e      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMDATALOG:
    status = NMEA_ParsePSTMDatalog(&pGNSSParser_Data->datalog_data, pBuffer);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fd53 	bl	8009998 <NMEA_ParsePSTMDatalog>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ef6:	e014      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMSGL:
    status = NMEA_ParsePSTMsgl(&pGNSSParser_Data->result, pBuffer);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8007efe:	6879      	ldr	r1, [r7, #4]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 fe6b 	bl	8009bdc <NMEA_ParsePSTMsgl>
 8007f06:	4603      	mov	r3, r0
 8007f08:	75fb      	strb	r3, [r7, #23]
    break;
 8007f0a:	e00a      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  case PSTMSAVEPAR:
    status = NMEA_ParsePSTMSavePar(&pGNSSParser_Data->result, pBuffer);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8007f12:	6879      	ldr	r1, [r7, #4]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 fefd 	bl	8009d14 <NMEA_ParsePSTMSavePar>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75fb      	strb	r3, [r7, #23]
    break;
 8007f1e:	e000      	b.n	8007f22 <GNSS_PARSER_ParseMsg+0x16a>
  default:
    break;
 8007f20:	bf00      	nop
  }
    
  return ((status == PARSE_FAIL) ? GNSS_PARSER_ERROR : GNSS_PARSER_OK);
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	bf0c      	ite	eq
 8007f28:	2301      	moveq	r3, #1
 8007f2a:	2300      	movne	r3, #0
 8007f2c:	b2db      	uxtb	r3, r3
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop

08007f38 <NMEA_CheckGNSMsg>:

/*
 * Function that checks the header of a GNS NMEA sentence.
 */
static int32_t NMEA_CheckGNSMsg(const char header[])
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  int32_t is_gnsmsg = 1;
 8007f40:	2301      	movs	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$GPGNS") == 0)
 8007f44:	4918      	ldr	r1, [pc, #96]	; (8007fa8 <NMEA_CheckGNSMsg+0x70>)
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7f8 f952 	bl	80001f0 <strcmp>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <NMEA_CheckGNSMsg+0x1e>
  {
    is_gnsmsg = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GAGNS") == 0)
 8007f56:	4915      	ldr	r1, [pc, #84]	; (8007fac <NMEA_CheckGNSMsg+0x74>)
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7f8 f949 	bl	80001f0 <strcmp>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <NMEA_CheckGNSMsg+0x30>
  {
    is_gnsmsg = 0;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$BDGNS") == 0)
 8007f68:	4911      	ldr	r1, [pc, #68]	; (8007fb0 <NMEA_CheckGNSMsg+0x78>)
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7f8 f940 	bl	80001f0 <strcmp>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <NMEA_CheckGNSMsg+0x42>
  {
    is_gnsmsg = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$QZGNS") == 0)
 8007f7a:	490e      	ldr	r1, [pc, #56]	; (8007fb4 <NMEA_CheckGNSMsg+0x7c>)
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7f8 f937 	bl	80001f0 <strcmp>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <NMEA_CheckGNSMsg+0x54>
  {
    is_gnsmsg = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GNGNS") == 0)
 8007f8c:	490a      	ldr	r1, [pc, #40]	; (8007fb8 <NMEA_CheckGNSMsg+0x80>)
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f7f8 f92e 	bl	80001f0 <strcmp>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <NMEA_CheckGNSMsg+0x66>
  {
    is_gnsmsg = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
  }

  return is_gnsmsg;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	0800f7f8 	.word	0x0800f7f8
 8007fac:	0800f800 	.word	0x0800f800
 8007fb0:	0800f808 	.word	0x0800f808
 8007fb4:	0800f810 	.word	0x0800f810
 8007fb8:	0800f818 	.word	0x0800f818

08007fbc <NMEA_CheckGSAMsg>:

/*
 * Function that checks the header of a GSA NMEA sentence.
 */
static int32_t NMEA_CheckGSAMsg(const char header[])
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  int32_t is_gsamsg = 1;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$GPGSA") == 0)
 8007fc8:	4918      	ldr	r1, [pc, #96]	; (800802c <NMEA_CheckGSAMsg+0x70>)
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7f8 f910 	bl	80001f0 <strcmp>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d101      	bne.n	8007fda <NMEA_CheckGSAMsg+0x1e>
  {
    is_gsamsg = 0;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GLGSA") == 0)
 8007fda:	4915      	ldr	r1, [pc, #84]	; (8008030 <NMEA_CheckGSAMsg+0x74>)
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7f8 f907 	bl	80001f0 <strcmp>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <NMEA_CheckGSAMsg+0x30>
  {
    is_gsamsg = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GAGSA") == 0)
 8007fec:	4911      	ldr	r1, [pc, #68]	; (8008034 <NMEA_CheckGSAMsg+0x78>)
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7f8 f8fe 	bl	80001f0 <strcmp>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <NMEA_CheckGSAMsg+0x42>
  {
    is_gsamsg = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$BDGSA") == 0)
 8007ffe:	490e      	ldr	r1, [pc, #56]	; (8008038 <NMEA_CheckGSAMsg+0x7c>)
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7f8 f8f5 	bl	80001f0 <strcmp>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d101      	bne.n	8008010 <NMEA_CheckGSAMsg+0x54>
  {
    is_gsamsg = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GNGSA") == 0)
 8008010:	490a      	ldr	r1, [pc, #40]	; (800803c <NMEA_CheckGSAMsg+0x80>)
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7f8 f8ec 	bl	80001f0 <strcmp>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <NMEA_CheckGSAMsg+0x66>
  {
    is_gsamsg = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	60fb      	str	r3, [r7, #12]
  }

  return is_gsamsg;
 8008022:	68fb      	ldr	r3, [r7, #12]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	0800f820 	.word	0x0800f820
 8008030:	0800f828 	.word	0x0800f828
 8008034:	0800f830 	.word	0x0800f830
 8008038:	0800f838 	.word	0x0800f838
 800803c:	0800f840 	.word	0x0800f840

08008040 <NMEA_CheckGSVMsg>:

/*
 *  Function that checks the header of a GSV NMEA sentence.
 */
static int32_t NMEA_CheckGSVMsg(const char header[])
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  int32_t is_gsvmsg = 1;
 8008048:	2301      	movs	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$GPGSV") == 0)
 800804c:	491d      	ldr	r1, [pc, #116]	; (80080c4 <NMEA_CheckGSVMsg+0x84>)
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7f8 f8ce 	bl	80001f0 <strcmp>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <NMEA_CheckGSVMsg+0x1e>
  {
    is_gsvmsg = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GLGSV") == 0)
 800805e:	491a      	ldr	r1, [pc, #104]	; (80080c8 <NMEA_CheckGSVMsg+0x88>)
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7f8 f8c5 	bl	80001f0 <strcmp>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <NMEA_CheckGSVMsg+0x30>
  {
    is_gsvmsg = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GAGSV") == 0)
 8008070:	4916      	ldr	r1, [pc, #88]	; (80080cc <NMEA_CheckGSVMsg+0x8c>)
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7f8 f8bc 	bl	80001f0 <strcmp>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d101      	bne.n	8008082 <NMEA_CheckGSVMsg+0x42>
  {
    is_gsvmsg = 0;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$BDGSV") == 0)
 8008082:	4913      	ldr	r1, [pc, #76]	; (80080d0 <NMEA_CheckGSVMsg+0x90>)
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7f8 f8b3 	bl	80001f0 <strcmp>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <NMEA_CheckGSVMsg+0x54>
  {
    is_gsvmsg = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$QZGSV") == 0)
 8008094:	490f      	ldr	r1, [pc, #60]	; (80080d4 <NMEA_CheckGSVMsg+0x94>)
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7f8 f8aa 	bl	80001f0 <strcmp>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <NMEA_CheckGSVMsg+0x66>
  {
    is_gsvmsg = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$GNGSV") == 0)
 80080a6:	490c      	ldr	r1, [pc, #48]	; (80080d8 <NMEA_CheckGSVMsg+0x98>)
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f8 f8a1 	bl	80001f0 <strcmp>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d101      	bne.n	80080b8 <NMEA_CheckGSVMsg+0x78>
  {
    is_gsvmsg = 0;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
  }

  return is_gsvmsg;
 80080b8:	68fb      	ldr	r3, [r7, #12]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	0800f848 	.word	0x0800f848
 80080c8:	0800f850 	.word	0x0800f850
 80080cc:	0800f858 	.word	0x0800f858
 80080d0:	0800f860 	.word	0x0800f860
 80080d4:	0800f868 	.word	0x0800f868
 80080d8:	0800f870 	.word	0x0800f870

080080dc <NMEA_ResetGSVMsg>:

/*
 *  Helper function to reset GSV fields
 */
static void NMEA_ResetGSVMsg(GSV_Info_t *pGSVInfo)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  (void)memset(pGSVInfo->constellation, 0, (size_t)MAX_STR_LEN);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f002 fe15 	bl	800ad1a <memset>
  pGSVInfo->amount = 0;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	621a      	str	r2, [r3, #32]
  pGSVInfo->number = 0;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	625a      	str	r2, [r3, #36]	; 0x24
  pGSVInfo->current_sats = 0;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	62da      	str	r2, [r3, #44]	; 0x2c
  pGSVInfo->tot_sats = 0;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	629a      	str	r2, [r3, #40]	; 0x28
  for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
 800810c:	e010      	b.n	8008130 <NMEA_ResetGSVMsg+0x54>
  {
    (void)memset(&pGSVInfo->gsv_sat_i[i], 0, sizeof(GSV_SAT_Info_t));
 800810e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008112:	3303      	adds	r3, #3
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	4413      	add	r3, r2
 800811a:	2210      	movs	r2, #16
 800811c:	2100      	movs	r1, #0
 800811e:	4618      	mov	r0, r3
 8008120:	f002 fdfb 	bl	800ad1a <memset>
  for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 8008124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	3301      	adds	r3, #1
 800812c:	b2db      	uxtb	r3, r3
 800812e:	73fb      	strb	r3, [r7, #15]
 8008130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008134:	2b0b      	cmp	r3, #11
 8008136:	ddea      	ble.n	800810e <NMEA_ResetGSVMsg+0x32>
  }
}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <NMEA_CheckGeofenceMsg>:

/*
 * Function that checks the header of a Geofence message.
 */
static int32_t NMEA_CheckGeofenceMsg(const char header[])
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  int32_t is_geofencemsg = 1;
 800814c:	2301      	movs	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMCFGGEOFENCEOK") == 0)
 8008150:	4921      	ldr	r1, [pc, #132]	; (80081d8 <NMEA_CheckGeofenceMsg+0x94>)
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7f8 f84c 	bl	80001f0 <strcmp>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <NMEA_CheckGeofenceMsg+0x1e>
  {
    is_geofencemsg = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMCFGGEOFENCEERROR") == 0)
 8008162:	491e      	ldr	r1, [pc, #120]	; (80081dc <NMEA_CheckGeofenceMsg+0x98>)
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7f8 f843 	bl	80001f0 <strcmp>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d101      	bne.n	8008174 <NMEA_CheckGeofenceMsg+0x30>
  {
    is_geofencemsg = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCECFGOK") == 0)
 8008174:	491a      	ldr	r1, [pc, #104]	; (80081e0 <NMEA_CheckGeofenceMsg+0x9c>)
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7f8 f83a 	bl	80001f0 <strcmp>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <NMEA_CheckGeofenceMsg+0x42>
  {
    is_geofencemsg = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCECFGERROR") == 0)
 8008186:	4917      	ldr	r1, [pc, #92]	; (80081e4 <NMEA_CheckGeofenceMsg+0xa0>)
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f7f8 f831 	bl	80001f0 <strcmp>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <NMEA_CheckGeofenceMsg+0x54>
  {
    is_geofencemsg = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCESTATUS") == 0)
 8008198:	4913      	ldr	r1, [pc, #76]	; (80081e8 <NMEA_CheckGeofenceMsg+0xa4>)
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f7f8 f828 	bl	80001f0 <strcmp>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <NMEA_CheckGeofenceMsg+0x66>
  {
    is_geofencemsg = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCE") == 0)
 80081aa:	4910      	ldr	r1, [pc, #64]	; (80081ec <NMEA_CheckGeofenceMsg+0xa8>)
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7f8 f81f 	bl	80001f0 <strcmp>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <NMEA_CheckGeofenceMsg+0x78>
  {
    is_geofencemsg = 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMGEOFENCEREQERROR") == 0)
 80081bc:	490c      	ldr	r1, [pc, #48]	; (80081f0 <NMEA_CheckGeofenceMsg+0xac>)
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7f8 f816 	bl	80001f0 <strcmp>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <NMEA_CheckGeofenceMsg+0x8a>
  {
    is_geofencemsg = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	60fb      	str	r3, [r7, #12]
  }

  return is_geofencemsg;
 80081ce:	68fb      	ldr	r3, [r7, #12]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	0800f878 	.word	0x0800f878
 80081dc:	0800f88c 	.word	0x0800f88c
 80081e0:	0800f8a4 	.word	0x0800f8a4
 80081e4:	0800f8b8 	.word	0x0800f8b8
 80081e8:	0800f8d0 	.word	0x0800f8d0
 80081ec:	0800f8e4 	.word	0x0800f8e4
 80081f0:	0800f8f4 	.word	0x0800f8f4

080081f4 <NMEA_CheckOdoMsg>:

/*
 *  Function that checks the header of a Odometer message.
 */
static int32_t NMEA_CheckOdoMsg(const char header[])
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  int32_t is_odomsg = 1;
 80081fc:	2301      	movs	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMCFGODOOK") == 0)
 8008200:	491d      	ldr	r1, [pc, #116]	; (8008278 <NMEA_CheckOdoMsg+0x84>)
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7f7 fff4 	bl	80001f0 <strcmp>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <NMEA_CheckOdoMsg+0x1e>
  {
    is_odomsg = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMCFGODOERROR") == 0)
 8008212:	491a      	ldr	r1, [pc, #104]	; (800827c <NMEA_CheckOdoMsg+0x88>)
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f7f7 ffeb 	bl	80001f0 <strcmp>
 800821a:	4603      	mov	r3, r0
 800821c:	2b00      	cmp	r3, #0
 800821e:	d101      	bne.n	8008224 <NMEA_CheckOdoMsg+0x30>
  {
    is_odomsg = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMODOSTARTOK") == 0)
 8008224:	4916      	ldr	r1, [pc, #88]	; (8008280 <NMEA_CheckOdoMsg+0x8c>)
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f7f7 ffe2 	bl	80001f0 <strcmp>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <NMEA_CheckOdoMsg+0x42>
  {
    is_odomsg = 0;
 8008232:	2300      	movs	r3, #0
 8008234:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMODOSTARTERROR") == 0)
 8008236:	4913      	ldr	r1, [pc, #76]	; (8008284 <NMEA_CheckOdoMsg+0x90>)
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7f7 ffd9 	bl	80001f0 <strcmp>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <NMEA_CheckOdoMsg+0x54>
  {
    is_odomsg = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMODOSTOPOK") == 0)
 8008248:	490f      	ldr	r1, [pc, #60]	; (8008288 <NMEA_CheckOdoMsg+0x94>)
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7f7 ffd0 	bl	80001f0 <strcmp>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <NMEA_CheckOdoMsg+0x66>
  {
    is_odomsg = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMODOSTOPERROR") == 0)
 800825a:	490c      	ldr	r1, [pc, #48]	; (800828c <NMEA_CheckOdoMsg+0x98>)
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7f7 ffc7 	bl	80001f0 <strcmp>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <NMEA_CheckOdoMsg+0x78>
  {
    is_odomsg = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]
  }

  return is_odomsg;
 800826c:	68fb      	ldr	r3, [r7, #12]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	0800f90c 	.word	0x0800f90c
 800827c:	0800f91c 	.word	0x0800f91c
 8008280:	0800f930 	.word	0x0800f930
 8008284:	0800f940 	.word	0x0800f940
 8008288:	0800f954 	.word	0x0800f954
 800828c:	0800f964 	.word	0x0800f964

08008290 <NMEA_CheckDatalogMsg>:

/*
 * Function that checks the header of a Datalog message.
 */
static int32_t NMEA_CheckDatalogMsg(const char header[])
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  int32_t is_datalogmsg = 1;
 8008298:	2301      	movs	r3, #1
 800829a:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMCFGLOGOK") == 0)
 800829c:	492f      	ldr	r1, [pc, #188]	; (800835c <NMEA_CheckDatalogMsg+0xcc>)
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f7f7 ffa6 	bl	80001f0 <strcmp>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <NMEA_CheckDatalogMsg+0x1e>
  {
    is_datalogmsg = 0;
 80082aa:	2300      	movs	r3, #0
 80082ac:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMCFGLOGERROR") == 0)
 80082ae:	492c      	ldr	r1, [pc, #176]	; (8008360 <NMEA_CheckDatalogMsg+0xd0>)
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7f7 ff9d 	bl	80001f0 <strcmp>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <NMEA_CheckDatalogMsg+0x30>
  {
    is_datalogmsg = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGCREATEOK") == 0)
 80082c0:	4928      	ldr	r1, [pc, #160]	; (8008364 <NMEA_CheckDatalogMsg+0xd4>)
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7f7 ff94 	bl	80001f0 <strcmp>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <NMEA_CheckDatalogMsg+0x42>
  {
    is_datalogmsg = 0;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGCREATEERROR") == 0)
 80082d2:	4925      	ldr	r1, [pc, #148]	; (8008368 <NMEA_CheckDatalogMsg+0xd8>)
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7f7 ff8b 	bl	80001f0 <strcmp>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <NMEA_CheckDatalogMsg+0x54>
  {
    is_datalogmsg = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGSTARTOK") == 0)
 80082e4:	4921      	ldr	r1, [pc, #132]	; (800836c <NMEA_CheckDatalogMsg+0xdc>)
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7f7 ff82 	bl	80001f0 <strcmp>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <NMEA_CheckDatalogMsg+0x66>
  {
    is_datalogmsg = 0;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGSTARTERROR") == 0)
 80082f6:	491e      	ldr	r1, [pc, #120]	; (8008370 <NMEA_CheckDatalogMsg+0xe0>)
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7f7 ff79 	bl	80001f0 <strcmp>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <NMEA_CheckDatalogMsg+0x78>
  {
    is_datalogmsg = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGSTOPOK") == 0)
 8008308:	491a      	ldr	r1, [pc, #104]	; (8008374 <NMEA_CheckDatalogMsg+0xe4>)
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7f7 ff70 	bl	80001f0 <strcmp>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <NMEA_CheckDatalogMsg+0x8a>
  {
    is_datalogmsg = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGSTOPERROR") == 0)
 800831a:	4917      	ldr	r1, [pc, #92]	; (8008378 <NMEA_CheckDatalogMsg+0xe8>)
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f7f7 ff67 	bl	80001f0 <strcmp>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <NMEA_CheckDatalogMsg+0x9c>
  {
    is_datalogmsg = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGERASEOK") == 0)
 800832c:	4913      	ldr	r1, [pc, #76]	; (800837c <NMEA_CheckDatalogMsg+0xec>)
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7f7 ff5e 	bl	80001f0 <strcmp>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d101      	bne.n	800833e <NMEA_CheckDatalogMsg+0xae>
  {
    is_datalogmsg = 0;
 800833a:	2300      	movs	r3, #0
 800833c:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMLOGERASEERROR") == 0)
 800833e:	4910      	ldr	r1, [pc, #64]	; (8008380 <NMEA_CheckDatalogMsg+0xf0>)
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7f7 ff55 	bl	80001f0 <strcmp>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <NMEA_CheckDatalogMsg+0xc0>
  {
    is_datalogmsg = 0;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]
  }

  return is_datalogmsg;
 8008350:	68fb      	ldr	r3, [r7, #12]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	0800f978 	.word	0x0800f978
 8008360:	0800f988 	.word	0x0800f988
 8008364:	0800f99c 	.word	0x0800f99c
 8008368:	0800f9b0 	.word	0x0800f9b0
 800836c:	0800f9c4 	.word	0x0800f9c4
 8008370:	0800f9d4 	.word	0x0800f9d4
 8008374:	0800f9e8 	.word	0x0800f9e8
 8008378:	0800f9f8 	.word	0x0800f9f8
 800837c:	0800fa0c 	.word	0x0800fa0c
 8008380:	0800fa1c 	.word	0x0800fa1c

08008384 <NMEA_CheckListMsg>:

/*
 * Function that checks the header of a List configuration message.
 */
static int32_t NMEA_CheckListMsg(const char header[])
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  int32_t is_listmsg = 1;
 800838c:	2301      	movs	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMCFGMSGLOK") == 0)
 8008390:	490b      	ldr	r1, [pc, #44]	; (80083c0 <NMEA_CheckListMsg+0x3c>)
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f7f7 ff2c 	bl	80001f0 <strcmp>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <NMEA_CheckListMsg+0x1e>
  {
    is_listmsg = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMCFGMSGLERROR") == 0)
 80083a2:	4908      	ldr	r1, [pc, #32]	; (80083c4 <NMEA_CheckListMsg+0x40>)
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7f7 ff23 	bl	80001f0 <strcmp>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <NMEA_CheckListMsg+0x30>
  {
    is_listmsg = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
  }

  return is_listmsg;
 80083b4:	68fb      	ldr	r3, [r7, #12]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	0800fa30 	.word	0x0800fa30
 80083c4:	0800fa40 	.word	0x0800fa40

080083c8 <NMEA_CheckSaveparMsg>:

/*
 * Function that checks the header of a Save param message.
 */
static int32_t NMEA_CheckSaveparMsg(const char header[])
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  int32_t is_savevarmsg = 1;
 80083d0:	2301      	movs	r3, #1
 80083d2:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMSAVEPAROK") == 0)
 80083d4:	490b      	ldr	r1, [pc, #44]	; (8008404 <NMEA_CheckSaveparMsg+0x3c>)
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7f7 ff0a 	bl	80001f0 <strcmp>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <NMEA_CheckSaveparMsg+0x1e>
  {
    is_savevarmsg = 0;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSAVEPARERROR") == 0)
 80083e6:	4908      	ldr	r1, [pc, #32]	; (8008408 <NMEA_CheckSaveparMsg+0x40>)
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7f7 ff01 	bl	80001f0 <strcmp>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <NMEA_CheckSaveparMsg+0x30>
  {
    is_savevarmsg = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	60fb      	str	r3, [r7, #12]
  }

  return is_savevarmsg;
 80083f8:	68fb      	ldr	r3, [r7, #12]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	0800fa54 	.word	0x0800fa54
 8008408:	0800fa64 	.word	0x0800fa64

0800840c <NMEA_CheckPassMsg>:

/*
 * Function that checks the header of a Pass message.
 */
static int32_t NMEA_CheckPassMsg(const char header[])
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  int32_t is_passmsg = 1;
 8008414:	2301      	movs	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]
  
  if (strcmp(header, "$PSTMSTAGPS8PASSRTN") == 0)
 8008418:	490b      	ldr	r1, [pc, #44]	; (8008448 <NMEA_CheckPassMsg+0x3c>)
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7f7 fee8 	bl	80001f0 <strcmp>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <NMEA_CheckPassMsg+0x1e>
  {
    is_passmsg = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPS8PASSGENERROR") == 0)
 800842a:	4908      	ldr	r1, [pc, #32]	; (800844c <NMEA_CheckPassMsg+0x40>)
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7f7 fedf 	bl	80001f0 <strcmp>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d101      	bne.n	800843c <NMEA_CheckPassMsg+0x30>
  {
    is_passmsg = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	60fb      	str	r3, [r7, #12]
  }

  return is_passmsg;
 800843c:	68fb      	ldr	r3, [r7, #12]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	0800fa78 	.word	0x0800fa78
 800844c:	0800fa8c 	.word	0x0800fa8c

08008450 <NMEA_CheckAGPSMsg>:

/*
 * Function that checks the header of an AGPS message.
 */
static int32_t NMEA_CheckAGPSMsg(const char header[])
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  int32_t is_passmsg = 1;
 8008458:	2301      	movs	r3, #1
 800845a:	60fb      	str	r3, [r7, #12]

  /* Status */
  if (strcmp(header, "$PSTMAGPSSTATUS") == 0)
 800845c:	493c      	ldr	r1, [pc, #240]	; (8008550 <NMEA_CheckAGPSMsg+0x100>)
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7f7 fec6 	bl	80001f0 <strcmp>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d101      	bne.n	800846e <NMEA_CheckAGPSMsg+0x1e>
  {
    is_passmsg = 0;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
  }
  /* Begin */
  if (strcmp(header, "$PSTMSTAGPSSEEDBEGINOK") == 0)
 800846e:	4939      	ldr	r1, [pc, #228]	; (8008554 <NMEA_CheckAGPSMsg+0x104>)
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7f7 febd 	bl	80001f0 <strcmp>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <NMEA_CheckAGPSMsg+0x30>
  {
    is_passmsg = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSSEEDBEGINERROR") == 0)
 8008480:	4935      	ldr	r1, [pc, #212]	; (8008558 <NMEA_CheckAGPSMsg+0x108>)
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f7f7 feb4 	bl	80001f0 <strcmp>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <NMEA_CheckAGPSMsg+0x42>
  {
    is_passmsg = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
  }
  /* Block type */
  if (strcmp(header, "$PSTMSTAGPSBLKTYPEOK") == 0)
 8008492:	4932      	ldr	r1, [pc, #200]	; (800855c <NMEA_CheckAGPSMsg+0x10c>)
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7f7 feab 	bl	80001f0 <strcmp>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <NMEA_CheckAGPSMsg+0x54>
  {
    is_passmsg = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSBLKTYPEERROR") == 0)
 80084a4:	492e      	ldr	r1, [pc, #184]	; (8008560 <NMEA_CheckAGPSMsg+0x110>)
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7f7 fea2 	bl	80001f0 <strcmp>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <NMEA_CheckAGPSMsg+0x66>
  {
    is_passmsg = 0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
  }
  /* Slot freq */
  if (strcmp(header, "$PSTMSTAGPSSLOTFRQOK") == 0)
 80084b6:	492b      	ldr	r1, [pc, #172]	; (8008564 <NMEA_CheckAGPSMsg+0x114>)
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7f7 fe99 	bl	80001f0 <strcmp>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <NMEA_CheckAGPSMsg+0x78>
  {
    is_passmsg = 0;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSSLOTFRQERROR") == 0)
 80084c8:	4927      	ldr	r1, [pc, #156]	; (8008568 <NMEA_CheckAGPSMsg+0x118>)
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7f7 fe90 	bl	80001f0 <strcmp>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <NMEA_CheckAGPSMsg+0x8a>
  {
    is_passmsg = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	60fb      	str	r3, [r7, #12]
  }
  /* Seed pkt */
  if (strcmp(header, "$PSTMSTAGPSSEEDPKTOK") == 0)
 80084da:	4924      	ldr	r1, [pc, #144]	; (800856c <NMEA_CheckAGPSMsg+0x11c>)
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7f7 fe87 	bl	80001f0 <strcmp>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <NMEA_CheckAGPSMsg+0x9c>
  {
    is_passmsg = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSSEEDPKTERROR") == 0)
 80084ec:	4920      	ldr	r1, [pc, #128]	; (8008570 <NMEA_CheckAGPSMsg+0x120>)
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7f7 fe7e 	bl	80001f0 <strcmp>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <NMEA_CheckAGPSMsg+0xae>
  {
    is_passmsg = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
  }
  /* Propagate */
  if (strcmp(header, "$PSTMSTAGPSSEEDPROPOK") == 0)
 80084fe:	491d      	ldr	r1, [pc, #116]	; (8008574 <NMEA_CheckAGPSMsg+0x124>)
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7f7 fe75 	bl	80001f0 <strcmp>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <NMEA_CheckAGPSMsg+0xc0>
  {
    is_passmsg = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMSTAGPSSEEDPROPERROR") == 0)
 8008510:	4919      	ldr	r1, [pc, #100]	; (8008578 <NMEA_CheckAGPSMsg+0x128>)
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7f7 fe6c 	bl	80001f0 <strcmp>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <NMEA_CheckAGPSMsg+0xd2>
  {
    is_passmsg = 0;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
  }
  /* Init time */
  if (strcmp(header, "$PSTMINITTIMEOK") == 0)
 8008522:	4916      	ldr	r1, [pc, #88]	; (800857c <NMEA_CheckAGPSMsg+0x12c>)
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f7f7 fe63 	bl	80001f0 <strcmp>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <NMEA_CheckAGPSMsg+0xe4>
  {
    is_passmsg = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	60fb      	str	r3, [r7, #12]
  }
  if (strcmp(header, "$PSTMINITTIMEERROR") == 0)
 8008534:	4912      	ldr	r1, [pc, #72]	; (8008580 <NMEA_CheckAGPSMsg+0x130>)
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7f7 fe5a 	bl	80001f0 <strcmp>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <NMEA_CheckAGPSMsg+0xf6>
  {
    is_passmsg = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	60fb      	str	r3, [r7, #12]
  }
  return is_passmsg;
 8008546:	68fb      	ldr	r3, [r7, #12]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	0800faa8 	.word	0x0800faa8
 8008554:	0800fab8 	.word	0x0800fab8
 8008558:	0800fad0 	.word	0x0800fad0
 800855c:	0800faec 	.word	0x0800faec
 8008560:	0800fb04 	.word	0x0800fb04
 8008564:	0800fb1c 	.word	0x0800fb1c
 8008568:	0800fb34 	.word	0x0800fb34
 800856c:	0800fb4c 	.word	0x0800fb4c
 8008570:	0800fb64 	.word	0x0800fb64
 8008574:	0800fb7c 	.word	0x0800fb7c
 8008578:	0800fb94 	.word	0x0800fb94
 800857c:	0800fbb0 	.word	0x0800fbb0
 8008580:	0800fbc0 	.word	0x0800fbc0

08008584 <scan_utc>:
/*
 * Function that scans a string with UTC Info_t and fills all fields of a
 * UTC_Info_t struct
 */
static void scan_utc(uint8_t *pUTCStr, UTC_Info_t *pUTC)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  pUTC->utc = strtol((char *)pUTCStr,NULL,10);
 800858e:	220a      	movs	r2, #10
 8008590:	2100      	movs	r1, #0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f004 fba4 	bl	800cce0 <strtol>
 8008598:	4602      	mov	r2, r0
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	601a      	str	r2, [r3, #0]
  
  pUTC->hh = (pUTC->utc / 10000);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a16      	ldr	r2, [pc, #88]	; (80085fc <scan_utc+0x78>)
 80085a4:	fb82 1203 	smull	r1, r2, r2, r3
 80085a8:	1312      	asrs	r2, r2, #12
 80085aa:	17db      	asrs	r3, r3, #31
 80085ac:	1ad2      	subs	r2, r2, r3
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	605a      	str	r2, [r3, #4]
  pUTC->mm = (pUTC->utc - (pUTC->hh * 10000)) / 100;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	4911      	ldr	r1, [pc, #68]	; (8008600 <scan_utc+0x7c>)
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	4413      	add	r3, r2
 80085c2:	4a10      	ldr	r2, [pc, #64]	; (8008604 <scan_utc+0x80>)
 80085c4:	fb82 1203 	smull	r1, r2, r2, r3
 80085c8:	1152      	asrs	r2, r2, #5
 80085ca:	17db      	asrs	r3, r3, #31
 80085cc:	1ad2      	subs	r2, r2, r3
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	609a      	str	r2, [r3, #8]
  pUTC->ss = pUTC->utc - ((pUTC->hh * 10000) + (pUTC->mm * 100));
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f242 7110 	movw	r1, #10000	; 0x2710
 80085de:	fb03 f101 	mul.w	r1, r3, r1
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2064      	movs	r0, #100	; 0x64
 80085e8:	fb00 f303 	mul.w	r3, r0, r3
 80085ec:	440b      	add	r3, r1
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	60da      	str	r2, [r3, #12]
  
  return;
 80085f4:	bf00      	nop
}
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	68db8bad 	.word	0x68db8bad
 8008600:	ffffd8f0 	.word	0xffffd8f0
 8008604:	51eb851f 	.word	0x51eb851f

08008608 <nmea_checksum>:

/*
 * Function that executes the 'OR' operation between first two elements of a buffer
 */
static uint32_t nmea_checksum(const uint8_t buf[])
{
 8008608:	b590      	push	{r4, r7, lr}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  return ((char2int(buf[0]) << 4) | (char2int(buf[1])));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f001 fe23 	bl	800a260 <char2int>
 800861a:	4603      	mov	r3, r0
 800861c:	011c      	lsls	r4, r3, #4
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3301      	adds	r3, #1
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	4618      	mov	r0, r3
 8008626:	f001 fe1b 	bl	800a260 <char2int>
 800862a:	4603      	mov	r3, r0
 800862c:	4323      	orrs	r3, r4
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	bd90      	pop	{r4, r7, pc}

08008636 <digit2int>:

/*
 * Function that converts a sequence of digits from a buffer in an integer
 */
static uint32_t digit2int(uint8_t buf[], int32_t offset, Decimal_t d)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b08a      	sub	sp, #40	; 0x28
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	4613      	mov	r3, r2
 8008642:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = (unsigned char)0;
 8008644:	2300      	movs	r3, #0
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t hu, hd, hc, hm;

  switch (d)
 8008648:	79fb      	ldrb	r3, [r7, #7]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d049      	beq.n	80086e2 <digit2int+0xac>
 800864e:	2b02      	cmp	r3, #2
 8008650:	dc7e      	bgt.n	8008750 <digit2int+0x11a>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <digit2int+0x26>
 8008656:	2b01      	cmp	r3, #1
 8008658:	d01b      	beq.n	8008692 <digit2int+0x5c>
        
    ret = (hm * (unsigned)1000) + (hc * (unsigned)100) + (hd * (unsigned)10) + hu;
    break;
    
  default:
    break;
 800865a:	e079      	b.n	8008750 <digit2int+0x11a>
    hd = char2int(buf[offset]);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4413      	add	r3, r2
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f001 fdfb 	bl	800a260 <char2int>
 800866a:	61b8      	str	r0, [r7, #24]
    hu = char2int(buf[offset+1]);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3301      	adds	r3, #1
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4413      	add	r3, r2
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	4618      	mov	r0, r3
 8008678:	f001 fdf2 	bl	800a260 <char2int>
 800867c:	6178      	str	r0, [r7, #20]
    ret = (hd * (unsigned)10) + hu;
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	4613      	mov	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4413      	add	r3, r2
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	461a      	mov	r2, r3
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	4413      	add	r3, r2
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8008690:	e05f      	b.n	8008752 <digit2int+0x11c>
    hc = char2int(buf[offset]);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fde0 	bl	800a260 <char2int>
 80086a0:	61f8      	str	r0, [r7, #28]
    hd = char2int(buf[offset+1]);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	3301      	adds	r3, #1
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f001 fdd7 	bl	800a260 <char2int>
 80086b2:	61b8      	str	r0, [r7, #24]
    hu = char2int(buf[offset+2]);
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3302      	adds	r3, #2
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 fdce 	bl	800a260 <char2int>
 80086c4:	6178      	str	r0, [r7, #20]
    ret = (hc * (unsigned)100) + (hd * (unsigned)10) + hu;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	2264      	movs	r2, #100	; 0x64
 80086ca:	fb02 f103 	mul.w	r1, r2, r3
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	005b      	lsls	r3, r3, #1
 80086d8:	440b      	add	r3, r1
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	4413      	add	r3, r2
 80086de:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80086e0:	e037      	b.n	8008752 <digit2int+0x11c>
    hm = char2int(buf[offset]);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4413      	add	r3, r2
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 fdb8 	bl	800a260 <char2int>
 80086f0:	6238      	str	r0, [r7, #32]
    hc = char2int(buf[offset+1]);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	3301      	adds	r3, #1
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 fdaf 	bl	800a260 <char2int>
 8008702:	61f8      	str	r0, [r7, #28]
    hd = char2int(buf[offset+2]);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3302      	adds	r3, #2
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f001 fda6 	bl	800a260 <char2int>
 8008714:	61b8      	str	r0, [r7, #24]
    hu = char2int(buf[offset+3]);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3303      	adds	r3, #3
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4413      	add	r3, r2
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f001 fd9d 	bl	800a260 <char2int>
 8008726:	6178      	str	r0, [r7, #20]
    ret = (hm * (unsigned)1000) + (hc * (unsigned)100) + (hd * (unsigned)10) + hu;
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800872e:	fb03 f202 	mul.w	r2, r3, r2
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	2164      	movs	r1, #100	; 0x64
 8008736:	fb01 f303 	mul.w	r3, r1, r3
 800873a:	18d1      	adds	r1, r2, r3
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	4613      	mov	r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	005b      	lsls	r3, r3, #1
 8008746:	440b      	add	r3, r1
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	4413      	add	r3, r2
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800874e:	e000      	b.n	8008752 <digit2int+0x11c>
    break;
 8008750:	bf00      	nop
 }

 return ret;
 8008752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008754:	4618      	mov	r0, r3
 8008756:	3728      	adds	r7, #40	; 0x28
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <scan_timestamp_time>:

/*
 * Function that reads time from a timestamp string
 */
static void scan_timestamp_time(uint8_t buf[], Timestamp_Info_t *pTimestamp)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  /* FORMAT: HHMMSS */
  pTimestamp->hh = digit2int(buf, 0, TENS);
 8008766:	2200      	movs	r2, #0
 8008768:	2100      	movs	r1, #0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ff63 	bl	8008636 <digit2int>
 8008770:	4602      	mov	r2, r0
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	601a      	str	r2, [r3, #0]
  pTimestamp->mm = digit2int(buf, 2, TENS);
 8008776:	2200      	movs	r2, #0
 8008778:	2102      	movs	r1, #2
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7ff ff5b 	bl	8008636 <digit2int>
 8008780:	4602      	mov	r2, r0
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	605a      	str	r2, [r3, #4]
  pTimestamp->ss = digit2int(buf, 4, TENS);
 8008786:	2200      	movs	r2, #0
 8008788:	2104      	movs	r1, #4
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff ff53 	bl	8008636 <digit2int>
 8008790:	4602      	mov	r2, r0
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	609a      	str	r2, [r3, #8]
}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <scan_timestamp_date>:

/*
 * Function that reads date from a timestamp string
 */
static void scan_timestamp_date(uint8_t buf[], Timestamp_Info_t *pTimestamp)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
  /* FORMAT: YYYYMMDD */
  pTimestamp->year = digit2int(buf, 0, THOUSANDS);
 80087a8:	2202      	movs	r2, #2
 80087aa:	2100      	movs	r1, #0
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7ff ff42 	bl	8008636 <digit2int>
 80087b2:	4602      	mov	r2, r0
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	60da      	str	r2, [r3, #12]
  pTimestamp->month = digit2int(buf, 4, TENS);
 80087b8:	2200      	movs	r2, #0
 80087ba:	2104      	movs	r1, #4
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f7ff ff3a 	bl	8008636 <digit2int>
 80087c2:	4602      	mov	r2, r0
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	611a      	str	r2, [r3, #16]
  pTimestamp->day = digit2int(buf, 6, TENS);
 80087c8:	2200      	movs	r2, #0
 80087ca:	2106      	movs	r1, #6
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f7ff ff32 	bl	8008636 <digit2int>
 80087d2:	4602      	mov	r2, r0
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	615a      	str	r2, [r3, #20]
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <NMEA_ParseGPGGA>:

ParseStatus_t NMEA_ParseGPGGA(GPGGA_Info_t *pGPGGAInfo, uint8_t NMEA[])
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08a      	sub	sp, #40	; 0x28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 80087ea:	2300      	movs	r3, #0
 80087ec:	623b      	str	r3, [r7, #32]

  ParseStatus_t status = PARSE_FAIL;
 80087ee:	2301      	movs	r3, #1
 80087f0:	77fb      	strb	r3, [r7, #31]
  
  if(NMEA != NULL) {
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80e0 	beq.w	80089ba <NMEA_ParseGPGGA+0x1da>

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 80087fa:	2300      	movs	r3, #0
 80087fc:	77bb      	strb	r3, [r7, #30]
 80087fe:	e012      	b.n	8008826 <NMEA_ParseGPGGA+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8008800:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8008804:	4613      	mov	r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	4413      	add	r3, r2
 800880a:	011b      	lsls	r3, r3, #4
 800880c:	4a6d      	ldr	r2, [pc, #436]	; (80089c4 <NMEA_ParseGPGGA+0x1e4>)
 800880e:	4413      	add	r3, r2
 8008810:	2230      	movs	r2, #48	; 0x30
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f002 fa80 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800881a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800881e:	b2db      	uxtb	r3, r3
 8008820:	3301      	adds	r3, #1
 8008822:	b2db      	uxtb	r3, r3
 8008824:	77bb      	strb	r3, [r7, #30]
 8008826:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800882a:	2b2f      	cmp	r3, #47	; 0x2f
 800882c:	dde8      	ble.n	8008800 <NMEA_ParseGPGGA+0x20>
    }

    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800882e:	2300      	movs	r3, #0
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	2300      	movs	r3, #0
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	e040      	b.n	80088be <NMEA_ParseGPGGA+0xde>
    {
      new_field = 0;
 800883c:	2300      	movs	r3, #0
 800883e:	627b      	str	r3, [r7, #36]	; 0x24

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4413      	add	r3, r2
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b2c      	cmp	r3, #44	; 0x2c
 800884a:	d005      	beq.n	8008858 <NMEA_ParseGPGGA+0x78>
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	4413      	add	r3, r2
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b2a      	cmp	r3, #42	; 0x2a
 8008856:	d11a      	bne.n	800888e <NMEA_ParseGPGGA+0xae>
      {
        app[j][k] = (uint8_t)'\0';
 8008858:	495a      	ldr	r1, [pc, #360]	; (80089c4 <NMEA_ParseGPGGA+0x1e4>)
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	4613      	mov	r3, r2
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	4413      	add	r3, r2
 8008862:	011b      	lsls	r3, r3, #4
 8008864:	18ca      	adds	r2, r1, r3
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	4413      	add	r3, r2
 800886a:	2200      	movs	r2, #0
 800886c:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800886e:	2301      	movs	r3, #1
 8008870:	627b      	str	r3, [r7, #36]	; 0x24

        if (strcmp((char *)app[0], "$GNGGA") == 0) {
 8008872:	4955      	ldr	r1, [pc, #340]	; (80089c8 <NMEA_ParseGPGGA+0x1e8>)
 8008874:	4853      	ldr	r0, [pc, #332]	; (80089c4 <NMEA_ParseGPGGA+0x1e4>)
 8008876:	f7f7 fcbb 	bl	80001f0 <strcmp>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d125      	bne.n	80088cc <NMEA_ParseGPGGA+0xec>
          j++;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	3301      	adds	r3, #1
 8008884:	617b      	str	r3, [r7, #20]
          k = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	613b      	str	r3, [r7, #16]
          valid_msg = TRUE;
 800888a:	2301      	movs	r3, #1
 800888c:	623b      	str	r3, [r7, #32]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	d111      	bne.n	80088b8 <NMEA_ParseGPGGA+0xd8>
      {
        app[j][k] = NMEA[i];
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	4413      	add	r3, r2
 800889a:	7818      	ldrb	r0, [r3, #0]
 800889c:	4949      	ldr	r1, [pc, #292]	; (80089c4 <NMEA_ParseGPGGA+0x1e4>)
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	4613      	mov	r3, r2
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	4413      	add	r3, r2
 80088a6:	011b      	lsls	r3, r3, #4
 80088a8:	18ca      	adds	r2, r1, r3
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	4413      	add	r3, r2
 80088ae:	4602      	mov	r2, r0
 80088b0:	701a      	strb	r2, [r3, #0]
        k++;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	3301      	adds	r3, #1
 80088b6:	613b      	str	r3, [r7, #16]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	3301      	adds	r3, #1
 80088bc:	61bb      	str	r3, [r7, #24]
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	4413      	add	r3, r2
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b0a      	cmp	r3, #10
 80088c8:	d1b8      	bne.n	800883c <NMEA_ParseGPGGA+0x5c>
 80088ca:	e000      	b.n	80088ce <NMEA_ParseGPGGA+0xee>
          break;
 80088cc:	bf00      	nop
      }
    }

    if (valid_msg == TRUE)
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d172      	bne.n	80089ba <NMEA_ParseGPGGA+0x1da>
    {
      int32_t valid = strtol((char *)app[6], NULL, BASE);
 80088d4:	220a      	movs	r2, #10
 80088d6:	2100      	movs	r1, #0
 80088d8:	483c      	ldr	r0, [pc, #240]	; (80089cc <NMEA_ParseGPGGA+0x1ec>)
 80088da:	f004 fa01 	bl	800cce0 <strtol>
 80088de:	60f8      	str	r0, [r7, #12]
      if((valid == 1) || (valid == 0))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d002      	beq.n	80088ec <NMEA_ParseGPGGA+0x10c>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <NMEA_ParseGPGGA+0x116>
      {
        pGPGGAInfo->valid = (uint8_t)valid;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }

      scan_utc(app[1], &pGPGGAInfo->utc);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4619      	mov	r1, r3
 80088fa:	4835      	ldr	r0, [pc, #212]	; (80089d0 <NMEA_ParseGPGGA+0x1f0>)
 80088fc:	f7ff fe42 	bl	8008584 <scan_utc>
      pGPGGAInfo->xyz.lat = strtod((char *)app[2], NULL);
 8008900:	2100      	movs	r1, #0
 8008902:	4834      	ldr	r0, [pc, #208]	; (80089d4 <NMEA_ParseGPGGA+0x1f4>)
 8008904:	f004 f900 	bl	800cb08 <strtod>
 8008908:	eeb0 7a40 	vmov.f32	s14, s0
 800890c:	eef0 7a60 	vmov.f32	s15, s1
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	ed83 7b04 	vstr	d7, [r3, #16]
      pGPGGAInfo->xyz.ns = *((uint8_t*)app[3]);
 8008916:	4b2b      	ldr	r3, [pc, #172]	; (80089c4 <NMEA_ParseGPGGA+0x1e4>)
 8008918:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      pGPGGAInfo->xyz.lon = strtod((char *)app[4], NULL);
 8008922:	2100      	movs	r1, #0
 8008924:	482c      	ldr	r0, [pc, #176]	; (80089d8 <NMEA_ParseGPGGA+0x1f8>)
 8008926:	f004 f8ef 	bl	800cb08 <strtod>
 800892a:	eeb0 7a40 	vmov.f32	s14, s0
 800892e:	eef0 7a60 	vmov.f32	s15, s1
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	ed83 7b06 	vstr	d7, [r3, #24]
      pGPGGAInfo->xyz.ew = *((uint8_t*)app[5]);
 8008938:	4b22      	ldr	r3, [pc, #136]	; (80089c4 <NMEA_ParseGPGGA+0x1e4>)
 800893a:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      pGPGGAInfo->sats = strtol((char *)app[7], NULL, BASE);
 8008944:	220a      	movs	r2, #10
 8008946:	2100      	movs	r1, #0
 8008948:	4824      	ldr	r0, [pc, #144]	; (80089dc <NMEA_ParseGPGGA+0x1fc>)
 800894a:	f004 f9c9 	bl	800cce0 <strtol>
 800894e:	4602      	mov	r2, r0
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	635a      	str	r2, [r3, #52]	; 0x34
      pGPGGAInfo->acc = strtof((char *)app[8], NULL);
 8008954:	2100      	movs	r1, #0
 8008956:	4822      	ldr	r0, [pc, #136]	; (80089e0 <NMEA_ParseGPGGA+0x200>)
 8008958:	f004 f8e2 	bl	800cb20 <strtof>
 800895c:	eef0 7a40 	vmov.f32	s15, s0
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
      pGPGGAInfo->xyz.alt = strtof((char *)app[9], NULL);
 8008966:	2100      	movs	r1, #0
 8008968:	481e      	ldr	r0, [pc, #120]	; (80089e4 <NMEA_ParseGPGGA+0x204>)
 800896a:	f004 f8d9 	bl	800cb20 <strtof>
 800896e:	ee10 3a10 	vmov	r3, s0
 8008972:	4618      	mov	r0, r3
 8008974:	f7f7 fe08 	bl	8000588 <__aeabi_f2d>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	e9c1 2308 	strd	r2, r3, [r1, #32]
      pGPGGAInfo->xyz.mis = *((uint8_t*)app[10]);
 8008982:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <NMEA_ParseGPGGA+0x1e4>)
 8008984:	f893 21e0 	ldrb.w	r2, [r3, #480]	; 0x1e0
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
      pGPGGAInfo->geoid.height = strtol((char *)app[11], NULL, BASE);
 800898e:	220a      	movs	r2, #10
 8008990:	2100      	movs	r1, #0
 8008992:	4815      	ldr	r0, [pc, #84]	; (80089e8 <NMEA_ParseGPGGA+0x208>)
 8008994:	f004 f9a4 	bl	800cce0 <strtol>
 8008998:	4602      	mov	r2, r0
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	63da      	str	r2, [r3, #60]	; 0x3c
      pGPGGAInfo->geoid.mis = *((uint8_t*)app[12]);
 800899e:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <NMEA_ParseGPGGA+0x1e4>)
 80089a0:	f893 2240 	ldrb.w	r2, [r3, #576]	; 0x240
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      // This field is reserved
      //pGPGGAInfo->update = strtol((char *)app[13], NULL, BASE);
      pGPGGAInfo->checksum = nmea_checksum(app[15]);
 80089aa:	4810      	ldr	r0, [pc, #64]	; (80089ec <NMEA_ParseGPGGA+0x20c>)
 80089ac:	f7ff fe2c 	bl	8008608 <nmea_checksum>
 80089b0:	4602      	mov	r2, r0
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	649a      	str	r2, [r3, #72]	; 0x48
      
      status = PARSE_SUCC;
 80089b6:	2300      	movs	r3, #0
 80089b8:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 80089ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3728      	adds	r7, #40	; 0x28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	200050c0 	.word	0x200050c0
 80089c8:	0800fbd4 	.word	0x0800fbd4
 80089cc:	200051e0 	.word	0x200051e0
 80089d0:	200050f0 	.word	0x200050f0
 80089d4:	20005120 	.word	0x20005120
 80089d8:	20005180 	.word	0x20005180
 80089dc:	20005210 	.word	0x20005210
 80089e0:	20005240 	.word	0x20005240
 80089e4:	20005270 	.word	0x20005270
 80089e8:	200052d0 	.word	0x200052d0
 80089ec:	20005390 	.word	0x20005390

080089f0 <NMEA_ParseGNS>:

ParseStatus_t NMEA_ParseGNS(GNS_Info_t *pGNSInfo, uint8_t NMEA[])
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 80089fa:	2300      	movs	r3, #0
 80089fc:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 80089fe:	2301      	movs	r3, #1
 8008a00:	75fb      	strb	r3, [r7, #23]
  
  if(NMEA != NULL) {
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 80e2 	beq.w	8008bce <NMEA_ParseGNS+0x1de>

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	75bb      	strb	r3, [r7, #22]
 8008a0e:	e012      	b.n	8008a36 <NMEA_ParseGNS+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8008a10:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8008a14:	4613      	mov	r3, r2
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	4413      	add	r3, r2
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	4a6e      	ldr	r2, [pc, #440]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008a1e:	4413      	add	r3, r2
 8008a20:	2230      	movs	r2, #48	; 0x30
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f002 f978 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8008a2a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	3301      	adds	r3, #1
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	75bb      	strb	r3, [r7, #22]
 8008a36:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008a3a:	2b2f      	cmp	r3, #47	; 0x2f
 8008a3c:	dde8      	ble.n	8008a10 <NMEA_ParseGNS+0x20>
    }

    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]
 8008a46:	2300      	movs	r3, #0
 8008a48:	60bb      	str	r3, [r7, #8]
 8008a4a:	e03f      	b.n	8008acc <NMEA_ParseGNS+0xdc>
    {
      new_field = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	4413      	add	r3, r2
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	2b2c      	cmp	r3, #44	; 0x2c
 8008a5a:	d005      	beq.n	8008a68 <NMEA_ParseGNS+0x78>
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	683a      	ldr	r2, [r7, #0]
 8008a60:	4413      	add	r3, r2
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	2b2a      	cmp	r3, #42	; 0x2a
 8008a66:	d119      	bne.n	8008a9c <NMEA_ParseGNS+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 8008a68:	495b      	ldr	r1, [pc, #364]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	005b      	lsls	r3, r3, #1
 8008a70:	4413      	add	r3, r2
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	18ca      	adds	r2, r1, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	4413      	add	r3, r2
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckGNSMsg((char *)app[0]) == 0)
 8008a82:	4855      	ldr	r0, [pc, #340]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008a84:	f7ff fa58 	bl	8007f38 <NMEA_CheckGNSMsg>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d125      	bne.n	8008ada <NMEA_ParseGNS+0xea>
        {
          j++;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
          k = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0) {
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d111      	bne.n	8008ac6 <NMEA_ParseGNS+0xd6>
        app[j][k] = NMEA[i];
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	7818      	ldrb	r0, [r3, #0]
 8008aaa:	494b      	ldr	r1, [pc, #300]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	4413      	add	r3, r2
 8008ab4:	011b      	lsls	r3, r3, #4
 8008ab6:	18ca      	adds	r2, r1, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4413      	add	r3, r2
 8008abc:	4602      	mov	r2, r0
 8008abe:	701a      	strb	r2, [r3, #0]
        k++;
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60bb      	str	r3, [r7, #8]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	2b0a      	cmp	r3, #10
 8008ad6:	d1b9      	bne.n	8008a4c <NMEA_ParseGNS+0x5c>
 8008ad8:	e000      	b.n	8008adc <NMEA_ParseGNS+0xec>
          break;
 8008ada:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d175      	bne.n	8008bce <NMEA_ParseGNS+0x1de>
    {
      (void)strncpy((char *)pGNSInfo->constellation, (char *)app[0], MAX_STR_LEN);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	493c      	ldr	r1, [pc, #240]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f003 f9d2 	bl	800be92 <strncpy>
      scan_utc(app[1], &pGNSInfo->utc);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3320      	adds	r3, #32
 8008af2:	4619      	mov	r1, r3
 8008af4:	4839      	ldr	r0, [pc, #228]	; (8008bdc <NMEA_ParseGNS+0x1ec>)
 8008af6:	f7ff fd45 	bl	8008584 <scan_utc>
      pGNSInfo->xyz.lat = strtod((char *)app[2], NULL);
 8008afa:	2100      	movs	r1, #0
 8008afc:	4838      	ldr	r0, [pc, #224]	; (8008be0 <NMEA_ParseGNS+0x1f0>)
 8008afe:	f004 f803 	bl	800cb08 <strtod>
 8008b02:	eeb0 7a40 	vmov.f32	s14, s0
 8008b06:	eef0 7a60 	vmov.f32	s15, s1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
      pGNSInfo->xyz.ns = *((uint8_t*)app[3]);
 8008b10:	4b31      	ldr	r3, [pc, #196]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008b12:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      pGNSInfo->xyz.lon = strtod((char *)app[4], NULL);
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4831      	ldr	r0, [pc, #196]	; (8008be4 <NMEA_ParseGNS+0x1f4>)
 8008b20:	f003 fff2 	bl	800cb08 <strtod>
 8008b24:	eeb0 7a40 	vmov.f32	s14, s0
 8008b28:	eef0 7a60 	vmov.f32	s15, s1
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
      pGNSInfo->xyz.ew = *((uint8_t*)app[5]);
 8008b32:	4b29      	ldr	r3, [pc, #164]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008b34:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
      pGNSInfo->gps_mode = *((uint8_t*)app[6]);
 8008b3e:	4b26      	ldr	r3, [pc, #152]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008b40:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      pGNSInfo->glonass_mode = *((uint8_t*)app[7]);
 8008b4a:	4b23      	ldr	r3, [pc, #140]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008b4c:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      pGNSInfo->sats = strtol((char *)app[8], NULL, BASE);
 8008b56:	220a      	movs	r2, #10
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4823      	ldr	r0, [pc, #140]	; (8008be8 <NMEA_ParseGNS+0x1f8>)
 8008b5c:	f004 f8c0 	bl	800cce0 <strtol>
 8008b60:	4602      	mov	r2, r0
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	655a      	str	r2, [r3, #84]	; 0x54
      pGNSInfo->hdop = strtof((char *)app[9], NULL);
 8008b66:	2100      	movs	r1, #0
 8008b68:	4820      	ldr	r0, [pc, #128]	; (8008bec <NMEA_ParseGNS+0x1fc>)
 8008b6a:	f003 ffd9 	bl	800cb20 <strtof>
 8008b6e:	eef0 7a40 	vmov.f32	s15, s0
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      pGNSInfo->xyz.alt = strtof((char *)app[10], NULL);
 8008b78:	2100      	movs	r1, #0
 8008b7a:	481d      	ldr	r0, [pc, #116]	; (8008bf0 <NMEA_ParseGNS+0x200>)
 8008b7c:	f003 ffd0 	bl	800cb20 <strtof>
 8008b80:	ee10 3a10 	vmov	r3, s0
 8008b84:	4618      	mov	r0, r3
 8008b86:	f7f7 fcff 	bl	8000588 <__aeabi_f2d>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
      pGNSInfo->geo_sep = strtof((char *)app[11], NULL);
 8008b94:	2100      	movs	r1, #0
 8008b96:	4817      	ldr	r0, [pc, #92]	; (8008bf4 <NMEA_ParseGNS+0x204>)
 8008b98:	f003 ffc2 	bl	800cb20 <strtof>
 8008b9c:	eef0 7a40 	vmov.f32	s15, s0
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
      pGNSInfo->dgnss_age = *((uint8_t*)app[12]);
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008ba8:	f893 2240 	ldrb.w	r2, [r3, #576]	; 0x240
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      pGNSInfo->dgnss_ref = *((uint8_t*)app[13]);
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <NMEA_ParseGNS+0x1e8>)
 8008bb4:	f893 2270 	ldrb.w	r2, [r3, #624]	; 0x270
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      pGNSInfo->checksum = nmea_checksum(app[14]);
 8008bbe:	480e      	ldr	r0, [pc, #56]	; (8008bf8 <NMEA_ParseGNS+0x208>)
 8008bc0:	f7ff fd22 	bl	8008608 <nmea_checksum>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	665a      	str	r2, [r3, #100]	; 0x64

      status = PARSE_SUCC;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3720      	adds	r7, #32
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	200050c0 	.word	0x200050c0
 8008bdc:	200050f0 	.word	0x200050f0
 8008be0:	20005120 	.word	0x20005120
 8008be4:	20005180 	.word	0x20005180
 8008be8:	20005240 	.word	0x20005240
 8008bec:	20005270 	.word	0x20005270
 8008bf0:	200052a0 	.word	0x200052a0
 8008bf4:	200052d0 	.word	0x200052d0
 8008bf8:	20005360 	.word	0x20005360

08008bfc <NMEA_ParseGPGST>:
  
ParseStatus_t NMEA_ParseGPGST(GPGST_Info_t *pGPGSTInfo, uint8_t NMEA[])
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
  
  if(NMEA != NULL) {
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 80b9 	beq.w	8008d88 <NMEA_ParseGPGST+0x18c>
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8008c16:	2300      	movs	r3, #0
 8008c18:	75bb      	strb	r3, [r7, #22]
 8008c1a:	e012      	b.n	8008c42 <NMEA_ParseGPGST+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8008c1c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8008c20:	4613      	mov	r3, r2
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	4413      	add	r3, r2
 8008c26:	011b      	lsls	r3, r3, #4
 8008c28:	4a5a      	ldr	r2, [pc, #360]	; (8008d94 <NMEA_ParseGPGST+0x198>)
 8008c2a:	4413      	add	r3, r2
 8008c2c:	2230      	movs	r2, #48	; 0x30
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f002 f872 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8008c36:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	75bb      	strb	r3, [r7, #22]
 8008c42:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008c46:	2b2f      	cmp	r3, #47	; 0x2f
 8008c48:	dde8      	ble.n	8008c1c <NMEA_ParseGPGST+0x20>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	613b      	str	r3, [r7, #16]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
 8008c52:	2300      	movs	r3, #0
 8008c54:	60bb      	str	r3, [r7, #8]
 8008c56:	e040      	b.n	8008cda <NMEA_ParseGPGST+0xde>
    {
      new_field = 0;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	683a      	ldr	r2, [r7, #0]
 8008c60:	4413      	add	r3, r2
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b2c      	cmp	r3, #44	; 0x2c
 8008c66:	d005      	beq.n	8008c74 <NMEA_ParseGPGST+0x78>
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	683a      	ldr	r2, [r7, #0]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	2b2a      	cmp	r3, #42	; 0x2a
 8008c72:	d11a      	bne.n	8008caa <NMEA_ParseGPGST+0xae>
      {
        app[j][k] = (uint8_t)'\0';
 8008c74:	4947      	ldr	r1, [pc, #284]	; (8008d94 <NMEA_ParseGPGST+0x198>)
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	005b      	lsls	r3, r3, #1
 8008c7c:	4413      	add	r3, r2
 8008c7e:	011b      	lsls	r3, r3, #4
 8008c80:	18ca      	adds	r2, r1, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	4413      	add	r3, r2
 8008c86:	2200      	movs	r2, #0
 8008c88:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	61fb      	str	r3, [r7, #28]
        
        if (strcmp((char *)app[0], "$GPGST") == 0)
 8008c8e:	4942      	ldr	r1, [pc, #264]	; (8008d98 <NMEA_ParseGPGST+0x19c>)
 8008c90:	4840      	ldr	r0, [pc, #256]	; (8008d94 <NMEA_ParseGPGST+0x198>)
 8008c92:	f7f7 faad 	bl	80001f0 <strcmp>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d125      	bne.n	8008ce8 <NMEA_ParseGPGST+0xec>
        {
          j++;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	60fb      	str	r3, [r7, #12]
          k = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d111      	bne.n	8008cd4 <NMEA_ParseGPGST+0xd8>
      {
        app[j][k] = NMEA[i];
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	7818      	ldrb	r0, [r3, #0]
 8008cb8:	4936      	ldr	r1, [pc, #216]	; (8008d94 <NMEA_ParseGPGST+0x198>)
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	4413      	add	r3, r2
 8008cc2:	011b      	lsls	r3, r3, #4
 8008cc4:	18ca      	adds	r2, r1, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	4413      	add	r3, r2
 8008cca:	4602      	mov	r2, r0
 8008ccc:	701a      	strb	r2, [r3, #0]
        k++;
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	3301      	adds	r3, #1
 8008cd2:	60bb      	str	r3, [r7, #8]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	613b      	str	r3, [r7, #16]
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	683a      	ldr	r2, [r7, #0]
 8008cde:	4413      	add	r3, r2
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b0a      	cmp	r3, #10
 8008ce4:	d1b8      	bne.n	8008c58 <NMEA_ParseGPGST+0x5c>
 8008ce6:	e000      	b.n	8008cea <NMEA_ParseGPGST+0xee>
          break;
 8008ce8:	bf00      	nop
      }
    }  
    
    if (valid_msg == TRUE)
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d14b      	bne.n	8008d88 <NMEA_ParseGPGST+0x18c>
    {         
      scan_utc(app[1], &pGPGSTInfo->utc);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4829      	ldr	r0, [pc, #164]	; (8008d9c <NMEA_ParseGPGST+0x1a0>)
 8008cf6:	f7ff fc45 	bl	8008584 <scan_utc>
      pGPGSTInfo->EHPE = strtof((char *)app[2], NULL);
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	4828      	ldr	r0, [pc, #160]	; (8008da0 <NMEA_ParseGPGST+0x1a4>)
 8008cfe:	f003 ff0f 	bl	800cb20 <strtof>
 8008d02:	eef0 7a40 	vmov.f32	s15, s0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	edc3 7a04 	vstr	s15, [r3, #16]
      pGPGSTInfo->semi_major_dev = strtof((char *)app[3], NULL);
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4825      	ldr	r0, [pc, #148]	; (8008da4 <NMEA_ParseGPGST+0x1a8>)
 8008d10:	f003 ff06 	bl	800cb20 <strtof>
 8008d14:	eef0 7a40 	vmov.f32	s15, s0
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	edc3 7a05 	vstr	s15, [r3, #20]
      pGPGSTInfo->semi_minor_dev = strtof((char *)app[4], NULL);
 8008d1e:	2100      	movs	r1, #0
 8008d20:	4821      	ldr	r0, [pc, #132]	; (8008da8 <NMEA_ParseGPGST+0x1ac>)
 8008d22:	f003 fefd 	bl	800cb20 <strtof>
 8008d26:	eef0 7a40 	vmov.f32	s15, s0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	edc3 7a06 	vstr	s15, [r3, #24]
      pGPGSTInfo->semi_major_angle = strtof((char *)app[5], NULL);
 8008d30:	2100      	movs	r1, #0
 8008d32:	481e      	ldr	r0, [pc, #120]	; (8008dac <NMEA_ParseGPGST+0x1b0>)
 8008d34:	f003 fef4 	bl	800cb20 <strtof>
 8008d38:	eef0 7a40 	vmov.f32	s15, s0
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	edc3 7a07 	vstr	s15, [r3, #28]
      pGPGSTInfo->lat_err_dev = strtof((char *)app[6], NULL);
 8008d42:	2100      	movs	r1, #0
 8008d44:	481a      	ldr	r0, [pc, #104]	; (8008db0 <NMEA_ParseGPGST+0x1b4>)
 8008d46:	f003 feeb 	bl	800cb20 <strtof>
 8008d4a:	eef0 7a40 	vmov.f32	s15, s0
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	edc3 7a08 	vstr	s15, [r3, #32]
      pGPGSTInfo->lon_err_dev = strtof((char *)app[7], NULL);
 8008d54:	2100      	movs	r1, #0
 8008d56:	4817      	ldr	r0, [pc, #92]	; (8008db4 <NMEA_ParseGPGST+0x1b8>)
 8008d58:	f003 fee2 	bl	800cb20 <strtof>
 8008d5c:	eef0 7a40 	vmov.f32	s15, s0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
      pGPGSTInfo->alt_err_dev = strtof((char *)app[8], NULL);
 8008d66:	2100      	movs	r1, #0
 8008d68:	4813      	ldr	r0, [pc, #76]	; (8008db8 <NMEA_ParseGPGST+0x1bc>)
 8008d6a:	f003 fed9 	bl	800cb20 <strtof>
 8008d6e:	eef0 7a40 	vmov.f32	s15, s0
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
      pGPGSTInfo->checksum = nmea_checksum(app[9]);
 8008d78:	4810      	ldr	r0, [pc, #64]	; (8008dbc <NMEA_ParseGPGST+0x1c0>)
 8008d7a:	f7ff fc45 	bl	8008608 <nmea_checksum>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	62da      	str	r2, [r3, #44]	; 0x2c

      status = PARSE_SUCC;
 8008d84:	2300      	movs	r3, #0
 8008d86:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	200050c0 	.word	0x200050c0
 8008d98:	0800fbdc 	.word	0x0800fbdc
 8008d9c:	200050f0 	.word	0x200050f0
 8008da0:	20005120 	.word	0x20005120
 8008da4:	20005150 	.word	0x20005150
 8008da8:	20005180 	.word	0x20005180
 8008dac:	200051b0 	.word	0x200051b0
 8008db0:	200051e0 	.word	0x200051e0
 8008db4:	20005210 	.word	0x20005210
 8008db8:	20005240 	.word	0x20005240
 8008dbc:	20005270 	.word	0x20005270

08008dc0 <NMEA_ParseGPRMC>:

ParseStatus_t NMEA_ParseGPRMC(GPRMC_Info_t *pGPRMCInfo, uint8_t NMEA[])
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	75fb      	strb	r3, [r7, #23]
  
  if(NMEA != NULL)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80ca 	beq.w	8008f6e <NMEA_ParseGPRMC+0x1ae>
  {
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75bb      	strb	r3, [r7, #22]
 8008dde:	e012      	b.n	8008e06 <NMEA_ParseGPRMC+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8008de0:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8008de4:	4613      	mov	r3, r2
 8008de6:	005b      	lsls	r3, r3, #1
 8008de8:	4413      	add	r3, r2
 8008dea:	011b      	lsls	r3, r3, #4
 8008dec:	4a62      	ldr	r2, [pc, #392]	; (8008f78 <NMEA_ParseGPRMC+0x1b8>)
 8008dee:	4413      	add	r3, r2
 8008df0:	2230      	movs	r2, #48	; 0x30
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f001 ff90 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8008dfa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	3301      	adds	r3, #1
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	75bb      	strb	r3, [r7, #22]
 8008e06:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8008e0a:	2b2f      	cmp	r3, #47	; 0x2f
 8008e0c:	dde8      	ble.n	8008de0 <NMEA_ParseGPRMC+0x20>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8008e0e:	2300      	movs	r3, #0
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	2300      	movs	r3, #0
 8008e18:	60bb      	str	r3, [r7, #8]
 8008e1a:	e040      	b.n	8008e9e <NMEA_ParseGPRMC+0xde>
    {
      new_field = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	683a      	ldr	r2, [r7, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b2c      	cmp	r3, #44	; 0x2c
 8008e2a:	d005      	beq.n	8008e38 <NMEA_ParseGPRMC+0x78>
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	4413      	add	r3, r2
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b2a      	cmp	r3, #42	; 0x2a
 8008e36:	d11a      	bne.n	8008e6e <NMEA_ParseGPRMC+0xae>
      {
        app[j][k] = (uint8_t)'\0';
 8008e38:	494f      	ldr	r1, [pc, #316]	; (8008f78 <NMEA_ParseGPRMC+0x1b8>)
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4613      	mov	r3, r2
 8008e3e:	005b      	lsls	r3, r3, #1
 8008e40:	4413      	add	r3, r2
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	18ca      	adds	r2, r1, r3
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	4413      	add	r3, r2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
        
        if (strcmp((char *)app[0], "$GNRMC") == 0)
 8008e52:	494a      	ldr	r1, [pc, #296]	; (8008f7c <NMEA_ParseGPRMC+0x1bc>)
 8008e54:	4848      	ldr	r0, [pc, #288]	; (8008f78 <NMEA_ParseGPRMC+0x1b8>)
 8008e56:	f7f7 f9cb 	bl	80001f0 <strcmp>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d125      	bne.n	8008eac <NMEA_ParseGPRMC+0xec>
        {
          j++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
          k = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d111      	bne.n	8008e98 <NMEA_ParseGPRMC+0xd8>
      {
        app[j][k] = NMEA[i];
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4413      	add	r3, r2
 8008e7a:	7818      	ldrb	r0, [r3, #0]
 8008e7c:	493e      	ldr	r1, [pc, #248]	; (8008f78 <NMEA_ParseGPRMC+0x1b8>)
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4613      	mov	r3, r2
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	4413      	add	r3, r2
 8008e86:	011b      	lsls	r3, r3, #4
 8008e88:	18ca      	adds	r2, r1, r3
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	4602      	mov	r2, r0
 8008e90:	701a      	strb	r2, [r3, #0]
        k++;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60bb      	str	r3, [r7, #8]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	613b      	str	r3, [r7, #16]
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b0a      	cmp	r3, #10
 8008ea8:	d1b8      	bne.n	8008e1c <NMEA_ParseGPRMC+0x5c>
 8008eaa:	e000      	b.n	8008eae <NMEA_ParseGPRMC+0xee>
          break;
 8008eac:	bf00      	nop
      }
    }  
    
    if (valid_msg == TRUE)
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d15c      	bne.n	8008f6e <NMEA_ParseGPRMC+0x1ae>
    {      
      scan_utc(app[1],  &pGPRMCInfo->utc);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4831      	ldr	r0, [pc, #196]	; (8008f80 <NMEA_ParseGPRMC+0x1c0>)
 8008eba:	f7ff fb63 	bl	8008584 <scan_utc>
      pGPRMCInfo->status = *((uint8_t*)app[2]);
 8008ebe:	4b2e      	ldr	r3, [pc, #184]	; (8008f78 <NMEA_ParseGPRMC+0x1b8>)
 8008ec0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	741a      	strb	r2, [r3, #16]
      pGPRMCInfo->xyz.lat = strtod((char *)app[3], NULL);
 8008ec8:	2100      	movs	r1, #0
 8008eca:	482e      	ldr	r0, [pc, #184]	; (8008f84 <NMEA_ParseGPRMC+0x1c4>)
 8008ecc:	f003 fe1c 	bl	800cb08 <strtod>
 8008ed0:	eeb0 7a40 	vmov.f32	s14, s0
 8008ed4:	eef0 7a60 	vmov.f32	s15, s1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	ed83 7b06 	vstr	d7, [r3, #24]
      pGPRMCInfo->xyz.ns = *((uint8_t*)app[4]);
 8008ede:	4b26      	ldr	r3, [pc, #152]	; (8008f78 <NMEA_ParseGPRMC+0x1b8>)
 8008ee0:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      pGPRMCInfo->xyz.lon = strtod((char *)app[5], NULL);
 8008eea:	2100      	movs	r1, #0
 8008eec:	4826      	ldr	r0, [pc, #152]	; (8008f88 <NMEA_ParseGPRMC+0x1c8>)
 8008eee:	f003 fe0b 	bl	800cb08 <strtod>
 8008ef2:	eeb0 7a40 	vmov.f32	s14, s0
 8008ef6:	eef0 7a60 	vmov.f32	s15, s1
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	ed83 7b08 	vstr	d7, [r3, #32]
      pGPRMCInfo->xyz.ew = *((uint8_t*)app[6]);
 8008f00:	4b1d      	ldr	r3, [pc, #116]	; (8008f78 <NMEA_ParseGPRMC+0x1b8>)
 8008f02:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      pGPRMCInfo->speed = strtof((char *)app[7], NULL);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	481f      	ldr	r0, [pc, #124]	; (8008f8c <NMEA_ParseGPRMC+0x1cc>)
 8008f10:	f003 fe06 	bl	800cb20 <strtof>
 8008f14:	eef0 7a40 	vmov.f32	s15, s0
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
      pGPRMCInfo->trackgood = strtof((char *)app[8], NULL);
 8008f1e:	2100      	movs	r1, #0
 8008f20:	481b      	ldr	r0, [pc, #108]	; (8008f90 <NMEA_ParseGPRMC+0x1d0>)
 8008f22:	f003 fdfd 	bl	800cb20 <strtof>
 8008f26:	eef0 7a40 	vmov.f32	s15, s0
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
      pGPRMCInfo->date = strtol((char *)app[9], NULL, BASE);
 8008f30:	220a      	movs	r2, #10
 8008f32:	2100      	movs	r1, #0
 8008f34:	4817      	ldr	r0, [pc, #92]	; (8008f94 <NMEA_ParseGPRMC+0x1d4>)
 8008f36:	f003 fed3 	bl	800cce0 <strtol>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	641a      	str	r2, [r3, #64]	; 0x40
      pGPRMCInfo->mag_var = strtof((char *)app[10], NULL);
 8008f40:	2100      	movs	r1, #0
 8008f42:	4815      	ldr	r0, [pc, #84]	; (8008f98 <NMEA_ParseGPRMC+0x1d8>)
 8008f44:	f003 fdec 	bl	800cb20 <strtof>
 8008f48:	eef0 7a40 	vmov.f32	s15, s0
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
      pGPRMCInfo->mag_var_dir = *((uint8_t*)app[11]);
 8008f52:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <NMEA_ParseGPRMC+0x1b8>)
 8008f54:	f893 2210 	ldrb.w	r2, [r3, #528]	; 0x210
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
      /* WARNING: from received msg, it seems there is another data (app[12]) before the checksum */
      pGPRMCInfo->checksum = nmea_checksum(app[13]);
 8008f5e:	480f      	ldr	r0, [pc, #60]	; (8008f9c <NMEA_ParseGPRMC+0x1dc>)
 8008f60:	f7ff fb52 	bl	8008608 <nmea_checksum>
 8008f64:	4602      	mov	r2, r0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	64da      	str	r2, [r3, #76]	; 0x4c

      status = PARSE_SUCC;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	75fb      	strb	r3, [r7, #23]
    }
  }

  return status;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3720      	adds	r7, #32
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	200050c0 	.word	0x200050c0
 8008f7c:	0800fbe4 	.word	0x0800fbe4
 8008f80:	200050f0 	.word	0x200050f0
 8008f84:	20005150 	.word	0x20005150
 8008f88:	200051b0 	.word	0x200051b0
 8008f8c:	20005210 	.word	0x20005210
 8008f90:	20005240 	.word	0x20005240
 8008f94:	20005270 	.word	0x20005270
 8008f98:	200052a0 	.word	0x200052a0
 8008f9c:	20005330 	.word	0x20005330

08008fa0 <NMEA_ParseGSA>:
         
ParseStatus_t NMEA_ParseGSA(GSA_Info_t *pGSAInfo, uint8_t NMEA[])
{
 8008fa0:	b590      	push	{r4, r7, lr}
 8008fa2:	b08b      	sub	sp, #44	; 0x2c
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	623b      	str	r3, [r7, #32]
  
  ParseStatus_t status = PARSE_FAIL;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	77fb      	strb	r3, [r7, #31]
  
  if(NMEA != NULL)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 80c7 	beq.w	8009148 <NMEA_ParseGSA+0x1a8>
  {
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8008fba:	2300      	movs	r3, #0
 8008fbc:	77bb      	strb	r3, [r7, #30]
 8008fbe:	e012      	b.n	8008fe6 <NMEA_ParseGSA+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8008fc0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	005b      	lsls	r3, r3, #1
 8008fc8:	4413      	add	r3, r2
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	4a61      	ldr	r2, [pc, #388]	; (8009154 <NMEA_ParseGSA+0x1b4>)
 8008fce:	4413      	add	r3, r2
 8008fd0:	2230      	movs	r2, #48	; 0x30
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fea0 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8008fda:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	77bb      	strb	r3, [r7, #30]
 8008fe6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8008fea:	2b2f      	cmp	r3, #47	; 0x2f
 8008fec:	dde8      	ble.n	8008fc0 <NMEA_ParseGSA+0x20>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)(uint8_t)(uint8_t)(uint8_t)'\n'); i++)
 8008fee:	2300      	movs	r3, #0
 8008ff0:	61bb      	str	r3, [r7, #24]
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	613b      	str	r3, [r7, #16]
 8008ffa:	e03f      	b.n	800907c <NMEA_ParseGSA+0xdc>
    {
      new_field = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
      
      if ((NMEA[i] == (uint8_t)(uint8_t)(uint8_t)',') || (NMEA[i] == (uint8_t)(uint8_t)'*'))
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	4413      	add	r3, r2
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b2c      	cmp	r3, #44	; 0x2c
 800900a:	d005      	beq.n	8009018 <NMEA_ParseGSA+0x78>
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	4413      	add	r3, r2
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2b2a      	cmp	r3, #42	; 0x2a
 8009016:	d119      	bne.n	800904c <NMEA_ParseGSA+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 8009018:	494e      	ldr	r1, [pc, #312]	; (8009154 <NMEA_ParseGSA+0x1b4>)
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	4613      	mov	r3, r2
 800901e:	005b      	lsls	r3, r3, #1
 8009020:	4413      	add	r3, r2
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	18ca      	adds	r2, r1, r3
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	4413      	add	r3, r2
 800902a:	2200      	movs	r2, #0
 800902c:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800902e:	2301      	movs	r3, #1
 8009030:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (NMEA_CheckGSAMsg((char *)app[0]) == 0)
 8009032:	4848      	ldr	r0, [pc, #288]	; (8009154 <NMEA_ParseGSA+0x1b4>)
 8009034:	f7fe ffc2 	bl	8007fbc <NMEA_CheckGSAMsg>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d125      	bne.n	800908a <NMEA_ParseGSA+0xea>
        {
          j++;
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	3301      	adds	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
          k = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	613b      	str	r3, [r7, #16]
          valid_msg = TRUE;
 8009048:	2301      	movs	r3, #1
 800904a:	623b      	str	r3, [r7, #32]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	2b00      	cmp	r3, #0
 8009050:	d111      	bne.n	8009076 <NMEA_ParseGSA+0xd6>
      {
        app[j][k] = NMEA[i];
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	683a      	ldr	r2, [r7, #0]
 8009056:	4413      	add	r3, r2
 8009058:	7818      	ldrb	r0, [r3, #0]
 800905a:	493e      	ldr	r1, [pc, #248]	; (8009154 <NMEA_ParseGSA+0x1b4>)
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4613      	mov	r3, r2
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	4413      	add	r3, r2
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	18ca      	adds	r2, r1, r3
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	4413      	add	r3, r2
 800906c:	4602      	mov	r2, r0
 800906e:	701a      	strb	r2, [r3, #0]
        k++;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	3301      	adds	r3, #1
 8009074:	613b      	str	r3, [r7, #16]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)(uint8_t)(uint8_t)(uint8_t)'\n'); i++)
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	3301      	adds	r3, #1
 800907a:	61bb      	str	r3, [r7, #24]
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	4413      	add	r3, r2
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b0a      	cmp	r3, #10
 8009086:	d1b9      	bne.n	8008ffc <NMEA_ParseGSA+0x5c>
 8009088:	e000      	b.n	800908c <NMEA_ParseGSA+0xec>
          break;
 800908a:	bf00      	nop
      }
    }  
    
    if (valid_msg == TRUE)
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d15a      	bne.n	8009148 <NMEA_ParseGSA+0x1a8>
    {
      (void)strncpy((char *)pGSAInfo->constellation, (char *)app[0], MAX_STR_LEN);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	492f      	ldr	r1, [pc, #188]	; (8009154 <NMEA_ParseGSA+0x1b4>)
 8009098:	4618      	mov	r0, r3
 800909a:	f002 fefa 	bl	800be92 <strncpy>
      pGSAInfo->operating_mode = *((uint8_t*)app[1]);
 800909e:	4b2d      	ldr	r3, [pc, #180]	; (8009154 <NMEA_ParseGSA+0x1b4>)
 80090a0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f883 2020 	strb.w	r2, [r3, #32]
      pGSAInfo->current_mode = strtol((char *)app[2], NULL, BASE);
 80090aa:	220a      	movs	r2, #10
 80090ac:	2100      	movs	r1, #0
 80090ae:	482a      	ldr	r0, [pc, #168]	; (8009158 <NMEA_ParseGSA+0x1b8>)
 80090b0:	f003 fe16 	bl	800cce0 <strtol>
 80090b4:	4602      	mov	r2, r0
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	625a      	str	r2, [r3, #36]	; 0x24

      int32_t *sat_prn = pGSAInfo->sat_prn;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	3328      	adds	r3, #40	; 0x28
 80090be:	60bb      	str	r3, [r7, #8]
      for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 80090c0:	2300      	movs	r3, #0
 80090c2:	73fb      	strb	r3, [r7, #15]
 80090c4:	e019      	b.n	80090fa <NMEA_ParseGSA+0x15a>
      {
        *(&sat_prn[i]) = strtol((char *)app[3+i], NULL, BASE);
 80090c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090ca:	1cda      	adds	r2, r3, #3
 80090cc:	4613      	mov	r3, r2
 80090ce:	005b      	lsls	r3, r3, #1
 80090d0:	4413      	add	r3, r2
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	4a1f      	ldr	r2, [pc, #124]	; (8009154 <NMEA_ParseGSA+0x1b4>)
 80090d6:	1898      	adds	r0, r3, r2
 80090d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	68ba      	ldr	r2, [r7, #8]
 80090e0:	18d4      	adds	r4, r2, r3
 80090e2:	220a      	movs	r2, #10
 80090e4:	2100      	movs	r1, #0
 80090e6:	f003 fdfb 	bl	800cce0 <strtol>
 80090ea:	4603      	mov	r3, r0
 80090ec:	6023      	str	r3, [r4, #0]
      for (int8_t i = 0; i < MAX_SAT_NUM; i++)
 80090ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	3301      	adds	r3, #1
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	73fb      	strb	r3, [r7, #15]
 80090fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090fe:	2b0b      	cmp	r3, #11
 8009100:	dde1      	ble.n	80090c6 <NMEA_ParseGSA+0x126>
      }

      pGSAInfo->pdop = strtof((char *)app[15], NULL);
 8009102:	2100      	movs	r1, #0
 8009104:	4815      	ldr	r0, [pc, #84]	; (800915c <NMEA_ParseGSA+0x1bc>)
 8009106:	f003 fd0b 	bl	800cb20 <strtof>
 800910a:	eef0 7a40 	vmov.f32	s15, s0
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      pGSAInfo->hdop = strtof((char *)app[16], NULL);
 8009114:	2100      	movs	r1, #0
 8009116:	4812      	ldr	r0, [pc, #72]	; (8009160 <NMEA_ParseGSA+0x1c0>)
 8009118:	f003 fd02 	bl	800cb20 <strtof>
 800911c:	eef0 7a40 	vmov.f32	s15, s0
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
      pGSAInfo->vdop = strtof((char *)app[17], NULL);
 8009126:	2100      	movs	r1, #0
 8009128:	480e      	ldr	r0, [pc, #56]	; (8009164 <NMEA_ParseGSA+0x1c4>)
 800912a:	f003 fcf9 	bl	800cb20 <strtof>
 800912e:	eef0 7a40 	vmov.f32	s15, s0
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
      pGSAInfo->checksum = nmea_checksum(app[18]);
 8009138:	480b      	ldr	r0, [pc, #44]	; (8009168 <NMEA_ParseGSA+0x1c8>)
 800913a:	f7ff fa65 	bl	8008608 <nmea_checksum>
 800913e:	4602      	mov	r2, r0
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	665a      	str	r2, [r3, #100]	; 0x64

      status = PARSE_SUCC;
 8009144:	2300      	movs	r3, #0
 8009146:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8009148:	7ffb      	ldrb	r3, [r7, #31]
}
 800914a:	4618      	mov	r0, r3
 800914c:	372c      	adds	r7, #44	; 0x2c
 800914e:	46bd      	mov	sp, r7
 8009150:	bd90      	pop	{r4, r7, pc}
 8009152:	bf00      	nop
 8009154:	200050c0 	.word	0x200050c0
 8009158:	20005120 	.word	0x20005120
 800915c:	20005390 	.word	0x20005390
 8009160:	200053c0 	.word	0x200053c0
 8009164:	200053f0 	.word	0x200053f0
 8009168:	20005420 	.word	0x20005420

0800916c <NMEA_ParseGSV>:

ParseStatus_t NMEA_ParseGSV(GSV_Info_t *pGSVInfo, uint8_t NMEA[])
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08a      	sub	sp, #40	; 0x28
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  int8_t app_idx;
  int32_t gsv_idx = 0;
 8009176:	2300      	movs	r3, #0
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t new_field;
  BOOL valid_gsv_msg = FALSE;
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]
  
  ParseStatus_t status = PARSE_FAIL;
 800917e:	2301      	movs	r3, #1
 8009180:	76fb      	strb	r3, [r7, #27]

  if(NMEA != NULL)
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8113 	beq.w	80093b0 <NMEA_ParseGSV+0x244>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800918a:	2300      	movs	r3, #0
 800918c:	76bb      	strb	r3, [r7, #26]
 800918e:	e012      	b.n	80091b6 <NMEA_ParseGSV+0x4a>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8009190:	f997 201a 	ldrsb.w	r2, [r7, #26]
 8009194:	4613      	mov	r3, r2
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	4413      	add	r3, r2
 800919a:	011b      	lsls	r3, r3, #4
 800919c:	4a87      	ldr	r2, [pc, #540]	; (80093bc <NMEA_ParseGSV+0x250>)
 800919e:	4413      	add	r3, r2
 80091a0:	2230      	movs	r2, #48	; 0x30
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f001 fdb8 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 80091aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	3301      	adds	r3, #1
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	76bb      	strb	r3, [r7, #26]
 80091b6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80091ba:	2b2f      	cmp	r3, #47	; 0x2f
 80091bc:	dde8      	ble.n	8009190 <NMEA_ParseGSV+0x24>
    }
    
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	e03f      	b.n	800924c <NMEA_ParseGSV+0xe0>
    {
      new_field = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	623b      	str	r3, [r7, #32]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	4413      	add	r3, r2
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b2c      	cmp	r3, #44	; 0x2c
 80091da:	d005      	beq.n	80091e8 <NMEA_ParseGSV+0x7c>
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	4413      	add	r3, r2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b2a      	cmp	r3, #42	; 0x2a
 80091e6:	d119      	bne.n	800921c <NMEA_ParseGSV+0xb0>
      {
        app[j][k] = (uint8_t)'\0';
 80091e8:	4974      	ldr	r1, [pc, #464]	; (80093bc <NMEA_ParseGSV+0x250>)
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	4613      	mov	r3, r2
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	4413      	add	r3, r2
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	18ca      	adds	r2, r1, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4413      	add	r3, r2
 80091fa:	2200      	movs	r2, #0
 80091fc:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 80091fe:	2301      	movs	r3, #1
 8009200:	623b      	str	r3, [r7, #32]
        
        if (NMEA_CheckGSVMsg((char *)app[0]) == 0)
 8009202:	486e      	ldr	r0, [pc, #440]	; (80093bc <NMEA_ParseGSV+0x250>)
 8009204:	f7fe ff1c 	bl	8008040 <NMEA_CheckGSVMsg>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d125      	bne.n	800925a <NMEA_ParseGSV+0xee>
        {
          j++;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	3301      	adds	r3, #1
 8009212:	613b      	str	r3, [r7, #16]
          k = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	60fb      	str	r3, [r7, #12]
          valid_gsv_msg = TRUE;
 8009218:	2301      	movs	r3, #1
 800921a:	61fb      	str	r3, [r7, #28]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800921c:	6a3b      	ldr	r3, [r7, #32]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d111      	bne.n	8009246 <NMEA_ParseGSV+0xda>
      {
        app[j][k] = NMEA[i];
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	4413      	add	r3, r2
 8009228:	7818      	ldrb	r0, [r3, #0]
 800922a:	4964      	ldr	r1, [pc, #400]	; (80093bc <NMEA_ParseGSV+0x250>)
 800922c:	693a      	ldr	r2, [r7, #16]
 800922e:	4613      	mov	r3, r2
 8009230:	005b      	lsls	r3, r3, #1
 8009232:	4413      	add	r3, r2
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	18ca      	adds	r2, r1, r3
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	4602      	mov	r2, r0
 800923e:	701a      	strb	r2, [r3, #0]
        k++;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	3301      	adds	r3, #1
 8009244:	60fb      	str	r3, [r7, #12]
    for (int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	3301      	adds	r3, #1
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	4413      	add	r3, r2
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b0a      	cmp	r3, #10
 8009256:	d1b9      	bne.n	80091cc <NMEA_ParseGSV+0x60>
 8009258:	e000      	b.n	800925c <NMEA_ParseGSV+0xf0>
          break;
 800925a:	bf00      	nop
      }
    }

    if (valid_gsv_msg == TRUE)
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	2b01      	cmp	r3, #1
 8009260:	f040 80a6 	bne.w	80093b0 <NMEA_ParseGSV+0x244>
    {
      NMEA_ResetGSVMsg(pGSVInfo);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f7fe ff39 	bl	80080dc <NMEA_ResetGSVMsg>

      (void)strncpy((char *)pGSVInfo->constellation, (char *)app[0], MAX_STR_LEN);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2220      	movs	r2, #32
 800926e:	4953      	ldr	r1, [pc, #332]	; (80093bc <NMEA_ParseGSV+0x250>)
 8009270:	4618      	mov	r0, r3
 8009272:	f002 fe0e 	bl	800be92 <strncpy>
      pGSVInfo->amount = strtol((char *)app[1], NULL, BASE);
 8009276:	220a      	movs	r2, #10
 8009278:	2100      	movs	r1, #0
 800927a:	4851      	ldr	r0, [pc, #324]	; (80093c0 <NMEA_ParseGSV+0x254>)
 800927c:	f003 fd30 	bl	800cce0 <strtol>
 8009280:	4602      	mov	r2, r0
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	621a      	str	r2, [r3, #32]
      pGSVInfo->number = strtol((char *)app[2], NULL, BASE);
 8009286:	220a      	movs	r2, #10
 8009288:	2100      	movs	r1, #0
 800928a:	484e      	ldr	r0, [pc, #312]	; (80093c4 <NMEA_ParseGSV+0x258>)
 800928c:	f003 fd28 	bl	800cce0 <strtol>
 8009290:	4602      	mov	r2, r0
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	625a      	str	r2, [r3, #36]	; 0x24
      pGSVInfo->tot_sats = strtol((char *)app[3], NULL, BASE);
 8009296:	220a      	movs	r2, #10
 8009298:	2100      	movs	r1, #0
 800929a:	484b      	ldr	r0, [pc, #300]	; (80093c8 <NMEA_ParseGSV+0x25c>)
 800929c:	f003 fd20 	bl	800cce0 <strtol>
 80092a0:	4602      	mov	r2, r0
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	629a      	str	r2, [r3, #40]	; 0x28
      app_idx = 4;
 80092a6:	2304      	movs	r3, #4
 80092a8:	72bb      	strb	r3, [r7, #10]
      for (int8_t i = 1; i <= GSV_MSG_SATS; i++)
 80092aa:	2301      	movs	r3, #1
 80092ac:	72fb      	strb	r3, [r7, #11]
 80092ae:	e079      	b.n	80093a4 <NMEA_ParseGSV+0x238>
      {
        pGSVInfo->gsv_sat_i[gsv_idx].prn = strtol((char *)app[app_idx*i], NULL, BASE);
 80092b0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80092b4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80092b8:	fb03 f202 	mul.w	r2, r3, r2
 80092bc:	4613      	mov	r3, r2
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	4413      	add	r3, r2
 80092c2:	011b      	lsls	r3, r3, #4
 80092c4:	4a3d      	ldr	r2, [pc, #244]	; (80093bc <NMEA_ParseGSV+0x250>)
 80092c6:	4413      	add	r3, r2
 80092c8:	220a      	movs	r2, #10
 80092ca:	2100      	movs	r1, #0
 80092cc:	4618      	mov	r0, r3
 80092ce:	f003 fd07 	bl	800cce0 <strtol>
 80092d2:	4601      	mov	r1, r0
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	3303      	adds	r3, #3
 80092da:	011b      	lsls	r3, r3, #4
 80092dc:	4413      	add	r3, r2
 80092de:	6019      	str	r1, [r3, #0]
        pGSVInfo->gsv_sat_i[gsv_idx].elev = strtol((char *)app[(app_idx*i)+1], NULL, BASE);
 80092e0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80092e4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80092e8:	fb02 f303 	mul.w	r3, r2, r3
 80092ec:	1c5a      	adds	r2, r3, #1
 80092ee:	4613      	mov	r3, r2
 80092f0:	005b      	lsls	r3, r3, #1
 80092f2:	4413      	add	r3, r2
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	4a31      	ldr	r2, [pc, #196]	; (80093bc <NMEA_ParseGSV+0x250>)
 80092f8:	4413      	add	r3, r2
 80092fa:	220a      	movs	r2, #10
 80092fc:	2100      	movs	r1, #0
 80092fe:	4618      	mov	r0, r3
 8009300:	f003 fcee 	bl	800cce0 <strtol>
 8009304:	4601      	mov	r1, r0
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	3303      	adds	r3, #3
 800930c:	011b      	lsls	r3, r3, #4
 800930e:	4413      	add	r3, r2
 8009310:	3304      	adds	r3, #4
 8009312:	6019      	str	r1, [r3, #0]
        pGSVInfo->gsv_sat_i[gsv_idx].azim = strtol((char *)app[(app_idx*i)+2], NULL, BASE);
 8009314:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8009318:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800931c:	fb02 f303 	mul.w	r3, r2, r3
 8009320:	1c9a      	adds	r2, r3, #2
 8009322:	4613      	mov	r3, r2
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	4413      	add	r3, r2
 8009328:	011b      	lsls	r3, r3, #4
 800932a:	4a24      	ldr	r2, [pc, #144]	; (80093bc <NMEA_ParseGSV+0x250>)
 800932c:	4413      	add	r3, r2
 800932e:	220a      	movs	r2, #10
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f003 fcd4 	bl	800cce0 <strtol>
 8009338:	4601      	mov	r1, r0
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	4413      	add	r3, r2
 8009342:	3338      	adds	r3, #56	; 0x38
 8009344:	6019      	str	r1, [r3, #0]
        pGSVInfo->gsv_sat_i[gsv_idx].cn0 = strtol((char *)app[(app_idx*i)+3], NULL, BASE);
 8009346:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800934a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800934e:	fb02 f303 	mul.w	r3, r2, r3
 8009352:	1cda      	adds	r2, r3, #3
 8009354:	4613      	mov	r3, r2
 8009356:	005b      	lsls	r3, r3, #1
 8009358:	4413      	add	r3, r2
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	4a17      	ldr	r2, [pc, #92]	; (80093bc <NMEA_ParseGSV+0x250>)
 800935e:	4413      	add	r3, r2
 8009360:	220a      	movs	r2, #10
 8009362:	2100      	movs	r1, #0
 8009364:	4618      	mov	r0, r3
 8009366:	f003 fcbb 	bl	800cce0 <strtol>
 800936a:	4601      	mov	r1, r0
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	011b      	lsls	r3, r3, #4
 8009372:	4413      	add	r3, r2
 8009374:	333c      	adds	r3, #60	; 0x3c
 8009376:	6019      	str	r1, [r3, #0]

        if(pGSVInfo->gsv_sat_i[gsv_idx].prn != 0)
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	3303      	adds	r3, #3
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	4413      	add	r3, r2
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <NMEA_ParseGSV+0x226>
        {
          pGSVInfo->current_sats++;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	1c5a      	adds	r2, r3, #1
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	62da      	str	r2, [r3, #44]	; 0x2c
        }
        gsv_idx++;
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	3301      	adds	r3, #1
 8009396:	627b      	str	r3, [r7, #36]	; 0x24
      for (int8_t i = 1; i <= GSV_MSG_SATS; i++)
 8009398:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	3301      	adds	r3, #1
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	72fb      	strb	r3, [r7, #11]
 80093a4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	dd81      	ble.n	80092b0 <NMEA_ParseGSV+0x144>
      }

      status = PARSE_SUCC;
 80093ac:	2300      	movs	r3, #0
 80093ae:	76fb      	strb	r3, [r7, #27]
    }

  }

  return status;
 80093b0:	7efb      	ldrb	r3, [r7, #27]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3728      	adds	r7, #40	; 0x28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	200050c0 	.word	0x200050c0
 80093c0:	200050f0 	.word	0x200050f0
 80093c4:	20005120 	.word	0x20005120
 80093c8:	20005150 	.word	0x20005150

080093cc <NMEA_ParsePSTMVER>:

ParseStatus_t NMEA_ParsePSTMVER(PSTMVER_Info_t *pPSTMVER, uint8_t NMEA[])
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  int8_t new_field;
  BOOL valid_msg = FALSE;
 80093d6:	2300      	movs	r3, #0
 80093d8:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 80093da:	2301      	movs	r3, #1
 80093dc:	75fb      	strb	r3, [r7, #23]
  
  if(NMEA != NULL)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d075      	beq.n	80094d0 <NMEA_ParsePSTMVER+0x104>
  {
  
    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 80093e4:	2300      	movs	r3, #0
 80093e6:	75bb      	strb	r3, [r7, #22]
 80093e8:	e012      	b.n	8009410 <NMEA_ParsePSTMVER+0x44>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 80093ea:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80093ee:	4613      	mov	r3, r2
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	4413      	add	r3, r2
 80093f4:	011b      	lsls	r3, r3, #4
 80093f6:	4a39      	ldr	r2, [pc, #228]	; (80094dc <NMEA_ParsePSTMVER+0x110>)
 80093f8:	4413      	add	r3, r2
 80093fa:	2230      	movs	r2, #48	; 0x30
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f001 fc8b 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009404:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009408:	b2db      	uxtb	r3, r3
 800940a:	3301      	adds	r3, #1
 800940c:	b2db      	uxtb	r3, r3
 800940e:	75bb      	strb	r3, [r7, #22]
 8009410:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009414:	2b2f      	cmp	r3, #47	; 0x2f
 8009416:	dde8      	ble.n	80093ea <NMEA_ParsePSTMVER+0x1e>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009418:	2300      	movs	r3, #0
 800941a:	613b      	str	r3, [r7, #16]
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]
 8009420:	2300      	movs	r3, #0
 8009422:	60bb      	str	r3, [r7, #8]
 8009424:	e041      	b.n	80094aa <NMEA_ParsePSTMVER+0xde>
    {
      new_field = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	77fb      	strb	r3, [r7, #31]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	4413      	add	r3, r2
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	2b2c      	cmp	r3, #44	; 0x2c
 8009434:	d005      	beq.n	8009442 <NMEA_ParsePSTMVER+0x76>
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	4413      	add	r3, r2
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b2a      	cmp	r3, #42	; 0x2a
 8009440:	d11a      	bne.n	8009478 <NMEA_ParsePSTMVER+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 8009442:	4926      	ldr	r1, [pc, #152]	; (80094dc <NMEA_ParsePSTMVER+0x110>)
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4613      	mov	r3, r2
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	4413      	add	r3, r2
 800944c:	011b      	lsls	r3, r3, #4
 800944e:	18ca      	adds	r2, r1, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	4413      	add	r3, r2
 8009454:	2200      	movs	r2, #0
 8009456:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8009458:	2301      	movs	r3, #1
 800945a:	77fb      	strb	r3, [r7, #31]
        
        if (strcmp((char *)app[0], "$PSTMVER") == 0)
 800945c:	4920      	ldr	r1, [pc, #128]	; (80094e0 <NMEA_ParsePSTMVER+0x114>)
 800945e:	481f      	ldr	r0, [pc, #124]	; (80094dc <NMEA_ParsePSTMVER+0x110>)
 8009460:	f7f6 fec6 	bl	80001f0 <strcmp>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d126      	bne.n	80094b8 <NMEA_ParsePSTMVER+0xec>
        {
          j++;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
          k = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 8009474:	2301      	movs	r3, #1
 8009476:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8009478:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d111      	bne.n	80094a4 <NMEA_ParsePSTMVER+0xd8>
      {
        app[j][k] = NMEA[i];
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4413      	add	r3, r2
 8009486:	7818      	ldrb	r0, [r3, #0]
 8009488:	4914      	ldr	r1, [pc, #80]	; (80094dc <NMEA_ParsePSTMVER+0x110>)
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4613      	mov	r3, r2
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	4413      	add	r3, r2
 8009492:	011b      	lsls	r3, r3, #4
 8009494:	18ca      	adds	r2, r1, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	4602      	mov	r2, r0
 800949c:	701a      	strb	r2, [r3, #0]
        k++;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	3301      	adds	r3, #1
 80094a2:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	3301      	adds	r3, #1
 80094a8:	613b      	str	r3, [r7, #16]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	4413      	add	r3, r2
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	2b0a      	cmp	r3, #10
 80094b4:	d1b7      	bne.n	8009426 <NMEA_ParsePSTMVER+0x5a>
 80094b6:	e000      	b.n	80094ba <NMEA_ParsePSTMVER+0xee>
          break;
 80094b8:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	d107      	bne.n	80094d0 <NMEA_ParsePSTMVER+0x104>
    {
      (void)strncpy((char *)pPSTMVER->pstmver_string, (char *)app[1], MAX_STR_LEN);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2220      	movs	r2, #32
 80094c4:	4907      	ldr	r1, [pc, #28]	; (80094e4 <NMEA_ParsePSTMVER+0x118>)
 80094c6:	4618      	mov	r0, r3
 80094c8:	f002 fce3 	bl	800be92 <strncpy>

      status = PARSE_SUCC;
 80094cc:	2300      	movs	r3, #0
 80094ce:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3720      	adds	r7, #32
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	200050c0 	.word	0x200050c0
 80094e0:	0800fbec 	.word	0x0800fbec
 80094e4:	200050f0 	.word	0x200050f0

080094e8 <NMEA_ParsePSTMGeofence>:

ParseStatus_t NMEA_ParsePSTMGeofence(Geofence_Info_t *pGeofence, uint8_t NMEA[])
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b08b      	sub	sp, #44	; 0x2c
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 80094f2:	2300      	movs	r3, #0
 80094f4:	623b      	str	r3, [r7, #32]
  
  ParseStatus_t status = PARSE_FAIL;
 80094f6:	2301      	movs	r3, #1
 80094f8:	77fb      	strb	r3, [r7, #31]

  if(NMEA != NULL)
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 8143 	beq.w	8009788 <NMEA_ParsePSTMGeofence+0x2a0>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009502:	2300      	movs	r3, #0
 8009504:	77bb      	strb	r3, [r7, #30]
 8009506:	e012      	b.n	800952e <NMEA_ParsePSTMGeofence+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8009508:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800950c:	4613      	mov	r3, r2
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	4413      	add	r3, r2
 8009512:	011b      	lsls	r3, r3, #4
 8009514:	4a9f      	ldr	r2, [pc, #636]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 8009516:	4413      	add	r3, r2
 8009518:	2230      	movs	r2, #48	; 0x30
 800951a:	2100      	movs	r1, #0
 800951c:	4618      	mov	r0, r3
 800951e:	f001 fbfc 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009522:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009526:	b2db      	uxtb	r3, r3
 8009528:	3301      	adds	r3, #1
 800952a:	b2db      	uxtb	r3, r3
 800952c:	77bb      	strb	r3, [r7, #30]
 800952e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8009532:	2b2f      	cmp	r3, #47	; 0x2f
 8009534:	dde8      	ble.n	8009508 <NMEA_ParsePSTMGeofence+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009536:	2300      	movs	r3, #0
 8009538:	61bb      	str	r3, [r7, #24]
 800953a:	2300      	movs	r3, #0
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	2300      	movs	r3, #0
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	e03f      	b.n	80095c4 <NMEA_ParsePSTMGeofence+0xdc>
    {
      new_field = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	627b      	str	r3, [r7, #36]	; 0x24

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	683a      	ldr	r2, [r7, #0]
 800954c:	4413      	add	r3, r2
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	2b2c      	cmp	r3, #44	; 0x2c
 8009552:	d005      	beq.n	8009560 <NMEA_ParsePSTMGeofence+0x78>
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	683a      	ldr	r2, [r7, #0]
 8009558:	4413      	add	r3, r2
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b2a      	cmp	r3, #42	; 0x2a
 800955e:	d119      	bne.n	8009594 <NMEA_ParsePSTMGeofence+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 8009560:	498c      	ldr	r1, [pc, #560]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4613      	mov	r3, r2
 8009566:	005b      	lsls	r3, r3, #1
 8009568:	4413      	add	r3, r2
 800956a:	011b      	lsls	r3, r3, #4
 800956c:	18ca      	adds	r2, r1, r3
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	4413      	add	r3, r2
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8009576:	2301      	movs	r3, #1
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (NMEA_CheckGeofenceMsg((char *)app[0]) == 0)
 800957a:	4886      	ldr	r0, [pc, #536]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 800957c:	f7fe fde2 	bl	8008144 <NMEA_CheckGeofenceMsg>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d125      	bne.n	80095d2 <NMEA_ParsePSTMGeofence+0xea>
        {
          j++;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	3301      	adds	r3, #1
 800958a:	617b      	str	r3, [r7, #20]
          k = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	613b      	str	r3, [r7, #16]
          valid_msg = TRUE;
 8009590:	2301      	movs	r3, #1
 8009592:	623b      	str	r3, [r7, #32]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	2b00      	cmp	r3, #0
 8009598:	d111      	bne.n	80095be <NMEA_ParsePSTMGeofence+0xd6>
      {
        app[j][k] = NMEA[i];
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	683a      	ldr	r2, [r7, #0]
 800959e:	4413      	add	r3, r2
 80095a0:	7818      	ldrb	r0, [r3, #0]
 80095a2:	497c      	ldr	r1, [pc, #496]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	4613      	mov	r3, r2
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	4413      	add	r3, r2
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	18ca      	adds	r2, r1, r3
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	4413      	add	r3, r2
 80095b4:	4602      	mov	r2, r0
 80095b6:	701a      	strb	r2, [r3, #0]
        k++;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	3301      	adds	r3, #1
 80095bc:	613b      	str	r3, [r7, #16]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	3301      	adds	r3, #1
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4413      	add	r3, r2
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	2b0a      	cmp	r3, #10
 80095ce:	d1b9      	bne.n	8009544 <NMEA_ParsePSTMGeofence+0x5c>
 80095d0:	e000      	b.n	80095d4 <NMEA_ParsePSTMGeofence+0xec>
          break;
 80095d2:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	f040 80d6 	bne.w	8009788 <NMEA_ParsePSTMGeofence+0x2a0>
    {
      /* Enabling */
      if (strcmp((char *)app[0], "$PSTMCFGGEOFENCEOK") == 0)
 80095dc:	496e      	ldr	r1, [pc, #440]	; (8009798 <NMEA_ParsePSTMGeofence+0x2b0>)
 80095de:	486d      	ldr	r0, [pc, #436]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 80095e0:	f7f6 fe06 	bl	80001f0 <strcmp>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d106      	bne.n	80095f8 <NMEA_ParsePSTMGeofence+0x110>
      {
        pGeofence->op = GNSS_FEATURE_EN_MSG;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]
        pGeofence->result = GNSS_OP_OK;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	705a      	strb	r2, [r3, #1]
 80095f6:	e0c5      	b.n	8009784 <NMEA_ParsePSTMGeofence+0x29c>
      }
      else if (strcmp((char *)app[0], "$PSTMCFGGEOFENCEERROR") == 0)
 80095f8:	4968      	ldr	r1, [pc, #416]	; (800979c <NMEA_ParsePSTMGeofence+0x2b4>)
 80095fa:	4866      	ldr	r0, [pc, #408]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 80095fc:	f7f6 fdf8 	bl	80001f0 <strcmp>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d106      	bne.n	8009614 <NMEA_ParsePSTMGeofence+0x12c>
      {
        pGeofence->op = GNSS_FEATURE_EN_MSG;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
        pGeofence->result = GNSS_OP_ERROR;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2201      	movs	r2, #1
 8009610:	705a      	strb	r2, [r3, #1]
 8009612:	e0b7      	b.n	8009784 <NMEA_ParsePSTMGeofence+0x29c>
      }
      /* Configuring */
      else if (strcmp((char *)app[0], "$PSTMGEOFENCECFGOK") == 0)
 8009614:	4962      	ldr	r1, [pc, #392]	; (80097a0 <NMEA_ParsePSTMGeofence+0x2b8>)
 8009616:	485f      	ldr	r0, [pc, #380]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 8009618:	f7f6 fdea 	bl	80001f0 <strcmp>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <NMEA_ParsePSTMGeofence+0x148>
      {
        pGeofence->op = GNSS_GEOFENCE_CFG_MSG;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	701a      	strb	r2, [r3, #0]
        pGeofence->result = GNSS_OP_OK;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	705a      	strb	r2, [r3, #1]
 800962e:	e0a9      	b.n	8009784 <NMEA_ParsePSTMGeofence+0x29c>
      }
      else if (strcmp((char *)app[0], "$PSTMGEOFENCECFGERROR") == 0)
 8009630:	495c      	ldr	r1, [pc, #368]	; (80097a4 <NMEA_ParsePSTMGeofence+0x2bc>)
 8009632:	4858      	ldr	r0, [pc, #352]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 8009634:	f7f6 fddc 	bl	80001f0 <strcmp>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d106      	bne.n	800964c <NMEA_ParsePSTMGeofence+0x164>
      {
        pGeofence->op = GNSS_GEOFENCE_STATUS_MSG;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2202      	movs	r2, #2
 8009642:	701a      	strb	r2, [r3, #0]
        pGeofence->result = GNSS_OP_ERROR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	705a      	strb	r2, [r3, #1]
 800964a:	e09b      	b.n	8009784 <NMEA_ParsePSTMGeofence+0x29c>
      }
      /* Querying Status */
      else if (strcmp((char *)app[0], "$PSTMGEOFENCESTATUS") == 0)
 800964c:	4956      	ldr	r1, [pc, #344]	; (80097a8 <NMEA_ParsePSTMGeofence+0x2c0>)
 800964e:	4851      	ldr	r0, [pc, #324]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 8009650:	f7f6 fdce 	bl	80001f0 <strcmp>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d132      	bne.n	80096c0 <NMEA_ParsePSTMGeofence+0x1d8>
      {
        pGeofence->op = GNSS_GEOFENCE_STATUS_MSG;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	701a      	strb	r2, [r3, #0]
        scan_timestamp_time(app[1], &pGeofence->timestamp);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3304      	adds	r3, #4
 8009664:	4619      	mov	r1, r3
 8009666:	4851      	ldr	r0, [pc, #324]	; (80097ac <NMEA_ParsePSTMGeofence+0x2c4>)
 8009668:	f7ff f878 	bl	800875c <scan_timestamp_time>
        scan_timestamp_date(app[2], &pGeofence->timestamp);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3304      	adds	r3, #4
 8009670:	4619      	mov	r1, r3
 8009672:	484f      	ldr	r0, [pc, #316]	; (80097b0 <NMEA_ParsePSTMGeofence+0x2c8>)
 8009674:	f7ff f893 	bl	800879e <scan_timestamp_date>

        int32_t *geofence_status = pGeofence->status;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3348      	adds	r3, #72	; 0x48
 800967c:	60bb      	str	r3, [r7, #8]
        for(int8_t i = 0; i < MAX_GEOFENCES_NUM; i++)
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	e019      	b.n	80096b8 <NMEA_ParsePSTMGeofence+0x1d0>
        {
          *(&geofence_status[i]) = strtol((char *)app[3+i], NULL, BASE);
 8009684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009688:	1cda      	adds	r2, r3, #3
 800968a:	4613      	mov	r3, r2
 800968c:	005b      	lsls	r3, r3, #1
 800968e:	4413      	add	r3, r2
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	4a40      	ldr	r2, [pc, #256]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 8009694:	1898      	adds	r0, r3, r2
 8009696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	18d4      	adds	r4, r2, r3
 80096a0:	220a      	movs	r2, #10
 80096a2:	2100      	movs	r1, #0
 80096a4:	f003 fb1c 	bl	800cce0 <strtol>
 80096a8:	4603      	mov	r3, r0
 80096aa:	6023      	str	r3, [r4, #0]
        for(int8_t i = 0; i < MAX_GEOFENCES_NUM; i++)
 80096ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	3301      	adds	r3, #1
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	73fb      	strb	r3, [r7, #15]
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	2b07      	cmp	r3, #7
 80096bc:	d9e2      	bls.n	8009684 <NMEA_ParsePSTMGeofence+0x19c>
 80096be:	e061      	b.n	8009784 <NMEA_ParsePSTMGeofence+0x29c>
        }
      }
      /* Alarm Msg */
      else if (strcmp((char *)app[0], "$PSTMGEOFENCE") == 0)
 80096c0:	493c      	ldr	r1, [pc, #240]	; (80097b4 <NMEA_ParsePSTMGeofence+0x2cc>)
 80096c2:	4834      	ldr	r0, [pc, #208]	; (8009794 <NMEA_ParsePSTMGeofence+0x2ac>)
 80096c4:	f7f6 fd94 	bl	80001f0 <strcmp>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d15a      	bne.n	8009784 <NMEA_ParsePSTMGeofence+0x29c>
      {
        pGeofence->op = GNSS_GEOFENCE_ALARM_MSG;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2203      	movs	r2, #3
 80096d2:	701a      	strb	r2, [r3, #0]
        scan_timestamp_time(app[1], &pGeofence->timestamp);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	3304      	adds	r3, #4
 80096d8:	4619      	mov	r1, r3
 80096da:	4834      	ldr	r0, [pc, #208]	; (80097ac <NMEA_ParsePSTMGeofence+0x2c4>)
 80096dc:	f7ff f83e 	bl	800875c <scan_timestamp_time>
        scan_timestamp_date(app[2], &pGeofence->timestamp);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	3304      	adds	r3, #4
 80096e4:	4619      	mov	r1, r3
 80096e6:	4832      	ldr	r0, [pc, #200]	; (80097b0 <NMEA_ParsePSTMGeofence+0x2c8>)
 80096e8:	f7ff f859 	bl	800879e <scan_timestamp_date>
        pGeofence->idAlarm = strtol((char *)app[3], NULL, BASE);
 80096ec:	220a      	movs	r2, #10
 80096ee:	2100      	movs	r1, #0
 80096f0:	4831      	ldr	r0, [pc, #196]	; (80097b8 <NMEA_ParsePSTMGeofence+0x2d0>)
 80096f2:	f003 faf5 	bl	800cce0 <strtol>
 80096f6:	4602      	mov	r2, r0
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	61da      	str	r2, [r3, #28]
        pGeofence->coords.lat = strtod((char *)app[4], NULL);
 80096fc:	2100      	movs	r1, #0
 80096fe:	482f      	ldr	r0, [pc, #188]	; (80097bc <NMEA_ParsePSTMGeofence+0x2d4>)
 8009700:	f003 fa02 	bl	800cb08 <strtod>
 8009704:	eeb0 7a40 	vmov.f32	s14, s0
 8009708:	eef0 7a60 	vmov.f32	s15, s1
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	ed83 7b08 	vstr	d7, [r3, #32]
        pGeofence->coords.lon = strtod((char *)app[5], NULL);
 8009712:	2100      	movs	r1, #0
 8009714:	482a      	ldr	r0, [pc, #168]	; (80097c0 <NMEA_ParsePSTMGeofence+0x2d8>)
 8009716:	f003 f9f7 	bl	800cb08 <strtod>
 800971a:	eeb0 7a40 	vmov.f32	s14, s0
 800971e:	eef0 7a60 	vmov.f32	s15, s1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
        pGeofence->coords.radius = strtod((char *)app[6], NULL);
 8009728:	2100      	movs	r1, #0
 800972a:	4826      	ldr	r0, [pc, #152]	; (80097c4 <NMEA_ParsePSTMGeofence+0x2dc>)
 800972c:	f003 f9ec 	bl	800cb08 <strtod>
 8009730:	eeb0 7a40 	vmov.f32	s14, s0
 8009734:	eef0 7a60 	vmov.f32	s15, s1
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
        pGeofence->coords.distance = strtod((char *)app[7], NULL);
 800973e:	2100      	movs	r1, #0
 8009740:	4821      	ldr	r0, [pc, #132]	; (80097c8 <NMEA_ParsePSTMGeofence+0x2e0>)
 8009742:	f003 f9e1 	bl	800cb08 <strtod>
 8009746:	eeb0 7a40 	vmov.f32	s14, s0
 800974a:	eef0 7a60 	vmov.f32	s15, s1
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
        pGeofence->coords.tolerance = strtod((char *)app[8], NULL);
 8009754:	2100      	movs	r1, #0
 8009756:	481d      	ldr	r0, [pc, #116]	; (80097cc <NMEA_ParsePSTMGeofence+0x2e4>)
 8009758:	f003 f9d6 	bl	800cb08 <strtod>
 800975c:	eeb0 7a40 	vmov.f32	s14, s0
 8009760:	eef0 7a60 	vmov.f32	s15, s1
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
        pGeofence->status[pGeofence->idAlarm] = strtol((char *)app[9], NULL, BASE);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69dc      	ldr	r4, [r3, #28]
 800976e:	220a      	movs	r2, #10
 8009770:	2100      	movs	r1, #0
 8009772:	4817      	ldr	r0, [pc, #92]	; (80097d0 <NMEA_ParsePSTMGeofence+0x2e8>)
 8009774:	f003 fab4 	bl	800cce0 <strtol>
 8009778:	4601      	mov	r1, r0
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f104 0212 	add.w	r2, r4, #18
 8009780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 8009784:	2300      	movs	r3, #0
 8009786:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8009788:	7ffb      	ldrb	r3, [r7, #31]
}
 800978a:	4618      	mov	r0, r3
 800978c:	372c      	adds	r7, #44	; 0x2c
 800978e:	46bd      	mov	sp, r7
 8009790:	bd90      	pop	{r4, r7, pc}
 8009792:	bf00      	nop
 8009794:	200050c0 	.word	0x200050c0
 8009798:	0800f878 	.word	0x0800f878
 800979c:	0800f88c 	.word	0x0800f88c
 80097a0:	0800f8a4 	.word	0x0800f8a4
 80097a4:	0800f8b8 	.word	0x0800f8b8
 80097a8:	0800f8d0 	.word	0x0800f8d0
 80097ac:	200050f0 	.word	0x200050f0
 80097b0:	20005120 	.word	0x20005120
 80097b4:	0800f8e4 	.word	0x0800f8e4
 80097b8:	20005150 	.word	0x20005150
 80097bc:	20005180 	.word	0x20005180
 80097c0:	200051b0 	.word	0x200051b0
 80097c4:	200051e0 	.word	0x200051e0
 80097c8:	20005210 	.word	0x20005210
 80097cc:	20005240 	.word	0x20005240
 80097d0:	20005270 	.word	0x20005270

080097d4 <NMEA_ParsePSTMOdo>:

ParseStatus_t NMEA_ParsePSTMOdo(Odometer_Info_t *pOdo, uint8_t NMEA[])
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b088      	sub	sp, #32
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 80097de:	2300      	movs	r3, #0
 80097e0:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 80097e2:	2301      	movs	r3, #1
 80097e4:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 80c1 	beq.w	8009970 <NMEA_ParsePSTMOdo+0x19c>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 80097ee:	2300      	movs	r3, #0
 80097f0:	75bb      	strb	r3, [r7, #22]
 80097f2:	e012      	b.n	800981a <NMEA_ParsePSTMOdo+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 80097f4:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80097f8:	4613      	mov	r3, r2
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	4413      	add	r3, r2
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	4a5e      	ldr	r2, [pc, #376]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 8009802:	4413      	add	r3, r2
 8009804:	2230      	movs	r2, #48	; 0x30
 8009806:	2100      	movs	r1, #0
 8009808:	4618      	mov	r0, r3
 800980a:	f001 fa86 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 800980e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	3301      	adds	r3, #1
 8009816:	b2db      	uxtb	r3, r3
 8009818:	75bb      	strb	r3, [r7, #22]
 800981a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800981e:	2b2f      	cmp	r3, #47	; 0x2f
 8009820:	dde8      	ble.n	80097f4 <NMEA_ParsePSTMOdo+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009822:	2300      	movs	r3, #0
 8009824:	613b      	str	r3, [r7, #16]
 8009826:	2300      	movs	r3, #0
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	2300      	movs	r3, #0
 800982c:	60bb      	str	r3, [r7, #8]
 800982e:	e03f      	b.n	80098b0 <NMEA_ParsePSTMOdo+0xdc>
    {
      new_field = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4413      	add	r3, r2
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	2b2c      	cmp	r3, #44	; 0x2c
 800983e:	d005      	beq.n	800984c <NMEA_ParsePSTMOdo+0x78>
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	683a      	ldr	r2, [r7, #0]
 8009844:	4413      	add	r3, r2
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b2a      	cmp	r3, #42	; 0x2a
 800984a:	d119      	bne.n	8009880 <NMEA_ParsePSTMOdo+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800984c:	494b      	ldr	r1, [pc, #300]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	4613      	mov	r3, r2
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	4413      	add	r3, r2
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	18ca      	adds	r2, r1, r3
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	4413      	add	r3, r2
 800985e:	2200      	movs	r2, #0
 8009860:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8009862:	2301      	movs	r3, #1
 8009864:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckOdoMsg((char *)app[0]) == 0)
 8009866:	4845      	ldr	r0, [pc, #276]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 8009868:	f7fe fcc4 	bl	80081f4 <NMEA_CheckOdoMsg>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d125      	bne.n	80098be <NMEA_ParsePSTMOdo+0xea>
        {
          j++;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	60fb      	str	r3, [r7, #12]
          k = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800987c:	2301      	movs	r3, #1
 800987e:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d111      	bne.n	80098aa <NMEA_ParsePSTMOdo+0xd6>
      {
        app[j][k] = NMEA[i];
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	4413      	add	r3, r2
 800988c:	7818      	ldrb	r0, [r3, #0]
 800988e:	493b      	ldr	r1, [pc, #236]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4613      	mov	r3, r2
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	4413      	add	r3, r2
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	18ca      	adds	r2, r1, r3
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	4413      	add	r3, r2
 80098a0:	4602      	mov	r2, r0
 80098a2:	701a      	strb	r2, [r3, #0]
        k++;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	3301      	adds	r3, #1
 80098a8:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	3301      	adds	r3, #1
 80098ae:	613b      	str	r3, [r7, #16]
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	4413      	add	r3, r2
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b0a      	cmp	r3, #10
 80098ba:	d1b9      	bne.n	8009830 <NMEA_ParsePSTMOdo+0x5c>
 80098bc:	e000      	b.n	80098c0 <NMEA_ParsePSTMOdo+0xec>
          break;
 80098be:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d154      	bne.n	8009970 <NMEA_ParsePSTMOdo+0x19c>
    {
      /* Enabling */
      if (strcmp((char *)app[0], "$PSTMCFGODOOK") == 0)
 80098c6:	492e      	ldr	r1, [pc, #184]	; (8009980 <NMEA_ParsePSTMOdo+0x1ac>)
 80098c8:	482c      	ldr	r0, [pc, #176]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 80098ca:	f7f6 fc91 	bl	80001f0 <strcmp>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <NMEA_ParsePSTMOdo+0x10e>
      {
        pOdo->op = GNSS_FEATURE_EN_MSG;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_OK;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	705a      	strb	r2, [r3, #1]
 80098e0:	e044      	b.n	800996c <NMEA_ParsePSTMOdo+0x198>
      }
      else if (strcmp((char *)app[0], "$PSTMCFGODOERROR") == 0)
 80098e2:	4928      	ldr	r1, [pc, #160]	; (8009984 <NMEA_ParsePSTMOdo+0x1b0>)
 80098e4:	4825      	ldr	r0, [pc, #148]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 80098e6:	f7f6 fc83 	bl	80001f0 <strcmp>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d106      	bne.n	80098fe <NMEA_ParsePSTMOdo+0x12a>
      {
        pOdo->op = GNSS_FEATURE_EN_MSG;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_ERROR;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	705a      	strb	r2, [r3, #1]
 80098fc:	e036      	b.n	800996c <NMEA_ParsePSTMOdo+0x198>
      }
      /* Start */
      else if (strcmp((char *)app[0], "$PSTMODOSTARTOK") == 0)
 80098fe:	4922      	ldr	r1, [pc, #136]	; (8009988 <NMEA_ParsePSTMOdo+0x1b4>)
 8009900:	481e      	ldr	r0, [pc, #120]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 8009902:	f7f6 fc75 	bl	80001f0 <strcmp>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <NMEA_ParsePSTMOdo+0x146>
      {
        pOdo->op = GNSS_ODO_START_MSG;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2204      	movs	r2, #4
 8009910:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_OK;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	705a      	strb	r2, [r3, #1]
 8009918:	e028      	b.n	800996c <NMEA_ParsePSTMOdo+0x198>
      }
      else if (strcmp((char *)app[0], "$PSTMODOSTARTERROR") == 0)
 800991a:	491c      	ldr	r1, [pc, #112]	; (800998c <NMEA_ParsePSTMOdo+0x1b8>)
 800991c:	4817      	ldr	r0, [pc, #92]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 800991e:	f7f6 fc67 	bl	80001f0 <strcmp>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d106      	bne.n	8009936 <NMEA_ParsePSTMOdo+0x162>
      {
        pOdo->op = GNSS_ODO_START_MSG;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2204      	movs	r2, #4
 800992c:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_ERROR;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	705a      	strb	r2, [r3, #1]
 8009934:	e01a      	b.n	800996c <NMEA_ParsePSTMOdo+0x198>
      }
      /* Stop */
      else if (strcmp((char *)app[0], "$PSTMODOSTOPOK") == 0)
 8009936:	4916      	ldr	r1, [pc, #88]	; (8009990 <NMEA_ParsePSTMOdo+0x1bc>)
 8009938:	4810      	ldr	r0, [pc, #64]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 800993a:	f7f6 fc59 	bl	80001f0 <strcmp>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d106      	bne.n	8009952 <NMEA_ParsePSTMOdo+0x17e>
      {
        pOdo->op = GNSS_ODO_STOP_MSG;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2205      	movs	r2, #5
 8009948:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_OK;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	705a      	strb	r2, [r3, #1]
 8009950:	e00c      	b.n	800996c <NMEA_ParsePSTMOdo+0x198>
      }
      else if (strcmp((char *)app[0], "$PSTMODOSTOPERROR") == 0)
 8009952:	4910      	ldr	r1, [pc, #64]	; (8009994 <NMEA_ParsePSTMOdo+0x1c0>)
 8009954:	4809      	ldr	r0, [pc, #36]	; (800997c <NMEA_ParsePSTMOdo+0x1a8>)
 8009956:	f7f6 fc4b 	bl	80001f0 <strcmp>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <NMEA_ParsePSTMOdo+0x198>
      {
        pOdo->op = GNSS_ODO_STOP_MSG;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2205      	movs	r2, #5
 8009964:	701a      	strb	r2, [r3, #0]
        pOdo->result = GNSS_OP_ERROR;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	705a      	strb	r2, [r3, #1]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800996c:	2300      	movs	r3, #0
 800996e:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
}
 8009972:	4618      	mov	r0, r3
 8009974:	3720      	adds	r7, #32
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	200050c0 	.word	0x200050c0
 8009980:	0800f90c 	.word	0x0800f90c
 8009984:	0800f91c 	.word	0x0800f91c
 8009988:	0800f930 	.word	0x0800f930
 800998c:	0800f940 	.word	0x0800f940
 8009990:	0800f954 	.word	0x0800f954
 8009994:	0800f964 	.word	0x0800f964

08009998 <NMEA_ParsePSTMDatalog>:

ParseStatus_t NMEA_ParsePSTMDatalog(Datalog_Info_t *pDatalog, uint8_t NMEA[])
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 80099a6:	2301      	movs	r3, #1
 80099a8:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 80fa 	beq.w	8009ba6 <NMEA_ParsePSTMDatalog+0x20e>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 80099b2:	2300      	movs	r3, #0
 80099b4:	75bb      	strb	r3, [r7, #22]
 80099b6:	e012      	b.n	80099de <NMEA_ParsePSTMDatalog+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 80099b8:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80099bc:	4613      	mov	r3, r2
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	4413      	add	r3, r2
 80099c2:	011b      	lsls	r3, r3, #4
 80099c4:	4a7a      	ldr	r2, [pc, #488]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 80099c6:	4413      	add	r3, r2
 80099c8:	2230      	movs	r2, #48	; 0x30
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f001 f9a4 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 80099d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	3301      	adds	r3, #1
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	75bb      	strb	r3, [r7, #22]
 80099de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80099e2:	2b2f      	cmp	r3, #47	; 0x2f
 80099e4:	dde8      	ble.n	80099b8 <NMEA_ParsePSTMDatalog+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 80099e6:	2300      	movs	r3, #0
 80099e8:	613b      	str	r3, [r7, #16]
 80099ea:	2300      	movs	r3, #0
 80099ec:	60fb      	str	r3, [r7, #12]
 80099ee:	2300      	movs	r3, #0
 80099f0:	60bb      	str	r3, [r7, #8]
 80099f2:	e03f      	b.n	8009a74 <NMEA_ParsePSTMDatalog+0xdc>
    {
      new_field = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	4413      	add	r3, r2
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b2c      	cmp	r3, #44	; 0x2c
 8009a02:	d005      	beq.n	8009a10 <NMEA_ParsePSTMDatalog+0x78>
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4413      	add	r3, r2
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0e:	d119      	bne.n	8009a44 <NMEA_ParsePSTMDatalog+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 8009a10:	4967      	ldr	r1, [pc, #412]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	4613      	mov	r3, r2
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	4413      	add	r3, r2
 8009a1a:	011b      	lsls	r3, r3, #4
 8009a1c:	18ca      	adds	r2, r1, r3
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	4413      	add	r3, r2
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckDatalogMsg((char *)app[0]) == 0)
 8009a2a:	4861      	ldr	r0, [pc, #388]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009a2c:	f7fe fc30 	bl	8008290 <NMEA_CheckDatalogMsg>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d125      	bne.n	8009a82 <NMEA_ParsePSTMDatalog+0xea>
        {
          j++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	60fb      	str	r3, [r7, #12]
          k = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0) {
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d111      	bne.n	8009a6e <NMEA_ParsePSTMDatalog+0xd6>
        app[j][k] = NMEA[i];
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	4413      	add	r3, r2
 8009a50:	7818      	ldrb	r0, [r3, #0]
 8009a52:	4957      	ldr	r1, [pc, #348]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4613      	mov	r3, r2
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	4413      	add	r3, r2
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	18ca      	adds	r2, r1, r3
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4413      	add	r3, r2
 8009a64:	4602      	mov	r2, r0
 8009a66:	701a      	strb	r2, [r3, #0]
        k++;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	3301      	adds	r3, #1
 8009a72:	613b      	str	r3, [r7, #16]
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	4413      	add	r3, r2
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b0a      	cmp	r3, #10
 8009a7e:	d1b9      	bne.n	80099f4 <NMEA_ParsePSTMDatalog+0x5c>
 8009a80:	e000      	b.n	8009a84 <NMEA_ParsePSTMDatalog+0xec>
          break;
 8009a82:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 8009a84:	69bb      	ldr	r3, [r7, #24]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	f040 808d 	bne.w	8009ba6 <NMEA_ParsePSTMDatalog+0x20e>
    {
      /* Enabling */
      if (strcmp((char *)app[0], "$PSTMCFGLOGOK") == 0)
 8009a8c:	4949      	ldr	r1, [pc, #292]	; (8009bb4 <NMEA_ParsePSTMDatalog+0x21c>)
 8009a8e:	4848      	ldr	r0, [pc, #288]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009a90:	f7f6 fbae 	bl	80001f0 <strcmp>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d106      	bne.n	8009aa8 <NMEA_ParsePSTMDatalog+0x110>
      {
        pDatalog->op = GNSS_FEATURE_EN_MSG;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	705a      	strb	r2, [r3, #1]
 8009aa6:	e07c      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMCFGLOGERROR") == 0)
 8009aa8:	4943      	ldr	r1, [pc, #268]	; (8009bb8 <NMEA_ParsePSTMDatalog+0x220>)
 8009aaa:	4841      	ldr	r0, [pc, #260]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009aac:	f7f6 fba0 	bl	80001f0 <strcmp>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <NMEA_ParsePSTMDatalog+0x12c>
      {
        pDatalog->op = GNSS_FEATURE_EN_MSG;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	705a      	strb	r2, [r3, #1]
 8009ac2:	e06e      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      /* Configuring */
      else if (strcmp((char *)app[0], "$PSTMLOGCREATEOK") == 0)
 8009ac4:	493d      	ldr	r1, [pc, #244]	; (8009bbc <NMEA_ParsePSTMDatalog+0x224>)
 8009ac6:	483a      	ldr	r0, [pc, #232]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009ac8:	f7f6 fb92 	bl	80001f0 <strcmp>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d106      	bne.n	8009ae0 <NMEA_ParsePSTMDatalog+0x148>
      {
        pDatalog->op = GNSS_DATALOG_CFG_MSG;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2206      	movs	r2, #6
 8009ad6:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	705a      	strb	r2, [r3, #1]
 8009ade:	e060      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMLOGCREATEERROR") == 0)
 8009ae0:	4937      	ldr	r1, [pc, #220]	; (8009bc0 <NMEA_ParsePSTMDatalog+0x228>)
 8009ae2:	4833      	ldr	r0, [pc, #204]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009ae4:	f7f6 fb84 	bl	80001f0 <strcmp>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d106      	bne.n	8009afc <NMEA_ParsePSTMDatalog+0x164>
      {
        pDatalog->op = GNSS_DATALOG_CFG_MSG;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2206      	movs	r2, #6
 8009af2:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	705a      	strb	r2, [r3, #1]
 8009afa:	e052      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      /* Start */
      else if (strcmp((char *)app[0], "$PSTMLOGSTARTOK") == 0)
 8009afc:	4931      	ldr	r1, [pc, #196]	; (8009bc4 <NMEA_ParsePSTMDatalog+0x22c>)
 8009afe:	482c      	ldr	r0, [pc, #176]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009b00:	f7f6 fb76 	bl	80001f0 <strcmp>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <NMEA_ParsePSTMDatalog+0x180>
      {
        pDatalog->op = GNSS_DATALOG_START_MSG;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2207      	movs	r2, #7
 8009b0e:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	705a      	strb	r2, [r3, #1]
 8009b16:	e044      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMLOGSTARTERROR") == 0)
 8009b18:	492b      	ldr	r1, [pc, #172]	; (8009bc8 <NMEA_ParsePSTMDatalog+0x230>)
 8009b1a:	4825      	ldr	r0, [pc, #148]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009b1c:	f7f6 fb68 	bl	80001f0 <strcmp>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d106      	bne.n	8009b34 <NMEA_ParsePSTMDatalog+0x19c>
      {
        pDatalog->op = GNSS_DATALOG_START_MSG;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2207      	movs	r2, #7
 8009b2a:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	705a      	strb	r2, [r3, #1]
 8009b32:	e036      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      /* Stop */
      else if (strcmp((char *)app[0], "$PSTMLOGSTOPOK") == 0)
 8009b34:	4925      	ldr	r1, [pc, #148]	; (8009bcc <NMEA_ParsePSTMDatalog+0x234>)
 8009b36:	481e      	ldr	r0, [pc, #120]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009b38:	f7f6 fb5a 	bl	80001f0 <strcmp>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <NMEA_ParsePSTMDatalog+0x1b8>
      {
        pDatalog->op = GNSS_DATALOG_STOP_MSG;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2208      	movs	r2, #8
 8009b46:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	705a      	strb	r2, [r3, #1]
 8009b4e:	e028      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMLOGSTOPERROR") == 0)
 8009b50:	491f      	ldr	r1, [pc, #124]	; (8009bd0 <NMEA_ParsePSTMDatalog+0x238>)
 8009b52:	4817      	ldr	r0, [pc, #92]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009b54:	f7f6 fb4c 	bl	80001f0 <strcmp>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d106      	bne.n	8009b6c <NMEA_ParsePSTMDatalog+0x1d4>
      {
        pDatalog->op = GNSS_DATALOG_STOP_MSG;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2208      	movs	r2, #8
 8009b62:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	705a      	strb	r2, [r3, #1]
 8009b6a:	e01a      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      /* Erase */
      else if (strcmp((char *)app[0], "$PSTMLOGERASEOK") == 0)
 8009b6c:	4919      	ldr	r1, [pc, #100]	; (8009bd4 <NMEA_ParsePSTMDatalog+0x23c>)
 8009b6e:	4810      	ldr	r0, [pc, #64]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009b70:	f7f6 fb3e 	bl	80001f0 <strcmp>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d106      	bne.n	8009b88 <NMEA_ParsePSTMDatalog+0x1f0>
      {
        pDatalog->op = GNSS_DATALOG_ERASE_MSG;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2209      	movs	r2, #9
 8009b7e:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_OK;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	705a      	strb	r2, [r3, #1]
 8009b86:	e00c      	b.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      }
      else if (strcmp((char *)app[0], "$PSTMLOGERASEERROR") == 0)
 8009b88:	4913      	ldr	r1, [pc, #76]	; (8009bd8 <NMEA_ParsePSTMDatalog+0x240>)
 8009b8a:	4809      	ldr	r0, [pc, #36]	; (8009bb0 <NMEA_ParsePSTMDatalog+0x218>)
 8009b8c:	f7f6 fb30 	bl	80001f0 <strcmp>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d105      	bne.n	8009ba2 <NMEA_ParsePSTMDatalog+0x20a>
      {
        pDatalog->op = GNSS_DATALOG_ERASE_MSG;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2209      	movs	r2, #9
 8009b9a:	701a      	strb	r2, [r3, #0]
        pDatalog->result = GNSS_OP_ERROR;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	705a      	strb	r2, [r3, #1]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	200050c0 	.word	0x200050c0
 8009bb4:	0800f978 	.word	0x0800f978
 8009bb8:	0800f988 	.word	0x0800f988
 8009bbc:	0800f99c 	.word	0x0800f99c
 8009bc0:	0800f9b0 	.word	0x0800f9b0
 8009bc4:	0800f9c4 	.word	0x0800f9c4
 8009bc8:	0800f9d4 	.word	0x0800f9d4
 8009bcc:	0800f9e8 	.word	0x0800f9e8
 8009bd0:	0800f9f8 	.word	0x0800f9f8
 8009bd4:	0800fa0c 	.word	0x0800fa0c
 8009bd8:	0800fa1c 	.word	0x0800fa1c

08009bdc <NMEA_ParsePSTMsgl>:

ParseStatus_t NMEA_ParsePSTMsgl(OpResult_t *pResult, uint8_t NMEA[])
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 8009be6:	2300      	movs	r3, #0
 8009be8:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 8009bea:	2301      	movs	r3, #1
 8009bec:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 8083 	beq.w	8009cfc <NMEA_ParsePSTMsgl+0x120>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75bb      	strb	r3, [r7, #22]
 8009bfa:	e012      	b.n	8009c22 <NMEA_ParsePSTMsgl+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8009bfc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8009c00:	4613      	mov	r3, r2
 8009c02:	005b      	lsls	r3, r3, #1
 8009c04:	4413      	add	r3, r2
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4a3f      	ldr	r2, [pc, #252]	; (8009d08 <NMEA_ParsePSTMsgl+0x12c>)
 8009c0a:	4413      	add	r3, r2
 8009c0c:	2230      	movs	r2, #48	; 0x30
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4618      	mov	r0, r3
 8009c12:	f001 f882 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009c16:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	75bb      	strb	r3, [r7, #22]
 8009c22:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009c26:	2b2f      	cmp	r3, #47	; 0x2f
 8009c28:	dde8      	ble.n	8009bfc <NMEA_ParsePSTMsgl+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60fb      	str	r3, [r7, #12]
 8009c32:	2300      	movs	r3, #0
 8009c34:	60bb      	str	r3, [r7, #8]
 8009c36:	e03f      	b.n	8009cb8 <NMEA_ParsePSTMsgl+0xdc>
    {
      new_field = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	4413      	add	r3, r2
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b2c      	cmp	r3, #44	; 0x2c
 8009c46:	d005      	beq.n	8009c54 <NMEA_ParsePSTMsgl+0x78>
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	2b2a      	cmp	r3, #42	; 0x2a
 8009c52:	d119      	bne.n	8009c88 <NMEA_ParsePSTMsgl+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 8009c54:	492c      	ldr	r1, [pc, #176]	; (8009d08 <NMEA_ParsePSTMsgl+0x12c>)
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	4413      	add	r3, r2
 8009c5e:	011b      	lsls	r3, r3, #4
 8009c60:	18ca      	adds	r2, r1, r3
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	4413      	add	r3, r2
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckListMsg((char *)app[0]) == 0)
 8009c6e:	4826      	ldr	r0, [pc, #152]	; (8009d08 <NMEA_ParsePSTMsgl+0x12c>)
 8009c70:	f7fe fb88 	bl	8008384 <NMEA_CheckListMsg>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d125      	bne.n	8009cc6 <NMEA_ParsePSTMsgl+0xea>
        {
          j++;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	60fb      	str	r3, [r7, #12]
          k = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 8009c84:	2301      	movs	r3, #1
 8009c86:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d111      	bne.n	8009cb2 <NMEA_ParsePSTMsgl+0xd6>
      {
        app[j][k] = NMEA[i];
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	683a      	ldr	r2, [r7, #0]
 8009c92:	4413      	add	r3, r2
 8009c94:	7818      	ldrb	r0, [r3, #0]
 8009c96:	491c      	ldr	r1, [pc, #112]	; (8009d08 <NMEA_ParsePSTMsgl+0x12c>)
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	005b      	lsls	r3, r3, #1
 8009c9e:	4413      	add	r3, r2
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	18ca      	adds	r2, r1, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	4602      	mov	r2, r0
 8009caa:	701a      	strb	r2, [r3, #0]
        k++;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	613b      	str	r3, [r7, #16]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b0a      	cmp	r3, #10
 8009cc2:	d1b9      	bne.n	8009c38 <NMEA_ParsePSTMsgl+0x5c>
 8009cc4:	e000      	b.n	8009cc8 <NMEA_ParsePSTMsgl+0xec>
          break;
 8009cc6:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d116      	bne.n	8009cfc <NMEA_ParsePSTMsgl+0x120>
    {
      /* Enabling */
      if (strcmp((char *)app[0], "$PSTMCFGMSGLOK") == 0)
 8009cce:	490f      	ldr	r1, [pc, #60]	; (8009d0c <NMEA_ParsePSTMsgl+0x130>)
 8009cd0:	480d      	ldr	r0, [pc, #52]	; (8009d08 <NMEA_ParsePSTMsgl+0x12c>)
 8009cd2:	f7f6 fa8d 	bl	80001f0 <strcmp>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d103      	bne.n	8009ce4 <NMEA_ParsePSTMsgl+0x108>
      {
        *pResult = GNSS_OP_OK;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
 8009ce2:	e009      	b.n	8009cf8 <NMEA_ParsePSTMsgl+0x11c>
      }
      else if (strcmp((char *)app[0], "$PSTMCFGMSGLERROR") == 0)
 8009ce4:	490a      	ldr	r1, [pc, #40]	; (8009d10 <NMEA_ParsePSTMsgl+0x134>)
 8009ce6:	4808      	ldr	r0, [pc, #32]	; (8009d08 <NMEA_ParsePSTMsgl+0x12c>)
 8009ce8:	f7f6 fa82 	bl	80001f0 <strcmp>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d102      	bne.n	8009cf8 <NMEA_ParsePSTMsgl+0x11c>
      {
        *pResult = GNSS_OP_ERROR;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	701a      	strb	r2, [r3, #0]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	75fb      	strb	r3, [r7, #23]
    }

  }
  return status;
 8009cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	200050c0 	.word	0x200050c0
 8009d0c:	0800fa30 	.word	0x0800fa30
 8009d10:	0800fa40 	.word	0x0800fa40

08009d14 <NMEA_ParsePSTMSavePar>:

ParseStatus_t NMEA_ParsePSTMSavePar(OpResult_t *pResult, uint8_t NMEA[])
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b088      	sub	sp, #32
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	6039      	str	r1, [r7, #0]
  int32_t new_field;
  BOOL valid_msg = FALSE;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	61bb      	str	r3, [r7, #24]
  
  ParseStatus_t status = PARSE_FAIL;
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 8083 	beq.w	8009e34 <NMEA_ParsePSTMSavePar+0x120>
  {

    /* clear the app[][] buffer */ 
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009d2e:	2300      	movs	r3, #0
 8009d30:	75bb      	strb	r3, [r7, #22]
 8009d32:	e012      	b.n	8009d5a <NMEA_ParsePSTMSavePar+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8009d34:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	4413      	add	r3, r2
 8009d3e:	011b      	lsls	r3, r3, #4
 8009d40:	4a3f      	ldr	r2, [pc, #252]	; (8009e40 <NMEA_ParsePSTMSavePar+0x12c>)
 8009d42:	4413      	add	r3, r2
 8009d44:	2230      	movs	r2, #48	; 0x30
 8009d46:	2100      	movs	r1, #0
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 ffe6 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009d4e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	3301      	adds	r3, #1
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	75bb      	strb	r3, [r7, #22]
 8009d5a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009d5e:	2b2f      	cmp	r3, #47	; 0x2f
 8009d60:	dde8      	ble.n	8009d34 <NMEA_ParsePSTMSavePar+0x20>
    }
    
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009d62:	2300      	movs	r3, #0
 8009d64:	613b      	str	r3, [r7, #16]
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	60bb      	str	r3, [r7, #8]
 8009d6e:	e03f      	b.n	8009df0 <NMEA_ParsePSTMSavePar+0xdc>
    {
      new_field = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	61fb      	str	r3, [r7, #28]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	4413      	add	r3, r2
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2b2c      	cmp	r3, #44	; 0x2c
 8009d7e:	d005      	beq.n	8009d8c <NMEA_ParsePSTMSavePar+0x78>
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	683a      	ldr	r2, [r7, #0]
 8009d84:	4413      	add	r3, r2
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8a:	d119      	bne.n	8009dc0 <NMEA_ParsePSTMSavePar+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 8009d8c:	492c      	ldr	r1, [pc, #176]	; (8009e40 <NMEA_ParsePSTMSavePar+0x12c>)
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	4613      	mov	r3, r2
 8009d92:	005b      	lsls	r3, r3, #1
 8009d94:	4413      	add	r3, r2
 8009d96:	011b      	lsls	r3, r3, #4
 8009d98:	18ca      	adds	r2, r1, r3
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	2200      	movs	r2, #0
 8009da0:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8009da2:	2301      	movs	r3, #1
 8009da4:	61fb      	str	r3, [r7, #28]
        
        if (NMEA_CheckSaveparMsg((char *)app[0]) == 0)
 8009da6:	4826      	ldr	r0, [pc, #152]	; (8009e40 <NMEA_ParsePSTMSavePar+0x12c>)
 8009da8:	f7fe fb0e 	bl	80083c8 <NMEA_CheckSaveparMsg>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d125      	bne.n	8009dfe <NMEA_ParsePSTMSavePar+0xea>
        {
          j++;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
          k = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0) {
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d111      	bne.n	8009dea <NMEA_ParsePSTMSavePar+0xd6>
        app[j][k] = NMEA[i];
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	683a      	ldr	r2, [r7, #0]
 8009dca:	4413      	add	r3, r2
 8009dcc:	7818      	ldrb	r0, [r3, #0]
 8009dce:	491c      	ldr	r1, [pc, #112]	; (8009e40 <NMEA_ParsePSTMSavePar+0x12c>)
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	4413      	add	r3, r2
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	18ca      	adds	r2, r1, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4413      	add	r3, r2
 8009de0:	4602      	mov	r2, r0
 8009de2:	701a      	strb	r2, [r3, #0]
        k++;
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	3301      	adds	r3, #1
 8009de8:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	3301      	adds	r3, #1
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	4413      	add	r3, r2
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b0a      	cmp	r3, #10
 8009dfa:	d1b9      	bne.n	8009d70 <NMEA_ParsePSTMSavePar+0x5c>
 8009dfc:	e000      	b.n	8009e00 <NMEA_ParsePSTMSavePar+0xec>
          break;
 8009dfe:	bf00      	nop
      }
    }
    
    if (valid_msg == TRUE)
 8009e00:	69bb      	ldr	r3, [r7, #24]
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d116      	bne.n	8009e34 <NMEA_ParsePSTMSavePar+0x120>
    {
      if (strcmp((char *)app[0], "$PSTMSAVEPAROK") == 0)
 8009e06:	490f      	ldr	r1, [pc, #60]	; (8009e44 <NMEA_ParsePSTMSavePar+0x130>)
 8009e08:	480d      	ldr	r0, [pc, #52]	; (8009e40 <NMEA_ParsePSTMSavePar+0x12c>)
 8009e0a:	f7f6 f9f1 	bl	80001f0 <strcmp>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d103      	bne.n	8009e1c <NMEA_ParsePSTMSavePar+0x108>
      {
        *pResult = GNSS_OP_OK;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	701a      	strb	r2, [r3, #0]
 8009e1a:	e009      	b.n	8009e30 <NMEA_ParsePSTMSavePar+0x11c>
      }
      else if (strcmp((char *)app[0], "$PSTMSAVEPARERROR") == 0)
 8009e1c:	490a      	ldr	r1, [pc, #40]	; (8009e48 <NMEA_ParsePSTMSavePar+0x134>)
 8009e1e:	4808      	ldr	r0, [pc, #32]	; (8009e40 <NMEA_ParsePSTMSavePar+0x12c>)
 8009e20:	f7f6 f9e6 	bl	80001f0 <strcmp>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <NMEA_ParsePSTMSavePar+0x11c>
      {
        *pResult = GNSS_OP_ERROR;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	701a      	strb	r2, [r3, #0]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8009e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3720      	adds	r7, #32
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200050c0 	.word	0x200050c0
 8009e44:	0800fa54 	.word	0x0800fa54
 8009e48:	0800fa64 	.word	0x0800fa64

08009e4c <NMEA_ParsePSTMPASSRTN>:

ParseStatus_t NMEA_ParsePSTMPASSRTN(PSTMPASSRTN_Info_t *pPSTMPASSRTN, uint8_t NMEA[])
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b088      	sub	sp, #32
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
  int8_t new_field;
  BOOL valid_msg = FALSE;
 8009e56:	2300      	movs	r3, #0
 8009e58:	61bb      	str	r3, [r7, #24]

  ParseStatus_t status = PARSE_FAIL;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 8093 	beq.w	8009f8c <NMEA_ParsePSTMPASSRTN+0x140>
  {

    /* clear the app[][] buffer */
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009e66:	2300      	movs	r3, #0
 8009e68:	75bb      	strb	r3, [r7, #22]
 8009e6a:	e012      	b.n	8009e92 <NMEA_ParsePSTMPASSRTN+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8009e6c:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8009e70:	4613      	mov	r3, r2
 8009e72:	005b      	lsls	r3, r3, #1
 8009e74:	4413      	add	r3, r2
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	4a47      	ldr	r2, [pc, #284]	; (8009f98 <NMEA_ParsePSTMPASSRTN+0x14c>)
 8009e7a:	4413      	add	r3, r2
 8009e7c:	2230      	movs	r2, #48	; 0x30
 8009e7e:	2100      	movs	r1, #0
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 ff4a 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009e86:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	75bb      	strb	r3, [r7, #22]
 8009e92:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009e96:	2b2f      	cmp	r3, #47	; 0x2f
 8009e98:	dde8      	ble.n	8009e6c <NMEA_ParsePSTMPASSRTN+0x20>
    }

    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	613b      	str	r3, [r7, #16]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60fb      	str	r3, [r7, #12]
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60bb      	str	r3, [r7, #8]
 8009ea6:	e040      	b.n	8009f2a <NMEA_ParsePSTMPASSRTN+0xde>
    {
      new_field = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	77fb      	strb	r3, [r7, #31]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	683a      	ldr	r2, [r7, #0]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b2c      	cmp	r3, #44	; 0x2c
 8009eb6:	d005      	beq.n	8009ec4 <NMEA_ParsePSTMPASSRTN+0x78>
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec2:	d119      	bne.n	8009ef8 <NMEA_ParsePSTMPASSRTN+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 8009ec4:	4934      	ldr	r1, [pc, #208]	; (8009f98 <NMEA_ParsePSTMPASSRTN+0x14c>)
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	005b      	lsls	r3, r3, #1
 8009ecc:	4413      	add	r3, r2
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	18ca      	adds	r2, r1, r3
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 8009eda:	2301      	movs	r3, #1
 8009edc:	77fb      	strb	r3, [r7, #31]

        if (NMEA_CheckPassMsg((char *)app[0]) == 0)
 8009ede:	482e      	ldr	r0, [pc, #184]	; (8009f98 <NMEA_ParsePSTMPASSRTN+0x14c>)
 8009ee0:	f7fe fa94 	bl	800840c <NMEA_CheckPassMsg>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d126      	bne.n	8009f38 <NMEA_ParsePSTMPASSRTN+0xec>
        {
          j++;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	3301      	adds	r3, #1
 8009eee:	60fb      	str	r3, [r7, #12]
          k = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 8009ef8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d111      	bne.n	8009f24 <NMEA_ParsePSTMPASSRTN+0xd8>
      {
        app[j][k] = NMEA[i];
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	4413      	add	r3, r2
 8009f06:	7818      	ldrb	r0, [r3, #0]
 8009f08:	4923      	ldr	r1, [pc, #140]	; (8009f98 <NMEA_ParsePSTMPASSRTN+0x14c>)
 8009f0a:	68fa      	ldr	r2, [r7, #12]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	005b      	lsls	r3, r3, #1
 8009f10:	4413      	add	r3, r2
 8009f12:	011b      	lsls	r3, r3, #4
 8009f14:	18ca      	adds	r2, r1, r3
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	4413      	add	r3, r2
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	701a      	strb	r2, [r3, #0]
        k++;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	3301      	adds	r3, #1
 8009f22:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	3301      	adds	r3, #1
 8009f28:	613b      	str	r3, [r7, #16]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	4413      	add	r3, r2
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b0a      	cmp	r3, #10
 8009f34:	d1b8      	bne.n	8009ea8 <NMEA_ParsePSTMPASSRTN+0x5c>
 8009f36:	e000      	b.n	8009f3a <NMEA_ParsePSTMPASSRTN+0xee>
          break;
 8009f38:	bf00      	nop
      }
    }

    if (valid_msg == TRUE)
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d125      	bne.n	8009f8c <NMEA_ParsePSTMPASSRTN+0x140>
    {
      if (strcmp((char *)app[0], "$PSTMSTAGPS8PASSRTN") == 0)
 8009f40:	4916      	ldr	r1, [pc, #88]	; (8009f9c <NMEA_ParsePSTMPASSRTN+0x150>)
 8009f42:	4815      	ldr	r0, [pc, #84]	; (8009f98 <NMEA_ParsePSTMPASSRTN+0x14c>)
 8009f44:	f7f6 f954 	bl	80001f0 <strcmp>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d111      	bne.n	8009f72 <NMEA_ParsePSTMPASSRTN+0x126>
      {
        (void)strncpy((char *)pPSTMPASSRTN->deviceId, (char *)app[1], MAX_STR_LEN);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2220      	movs	r2, #32
 8009f52:	4913      	ldr	r1, [pc, #76]	; (8009fa0 <NMEA_ParsePSTMPASSRTN+0x154>)
 8009f54:	4618      	mov	r0, r3
 8009f56:	f001 ff9c 	bl	800be92 <strncpy>
        (void)strncpy((char *)pPSTMPASSRTN->pwd, (char *)app[2], 64);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3320      	adds	r3, #32
 8009f5e:	2240      	movs	r2, #64	; 0x40
 8009f60:	4910      	ldr	r1, [pc, #64]	; (8009fa4 <NMEA_ParsePSTMPASSRTN+0x158>)
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 ff95 	bl	800be92 <strncpy>
        pPSTMPASSRTN->result = GNSS_OP_OK;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8009f70:	e00a      	b.n	8009f88 <NMEA_ParsePSTMPASSRTN+0x13c>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPS8PASSGENERROR") == 0)
 8009f72:	490d      	ldr	r1, [pc, #52]	; (8009fa8 <NMEA_ParsePSTMPASSRTN+0x15c>)
 8009f74:	4808      	ldr	r0, [pc, #32]	; (8009f98 <NMEA_ParsePSTMPASSRTN+0x14c>)
 8009f76:	f7f6 f93b 	bl	80001f0 <strcmp>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d103      	bne.n	8009f88 <NMEA_ParsePSTMPASSRTN+0x13c>
      {
        pPSTMPASSRTN->result = GNSS_OP_ERROR;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8009f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3720      	adds	r7, #32
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	200050c0 	.word	0x200050c0
 8009f9c:	0800fa78 	.word	0x0800fa78
 8009fa0:	200050f0 	.word	0x200050f0
 8009fa4:	20005120 	.word	0x20005120
 8009fa8:	0800fa8c 	.word	0x0800fa8c

08009fac <NMEA_ParsePSTMAGPS>:

ParseStatus_t NMEA_ParsePSTMAGPS(PSTMAGPS_Info_t *pPSTMAGPS, uint8_t NMEA[])
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  int8_t new_field;
  BOOL valid_msg = FALSE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	61bb      	str	r3, [r7, #24]

  ParseStatus_t status = PARSE_FAIL;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	75fb      	strb	r3, [r7, #23]

  if(NMEA != NULL)
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 812a 	beq.w	800a21a <NMEA_ParsePSTMAGPS+0x26e>
  {
    /* clear the app[][] buffer */
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75bb      	strb	r3, [r7, #22]
 8009fca:	e012      	b.n	8009ff2 <NMEA_ParsePSTMAGPS+0x46>
    {
      (void)memset(app[i], 0, (size_t)MAX_MSG_LEN);
 8009fcc:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	005b      	lsls	r3, r3, #1
 8009fd4:	4413      	add	r3, r2
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	4a92      	ldr	r2, [pc, #584]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 8009fda:	4413      	add	r3, r2
 8009fdc:	2230      	movs	r2, #48	; 0x30
 8009fde:	2100      	movs	r1, #0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 fe9a 	bl	800ad1a <memset>
    for (int8_t i = 0; i < MAX_MSG_LEN; i++)
 8009fe6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	3301      	adds	r3, #1
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	75bb      	strb	r3, [r7, #22]
 8009ff2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009ff6:	2b2f      	cmp	r3, #47	; 0x2f
 8009ff8:	dde8      	ble.n	8009fcc <NMEA_ParsePSTMAGPS+0x20>
    }

    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	613b      	str	r3, [r7, #16]
 8009ffe:	2300      	movs	r3, #0
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	2300      	movs	r3, #0
 800a004:	60bb      	str	r3, [r7, #8]
 800a006:	e040      	b.n	800a08a <NMEA_ParsePSTMAGPS+0xde>
    {
      new_field = 0;
 800a008:	2300      	movs	r3, #0
 800a00a:	77fb      	strb	r3, [r7, #31]

      if ((NMEA[i] == (uint8_t)',') || (NMEA[i] == (uint8_t)'*'))
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	683a      	ldr	r2, [r7, #0]
 800a010:	4413      	add	r3, r2
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	2b2c      	cmp	r3, #44	; 0x2c
 800a016:	d005      	beq.n	800a024 <NMEA_ParsePSTMAGPS+0x78>
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	683a      	ldr	r2, [r7, #0]
 800a01c:	4413      	add	r3, r2
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	2b2a      	cmp	r3, #42	; 0x2a
 800a022:	d119      	bne.n	800a058 <NMEA_ParsePSTMAGPS+0xac>
      {
        app[j][k] = (uint8_t)'\0';
 800a024:	497f      	ldr	r1, [pc, #508]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4613      	mov	r3, r2
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	4413      	add	r3, r2
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	18ca      	adds	r2, r1, r3
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4413      	add	r3, r2
 800a036:	2200      	movs	r2, #0
 800a038:	701a      	strb	r2, [r3, #0]
        new_field = 1;
 800a03a:	2301      	movs	r3, #1
 800a03c:	77fb      	strb	r3, [r7, #31]

        if (NMEA_CheckAGPSMsg((char *)app[0]) == 0)
 800a03e:	4879      	ldr	r0, [pc, #484]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a040:	f7fe fa06 	bl	8008450 <NMEA_CheckAGPSMsg>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d126      	bne.n	800a098 <NMEA_ParsePSTMAGPS+0xec>
        {
          j++;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3301      	adds	r3, #1
 800a04e:	60fb      	str	r3, [r7, #12]
          k = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	60bb      	str	r3, [r7, #8]
          valid_msg = TRUE;
 800a054:	2301      	movs	r3, #1
 800a056:	61bb      	str	r3, [r7, #24]
        else
        {
          break;
        }
      }
      if(new_field == 0)
 800a058:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d111      	bne.n	800a084 <NMEA_ParsePSTMAGPS+0xd8>
      {
        app[j][k] = NMEA[i];
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	4413      	add	r3, r2
 800a066:	7818      	ldrb	r0, [r3, #0]
 800a068:	496e      	ldr	r1, [pc, #440]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	4613      	mov	r3, r2
 800a06e:	005b      	lsls	r3, r3, #1
 800a070:	4413      	add	r3, r2
 800a072:	011b      	lsls	r3, r3, #4
 800a074:	18ca      	adds	r2, r1, r3
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	4413      	add	r3, r2
 800a07a:	4602      	mov	r2, r0
 800a07c:	701a      	strb	r2, [r3, #0]
        k++;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	3301      	adds	r3, #1
 800a082:	60bb      	str	r3, [r7, #8]
    for(int32_t i = 0, j = 0, k = 0; (NMEA[i] != (uint8_t)'\n'); i++)
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	3301      	adds	r3, #1
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	4413      	add	r3, r2
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	2b0a      	cmp	r3, #10
 800a094:	d1b8      	bne.n	800a008 <NMEA_ParsePSTMAGPS+0x5c>
 800a096:	e000      	b.n	800a09a <NMEA_ParsePSTMAGPS+0xee>
          break;
 800a098:	bf00      	nop
      }
    }

    if (valid_msg == TRUE)
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	f040 80bc 	bne.w	800a21a <NMEA_ParsePSTMAGPS+0x26e>
    {
      /* Status */
      if (strcmp((char *)app[0], "$PSTMAGPSSTATUS") == 0)
 800a0a2:	4961      	ldr	r1, [pc, #388]	; (800a228 <NMEA_ParsePSTMAGPS+0x27c>)
 800a0a4:	485f      	ldr	r0, [pc, #380]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a0a6:	f7f6 f8a3 	bl	80001f0 <strcmp>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10b      	bne.n	800a0c8 <NMEA_ParsePSTMAGPS+0x11c>
      {
        pPSTMAGPS->op = GNSS_AGPS_STATUS_MSG;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	220a      	movs	r2, #10
 800a0b4:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->status = strtol((char *)app[1], NULL, BASE);
 800a0b6:	220a      	movs	r2, #10
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	485c      	ldr	r0, [pc, #368]	; (800a22c <NMEA_ParsePSTMAGPS+0x280>)
 800a0bc:	f002 fe10 	bl	800cce0 <strtol>
 800a0c0:	4602      	mov	r2, r0
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	605a      	str	r2, [r3, #4]
 800a0c6:	e0a6      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Begin */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDBEGINOK") == 0)
 800a0c8:	4959      	ldr	r1, [pc, #356]	; (800a230 <NMEA_ParsePSTMAGPS+0x284>)
 800a0ca:	4856      	ldr	r0, [pc, #344]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a0cc:	f7f6 f890 	bl	80001f0 <strcmp>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d106      	bne.n	800a0e4 <NMEA_ParsePSTMAGPS+0x138>
      {
        pPSTMAGPS->op = GNSS_AGPS_BEGIN_MSG;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	220b      	movs	r2, #11
 800a0da:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	721a      	strb	r2, [r3, #8]
 800a0e2:	e098      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDBEGINERROR") == 0)
 800a0e4:	4953      	ldr	r1, [pc, #332]	; (800a234 <NMEA_ParsePSTMAGPS+0x288>)
 800a0e6:	484f      	ldr	r0, [pc, #316]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a0e8:	f7f6 f882 	bl	80001f0 <strcmp>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d106      	bne.n	800a100 <NMEA_ParsePSTMAGPS+0x154>
      {
        pPSTMAGPS->op = GNSS_AGPS_BEGIN_MSG;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	220b      	movs	r2, #11
 800a0f6:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	721a      	strb	r2, [r3, #8]
 800a0fe:	e08a      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Block type */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSBLKTYPEOK") == 0)
 800a100:	494d      	ldr	r1, [pc, #308]	; (800a238 <NMEA_ParsePSTMAGPS+0x28c>)
 800a102:	4848      	ldr	r0, [pc, #288]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a104:	f7f6 f874 	bl	80001f0 <strcmp>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <NMEA_ParsePSTMAGPS+0x170>
      {
        pPSTMAGPS->op = GNSS_AGPS_BLKTYPE_MSG;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	220c      	movs	r2, #12
 800a112:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	721a      	strb	r2, [r3, #8]
 800a11a:	e07c      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSBLKTYPEERROR") == 0)
 800a11c:	4947      	ldr	r1, [pc, #284]	; (800a23c <NMEA_ParsePSTMAGPS+0x290>)
 800a11e:	4841      	ldr	r0, [pc, #260]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a120:	f7f6 f866 	bl	80001f0 <strcmp>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <NMEA_ParsePSTMAGPS+0x18c>
      {
        pPSTMAGPS->op = GNSS_AGPS_BLKTYPE_MSG;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	220c      	movs	r2, #12
 800a12e:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	721a      	strb	r2, [r3, #8]
 800a136:	e06e      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Slot freq */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSLOTFRQOK") == 0)
 800a138:	4941      	ldr	r1, [pc, #260]	; (800a240 <NMEA_ParsePSTMAGPS+0x294>)
 800a13a:	483a      	ldr	r0, [pc, #232]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a13c:	f7f6 f858 	bl	80001f0 <strcmp>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d106      	bne.n	800a154 <NMEA_ParsePSTMAGPS+0x1a8>
      {
        pPSTMAGPS->op = GNSS_AGPS_SLOTFRQ_MSG;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	220d      	movs	r2, #13
 800a14a:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	721a      	strb	r2, [r3, #8]
 800a152:	e060      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSLOTFRQERROR") == 0)
 800a154:	493b      	ldr	r1, [pc, #236]	; (800a244 <NMEA_ParsePSTMAGPS+0x298>)
 800a156:	4833      	ldr	r0, [pc, #204]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a158:	f7f6 f84a 	bl	80001f0 <strcmp>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <NMEA_ParsePSTMAGPS+0x1c4>
      {
        pPSTMAGPS->op = GNSS_AGPS_SLOTFRQ_MSG;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	220d      	movs	r2, #13
 800a166:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	721a      	strb	r2, [r3, #8]
 800a16e:	e052      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Seed pkt */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDPKTOK") == 0)
 800a170:	4935      	ldr	r1, [pc, #212]	; (800a248 <NMEA_ParsePSTMAGPS+0x29c>)
 800a172:	482c      	ldr	r0, [pc, #176]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a174:	f7f6 f83c 	bl	80001f0 <strcmp>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <NMEA_ParsePSTMAGPS+0x1e0>
      {
        pPSTMAGPS->op = GNSS_AGPS_SEEDPKT_MSG;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	220e      	movs	r2, #14
 800a182:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	721a      	strb	r2, [r3, #8]
 800a18a:	e044      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDPKTERROR") == 0)
 800a18c:	492f      	ldr	r1, [pc, #188]	; (800a24c <NMEA_ParsePSTMAGPS+0x2a0>)
 800a18e:	4825      	ldr	r0, [pc, #148]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a190:	f7f6 f82e 	bl	80001f0 <strcmp>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d106      	bne.n	800a1a8 <NMEA_ParsePSTMAGPS+0x1fc>
      {
        pPSTMAGPS->op = GNSS_AGPS_SEEDPKT_MSG;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	220e      	movs	r2, #14
 800a19e:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	721a      	strb	r2, [r3, #8]
 800a1a6:	e036      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Propagate */
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDPROPOK") == 0)
 800a1a8:	4929      	ldr	r1, [pc, #164]	; (800a250 <NMEA_ParsePSTMAGPS+0x2a4>)
 800a1aa:	481e      	ldr	r0, [pc, #120]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a1ac:	f7f6 f820 	bl	80001f0 <strcmp>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <NMEA_ParsePSTMAGPS+0x218>
      {
        pPSTMAGPS->op = GNSS_AGPS_PROP_MSG;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	220f      	movs	r2, #15
 800a1ba:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	721a      	strb	r2, [r3, #8]
 800a1c2:	e028      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMSTAGPSSEEDPROPERROR") == 0)
 800a1c4:	4923      	ldr	r1, [pc, #140]	; (800a254 <NMEA_ParsePSTMAGPS+0x2a8>)
 800a1c6:	4817      	ldr	r0, [pc, #92]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a1c8:	f7f6 f812 	bl	80001f0 <strcmp>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d106      	bne.n	800a1e0 <NMEA_ParsePSTMAGPS+0x234>
      {
        pPSTMAGPS->op = GNSS_AGPS_PROP_MSG;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	220f      	movs	r2, #15
 800a1d6:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	721a      	strb	r2, [r3, #8]
 800a1de:	e01a      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      /* Init time */
      else if (strcmp((char *)app[0], "$PSTMINITTIMEOK") == 0)
 800a1e0:	491d      	ldr	r1, [pc, #116]	; (800a258 <NMEA_ParsePSTMAGPS+0x2ac>)
 800a1e2:	4810      	ldr	r0, [pc, #64]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a1e4:	f7f6 f804 	bl	80001f0 <strcmp>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d106      	bne.n	800a1fc <NMEA_ParsePSTMAGPS+0x250>
      {
        pPSTMAGPS->op = GNSS_AGPS_INITTIME_MSG;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2210      	movs	r2, #16
 800a1f2:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_OK;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	721a      	strb	r2, [r3, #8]
 800a1fa:	e00c      	b.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      }
      else if (strcmp((char *)app[0], "$PSTMINITTIMEERROR") == 0)
 800a1fc:	4917      	ldr	r1, [pc, #92]	; (800a25c <NMEA_ParsePSTMAGPS+0x2b0>)
 800a1fe:	4809      	ldr	r0, [pc, #36]	; (800a224 <NMEA_ParsePSTMAGPS+0x278>)
 800a200:	f7f5 fff6 	bl	80001f0 <strcmp>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d105      	bne.n	800a216 <NMEA_ParsePSTMAGPS+0x26a>
      {
        pPSTMAGPS->op = GNSS_AGPS_INITTIME_MSG;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2210      	movs	r2, #16
 800a20e:	701a      	strb	r2, [r3, #0]
        pPSTMAGPS->result = GNSS_OP_ERROR;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	721a      	strb	r2, [r3, #8]
      else
      {
        /* do nothing */
      }

      status = PARSE_SUCC;
 800a216:	2300      	movs	r3, #0
 800a218:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800a21a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3720      	adds	r7, #32
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	200050c0 	.word	0x200050c0
 800a228:	0800faa8 	.word	0x0800faa8
 800a22c:	200050f0 	.word	0x200050f0
 800a230:	0800fab8 	.word	0x0800fab8
 800a234:	0800fad0 	.word	0x0800fad0
 800a238:	0800faec 	.word	0x0800faec
 800a23c:	0800fb04 	.word	0x0800fb04
 800a240:	0800fb1c 	.word	0x0800fb1c
 800a244:	0800fb34 	.word	0x0800fb34
 800a248:	0800fb4c 	.word	0x0800fb4c
 800a24c:	0800fb64 	.word	0x0800fb64
 800a250:	0800fb7c 	.word	0x0800fb7c
 800a254:	0800fb94 	.word	0x0800fb94
 800a258:	0800fbb0 	.word	0x0800fbb0
 800a25c:	0800fbc0 	.word	0x0800fbc0

0800a260 <char2int>:
 * @brief  Function that converts a character to unsigned integer
 * @param  c        The character to convert
 * @retval The returned unsigned integer
 */
uint32_t char2int(uint8_t c)
{
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = (unsigned char)0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	60fb      	str	r3, [r7, #12]

  if((c >= (uint8_t)'0') && (c <= (uint8_t)'9'))
 800a26e:	79fb      	ldrb	r3, [r7, #7]
 800a270:	2b2f      	cmp	r3, #47	; 0x2f
 800a272:	d906      	bls.n	800a282 <char2int+0x22>
 800a274:	79fb      	ldrb	r3, [r7, #7]
 800a276:	2b39      	cmp	r3, #57	; 0x39
 800a278:	d803      	bhi.n	800a282 <char2int+0x22>
  {
    ret = (unsigned char)(c - (uint8_t)'0');
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	3b30      	subs	r3, #48	; 0x30
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	60fb      	str	r3, [r7, #12]
  }

  if((c >= (uint8_t)'A') && (c <= (uint8_t)'F'))
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	2b40      	cmp	r3, #64	; 0x40
 800a286:	d907      	bls.n	800a298 <char2int+0x38>
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	2b46      	cmp	r3, #70	; 0x46
 800a28c:	d804      	bhi.n	800a298 <char2int+0x38>
  {
    ret = (unsigned char)(c - (uint8_t)'A') + (unsigned)10;
 800a28e:	79fb      	ldrb	r3, [r7, #7]
 800a290:	3b41      	subs	r3, #65	; 0x41
 800a292:	b2db      	uxtb	r3, r3
 800a294:	330a      	adds	r3, #10
 800a296:	60fb      	str	r3, [r7, #12]
  }

  if((c >= (uint8_t)'a') && (c <= (uint8_t)'f'))
 800a298:	79fb      	ldrb	r3, [r7, #7]
 800a29a:	2b60      	cmp	r3, #96	; 0x60
 800a29c:	d907      	bls.n	800a2ae <char2int+0x4e>
 800a29e:	79fb      	ldrb	r3, [r7, #7]
 800a2a0:	2b66      	cmp	r3, #102	; 0x66
 800a2a2:	d804      	bhi.n	800a2ae <char2int+0x4e>
  {
    ret = (unsigned char)(c - (uint8_t)'a') + (unsigned)10;
 800a2a4:	79fb      	ldrb	r3, [r7, #7]
 800a2a6:	3b61      	subs	r3, #97	; 0x61
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	330a      	adds	r3, #10
 800a2ac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr

0800a2bc <GNSS_Bus_Reset>:
  "Boundary",
  "Inside"
};

void GNSS_Bus_Reset(void *pHandle)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	GPS_setDrvParam(GPS_UART_INT_ON, 0);
 800a2c4:	2100      	movs	r1, #0
 800a2c6:	2001      	movs	r0, #1
 800a2c8:	f7f6 ffb4 	bl	8001234 <GPS_setDrvParam>

	GPS_setDrvParam(GPS_UART_INT_ON, 1);
 800a2cc:	2101      	movs	r1, #1
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	f7f6 ffb0 	bl	8001234 <GPS_setDrvParam>

	return;
 800a2d4:	bf00      	nop
}
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <GNSS_DATA_IF_ConsoleWrite>:
/* Puts a string to console */
void GNSS_DATA_IF_ConsoleWrite(uint8_t *pBuffer)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  osMutexAcquire(consoleMutexHandle, osWaitForever);
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	; (800a324 <GNSS_DATA_IF_ConsoleWrite+0x48>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f04f 31ff 	mov.w	r1, #4294967295
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fa fb3d 	bl	800496c <osMutexAcquire>

	if(HAL_UART_Transmit(&huart2, pBuffer, (uint16_t)strlen((char*)pBuffer), 1000) != HAL_OK){
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7f5 ff86 	bl	8000204 <strlen>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a300:	6879      	ldr	r1, [r7, #4]
 800a302:	4809      	ldr	r0, [pc, #36]	; (800a328 <GNSS_DATA_IF_ConsoleWrite+0x4c>)
 800a304:	f7f9 f8c0 	bl	8003488 <HAL_UART_Transmit>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d105      	bne.n	800a31a <GNSS_DATA_IF_ConsoleWrite+0x3e>
		return;
	}

  osMutexRelease(consoleMutexHandle);
 800a30e:	4b05      	ldr	r3, [pc, #20]	; (800a324 <GNSS_DATA_IF_ConsoleWrite+0x48>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4618      	mov	r0, r3
 800a314:	f7fa fb75 	bl	8004a02 <osMutexRelease>
 800a318:	e000      	b.n	800a31c <GNSS_DATA_IF_ConsoleWrite+0x40>
		return;
 800a31a:	bf00      	nop
}
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	200005bc 	.word	0x200005bc
 800a328:	20000624 	.word	0x20000624

0800a32c <GNSS_DATA_IF_GetValidInfo>:
  return (int8_t)status;
}

/* Puts to console data of correctly parsed GPGGA sentence */
void GNSS_DATA_IF_GetValidInfo(GNSSParser_Data_t *pGNSSParser_Data)
{
 800a32c:	b5b0      	push	{r4, r5, r7, lr}
 800a32e:	b086      	sub	sp, #24
 800a330:	af04      	add	r7, sp, #16
 800a332:	6078      	str	r0, [r7, #4]
  
  if(pGNSSParser_Data->gpgga_data.valid == VALID)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	f040 80fb 	bne.w	800a536 <GNSS_DATA_IF_GetValidInfo+0x20a>
  {    
    snprintf(msg, MSG_SZ, "UTC:\t\t\t[ %02ld:%02ld:%02ld ]\r\n",
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68d9      	ldr	r1, [r3, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	6952      	ldr	r2, [r2, #20]
 800a34c:	9201      	str	r2, [sp, #4]
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	460b      	mov	r3, r1
 800a352:	4a81      	ldr	r2, [pc, #516]	; (800a558 <GNSS_DATA_IF_GetValidInfo+0x22c>)
 800a354:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a358:	4880      	ldr	r0, [pc, #512]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a35a:	f001 fd03 	bl	800bd64 <sniprintf>
            pGNSSParser_Data->gpgga_data.utc.hh, 
            pGNSSParser_Data->gpgga_data.utc.mm, 
            pGNSSParser_Data->gpgga_data.utc.ss);
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a35e:	487f      	ldr	r0, [pc, #508]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a360:	f7ff ffbc 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    
    snprintf(msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %c ]\r\n",
            (pGNSSParser_Data->gpgga_data.xyz.lat - ((int)pGNSSParser_Data->gpgga_data.xyz.lat % 100)) / 100, 
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a370:	4610      	mov	r0, r2
 800a372:	4619      	mov	r1, r3
 800a374:	f7f6 fc10 	bl	8000b98 <__aeabi_d2iz>
 800a378:	4602      	mov	r2, r0
 800a37a:	4b79      	ldr	r3, [pc, #484]	; (800a560 <GNSS_DATA_IF_GetValidInfo+0x234>)
 800a37c:	fb83 1302 	smull	r1, r3, r3, r2
 800a380:	1159      	asrs	r1, r3, #5
 800a382:	17d3      	asrs	r3, r2, #31
 800a384:	1acb      	subs	r3, r1, r3
 800a386:	2164      	movs	r1, #100	; 0x64
 800a388:	fb01 f303 	mul.w	r3, r1, r3
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	4618      	mov	r0, r3
 800a390:	f7f6 f8e8 	bl	8000564 <__aeabi_i2d>
 800a394:	4602      	mov	r2, r0
 800a396:	460b      	mov	r3, r1
 800a398:	4620      	mov	r0, r4
 800a39a:	4629      	mov	r1, r5
 800a39c:	f7f5 ff94 	bl	80002c8 <__aeabi_dsub>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	4619      	mov	r1, r3
    snprintf(msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %c ]\r\n",
 800a3a8:	f04f 0200 	mov.w	r2, #0
 800a3ac:	4b6d      	ldr	r3, [pc, #436]	; (800a564 <GNSS_DATA_IF_GetValidInfo+0x238>)
 800a3ae:	f7f6 fa6d 	bl	800088c <__aeabi_ddiv>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4614      	mov	r4, r2
 800a3b8:	461d      	mov	r5, r3
            ((int)pGNSSParser_Data->gpgga_data.xyz.lat % 100), 
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800a3c0:	4610      	mov	r0, r2
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	f7f6 fbe8 	bl	8000b98 <__aeabi_d2iz>
 800a3c8:	4602      	mov	r2, r0
    snprintf(msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %c ]\r\n",
 800a3ca:	4b65      	ldr	r3, [pc, #404]	; (800a560 <GNSS_DATA_IF_GetValidInfo+0x234>)
 800a3cc:	fb83 1302 	smull	r1, r3, r3, r2
 800a3d0:	1159      	asrs	r1, r3, #5
 800a3d2:	17d3      	asrs	r3, r2, #31
 800a3d4:	1acb      	subs	r3, r1, r3
 800a3d6:	2164      	movs	r1, #100	; 0x64
 800a3d8:	fb01 f303 	mul.w	r3, r1, r3
 800a3dc:	1ad3      	subs	r3, r2, r3
            pGNSSParser_Data->gpgga_data.xyz.ns);          
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    snprintf(msg, MSG_SZ, "Latitude:\t\t[ %.0f' %d'' %c ]\r\n",
 800a3e4:	9203      	str	r2, [sp, #12]
 800a3e6:	9302      	str	r3, [sp, #8]
 800a3e8:	e9cd 4500 	strd	r4, r5, [sp]
 800a3ec:	4a5e      	ldr	r2, [pc, #376]	; (800a568 <GNSS_DATA_IF_GetValidInfo+0x23c>)
 800a3ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a3f2:	485a      	ldr	r0, [pc, #360]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a3f4:	f001 fcb6 	bl	800bd64 <sniprintf>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a3f8:	4858      	ldr	r0, [pc, #352]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a3fa:	f7ff ff6f 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    
    snprintf(msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %c ]\r\n",
            (pGNSSParser_Data->gpgga_data.xyz.lon - ((int)pGNSSParser_Data->gpgga_data.xyz.lon % 100)) / 100, 
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a40a:	4610      	mov	r0, r2
 800a40c:	4619      	mov	r1, r3
 800a40e:	f7f6 fbc3 	bl	8000b98 <__aeabi_d2iz>
 800a412:	4602      	mov	r2, r0
 800a414:	4b52      	ldr	r3, [pc, #328]	; (800a560 <GNSS_DATA_IF_GetValidInfo+0x234>)
 800a416:	fb83 1302 	smull	r1, r3, r3, r2
 800a41a:	1159      	asrs	r1, r3, #5
 800a41c:	17d3      	asrs	r3, r2, #31
 800a41e:	1acb      	subs	r3, r1, r3
 800a420:	2164      	movs	r1, #100	; 0x64
 800a422:	fb01 f303 	mul.w	r3, r1, r3
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	4618      	mov	r0, r3
 800a42a:	f7f6 f89b 	bl	8000564 <__aeabi_i2d>
 800a42e:	4602      	mov	r2, r0
 800a430:	460b      	mov	r3, r1
 800a432:	4620      	mov	r0, r4
 800a434:	4629      	mov	r1, r5
 800a436:	f7f5 ff47 	bl	80002c8 <__aeabi_dsub>
 800a43a:	4602      	mov	r2, r0
 800a43c:	460b      	mov	r3, r1
 800a43e:	4610      	mov	r0, r2
 800a440:	4619      	mov	r1, r3
    snprintf(msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %c ]\r\n",
 800a442:	f04f 0200 	mov.w	r2, #0
 800a446:	4b47      	ldr	r3, [pc, #284]	; (800a564 <GNSS_DATA_IF_GetValidInfo+0x238>)
 800a448:	f7f6 fa20 	bl	800088c <__aeabi_ddiv>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	4614      	mov	r4, r2
 800a452:	461d      	mov	r5, r3
            ((int)pGNSSParser_Data->gpgga_data.xyz.lon % 100),
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a45a:	4610      	mov	r0, r2
 800a45c:	4619      	mov	r1, r3
 800a45e:	f7f6 fb9b 	bl	8000b98 <__aeabi_d2iz>
 800a462:	4602      	mov	r2, r0
    snprintf(msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %c ]\r\n",
 800a464:	4b3e      	ldr	r3, [pc, #248]	; (800a560 <GNSS_DATA_IF_GetValidInfo+0x234>)
 800a466:	fb83 1302 	smull	r1, r3, r3, r2
 800a46a:	1159      	asrs	r1, r3, #5
 800a46c:	17d3      	asrs	r3, r2, #31
 800a46e:	1acb      	subs	r3, r1, r3
 800a470:	2164      	movs	r1, #100	; 0x64
 800a472:	fb01 f303 	mul.w	r3, r1, r3
 800a476:	1ad3      	subs	r3, r2, r3
            pGNSSParser_Data->gpgga_data.xyz.ew);
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
    snprintf(msg, MSG_SZ, "Longitude:\t\t[ %.0f' %d'' %c ]\r\n",
 800a47e:	9203      	str	r2, [sp, #12]
 800a480:	9302      	str	r3, [sp, #8]
 800a482:	e9cd 4500 	strd	r4, r5, [sp]
 800a486:	4a39      	ldr	r2, [pc, #228]	; (800a56c <GNSS_DATA_IF_GetValidInfo+0x240>)
 800a488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a48c:	4833      	ldr	r0, [pc, #204]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a48e:	f001 fc69 	bl	800bd64 <sniprintf>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a492:	4832      	ldr	r0, [pc, #200]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a494:	f7ff ff22 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    
    snprintf(msg, MSG_SZ, "Satellites locked:\t[ %ld ]\r\n",
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49c:	4a34      	ldr	r2, [pc, #208]	; (800a570 <GNSS_DATA_IF_GetValidInfo+0x244>)
 800a49e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a4a2:	482e      	ldr	r0, [pc, #184]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a4a4:	f001 fc5e 	bl	800bd64 <sniprintf>
            pGNSSParser_Data->gpgga_data.sats);
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a4a8:	482c      	ldr	r0, [pc, #176]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a4aa:	f7ff ff17 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    
    snprintf(msg, MSG_SZ, "Position accuracy:\t[ %.1f ]\r\n",
            pGNSSParser_Data->gpgga_data.acc);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    snprintf(msg, MSG_SZ, "Position accuracy:\t[ %.1f ]\r\n",
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7f6 f868 	bl	8000588 <__aeabi_f2d>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	e9cd 2300 	strd	r2, r3, [sp]
 800a4c0:	4a2c      	ldr	r2, [pc, #176]	; (800a574 <GNSS_DATA_IF_GetValidInfo+0x248>)
 800a4c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a4c6:	4825      	ldr	r0, [pc, #148]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a4c8:	f001 fc4c 	bl	800bd64 <sniprintf>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a4cc:	4823      	ldr	r0, [pc, #140]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a4ce:	f7ff ff05 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    
    snprintf(msg, MSG_SZ, "Altitude:\t\t[ %.2f%c ]\r\n",
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
            pGNSSParser_Data->gpgga_data.xyz.alt, 
            (pGNSSParser_Data->gpgga_data.xyz.mis + 32));
 800a4d8:	6879      	ldr	r1, [r7, #4]
 800a4da:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    snprintf(msg, MSG_SZ, "Altitude:\t\t[ %.2f%c ]\r\n",
 800a4de:	3120      	adds	r1, #32
 800a4e0:	9102      	str	r1, [sp, #8]
 800a4e2:	e9cd 2300 	strd	r2, r3, [sp]
 800a4e6:	4a24      	ldr	r2, [pc, #144]	; (800a578 <GNSS_DATA_IF_GetValidInfo+0x24c>)
 800a4e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a4ec:	481b      	ldr	r0, [pc, #108]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a4ee:	f001 fc39 	bl	800bd64 <sniprintf>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a4f2:	481a      	ldr	r0, [pc, #104]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a4f4:	f7ff fef2 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    
    snprintf(msg, MSG_SZ, "Geoid infos:\t\t[ %ld%c ]\r\n",
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            pGNSSParser_Data->gpgga_data.geoid.height, 
            pGNSSParser_Data->gpgga_data.geoid.mis);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    snprintf(msg, MSG_SZ, "Geoid infos:\t\t[ %ld%c ]\r\n",
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	4613      	mov	r3, r2
 800a506:	4a1d      	ldr	r2, [pc, #116]	; (800a57c <GNSS_DATA_IF_GetValidInfo+0x250>)
 800a508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a50c:	4813      	ldr	r0, [pc, #76]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a50e:	f001 fc29 	bl	800bd64 <sniprintf>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a512:	4812      	ldr	r0, [pc, #72]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a514:	f7ff fee2 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    
    snprintf(msg, MSG_SZ, "Diff update:\t\t[ %ld ]\r\n",
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a51c:	4a18      	ldr	r2, [pc, #96]	; (800a580 <GNSS_DATA_IF_GetValidInfo+0x254>)
 800a51e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a522:	480e      	ldr	r0, [pc, #56]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a524:	f001 fc1e 	bl	800bd64 <sniprintf>
            pGNSSParser_Data->gpgga_data.update);  
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a528:	480c      	ldr	r0, [pc, #48]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a52a:	f7ff fed7 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    
    GNSS_Bus_Reset(NULL);
 800a52e:	2000      	movs	r0, #0
 800a530:	f7ff fec4 	bl	800a2bc <GNSS_Bus_Reset>
 800a534:	e008      	b.n	800a548 <GNSS_DATA_IF_GetValidInfo+0x21c>
  }
  else
  {
    snprintf(msg, MSG_SZ,  "Last position wasn't valid.\r\n");
 800a536:	4a13      	ldr	r2, [pc, #76]	; (800a584 <GNSS_DATA_IF_GetValidInfo+0x258>)
 800a538:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a53c:	4807      	ldr	r0, [pc, #28]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a53e:	f001 fc11 	bl	800bd64 <sniprintf>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a542:	4806      	ldr	r0, [pc, #24]	; (800a55c <GNSS_DATA_IF_GetValidInfo+0x230>)
 800a544:	f7ff feca 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
  }
  
  GNSS_DATA_IF_ConsoleWrite((uint8_t *)"\r\n>");
 800a548:	480f      	ldr	r0, [pc, #60]	; (800a588 <GNSS_DATA_IF_GetValidInfo+0x25c>)
 800a54a:	f7ff fec7 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
}
 800a54e:	bf00      	nop
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bdb0      	pop	{r4, r5, r7, pc}
 800a556:	bf00      	nop
 800a558:	0800fc1c 	.word	0x0800fc1c
 800a55c:	200059c0 	.word	0x200059c0
 800a560:	51eb851f 	.word	0x51eb851f
 800a564:	40590000 	.word	0x40590000
 800a568:	0800fc3c 	.word	0x0800fc3c
 800a56c:	0800fc5c 	.word	0x0800fc5c
 800a570:	0800fc7c 	.word	0x0800fc7c
 800a574:	0800fc9c 	.word	0x0800fc9c
 800a578:	0800fcbc 	.word	0x0800fcbc
 800a57c:	0800fcd4 	.word	0x0800fcd4
 800a580:	0800fcf0 	.word	0x0800fcf0
 800a584:	0800fd08 	.word	0x0800fd08
 800a588:	0800fd28 	.word	0x0800fd28

0800a58c <GNSS_DATA_IF_GetMsglistAck>:
  
}

 /* Puts to console the confirmation of an updated message list. */
void GNSS_DATA_IF_GetMsglistAck(void *pHandle, GNSSParser_Data_t *pGNSSParser_Data)
{ 
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  if(pGNSSParser_Data->result == GNSS_OP_OK)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10f      	bne.n	800a5c0 <GNSS_DATA_IF_GetMsglistAck+0x34>
  {
    GNSS_DATA_IF_SendCommand(pHandle, "$PSTMSAVEPAR");
 800a5a0:	4909      	ldr	r1, [pc, #36]	; (800a5c8 <GNSS_DATA_IF_GetMsglistAck+0x3c>)
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f83c 	bl	800a620 <GNSS_DATA_IF_SendCommand>
    snprintf(msg, MSG_SZ,  "Saving NMEA msg configuration...\t");
 800a5a8:	4a08      	ldr	r2, [pc, #32]	; (800a5cc <GNSS_DATA_IF_GetMsglistAck+0x40>)
 800a5aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5ae:	4808      	ldr	r0, [pc, #32]	; (800a5d0 <GNSS_DATA_IF_GetMsglistAck+0x44>)
 800a5b0:	f001 fbd8 	bl	800bd64 <sniprintf>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a5b4:	4806      	ldr	r0, [pc, #24]	; (800a5d0 <GNSS_DATA_IF_GetMsglistAck+0x44>)
 800a5b6:	f7ff fe91 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)"\r\n>");
 800a5ba:	4806      	ldr	r0, [pc, #24]	; (800a5d4 <GNSS_DATA_IF_GetMsglistAck+0x48>)
 800a5bc:	f7ff fe8e 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	3708      	adds	r7, #8
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	08010620 	.word	0x08010620
 800a5cc:	08010998 	.word	0x08010998
 800a5d0:	200059c0 	.word	0x200059c0
 800a5d4:	0800fd28 	.word	0x0800fd28

0800a5d8 <GNSS_DATA_IF_GetGNSSAck>:

/* Puts to console the confirmation after saving params.
   NOTE: GNSS must be reset for the new saved params to have effect.
*/
void GNSS_DATA_IF_GetGNSSAck(void *pHandle, GNSSParser_Data_t *pGNSSParser_Data)
{ 
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	6039      	str	r1, [r7, #0]
  if(pGNSSParser_Data->result == GNSS_OP_OK) {
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	f893 33a4 	ldrb.w	r3, [r3, #932]	; 0x3a4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10e      	bne.n	800a60a <GNSS_DATA_IF_GetGNSSAck+0x32>
    GNSS_Bus_Reset(pHandle);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f7ff fe65 	bl	800a2bc <GNSS_Bus_Reset>
    snprintf(msg, MSG_SZ,  " Resetting...\t");
 800a5f2:	4a08      	ldr	r2, [pc, #32]	; (800a614 <GNSS_DATA_IF_GetGNSSAck+0x3c>)
 800a5f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a5f8:	4807      	ldr	r0, [pc, #28]	; (800a618 <GNSS_DATA_IF_GetGNSSAck+0x40>)
 800a5fa:	f001 fbb3 	bl	800bd64 <sniprintf>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)msg);
 800a5fe:	4806      	ldr	r0, [pc, #24]	; (800a618 <GNSS_DATA_IF_GetGNSSAck+0x40>)
 800a600:	f7ff fe6c 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)"\r\n>");
 800a604:	4805      	ldr	r0, [pc, #20]	; (800a61c <GNSS_DATA_IF_GetGNSSAck+0x44>)
 800a606:	f7ff fe69 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
  }
}
 800a60a:	bf00      	nop
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	080109bc 	.word	0x080109bc
 800a618:	200059c0 	.word	0x200059c0
 800a61c:	0800fd28 	.word	0x0800fd28

0800a620 <GNSS_DATA_IF_SendCommand>:

/* Sends a command to the GNSS module. */
void GNSS_DATA_IF_SendCommand(void *pHandle, char *pCommand)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  if (pCommand[0] != 36) /* An NMEA command must begin with '$' */
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	2b24      	cmp	r3, #36	; 0x24
 800a630:	d003      	beq.n	800a63a <GNSS_DATA_IF_SendCommand+0x1a>
  {
    GNSS_DATA_IF_ConsoleWrite((uint8_t *)"Invalid command (an NMEA command begins with '$').\n\r");
 800a632:	4808      	ldr	r0, [pc, #32]	; (800a654 <GNSS_DATA_IF_SendCommand+0x34>)
 800a634:	f7ff fe52 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
//    if (GNSS_Bus_Write(pHandle, (uint8_t *)gnssCmd, strlen(gnssCmd), MAX_DURATION) != GNSS_OK)
//    {
      GNSS_DATA_IF_ConsoleWrite((uint8_t *)gnssCmd);
//    }
  }
}
 800a638:	e008      	b.n	800a64c <GNSS_DATA_IF_SendCommand+0x2c>
    snprintf(gnssCmd, CMD_SZ, "%s\n\r", pCommand);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	4a06      	ldr	r2, [pc, #24]	; (800a658 <GNSS_DATA_IF_SendCommand+0x38>)
 800a63e:	215a      	movs	r1, #90	; 0x5a
 800a640:	4806      	ldr	r0, [pc, #24]	; (800a65c <GNSS_DATA_IF_SendCommand+0x3c>)
 800a642:	f001 fb8f 	bl	800bd64 <sniprintf>
      GNSS_DATA_IF_ConsoleWrite((uint8_t *)gnssCmd);
 800a646:	4805      	ldr	r0, [pc, #20]	; (800a65c <GNSS_DATA_IF_SendCommand+0x3c>)
 800a648:	f7ff fe48 	bl	800a2dc <GNSS_DATA_IF_ConsoleWrite>
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	080109cc 	.word	0x080109cc
 800a658:	08010a04 	.word	0x08010a04
 800a65c:	20005ac0 	.word	0x20005ac0

0800a660 <semaphore_lock>:
#ifdef USE_FREE_RTOS
/*
 * Wrapper for Semaphore lock.
 */
static inline void semaphore_lock(SemaphoreHandle_t sem)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  (void)xSemaphoreTake(sem, 5000);
 800a668:	f241 3188 	movw	r1, #5000	; 0x1388
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f7fa ffe7 	bl	8005640 <xQueueSemaphoreTake>
}
 800a672:	bf00      	nop
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <semaphore_free>:

/*
 * Wrapper for Semaphore release.
 */
static inline void semaphore_free(SemaphoreHandle_t sem)
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b082      	sub	sp, #8
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  (void)xSemaphoreGive(sem);
 800a682:	2300      	movs	r3, #0
 800a684:	2200      	movs	r2, #0
 800a686:	2100      	movs	r1, #0
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f7fa fcd3 	bl	8005034 <xQueueGenericSend>
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
	...

0800a698 <semaphore_lock_irq>:

/*
 * Wrapper for Semaphore lock from interrupt context.
 */
static inline BaseType_t semaphore_lock_irq(SemaphoreHandle_t sem)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  return xSemaphoreTakeFromISR(sem,  &b);
 800a6a0:	4a04      	ldr	r2, [pc, #16]	; (800a6b4 <semaphore_lock_irq+0x1c>)
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f7fb f8d7 	bl	8005858 <xQueueReceiveFromISR>
 800a6aa:	4603      	mov	r3, r0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20000010 	.word	0x20000010

0800a6b8 <semaphore_free_irq>:

/*
 * Wrapper for Semaphore release from interrupt context.
 */
static inline void semaphore_free_irq(SemaphoreHandle_t sem)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  (void)xSemaphoreGiveFromISR(sem, &b);
 800a6c0:	4903      	ldr	r1, [pc, #12]	; (800a6d0 <semaphore_free_irq+0x18>)
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7fa fe4f 	bl	8005366 <xQueueGiveFromISR>
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20000010 	.word	0x20000010

0800a6d4 <Teseo_Queue_static_alloc>:

/*
 * Returns the static instance of a Queue object.
 */
static Teseo_QueueTypeDef *Teseo_Queue_static_alloc(void)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0
  static Teseo_QueueTypeDef Teseo_Queue_Instance;
  return &Teseo_Queue_Instance;
 800a6d8:	4b02      	ldr	r3, [pc, #8]	; (800a6e4 <Teseo_Queue_static_alloc+0x10>)
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	20005b1c 	.word	0x20005b1c

0800a6e8 <__find_msg_idx>:

/*
 * Returns the index of a message in the queue.
 */
static int32_t __find_msg_idx(const Teseo_QueueTypeDef *pTeseoQueue, const GNSS_MsgTypeDef *pMsg)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  int32_t i;
  
  for (i = 0; i < MAX_MSG_QUEUE; ++i)
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60fb      	str	r3, [r7, #12]
 800a6f6:	e00c      	b.n	800a712 <__find_msg_idx+0x2a>
  {
    if (&pTeseoQueue->nmea_queue[i] == pMsg)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	00db      	lsls	r3, r3, #3
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	4413      	add	r3, r2
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	429a      	cmp	r2, r3
 800a706:	d101      	bne.n	800a70c <__find_msg_idx+0x24>
    {
      return i;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	e007      	b.n	800a71c <__find_msg_idx+0x34>
  for (i = 0; i < MAX_MSG_QUEUE; ++i)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	3301      	adds	r3, #1
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b07      	cmp	r3, #7
 800a716:	ddef      	ble.n	800a6f8 <__find_msg_idx+0x10>
    }
  }
  
  return -1;
 800a718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3714      	adds	r7, #20
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <__check_unreleased_buffer>:

/*
 * Checks for buffers not yet released.
 */
static void __check_unreleased_buffer(Teseo_QueueTypeDef *pTeseoQueue)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
#ifdef USE_FREE_RTOS
  if (pTeseoQueue->bitmap_unreleased_buffer_irq == 0UL)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00d      	beq.n	800a754 <__check_unreleased_buffer+0x2c>
  {
    return;
  }
  
  Console_Debug("R\n\r");
 800a738:	4808      	ldr	r0, [pc, #32]	; (800a75c <__check_unreleased_buffer+0x34>)
 800a73a:	f001 fa05 	bl	800bb48 <iprintf>
  pTeseoQueue->bitmap_buffer_readable |= pTeseoQueue->bitmap_unreleased_buffer_irq;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	431a      	orrs	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	60da      	str	r2, [r3, #12]
  pTeseoQueue->bitmap_unreleased_buffer_irq = 0;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	605a      	str	r2, [r3, #4]
 800a752:	e000      	b.n	800a756 <__check_unreleased_buffer+0x2e>
    return;
 800a754:	bf00      	nop
#endif /* USE_FREE_RTOS */
}
 800a756:	3708      	adds	r7, #8
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	08010b14 	.word	0x08010b14

0800a760 <check_longer_msg>:

/*
 * Checks for messages longer than MAX_MSG_BUF.
 */
static void check_longer_msg(Teseo_QueueTypeDef *pTeseoQueue, const GNSS_MsgTypeDef *pMsg, uint32_t idx, int8_t wr_or_rd)
{
 800a760:	b480      	push	{r7}
 800a762:	b089      	sub	sp, #36	; 0x24
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	60b9      	str	r1, [r7, #8]
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	70fb      	strb	r3, [r7, #3]
  if (pMsg->len <= (uint32_t)MAX_MSG_BUF)
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	2b50      	cmp	r3, #80	; 0x50
 800a774:	d944      	bls.n	800a800 <check_longer_msg+0xa0>
  {
    return;
  }
  
  uint32_t j;
  uint32_t extra_bufs = (pMsg->len / (uint32_t)MAX_MSG_BUF) + (((pMsg->len % (uint32_t)MAX_MSG_BUF) != 0U) ? 1U : 0U);
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	4a24      	ldr	r2, [pc, #144]	; (800a80c <check_longer_msg+0xac>)
 800a77c:	fba2 2303 	umull	r2, r3, r2, r3
 800a780:	0998      	lsrs	r0, r3, #6
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6859      	ldr	r1, [r3, #4]
 800a786:	4b21      	ldr	r3, [pc, #132]	; (800a80c <check_longer_msg+0xac>)
 800a788:	fba3 2301 	umull	r2, r3, r3, r1
 800a78c:	099a      	lsrs	r2, r3, #6
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	011b      	lsls	r3, r3, #4
 800a796:	1aca      	subs	r2, r1, r3
 800a798:	2a00      	cmp	r2, #0
 800a79a:	d001      	beq.n	800a7a0 <check_longer_msg+0x40>
 800a79c:	2301      	movs	r3, #1
 800a79e:	e000      	b.n	800a7a2 <check_longer_msg+0x42>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4403      	add	r3, r0
 800a7a4:	61bb      	str	r3, [r7, #24]
  
  for (j = 0; j < extra_bufs; j++)
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	61fb      	str	r3, [r7, #28]
 800a7aa:	e024      	b.n	800a7f6 <check_longer_msg+0x96>
  {
    uint32_t rhs = (idx + j);
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	617b      	str	r3, [r7, #20]

    if (wr_or_rd == 1)
 800a7b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d10d      	bne.n	800a7d8 <check_longer_msg+0x78>
    {
      if(rhs < 32U)
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	2b1f      	cmp	r3, #31
 800a7c0:	d816      	bhi.n	800a7f0 <check_longer_msg+0x90>
      {
        pTeseoQueue->bitmap_buffer_writable &= ~(1UL << rhs);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	689a      	ldr	r2, [r3, #8]
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ce:	43db      	mvns	r3, r3
 800a7d0:	401a      	ands	r2, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	609a      	str	r2, [r3, #8]
 800a7d6:	e00b      	b.n	800a7f0 <check_longer_msg+0x90>
      }
    }
    else
    {
      if(rhs < 32U)
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2b1f      	cmp	r3, #31
 800a7dc:	d808      	bhi.n	800a7f0 <check_longer_msg+0x90>
      {
        pTeseoQueue->bitmap_buffer_writable |= (1UL << rhs);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	689a      	ldr	r2, [r3, #8]
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	609a      	str	r2, [r3, #8]
  for (j = 0; j < extra_bufs; j++)
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	61fb      	str	r3, [r7, #28]
 800a7f6:	69fa      	ldr	r2, [r7, #28]
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d3d6      	bcc.n	800a7ac <check_longer_msg+0x4c>
 800a7fe:	e000      	b.n	800a802 <check_longer_msg+0xa2>
    return;
 800a800:	bf00      	nop
      }
    }
  }
}
 800a802:	3724      	adds	r7, #36	; 0x24
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	cccccccd 	.word	0xcccccccd

0800a810 <teseo_queue_init>:

/* Exported functions --------------------------------------------------------*/
Teseo_QueueTypeDef *teseo_queue_init(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
  Teseo_QueueTypeDef *pTeseoQueue = Teseo_Queue_static_alloc();
 800a816:	f7ff ff5d 	bl	800a6d4 <Teseo_Queue_static_alloc>
 800a81a:	60b8      	str	r0, [r7, #8]
  int8_t i;
  GNSS_MsgTypeDef *GNSS_Msg_p;
  
  Console_Debug("teseo_queue_init...\n\r" );
 800a81c:	4821      	ldr	r0, [pc, #132]	; (800a8a4 <teseo_queue_init+0x94>)
 800a81e:	f001 f993 	bl	800bb48 <iprintf>
  pTeseoQueue->bitmap_buffer_writable = 0;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2200      	movs	r2, #0
 800a826:	609a      	str	r2, [r3, #8]
  for (i = 0;  i < MAX_MSG_QUEUE; ++i)
 800a828:	2300      	movs	r3, #0
 800a82a:	73fb      	strb	r3, [r7, #15]
 800a82c:	e021      	b.n	800a872 <teseo_queue_init+0x62>
  {
    GNSS_Msg_p = &pTeseoQueue->nmea_queue[i];
 800a82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a832:	3302      	adds	r3, #2
 800a834:	00db      	lsls	r3, r3, #3
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	4413      	add	r3, r2
 800a83a:	607b      	str	r3, [r7, #4]

    GNSS_Msg_p->buf = &pTeseoQueue->single_message_buffer[i * MAX_MSG_BUF];
 800a83c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800a840:	4613      	mov	r3, r2
 800a842:	009b      	lsls	r3, r3, #2
 800a844:	4413      	add	r3, r2
 800a846:	011b      	lsls	r3, r3, #4
 800a848:	3350      	adds	r3, #80	; 0x50
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	441a      	add	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	601a      	str	r2, [r3, #0]
    GNSS_Msg_p->len = 0;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	605a      	str	r2, [r3, #4]
    pTeseoQueue->bitmap_buffer_writable |=  (1UL << (uint8_t)i);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	689a      	ldr	r2, [r3, #8]
 800a85c:	7bfb      	ldrb	r3, [r7, #15]
 800a85e:	4619      	mov	r1, r3
 800a860:	2301      	movs	r3, #1
 800a862:	408b      	lsls	r3, r1
 800a864:	431a      	orrs	r2, r3
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	609a      	str	r2, [r3, #8]
  for (i = 0;  i < MAX_MSG_QUEUE; ++i)
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
 800a86c:	3301      	adds	r3, #1
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	73fb      	strb	r3, [r7, #15]
 800a872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a876:	2b07      	cmp	r3, #7
 800a878:	ddd9      	ble.n	800a82e <teseo_queue_init+0x1e>
  }
  pTeseoQueue->bitmap_buffer_readable = 0;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2200      	movs	r2, #0
 800a87e:	60da      	str	r2, [r3, #12]

#ifdef USE_FREE_RTOS
  pTeseoQueue->bitmap_unreleased_buffer_irq = 0;
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2200      	movs	r2, #0
 800a884:	605a      	str	r2, [r3, #4]
  pTeseoQueue->semaphore = xSemaphoreCreateMutex();
 800a886:	2001      	movs	r0, #1
 800a888:	f7fa fb37 	bl	8004efa <xQueueCreateMutex>
 800a88c:	4602      	mov	r2, r0
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	601a      	str	r2, [r3, #0]
#endif /* USE_FREE_RTOS */

  Console_Debug("teseo_queue_init: Done\n\r");
 800a892:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <teseo_queue_init+0x98>)
 800a894:	f001 f958 	bl	800bb48 <iprintf>
  
  return pTeseoQueue;
 800a898:	68bb      	ldr	r3, [r7, #8]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	08010b18 	.word	0x08010b18
 800a8a8:	08010b30 	.word	0x08010b30

0800a8ac <teseo_queue_claim_wr_buffer>:

GNSS_MsgTypeDef *teseo_queue_claim_wr_buffer(Teseo_QueueTypeDef *pTeseoQueue)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  GNSS_MsgTypeDef *pMsg;

#ifdef USE_FREE_RTOS
  BaseType_t ret;
  
  ret = semaphore_lock_irq(pTeseoQueue->semaphore);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff feed 	bl	800a698 <semaphore_lock_irq>
 800a8be:	6178      	str	r0, [r7, #20]
  
  /* semaphore already taken.... */
  if (ret == pdFAIL) {
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <teseo_queue_claim_wr_buffer+0x1e>
    return NULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	e031      	b.n	800a92e <teseo_queue_claim_wr_buffer+0x82>
  }
#endif /* USE_FREE_RTOS */

  /* first available buffer writable */
  i = ffs(pTeseoQueue->bitmap_buffer_writable);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f8ee 	bl	800aab0 <ffs>
 800a8d4:	6138      	str	r0, [r7, #16]
  
  if (i == 0) {
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d109      	bne.n	800a8f0 <teseo_queue_claim_wr_buffer+0x44>
#ifdef USE_FREE_RTOS
    /* release the semaphore */
    semaphore_free_irq(pTeseoQueue->semaphore);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff fee9 	bl	800a6b8 <semaphore_free_irq>
#endif /* USE_FREE_RTOS */

    Console_Debug("-\n\r");
 800a8e6:	4814      	ldr	r0, [pc, #80]	; (800a938 <teseo_queue_claim_wr_buffer+0x8c>)
 800a8e8:	f001 f92e 	bl	800bb48 <iprintf>
    return NULL;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	e01e      	b.n	800a92e <teseo_queue_claim_wr_buffer+0x82>
  }
  
  i--; /* first available buffer writable */
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	613b      	str	r3, [r7, #16]
  
  /* buffer no more writable */
  pTeseoQueue->bitmap_buffer_writable &= ~(1U << (uint32_t)i);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	689a      	ldr	r2, [r3, #8]
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a902:	43db      	mvns	r3, r3
 800a904:	401a      	ands	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	609a      	str	r2, [r3, #8]
  
  __check_unreleased_buffer(pTeseoQueue);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff ff0c 	bl	800a728 <__check_unreleased_buffer>

#ifdef USE_FREE_RTOS
  semaphore_free_irq(pTeseoQueue->semaphore);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4618      	mov	r0, r3
 800a916:	f7ff fecf 	bl	800a6b8 <semaphore_free_irq>
#endif /* USE_FREE_RTOS */

  pMsg = &pTeseoQueue->nmea_queue[i];
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	3302      	adds	r3, #2
 800a91e:	00db      	lsls	r3, r3, #3
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	4413      	add	r3, r2
 800a924:	60fb      	str	r3, [r7, #12]
  pMsg->len = 0;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	605a      	str	r2, [r3, #4]
  
  return pMsg;
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	08010b4c 	.word	0x08010b4c

0800a93c <teseo_queue_release_wr_buffer>:

void teseo_queue_release_wr_buffer(Teseo_QueueTypeDef *pTeseoQueue, GNSS_MsgTypeDef *pMsg)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  int32_t i;
#ifdef USE_FREE_RTOS
  BaseType_t ret;
#endif /* USE_FREE_RTOS */
  
  if (pMsg == NULL) {
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d035      	beq.n	800a9b8 <teseo_queue_release_wr_buffer+0x7c>
    return;
  }
  
  i = __find_msg_idx(pTeseoQueue, pMsg);
 800a94c:	6839      	ldr	r1, [r7, #0]
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff feca 	bl	800a6e8 <__find_msg_idx>
 800a954:	60f8      	str	r0, [r7, #12]
  if (i < 0) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	db2f      	blt.n	800a9bc <teseo_queue_release_wr_buffer+0x80>
    /* this should NEVER happen... this means an external buffer was provided */
    return;
  }
  
#ifdef USE_FREE_RTOS 
  ret = semaphore_lock_irq(pTeseoQueue->semaphore);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4618      	mov	r0, r3
 800a962:	f7ff fe99 	bl	800a698 <semaphore_lock_irq>
 800a966:	60b8      	str	r0, [r7, #8]
  
  /* semaphore already taken.... */
  if (ret == pdFAIL) {
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10c      	bne.n	800a988 <teseo_queue_release_wr_buffer+0x4c>
    Console_Debug("+\n\r" );
 800a96e:	4815      	ldr	r0, [pc, #84]	; (800a9c4 <teseo_queue_release_wr_buffer+0x88>)
 800a970:	f001 f8ea 	bl	800bb48 <iprintf>
    /* mark the buffer as 'un-released'... and go-ahead... */
    pTeseoQueue->bitmap_unreleased_buffer_irq |= (1UL << (uint32_t)i);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2101      	movs	r1, #1
 800a97c:	fa01 f303 	lsl.w	r3, r1, r3
 800a980:	431a      	orrs	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	605a      	str	r2, [r3, #4]
    return;
 800a986:	e01a      	b.n	800a9be <teseo_queue_release_wr_buffer+0x82>
  }
#endif /* USE_FREE_RTOS */
  
  /* mark the buffer as readable */
  pTeseoQueue->bitmap_buffer_readable |= (1UL << (uint32_t)i);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	68da      	ldr	r2, [r3, #12]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2101      	movs	r1, #1
 800a990:	fa01 f303 	lsl.w	r3, r1, r3
 800a994:	431a      	orrs	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	60da      	str	r2, [r3, #12]

  /* check for longer message */
  check_longer_msg(pTeseoQueue, pMsg, (uint32_t)i, 1);
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	2301      	movs	r3, #1
 800a99e:	6839      	ldr	r1, [r7, #0]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f7ff fedd 	bl	800a760 <check_longer_msg>

#ifdef USE_FREE_RTOS
  __check_unreleased_buffer(pTeseoQueue);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f7ff febe 	bl	800a728 <__check_unreleased_buffer>
  semaphore_free_irq(pTeseoQueue->semaphore);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7ff fe81 	bl	800a6b8 <semaphore_free_irq>
 800a9b6:	e002      	b.n	800a9be <teseo_queue_release_wr_buffer+0x82>
    return;
 800a9b8:	bf00      	nop
 800a9ba:	e000      	b.n	800a9be <teseo_queue_release_wr_buffer+0x82>
    return;
 800a9bc:	bf00      	nop
#endif /* USE_FREE_RTOS */
}
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}
 800a9c4:	08010b50 	.word	0x08010b50

0800a9c8 <teseo_queue_claim_rd_buffer>:

const GNSS_MsgTypeDef *teseo_queue_claim_rd_buffer(Teseo_QueueTypeDef *pTeseoQueue)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  const GNSS_MsgTypeDef *pMsg = NULL;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	617b      	str	r3, [r7, #20]
  int32_t i;

  uint8_t rd_buffer_re_try = 1;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	74fb      	strb	r3, [r7, #19]
  
  while(rd_buffer_re_try == 1U) {
 800a9d8:	e030      	b.n	800aa3c <teseo_queue_claim_rd_buffer+0x74>
#ifdef USE_FREE_RTOS
    semaphore_lock(pTeseoQueue->semaphore);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff fe3e 	bl	800a660 <semaphore_lock>
#endif /* USE_FREE_RTOS */

    /* first available readable buffer */
    i = ffs(pTeseoQueue->bitmap_buffer_readable);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f000 f861 	bl	800aab0 <ffs>
 800a9ee:	60f8      	str	r0, [r7, #12]
    
    if (i == 0) {
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d108      	bne.n	800aa08 <teseo_queue_claim_rd_buffer+0x40>
#ifdef USE_FREE_RTOS
      /* release the semaphore */
      semaphore_free(pTeseoQueue->semaphore);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff fe3d 	bl	800a67a <semaphore_free>
      //Console_Debug("No read buffer available... going to sleep...\n\r");
      vTaskDelay(portTICK_PERIOD_MS * 5U);
 800aa00:	2005      	movs	r0, #5
 800aa02:	f7fb fae7 	bl	8005fd4 <vTaskDelay>
      continue;
 800aa06:	e019      	b.n	800aa3c <teseo_queue_claim_rd_buffer+0x74>
      break;
#endif /* USE_FREE_RTOS */
    }

    /* first available readable buffer */
    i -= 1;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	60fb      	str	r3, [r7, #12]
    /* buffer no more readable */
    pTeseoQueue->bitmap_buffer_readable &= ~(1UL << (uint32_t)i);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68da      	ldr	r2, [r3, #12]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2101      	movs	r1, #1
 800aa16:	fa01 f303 	lsl.w	r3, r1, r3
 800aa1a:	43db      	mvns	r3, r3
 800aa1c:	401a      	ands	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	60da      	str	r2, [r3, #12]
    pMsg = &pTeseoQueue->nmea_queue[i];
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3302      	adds	r3, #2
 800aa26:	00db      	lsls	r3, r3, #3
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	617b      	str	r3, [r7, #20]

#ifdef USE_FREE_RTOS
    semaphore_free(pTeseoQueue->semaphore);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7ff fe21 	bl	800a67a <semaphore_free>
#endif /* USE_FREE_RTOS */

    rd_buffer_re_try = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	74fb      	strb	r3, [r7, #19]
  while(rd_buffer_re_try == 1U) {
 800aa3c:	7cfb      	ldrb	r3, [r7, #19]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d0cb      	beq.n	800a9da <teseo_queue_claim_rd_buffer+0x12>
  }
  return pMsg;
 800aa42:	697b      	ldr	r3, [r7, #20]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <teseo_queue_release_rd_buffer>:

void teseo_queue_release_rd_buffer(Teseo_QueueTypeDef *pTeseoQueue, const GNSS_MsgTypeDef *pMsg)
{ 
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  int32_t i;
  
  i = __find_msg_idx(pTeseoQueue, pMsg);
 800aa56:	6839      	ldr	r1, [r7, #0]
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff fe45 	bl	800a6e8 <__find_msg_idx>
 800aa5e:	60f8      	str	r0, [r7, #12]
  if (i < 0) {
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	db19      	blt.n	800aa9a <teseo_queue_release_rd_buffer+0x4e>
    /* this should NEVER happen... this means an external buffer was provided */
    return;
  }
#ifdef USE_FREE_RTOS
  semaphore_lock(pTeseoQueue->semaphore);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff fdf8 	bl	800a660 <semaphore_lock>
#endif /* USE_FREE_RTOS */

  /* mark the buffer as writeable */
  pTeseoQueue->bitmap_buffer_writable |= (1UL << (uint32_t)i);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689a      	ldr	r2, [r3, #8]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2101      	movs	r1, #1
 800aa78:	fa01 f303 	lsl.w	r3, r1, r3
 800aa7c:	431a      	orrs	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	609a      	str	r2, [r3, #8]

  /* check for longer message */
  check_longer_msg(pTeseoQueue, pMsg, (uint32_t)i, 0);
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	2300      	movs	r3, #0
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f7ff fe69 	bl	800a760 <check_longer_msg>

#ifdef USE_FREE_RTOS
  semaphore_free(pTeseoQueue->semaphore);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff fdf1 	bl	800a67a <semaphore_free>
 800aa98:	e000      	b.n	800aa9c <teseo_queue_release_rd_buffer+0x50>
    return;
 800aa9a:	bf00      	nop
#endif /* USE_FREE_RTOS */
}
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
	...

0800aaa4 <__errno>:
 800aaa4:	4b01      	ldr	r3, [pc, #4]	; (800aaac <__errno+0x8>)
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop
 800aaac:	20000014 	.word	0x20000014

0800aab0 <ffs>:
 800aab0:	2800      	cmp	r0, #0
 800aab2:	fa90 f3a0 	rbit	r3, r0
 800aab6:	fab3 f383 	clz	r3, r3
 800aaba:	bf08      	it	eq
 800aabc:	f04f 33ff 	moveq.w	r3, #4294967295
 800aac0:	1c58      	adds	r0, r3, #1
 800aac2:	4770      	bx	lr

0800aac4 <std>:
 800aac4:	2300      	movs	r3, #0
 800aac6:	b510      	push	{r4, lr}
 800aac8:	4604      	mov	r4, r0
 800aaca:	e9c0 3300 	strd	r3, r3, [r0]
 800aace:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aad2:	6083      	str	r3, [r0, #8]
 800aad4:	8181      	strh	r1, [r0, #12]
 800aad6:	6643      	str	r3, [r0, #100]	; 0x64
 800aad8:	81c2      	strh	r2, [r0, #14]
 800aada:	6183      	str	r3, [r0, #24]
 800aadc:	4619      	mov	r1, r3
 800aade:	2208      	movs	r2, #8
 800aae0:	305c      	adds	r0, #92	; 0x5c
 800aae2:	f000 f91a 	bl	800ad1a <memset>
 800aae6:	4b05      	ldr	r3, [pc, #20]	; (800aafc <std+0x38>)
 800aae8:	6263      	str	r3, [r4, #36]	; 0x24
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <std+0x3c>)
 800aaec:	62a3      	str	r3, [r4, #40]	; 0x28
 800aaee:	4b05      	ldr	r3, [pc, #20]	; (800ab04 <std+0x40>)
 800aaf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aaf2:	4b05      	ldr	r3, [pc, #20]	; (800ab08 <std+0x44>)
 800aaf4:	6224      	str	r4, [r4, #32]
 800aaf6:	6323      	str	r3, [r4, #48]	; 0x30
 800aaf8:	bd10      	pop	{r4, pc}
 800aafa:	bf00      	nop
 800aafc:	0800be0d 	.word	0x0800be0d
 800ab00:	0800be2f 	.word	0x0800be2f
 800ab04:	0800be67 	.word	0x0800be67
 800ab08:	0800be8b 	.word	0x0800be8b

0800ab0c <_cleanup_r>:
 800ab0c:	4901      	ldr	r1, [pc, #4]	; (800ab14 <_cleanup_r+0x8>)
 800ab0e:	f000 b8af 	b.w	800ac70 <_fwalk_reent>
 800ab12:	bf00      	nop
 800ab14:	0800dcb9 	.word	0x0800dcb9

0800ab18 <__sfmoreglue>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	2268      	movs	r2, #104	; 0x68
 800ab1c:	1e4d      	subs	r5, r1, #1
 800ab1e:	4355      	muls	r5, r2
 800ab20:	460e      	mov	r6, r1
 800ab22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab26:	f000 f921 	bl	800ad6c <_malloc_r>
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	b140      	cbz	r0, 800ab40 <__sfmoreglue+0x28>
 800ab2e:	2100      	movs	r1, #0
 800ab30:	e9c0 1600 	strd	r1, r6, [r0]
 800ab34:	300c      	adds	r0, #12
 800ab36:	60a0      	str	r0, [r4, #8]
 800ab38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab3c:	f000 f8ed 	bl	800ad1a <memset>
 800ab40:	4620      	mov	r0, r4
 800ab42:	bd70      	pop	{r4, r5, r6, pc}

0800ab44 <__sfp_lock_acquire>:
 800ab44:	4801      	ldr	r0, [pc, #4]	; (800ab4c <__sfp_lock_acquire+0x8>)
 800ab46:	f000 b8d8 	b.w	800acfa <__retarget_lock_acquire_recursive>
 800ab4a:	bf00      	nop
 800ab4c:	20005ded 	.word	0x20005ded

0800ab50 <__sfp_lock_release>:
 800ab50:	4801      	ldr	r0, [pc, #4]	; (800ab58 <__sfp_lock_release+0x8>)
 800ab52:	f000 b8d3 	b.w	800acfc <__retarget_lock_release_recursive>
 800ab56:	bf00      	nop
 800ab58:	20005ded 	.word	0x20005ded

0800ab5c <__sinit_lock_acquire>:
 800ab5c:	4801      	ldr	r0, [pc, #4]	; (800ab64 <__sinit_lock_acquire+0x8>)
 800ab5e:	f000 b8cc 	b.w	800acfa <__retarget_lock_acquire_recursive>
 800ab62:	bf00      	nop
 800ab64:	20005dee 	.word	0x20005dee

0800ab68 <__sinit_lock_release>:
 800ab68:	4801      	ldr	r0, [pc, #4]	; (800ab70 <__sinit_lock_release+0x8>)
 800ab6a:	f000 b8c7 	b.w	800acfc <__retarget_lock_release_recursive>
 800ab6e:	bf00      	nop
 800ab70:	20005dee 	.word	0x20005dee

0800ab74 <__sinit>:
 800ab74:	b510      	push	{r4, lr}
 800ab76:	4604      	mov	r4, r0
 800ab78:	f7ff fff0 	bl	800ab5c <__sinit_lock_acquire>
 800ab7c:	69a3      	ldr	r3, [r4, #24]
 800ab7e:	b11b      	cbz	r3, 800ab88 <__sinit+0x14>
 800ab80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab84:	f7ff bff0 	b.w	800ab68 <__sinit_lock_release>
 800ab88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab8c:	6523      	str	r3, [r4, #80]	; 0x50
 800ab8e:	4b13      	ldr	r3, [pc, #76]	; (800abdc <__sinit+0x68>)
 800ab90:	4a13      	ldr	r2, [pc, #76]	; (800abe0 <__sinit+0x6c>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab96:	42a3      	cmp	r3, r4
 800ab98:	bf04      	itt	eq
 800ab9a:	2301      	moveq	r3, #1
 800ab9c:	61a3      	streq	r3, [r4, #24]
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 f820 	bl	800abe4 <__sfp>
 800aba4:	6060      	str	r0, [r4, #4]
 800aba6:	4620      	mov	r0, r4
 800aba8:	f000 f81c 	bl	800abe4 <__sfp>
 800abac:	60a0      	str	r0, [r4, #8]
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 f818 	bl	800abe4 <__sfp>
 800abb4:	2200      	movs	r2, #0
 800abb6:	60e0      	str	r0, [r4, #12]
 800abb8:	2104      	movs	r1, #4
 800abba:	6860      	ldr	r0, [r4, #4]
 800abbc:	f7ff ff82 	bl	800aac4 <std>
 800abc0:	68a0      	ldr	r0, [r4, #8]
 800abc2:	2201      	movs	r2, #1
 800abc4:	2109      	movs	r1, #9
 800abc6:	f7ff ff7d 	bl	800aac4 <std>
 800abca:	68e0      	ldr	r0, [r4, #12]
 800abcc:	2202      	movs	r2, #2
 800abce:	2112      	movs	r1, #18
 800abd0:	f7ff ff78 	bl	800aac4 <std>
 800abd4:	2301      	movs	r3, #1
 800abd6:	61a3      	str	r3, [r4, #24]
 800abd8:	e7d2      	b.n	800ab80 <__sinit+0xc>
 800abda:	bf00      	nop
 800abdc:	08010c10 	.word	0x08010c10
 800abe0:	0800ab0d 	.word	0x0800ab0d

0800abe4 <__sfp>:
 800abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abe6:	4607      	mov	r7, r0
 800abe8:	f7ff ffac 	bl	800ab44 <__sfp_lock_acquire>
 800abec:	4b1e      	ldr	r3, [pc, #120]	; (800ac68 <__sfp+0x84>)
 800abee:	681e      	ldr	r6, [r3, #0]
 800abf0:	69b3      	ldr	r3, [r6, #24]
 800abf2:	b913      	cbnz	r3, 800abfa <__sfp+0x16>
 800abf4:	4630      	mov	r0, r6
 800abf6:	f7ff ffbd 	bl	800ab74 <__sinit>
 800abfa:	3648      	adds	r6, #72	; 0x48
 800abfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	d503      	bpl.n	800ac0c <__sfp+0x28>
 800ac04:	6833      	ldr	r3, [r6, #0]
 800ac06:	b30b      	cbz	r3, 800ac4c <__sfp+0x68>
 800ac08:	6836      	ldr	r6, [r6, #0]
 800ac0a:	e7f7      	b.n	800abfc <__sfp+0x18>
 800ac0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac10:	b9d5      	cbnz	r5, 800ac48 <__sfp+0x64>
 800ac12:	4b16      	ldr	r3, [pc, #88]	; (800ac6c <__sfp+0x88>)
 800ac14:	60e3      	str	r3, [r4, #12]
 800ac16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac1a:	6665      	str	r5, [r4, #100]	; 0x64
 800ac1c:	f000 f86c 	bl	800acf8 <__retarget_lock_init_recursive>
 800ac20:	f7ff ff96 	bl	800ab50 <__sfp_lock_release>
 800ac24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac2c:	6025      	str	r5, [r4, #0]
 800ac2e:	61a5      	str	r5, [r4, #24]
 800ac30:	2208      	movs	r2, #8
 800ac32:	4629      	mov	r1, r5
 800ac34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac38:	f000 f86f 	bl	800ad1a <memset>
 800ac3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac44:	4620      	mov	r0, r4
 800ac46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac48:	3468      	adds	r4, #104	; 0x68
 800ac4a:	e7d9      	b.n	800ac00 <__sfp+0x1c>
 800ac4c:	2104      	movs	r1, #4
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff ff62 	bl	800ab18 <__sfmoreglue>
 800ac54:	4604      	mov	r4, r0
 800ac56:	6030      	str	r0, [r6, #0]
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	d1d5      	bne.n	800ac08 <__sfp+0x24>
 800ac5c:	f7ff ff78 	bl	800ab50 <__sfp_lock_release>
 800ac60:	230c      	movs	r3, #12
 800ac62:	603b      	str	r3, [r7, #0]
 800ac64:	e7ee      	b.n	800ac44 <__sfp+0x60>
 800ac66:	bf00      	nop
 800ac68:	08010c10 	.word	0x08010c10
 800ac6c:	ffff0001 	.word	0xffff0001

0800ac70 <_fwalk_reent>:
 800ac70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac74:	4606      	mov	r6, r0
 800ac76:	4688      	mov	r8, r1
 800ac78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac7c:	2700      	movs	r7, #0
 800ac7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac82:	f1b9 0901 	subs.w	r9, r9, #1
 800ac86:	d505      	bpl.n	800ac94 <_fwalk_reent+0x24>
 800ac88:	6824      	ldr	r4, [r4, #0]
 800ac8a:	2c00      	cmp	r4, #0
 800ac8c:	d1f7      	bne.n	800ac7e <_fwalk_reent+0xe>
 800ac8e:	4638      	mov	r0, r7
 800ac90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac94:	89ab      	ldrh	r3, [r5, #12]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d907      	bls.n	800acaa <_fwalk_reent+0x3a>
 800ac9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	d003      	beq.n	800acaa <_fwalk_reent+0x3a>
 800aca2:	4629      	mov	r1, r5
 800aca4:	4630      	mov	r0, r6
 800aca6:	47c0      	blx	r8
 800aca8:	4307      	orrs	r7, r0
 800acaa:	3568      	adds	r5, #104	; 0x68
 800acac:	e7e9      	b.n	800ac82 <_fwalk_reent+0x12>
	...

0800acb0 <__libc_init_array>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	4d0d      	ldr	r5, [pc, #52]	; (800ace8 <__libc_init_array+0x38>)
 800acb4:	4c0d      	ldr	r4, [pc, #52]	; (800acec <__libc_init_array+0x3c>)
 800acb6:	1b64      	subs	r4, r4, r5
 800acb8:	10a4      	asrs	r4, r4, #2
 800acba:	2600      	movs	r6, #0
 800acbc:	42a6      	cmp	r6, r4
 800acbe:	d109      	bne.n	800acd4 <__libc_init_array+0x24>
 800acc0:	4d0b      	ldr	r5, [pc, #44]	; (800acf0 <__libc_init_array+0x40>)
 800acc2:	4c0c      	ldr	r4, [pc, #48]	; (800acf4 <__libc_init_array+0x44>)
 800acc4:	f004 fd4c 	bl	800f760 <_init>
 800acc8:	1b64      	subs	r4, r4, r5
 800acca:	10a4      	asrs	r4, r4, #2
 800accc:	2600      	movs	r6, #0
 800acce:	42a6      	cmp	r6, r4
 800acd0:	d105      	bne.n	800acde <__libc_init_array+0x2e>
 800acd2:	bd70      	pop	{r4, r5, r6, pc}
 800acd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800acd8:	4798      	blx	r3
 800acda:	3601      	adds	r6, #1
 800acdc:	e7ee      	b.n	800acbc <__libc_init_array+0xc>
 800acde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ace2:	4798      	blx	r3
 800ace4:	3601      	adds	r6, #1
 800ace6:	e7f2      	b.n	800acce <__libc_init_array+0x1e>
 800ace8:	0801105c 	.word	0x0801105c
 800acec:	0801105c 	.word	0x0801105c
 800acf0:	0801105c 	.word	0x0801105c
 800acf4:	08011060 	.word	0x08011060

0800acf8 <__retarget_lock_init_recursive>:
 800acf8:	4770      	bx	lr

0800acfa <__retarget_lock_acquire_recursive>:
 800acfa:	4770      	bx	lr

0800acfc <__retarget_lock_release_recursive>:
 800acfc:	4770      	bx	lr

0800acfe <memcpy>:
 800acfe:	440a      	add	r2, r1
 800ad00:	4291      	cmp	r1, r2
 800ad02:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad06:	d100      	bne.n	800ad0a <memcpy+0xc>
 800ad08:	4770      	bx	lr
 800ad0a:	b510      	push	{r4, lr}
 800ad0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad10:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad14:	4291      	cmp	r1, r2
 800ad16:	d1f9      	bne.n	800ad0c <memcpy+0xe>
 800ad18:	bd10      	pop	{r4, pc}

0800ad1a <memset>:
 800ad1a:	4402      	add	r2, r0
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d100      	bne.n	800ad24 <memset+0xa>
 800ad22:	4770      	bx	lr
 800ad24:	f803 1b01 	strb.w	r1, [r3], #1
 800ad28:	e7f9      	b.n	800ad1e <memset+0x4>
	...

0800ad2c <sbrk_aligned>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	4e0e      	ldr	r6, [pc, #56]	; (800ad68 <sbrk_aligned+0x3c>)
 800ad30:	460c      	mov	r4, r1
 800ad32:	6831      	ldr	r1, [r6, #0]
 800ad34:	4605      	mov	r5, r0
 800ad36:	b911      	cbnz	r1, 800ad3e <sbrk_aligned+0x12>
 800ad38:	f000 fffe 	bl	800bd38 <_sbrk_r>
 800ad3c:	6030      	str	r0, [r6, #0]
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4628      	mov	r0, r5
 800ad42:	f000 fff9 	bl	800bd38 <_sbrk_r>
 800ad46:	1c43      	adds	r3, r0, #1
 800ad48:	d00a      	beq.n	800ad60 <sbrk_aligned+0x34>
 800ad4a:	1cc4      	adds	r4, r0, #3
 800ad4c:	f024 0403 	bic.w	r4, r4, #3
 800ad50:	42a0      	cmp	r0, r4
 800ad52:	d007      	beq.n	800ad64 <sbrk_aligned+0x38>
 800ad54:	1a21      	subs	r1, r4, r0
 800ad56:	4628      	mov	r0, r5
 800ad58:	f000 ffee 	bl	800bd38 <_sbrk_r>
 800ad5c:	3001      	adds	r0, #1
 800ad5e:	d101      	bne.n	800ad64 <sbrk_aligned+0x38>
 800ad60:	f04f 34ff 	mov.w	r4, #4294967295
 800ad64:	4620      	mov	r0, r4
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	20005df4 	.word	0x20005df4

0800ad6c <_malloc_r>:
 800ad6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad70:	1ccd      	adds	r5, r1, #3
 800ad72:	f025 0503 	bic.w	r5, r5, #3
 800ad76:	3508      	adds	r5, #8
 800ad78:	2d0c      	cmp	r5, #12
 800ad7a:	bf38      	it	cc
 800ad7c:	250c      	movcc	r5, #12
 800ad7e:	2d00      	cmp	r5, #0
 800ad80:	4607      	mov	r7, r0
 800ad82:	db01      	blt.n	800ad88 <_malloc_r+0x1c>
 800ad84:	42a9      	cmp	r1, r5
 800ad86:	d905      	bls.n	800ad94 <_malloc_r+0x28>
 800ad88:	230c      	movs	r3, #12
 800ad8a:	603b      	str	r3, [r7, #0]
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	4630      	mov	r0, r6
 800ad90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad94:	4e2e      	ldr	r6, [pc, #184]	; (800ae50 <_malloc_r+0xe4>)
 800ad96:	f003 fbd1 	bl	800e53c <__malloc_lock>
 800ad9a:	6833      	ldr	r3, [r6, #0]
 800ad9c:	461c      	mov	r4, r3
 800ad9e:	bb34      	cbnz	r4, 800adee <_malloc_r+0x82>
 800ada0:	4629      	mov	r1, r5
 800ada2:	4638      	mov	r0, r7
 800ada4:	f7ff ffc2 	bl	800ad2c <sbrk_aligned>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	4604      	mov	r4, r0
 800adac:	d14d      	bne.n	800ae4a <_malloc_r+0xde>
 800adae:	6834      	ldr	r4, [r6, #0]
 800adb0:	4626      	mov	r6, r4
 800adb2:	2e00      	cmp	r6, #0
 800adb4:	d140      	bne.n	800ae38 <_malloc_r+0xcc>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	4631      	mov	r1, r6
 800adba:	4638      	mov	r0, r7
 800adbc:	eb04 0803 	add.w	r8, r4, r3
 800adc0:	f000 ffba 	bl	800bd38 <_sbrk_r>
 800adc4:	4580      	cmp	r8, r0
 800adc6:	d13a      	bne.n	800ae3e <_malloc_r+0xd2>
 800adc8:	6821      	ldr	r1, [r4, #0]
 800adca:	3503      	adds	r5, #3
 800adcc:	1a6d      	subs	r5, r5, r1
 800adce:	f025 0503 	bic.w	r5, r5, #3
 800add2:	3508      	adds	r5, #8
 800add4:	2d0c      	cmp	r5, #12
 800add6:	bf38      	it	cc
 800add8:	250c      	movcc	r5, #12
 800adda:	4629      	mov	r1, r5
 800addc:	4638      	mov	r0, r7
 800adde:	f7ff ffa5 	bl	800ad2c <sbrk_aligned>
 800ade2:	3001      	adds	r0, #1
 800ade4:	d02b      	beq.n	800ae3e <_malloc_r+0xd2>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	442b      	add	r3, r5
 800adea:	6023      	str	r3, [r4, #0]
 800adec:	e00e      	b.n	800ae0c <_malloc_r+0xa0>
 800adee:	6822      	ldr	r2, [r4, #0]
 800adf0:	1b52      	subs	r2, r2, r5
 800adf2:	d41e      	bmi.n	800ae32 <_malloc_r+0xc6>
 800adf4:	2a0b      	cmp	r2, #11
 800adf6:	d916      	bls.n	800ae26 <_malloc_r+0xba>
 800adf8:	1961      	adds	r1, r4, r5
 800adfa:	42a3      	cmp	r3, r4
 800adfc:	6025      	str	r5, [r4, #0]
 800adfe:	bf18      	it	ne
 800ae00:	6059      	strne	r1, [r3, #4]
 800ae02:	6863      	ldr	r3, [r4, #4]
 800ae04:	bf08      	it	eq
 800ae06:	6031      	streq	r1, [r6, #0]
 800ae08:	5162      	str	r2, [r4, r5]
 800ae0a:	604b      	str	r3, [r1, #4]
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	f104 060b 	add.w	r6, r4, #11
 800ae12:	f003 fb99 	bl	800e548 <__malloc_unlock>
 800ae16:	f026 0607 	bic.w	r6, r6, #7
 800ae1a:	1d23      	adds	r3, r4, #4
 800ae1c:	1af2      	subs	r2, r6, r3
 800ae1e:	d0b6      	beq.n	800ad8e <_malloc_r+0x22>
 800ae20:	1b9b      	subs	r3, r3, r6
 800ae22:	50a3      	str	r3, [r4, r2]
 800ae24:	e7b3      	b.n	800ad8e <_malloc_r+0x22>
 800ae26:	6862      	ldr	r2, [r4, #4]
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	bf0c      	ite	eq
 800ae2c:	6032      	streq	r2, [r6, #0]
 800ae2e:	605a      	strne	r2, [r3, #4]
 800ae30:	e7ec      	b.n	800ae0c <_malloc_r+0xa0>
 800ae32:	4623      	mov	r3, r4
 800ae34:	6864      	ldr	r4, [r4, #4]
 800ae36:	e7b2      	b.n	800ad9e <_malloc_r+0x32>
 800ae38:	4634      	mov	r4, r6
 800ae3a:	6876      	ldr	r6, [r6, #4]
 800ae3c:	e7b9      	b.n	800adb2 <_malloc_r+0x46>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	603b      	str	r3, [r7, #0]
 800ae42:	4638      	mov	r0, r7
 800ae44:	f003 fb80 	bl	800e548 <__malloc_unlock>
 800ae48:	e7a1      	b.n	800ad8e <_malloc_r+0x22>
 800ae4a:	6025      	str	r5, [r4, #0]
 800ae4c:	e7de      	b.n	800ae0c <_malloc_r+0xa0>
 800ae4e:	bf00      	nop
 800ae50:	20005df0 	.word	0x20005df0

0800ae54 <__cvt>:
 800ae54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae58:	ec55 4b10 	vmov	r4, r5, d0
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	460e      	mov	r6, r1
 800ae60:	4619      	mov	r1, r3
 800ae62:	462b      	mov	r3, r5
 800ae64:	bfbb      	ittet	lt
 800ae66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae6a:	461d      	movlt	r5, r3
 800ae6c:	2300      	movge	r3, #0
 800ae6e:	232d      	movlt	r3, #45	; 0x2d
 800ae70:	700b      	strb	r3, [r1, #0]
 800ae72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae78:	4691      	mov	r9, r2
 800ae7a:	f023 0820 	bic.w	r8, r3, #32
 800ae7e:	bfbc      	itt	lt
 800ae80:	4622      	movlt	r2, r4
 800ae82:	4614      	movlt	r4, r2
 800ae84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae88:	d005      	beq.n	800ae96 <__cvt+0x42>
 800ae8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae8e:	d100      	bne.n	800ae92 <__cvt+0x3e>
 800ae90:	3601      	adds	r6, #1
 800ae92:	2102      	movs	r1, #2
 800ae94:	e000      	b.n	800ae98 <__cvt+0x44>
 800ae96:	2103      	movs	r1, #3
 800ae98:	ab03      	add	r3, sp, #12
 800ae9a:	9301      	str	r3, [sp, #4]
 800ae9c:	ab02      	add	r3, sp, #8
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	ec45 4b10 	vmov	d0, r4, r5
 800aea4:	4653      	mov	r3, sl
 800aea6:	4632      	mov	r2, r6
 800aea8:	f002 f892 	bl	800cfd0 <_dtoa_r>
 800aeac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	d102      	bne.n	800aeba <__cvt+0x66>
 800aeb4:	f019 0f01 	tst.w	r9, #1
 800aeb8:	d022      	beq.n	800af00 <__cvt+0xac>
 800aeba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aebe:	eb07 0906 	add.w	r9, r7, r6
 800aec2:	d110      	bne.n	800aee6 <__cvt+0x92>
 800aec4:	783b      	ldrb	r3, [r7, #0]
 800aec6:	2b30      	cmp	r3, #48	; 0x30
 800aec8:	d10a      	bne.n	800aee0 <__cvt+0x8c>
 800aeca:	2200      	movs	r2, #0
 800aecc:	2300      	movs	r3, #0
 800aece:	4620      	mov	r0, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 fe19 	bl	8000b08 <__aeabi_dcmpeq>
 800aed6:	b918      	cbnz	r0, 800aee0 <__cvt+0x8c>
 800aed8:	f1c6 0601 	rsb	r6, r6, #1
 800aedc:	f8ca 6000 	str.w	r6, [sl]
 800aee0:	f8da 3000 	ldr.w	r3, [sl]
 800aee4:	4499      	add	r9, r3
 800aee6:	2200      	movs	r2, #0
 800aee8:	2300      	movs	r3, #0
 800aeea:	4620      	mov	r0, r4
 800aeec:	4629      	mov	r1, r5
 800aeee:	f7f5 fe0b 	bl	8000b08 <__aeabi_dcmpeq>
 800aef2:	b108      	cbz	r0, 800aef8 <__cvt+0xa4>
 800aef4:	f8cd 900c 	str.w	r9, [sp, #12]
 800aef8:	2230      	movs	r2, #48	; 0x30
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	454b      	cmp	r3, r9
 800aefe:	d307      	bcc.n	800af10 <__cvt+0xbc>
 800af00:	9b03      	ldr	r3, [sp, #12]
 800af02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af04:	1bdb      	subs	r3, r3, r7
 800af06:	4638      	mov	r0, r7
 800af08:	6013      	str	r3, [r2, #0]
 800af0a:	b004      	add	sp, #16
 800af0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af10:	1c59      	adds	r1, r3, #1
 800af12:	9103      	str	r1, [sp, #12]
 800af14:	701a      	strb	r2, [r3, #0]
 800af16:	e7f0      	b.n	800aefa <__cvt+0xa6>

0800af18 <__exponent>:
 800af18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af1a:	4603      	mov	r3, r0
 800af1c:	2900      	cmp	r1, #0
 800af1e:	bfb8      	it	lt
 800af20:	4249      	neglt	r1, r1
 800af22:	f803 2b02 	strb.w	r2, [r3], #2
 800af26:	bfb4      	ite	lt
 800af28:	222d      	movlt	r2, #45	; 0x2d
 800af2a:	222b      	movge	r2, #43	; 0x2b
 800af2c:	2909      	cmp	r1, #9
 800af2e:	7042      	strb	r2, [r0, #1]
 800af30:	dd2a      	ble.n	800af88 <__exponent+0x70>
 800af32:	f10d 0407 	add.w	r4, sp, #7
 800af36:	46a4      	mov	ip, r4
 800af38:	270a      	movs	r7, #10
 800af3a:	46a6      	mov	lr, r4
 800af3c:	460a      	mov	r2, r1
 800af3e:	fb91 f6f7 	sdiv	r6, r1, r7
 800af42:	fb07 1516 	mls	r5, r7, r6, r1
 800af46:	3530      	adds	r5, #48	; 0x30
 800af48:	2a63      	cmp	r2, #99	; 0x63
 800af4a:	f104 34ff 	add.w	r4, r4, #4294967295
 800af4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af52:	4631      	mov	r1, r6
 800af54:	dcf1      	bgt.n	800af3a <__exponent+0x22>
 800af56:	3130      	adds	r1, #48	; 0x30
 800af58:	f1ae 0502 	sub.w	r5, lr, #2
 800af5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af60:	1c44      	adds	r4, r0, #1
 800af62:	4629      	mov	r1, r5
 800af64:	4561      	cmp	r1, ip
 800af66:	d30a      	bcc.n	800af7e <__exponent+0x66>
 800af68:	f10d 0209 	add.w	r2, sp, #9
 800af6c:	eba2 020e 	sub.w	r2, r2, lr
 800af70:	4565      	cmp	r5, ip
 800af72:	bf88      	it	hi
 800af74:	2200      	movhi	r2, #0
 800af76:	4413      	add	r3, r2
 800af78:	1a18      	subs	r0, r3, r0
 800af7a:	b003      	add	sp, #12
 800af7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af82:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af86:	e7ed      	b.n	800af64 <__exponent+0x4c>
 800af88:	2330      	movs	r3, #48	; 0x30
 800af8a:	3130      	adds	r1, #48	; 0x30
 800af8c:	7083      	strb	r3, [r0, #2]
 800af8e:	70c1      	strb	r1, [r0, #3]
 800af90:	1d03      	adds	r3, r0, #4
 800af92:	e7f1      	b.n	800af78 <__exponent+0x60>

0800af94 <_printf_float>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	ed2d 8b02 	vpush	{d8}
 800af9c:	b08d      	sub	sp, #52	; 0x34
 800af9e:	460c      	mov	r4, r1
 800afa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800afa4:	4616      	mov	r6, r2
 800afa6:	461f      	mov	r7, r3
 800afa8:	4605      	mov	r5, r0
 800afaa:	f003 fa31 	bl	800e410 <_localeconv_r>
 800afae:	f8d0 a000 	ldr.w	sl, [r0]
 800afb2:	4650      	mov	r0, sl
 800afb4:	f7f5 f926 	bl	8000204 <strlen>
 800afb8:	2300      	movs	r3, #0
 800afba:	930a      	str	r3, [sp, #40]	; 0x28
 800afbc:	6823      	ldr	r3, [r4, #0]
 800afbe:	9305      	str	r3, [sp, #20]
 800afc0:	f8d8 3000 	ldr.w	r3, [r8]
 800afc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800afc8:	3307      	adds	r3, #7
 800afca:	f023 0307 	bic.w	r3, r3, #7
 800afce:	f103 0208 	add.w	r2, r3, #8
 800afd2:	f8c8 2000 	str.w	r2, [r8]
 800afd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800afe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afe6:	9307      	str	r3, [sp, #28]
 800afe8:	f8cd 8018 	str.w	r8, [sp, #24]
 800afec:	ee08 0a10 	vmov	s16, r0
 800aff0:	4b9f      	ldr	r3, [pc, #636]	; (800b270 <_printf_float+0x2dc>)
 800aff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aff6:	f04f 32ff 	mov.w	r2, #4294967295
 800affa:	f7f5 fdb7 	bl	8000b6c <__aeabi_dcmpun>
 800affe:	bb88      	cbnz	r0, 800b064 <_printf_float+0xd0>
 800b000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b004:	4b9a      	ldr	r3, [pc, #616]	; (800b270 <_printf_float+0x2dc>)
 800b006:	f04f 32ff 	mov.w	r2, #4294967295
 800b00a:	f7f5 fd91 	bl	8000b30 <__aeabi_dcmple>
 800b00e:	bb48      	cbnz	r0, 800b064 <_printf_float+0xd0>
 800b010:	2200      	movs	r2, #0
 800b012:	2300      	movs	r3, #0
 800b014:	4640      	mov	r0, r8
 800b016:	4649      	mov	r1, r9
 800b018:	f7f5 fd80 	bl	8000b1c <__aeabi_dcmplt>
 800b01c:	b110      	cbz	r0, 800b024 <_printf_float+0x90>
 800b01e:	232d      	movs	r3, #45	; 0x2d
 800b020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b024:	4b93      	ldr	r3, [pc, #588]	; (800b274 <_printf_float+0x2e0>)
 800b026:	4894      	ldr	r0, [pc, #592]	; (800b278 <_printf_float+0x2e4>)
 800b028:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b02c:	bf94      	ite	ls
 800b02e:	4698      	movls	r8, r3
 800b030:	4680      	movhi	r8, r0
 800b032:	2303      	movs	r3, #3
 800b034:	6123      	str	r3, [r4, #16]
 800b036:	9b05      	ldr	r3, [sp, #20]
 800b038:	f023 0204 	bic.w	r2, r3, #4
 800b03c:	6022      	str	r2, [r4, #0]
 800b03e:	f04f 0900 	mov.w	r9, #0
 800b042:	9700      	str	r7, [sp, #0]
 800b044:	4633      	mov	r3, r6
 800b046:	aa0b      	add	r2, sp, #44	; 0x2c
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f9d8 	bl	800b400 <_printf_common>
 800b050:	3001      	adds	r0, #1
 800b052:	f040 8090 	bne.w	800b176 <_printf_float+0x1e2>
 800b056:	f04f 30ff 	mov.w	r0, #4294967295
 800b05a:	b00d      	add	sp, #52	; 0x34
 800b05c:	ecbd 8b02 	vpop	{d8}
 800b060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b064:	4642      	mov	r2, r8
 800b066:	464b      	mov	r3, r9
 800b068:	4640      	mov	r0, r8
 800b06a:	4649      	mov	r1, r9
 800b06c:	f7f5 fd7e 	bl	8000b6c <__aeabi_dcmpun>
 800b070:	b140      	cbz	r0, 800b084 <_printf_float+0xf0>
 800b072:	464b      	mov	r3, r9
 800b074:	2b00      	cmp	r3, #0
 800b076:	bfbc      	itt	lt
 800b078:	232d      	movlt	r3, #45	; 0x2d
 800b07a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b07e:	487f      	ldr	r0, [pc, #508]	; (800b27c <_printf_float+0x2e8>)
 800b080:	4b7f      	ldr	r3, [pc, #508]	; (800b280 <_printf_float+0x2ec>)
 800b082:	e7d1      	b.n	800b028 <_printf_float+0x94>
 800b084:	6863      	ldr	r3, [r4, #4]
 800b086:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b08a:	9206      	str	r2, [sp, #24]
 800b08c:	1c5a      	adds	r2, r3, #1
 800b08e:	d13f      	bne.n	800b110 <_printf_float+0x17c>
 800b090:	2306      	movs	r3, #6
 800b092:	6063      	str	r3, [r4, #4]
 800b094:	9b05      	ldr	r3, [sp, #20]
 800b096:	6861      	ldr	r1, [r4, #4]
 800b098:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b09c:	2300      	movs	r3, #0
 800b09e:	9303      	str	r3, [sp, #12]
 800b0a0:	ab0a      	add	r3, sp, #40	; 0x28
 800b0a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b0a6:	ab09      	add	r3, sp, #36	; 0x24
 800b0a8:	ec49 8b10 	vmov	d0, r8, r9
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	6022      	str	r2, [r4, #0]
 800b0b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b0b4:	4628      	mov	r0, r5
 800b0b6:	f7ff fecd 	bl	800ae54 <__cvt>
 800b0ba:	9b06      	ldr	r3, [sp, #24]
 800b0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0be:	2b47      	cmp	r3, #71	; 0x47
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	d108      	bne.n	800b0d6 <_printf_float+0x142>
 800b0c4:	1cc8      	adds	r0, r1, #3
 800b0c6:	db02      	blt.n	800b0ce <_printf_float+0x13a>
 800b0c8:	6863      	ldr	r3, [r4, #4]
 800b0ca:	4299      	cmp	r1, r3
 800b0cc:	dd41      	ble.n	800b152 <_printf_float+0x1be>
 800b0ce:	f1ab 0b02 	sub.w	fp, fp, #2
 800b0d2:	fa5f fb8b 	uxtb.w	fp, fp
 800b0d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0da:	d820      	bhi.n	800b11e <_printf_float+0x18a>
 800b0dc:	3901      	subs	r1, #1
 800b0de:	465a      	mov	r2, fp
 800b0e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0e4:	9109      	str	r1, [sp, #36]	; 0x24
 800b0e6:	f7ff ff17 	bl	800af18 <__exponent>
 800b0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ec:	1813      	adds	r3, r2, r0
 800b0ee:	2a01      	cmp	r2, #1
 800b0f0:	4681      	mov	r9, r0
 800b0f2:	6123      	str	r3, [r4, #16]
 800b0f4:	dc02      	bgt.n	800b0fc <_printf_float+0x168>
 800b0f6:	6822      	ldr	r2, [r4, #0]
 800b0f8:	07d2      	lsls	r2, r2, #31
 800b0fa:	d501      	bpl.n	800b100 <_printf_float+0x16c>
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	6123      	str	r3, [r4, #16]
 800b100:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b104:	2b00      	cmp	r3, #0
 800b106:	d09c      	beq.n	800b042 <_printf_float+0xae>
 800b108:	232d      	movs	r3, #45	; 0x2d
 800b10a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b10e:	e798      	b.n	800b042 <_printf_float+0xae>
 800b110:	9a06      	ldr	r2, [sp, #24]
 800b112:	2a47      	cmp	r2, #71	; 0x47
 800b114:	d1be      	bne.n	800b094 <_printf_float+0x100>
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1bc      	bne.n	800b094 <_printf_float+0x100>
 800b11a:	2301      	movs	r3, #1
 800b11c:	e7b9      	b.n	800b092 <_printf_float+0xfe>
 800b11e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b122:	d118      	bne.n	800b156 <_printf_float+0x1c2>
 800b124:	2900      	cmp	r1, #0
 800b126:	6863      	ldr	r3, [r4, #4]
 800b128:	dd0b      	ble.n	800b142 <_printf_float+0x1ae>
 800b12a:	6121      	str	r1, [r4, #16]
 800b12c:	b913      	cbnz	r3, 800b134 <_printf_float+0x1a0>
 800b12e:	6822      	ldr	r2, [r4, #0]
 800b130:	07d0      	lsls	r0, r2, #31
 800b132:	d502      	bpl.n	800b13a <_printf_float+0x1a6>
 800b134:	3301      	adds	r3, #1
 800b136:	440b      	add	r3, r1
 800b138:	6123      	str	r3, [r4, #16]
 800b13a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b13c:	f04f 0900 	mov.w	r9, #0
 800b140:	e7de      	b.n	800b100 <_printf_float+0x16c>
 800b142:	b913      	cbnz	r3, 800b14a <_printf_float+0x1b6>
 800b144:	6822      	ldr	r2, [r4, #0]
 800b146:	07d2      	lsls	r2, r2, #31
 800b148:	d501      	bpl.n	800b14e <_printf_float+0x1ba>
 800b14a:	3302      	adds	r3, #2
 800b14c:	e7f4      	b.n	800b138 <_printf_float+0x1a4>
 800b14e:	2301      	movs	r3, #1
 800b150:	e7f2      	b.n	800b138 <_printf_float+0x1a4>
 800b152:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b158:	4299      	cmp	r1, r3
 800b15a:	db05      	blt.n	800b168 <_printf_float+0x1d4>
 800b15c:	6823      	ldr	r3, [r4, #0]
 800b15e:	6121      	str	r1, [r4, #16]
 800b160:	07d8      	lsls	r0, r3, #31
 800b162:	d5ea      	bpl.n	800b13a <_printf_float+0x1a6>
 800b164:	1c4b      	adds	r3, r1, #1
 800b166:	e7e7      	b.n	800b138 <_printf_float+0x1a4>
 800b168:	2900      	cmp	r1, #0
 800b16a:	bfd4      	ite	le
 800b16c:	f1c1 0202 	rsble	r2, r1, #2
 800b170:	2201      	movgt	r2, #1
 800b172:	4413      	add	r3, r2
 800b174:	e7e0      	b.n	800b138 <_printf_float+0x1a4>
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	055a      	lsls	r2, r3, #21
 800b17a:	d407      	bmi.n	800b18c <_printf_float+0x1f8>
 800b17c:	6923      	ldr	r3, [r4, #16]
 800b17e:	4642      	mov	r2, r8
 800b180:	4631      	mov	r1, r6
 800b182:	4628      	mov	r0, r5
 800b184:	47b8      	blx	r7
 800b186:	3001      	adds	r0, #1
 800b188:	d12c      	bne.n	800b1e4 <_printf_float+0x250>
 800b18a:	e764      	b.n	800b056 <_printf_float+0xc2>
 800b18c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b190:	f240 80e0 	bls.w	800b354 <_printf_float+0x3c0>
 800b194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b198:	2200      	movs	r2, #0
 800b19a:	2300      	movs	r3, #0
 800b19c:	f7f5 fcb4 	bl	8000b08 <__aeabi_dcmpeq>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d034      	beq.n	800b20e <_printf_float+0x27a>
 800b1a4:	4a37      	ldr	r2, [pc, #220]	; (800b284 <_printf_float+0x2f0>)
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	47b8      	blx	r7
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	f43f af51 	beq.w	800b056 <_printf_float+0xc2>
 800b1b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	db02      	blt.n	800b1c2 <_printf_float+0x22e>
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	07d8      	lsls	r0, r3, #31
 800b1c0:	d510      	bpl.n	800b1e4 <_printf_float+0x250>
 800b1c2:	ee18 3a10 	vmov	r3, s16
 800b1c6:	4652      	mov	r2, sl
 800b1c8:	4631      	mov	r1, r6
 800b1ca:	4628      	mov	r0, r5
 800b1cc:	47b8      	blx	r7
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	f43f af41 	beq.w	800b056 <_printf_float+0xc2>
 800b1d4:	f04f 0800 	mov.w	r8, #0
 800b1d8:	f104 091a 	add.w	r9, r4, #26
 800b1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	4543      	cmp	r3, r8
 800b1e2:	dc09      	bgt.n	800b1f8 <_printf_float+0x264>
 800b1e4:	6823      	ldr	r3, [r4, #0]
 800b1e6:	079b      	lsls	r3, r3, #30
 800b1e8:	f100 8105 	bmi.w	800b3f6 <_printf_float+0x462>
 800b1ec:	68e0      	ldr	r0, [r4, #12]
 800b1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1f0:	4298      	cmp	r0, r3
 800b1f2:	bfb8      	it	lt
 800b1f4:	4618      	movlt	r0, r3
 800b1f6:	e730      	b.n	800b05a <_printf_float+0xc6>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	464a      	mov	r2, r9
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f43f af27 	beq.w	800b056 <_printf_float+0xc2>
 800b208:	f108 0801 	add.w	r8, r8, #1
 800b20c:	e7e6      	b.n	800b1dc <_printf_float+0x248>
 800b20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b210:	2b00      	cmp	r3, #0
 800b212:	dc39      	bgt.n	800b288 <_printf_float+0x2f4>
 800b214:	4a1b      	ldr	r2, [pc, #108]	; (800b284 <_printf_float+0x2f0>)
 800b216:	2301      	movs	r3, #1
 800b218:	4631      	mov	r1, r6
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b8      	blx	r7
 800b21e:	3001      	adds	r0, #1
 800b220:	f43f af19 	beq.w	800b056 <_printf_float+0xc2>
 800b224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b228:	4313      	orrs	r3, r2
 800b22a:	d102      	bne.n	800b232 <_printf_float+0x29e>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	07d9      	lsls	r1, r3, #31
 800b230:	d5d8      	bpl.n	800b1e4 <_printf_float+0x250>
 800b232:	ee18 3a10 	vmov	r3, s16
 800b236:	4652      	mov	r2, sl
 800b238:	4631      	mov	r1, r6
 800b23a:	4628      	mov	r0, r5
 800b23c:	47b8      	blx	r7
 800b23e:	3001      	adds	r0, #1
 800b240:	f43f af09 	beq.w	800b056 <_printf_float+0xc2>
 800b244:	f04f 0900 	mov.w	r9, #0
 800b248:	f104 0a1a 	add.w	sl, r4, #26
 800b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b24e:	425b      	negs	r3, r3
 800b250:	454b      	cmp	r3, r9
 800b252:	dc01      	bgt.n	800b258 <_printf_float+0x2c4>
 800b254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b256:	e792      	b.n	800b17e <_printf_float+0x1ea>
 800b258:	2301      	movs	r3, #1
 800b25a:	4652      	mov	r2, sl
 800b25c:	4631      	mov	r1, r6
 800b25e:	4628      	mov	r0, r5
 800b260:	47b8      	blx	r7
 800b262:	3001      	adds	r0, #1
 800b264:	f43f aef7 	beq.w	800b056 <_printf_float+0xc2>
 800b268:	f109 0901 	add.w	r9, r9, #1
 800b26c:	e7ee      	b.n	800b24c <_printf_float+0x2b8>
 800b26e:	bf00      	nop
 800b270:	7fefffff 	.word	0x7fefffff
 800b274:	08010c14 	.word	0x08010c14
 800b278:	08010c18 	.word	0x08010c18
 800b27c:	08010c20 	.word	0x08010c20
 800b280:	08010c1c 	.word	0x08010c1c
 800b284:	08010c24 	.word	0x08010c24
 800b288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b28a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b28c:	429a      	cmp	r2, r3
 800b28e:	bfa8      	it	ge
 800b290:	461a      	movge	r2, r3
 800b292:	2a00      	cmp	r2, #0
 800b294:	4691      	mov	r9, r2
 800b296:	dc37      	bgt.n	800b308 <_printf_float+0x374>
 800b298:	f04f 0b00 	mov.w	fp, #0
 800b29c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2a0:	f104 021a 	add.w	r2, r4, #26
 800b2a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b2a6:	9305      	str	r3, [sp, #20]
 800b2a8:	eba3 0309 	sub.w	r3, r3, r9
 800b2ac:	455b      	cmp	r3, fp
 800b2ae:	dc33      	bgt.n	800b318 <_printf_float+0x384>
 800b2b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	db3b      	blt.n	800b330 <_printf_float+0x39c>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	07da      	lsls	r2, r3, #31
 800b2bc:	d438      	bmi.n	800b330 <_printf_float+0x39c>
 800b2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c0:	9a05      	ldr	r2, [sp, #20]
 800b2c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2c4:	1a9a      	subs	r2, r3, r2
 800b2c6:	eba3 0901 	sub.w	r9, r3, r1
 800b2ca:	4591      	cmp	r9, r2
 800b2cc:	bfa8      	it	ge
 800b2ce:	4691      	movge	r9, r2
 800b2d0:	f1b9 0f00 	cmp.w	r9, #0
 800b2d4:	dc35      	bgt.n	800b342 <_printf_float+0x3ae>
 800b2d6:	f04f 0800 	mov.w	r8, #0
 800b2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2de:	f104 0a1a 	add.w	sl, r4, #26
 800b2e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2e6:	1a9b      	subs	r3, r3, r2
 800b2e8:	eba3 0309 	sub.w	r3, r3, r9
 800b2ec:	4543      	cmp	r3, r8
 800b2ee:	f77f af79 	ble.w	800b1e4 <_printf_float+0x250>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	4652      	mov	r2, sl
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	47b8      	blx	r7
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	f43f aeaa 	beq.w	800b056 <_printf_float+0xc2>
 800b302:	f108 0801 	add.w	r8, r8, #1
 800b306:	e7ec      	b.n	800b2e2 <_printf_float+0x34e>
 800b308:	4613      	mov	r3, r2
 800b30a:	4631      	mov	r1, r6
 800b30c:	4642      	mov	r2, r8
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	d1c0      	bne.n	800b298 <_printf_float+0x304>
 800b316:	e69e      	b.n	800b056 <_printf_float+0xc2>
 800b318:	2301      	movs	r3, #1
 800b31a:	4631      	mov	r1, r6
 800b31c:	4628      	mov	r0, r5
 800b31e:	9205      	str	r2, [sp, #20]
 800b320:	47b8      	blx	r7
 800b322:	3001      	adds	r0, #1
 800b324:	f43f ae97 	beq.w	800b056 <_printf_float+0xc2>
 800b328:	9a05      	ldr	r2, [sp, #20]
 800b32a:	f10b 0b01 	add.w	fp, fp, #1
 800b32e:	e7b9      	b.n	800b2a4 <_printf_float+0x310>
 800b330:	ee18 3a10 	vmov	r3, s16
 800b334:	4652      	mov	r2, sl
 800b336:	4631      	mov	r1, r6
 800b338:	4628      	mov	r0, r5
 800b33a:	47b8      	blx	r7
 800b33c:	3001      	adds	r0, #1
 800b33e:	d1be      	bne.n	800b2be <_printf_float+0x32a>
 800b340:	e689      	b.n	800b056 <_printf_float+0xc2>
 800b342:	9a05      	ldr	r2, [sp, #20]
 800b344:	464b      	mov	r3, r9
 800b346:	4442      	add	r2, r8
 800b348:	4631      	mov	r1, r6
 800b34a:	4628      	mov	r0, r5
 800b34c:	47b8      	blx	r7
 800b34e:	3001      	adds	r0, #1
 800b350:	d1c1      	bne.n	800b2d6 <_printf_float+0x342>
 800b352:	e680      	b.n	800b056 <_printf_float+0xc2>
 800b354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b356:	2a01      	cmp	r2, #1
 800b358:	dc01      	bgt.n	800b35e <_printf_float+0x3ca>
 800b35a:	07db      	lsls	r3, r3, #31
 800b35c:	d538      	bpl.n	800b3d0 <_printf_float+0x43c>
 800b35e:	2301      	movs	r3, #1
 800b360:	4642      	mov	r2, r8
 800b362:	4631      	mov	r1, r6
 800b364:	4628      	mov	r0, r5
 800b366:	47b8      	blx	r7
 800b368:	3001      	adds	r0, #1
 800b36a:	f43f ae74 	beq.w	800b056 <_printf_float+0xc2>
 800b36e:	ee18 3a10 	vmov	r3, s16
 800b372:	4652      	mov	r2, sl
 800b374:	4631      	mov	r1, r6
 800b376:	4628      	mov	r0, r5
 800b378:	47b8      	blx	r7
 800b37a:	3001      	adds	r0, #1
 800b37c:	f43f ae6b 	beq.w	800b056 <_printf_float+0xc2>
 800b380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b384:	2200      	movs	r2, #0
 800b386:	2300      	movs	r3, #0
 800b388:	f7f5 fbbe 	bl	8000b08 <__aeabi_dcmpeq>
 800b38c:	b9d8      	cbnz	r0, 800b3c6 <_printf_float+0x432>
 800b38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b390:	f108 0201 	add.w	r2, r8, #1
 800b394:	3b01      	subs	r3, #1
 800b396:	4631      	mov	r1, r6
 800b398:	4628      	mov	r0, r5
 800b39a:	47b8      	blx	r7
 800b39c:	3001      	adds	r0, #1
 800b39e:	d10e      	bne.n	800b3be <_printf_float+0x42a>
 800b3a0:	e659      	b.n	800b056 <_printf_float+0xc2>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4652      	mov	r2, sl
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b8      	blx	r7
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	f43f ae52 	beq.w	800b056 <_printf_float+0xc2>
 800b3b2:	f108 0801 	add.w	r8, r8, #1
 800b3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	4543      	cmp	r3, r8
 800b3bc:	dcf1      	bgt.n	800b3a2 <_printf_float+0x40e>
 800b3be:	464b      	mov	r3, r9
 800b3c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3c4:	e6dc      	b.n	800b180 <_printf_float+0x1ec>
 800b3c6:	f04f 0800 	mov.w	r8, #0
 800b3ca:	f104 0a1a 	add.w	sl, r4, #26
 800b3ce:	e7f2      	b.n	800b3b6 <_printf_float+0x422>
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	4642      	mov	r2, r8
 800b3d4:	e7df      	b.n	800b396 <_printf_float+0x402>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	464a      	mov	r2, r9
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4628      	mov	r0, r5
 800b3de:	47b8      	blx	r7
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	f43f ae38 	beq.w	800b056 <_printf_float+0xc2>
 800b3e6:	f108 0801 	add.w	r8, r8, #1
 800b3ea:	68e3      	ldr	r3, [r4, #12]
 800b3ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3ee:	1a5b      	subs	r3, r3, r1
 800b3f0:	4543      	cmp	r3, r8
 800b3f2:	dcf0      	bgt.n	800b3d6 <_printf_float+0x442>
 800b3f4:	e6fa      	b.n	800b1ec <_printf_float+0x258>
 800b3f6:	f04f 0800 	mov.w	r8, #0
 800b3fa:	f104 0919 	add.w	r9, r4, #25
 800b3fe:	e7f4      	b.n	800b3ea <_printf_float+0x456>

0800b400 <_printf_common>:
 800b400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	4616      	mov	r6, r2
 800b406:	4699      	mov	r9, r3
 800b408:	688a      	ldr	r2, [r1, #8]
 800b40a:	690b      	ldr	r3, [r1, #16]
 800b40c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b410:	4293      	cmp	r3, r2
 800b412:	bfb8      	it	lt
 800b414:	4613      	movlt	r3, r2
 800b416:	6033      	str	r3, [r6, #0]
 800b418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b41c:	4607      	mov	r7, r0
 800b41e:	460c      	mov	r4, r1
 800b420:	b10a      	cbz	r2, 800b426 <_printf_common+0x26>
 800b422:	3301      	adds	r3, #1
 800b424:	6033      	str	r3, [r6, #0]
 800b426:	6823      	ldr	r3, [r4, #0]
 800b428:	0699      	lsls	r1, r3, #26
 800b42a:	bf42      	ittt	mi
 800b42c:	6833      	ldrmi	r3, [r6, #0]
 800b42e:	3302      	addmi	r3, #2
 800b430:	6033      	strmi	r3, [r6, #0]
 800b432:	6825      	ldr	r5, [r4, #0]
 800b434:	f015 0506 	ands.w	r5, r5, #6
 800b438:	d106      	bne.n	800b448 <_printf_common+0x48>
 800b43a:	f104 0a19 	add.w	sl, r4, #25
 800b43e:	68e3      	ldr	r3, [r4, #12]
 800b440:	6832      	ldr	r2, [r6, #0]
 800b442:	1a9b      	subs	r3, r3, r2
 800b444:	42ab      	cmp	r3, r5
 800b446:	dc26      	bgt.n	800b496 <_printf_common+0x96>
 800b448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b44c:	1e13      	subs	r3, r2, #0
 800b44e:	6822      	ldr	r2, [r4, #0]
 800b450:	bf18      	it	ne
 800b452:	2301      	movne	r3, #1
 800b454:	0692      	lsls	r2, r2, #26
 800b456:	d42b      	bmi.n	800b4b0 <_printf_common+0xb0>
 800b458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b45c:	4649      	mov	r1, r9
 800b45e:	4638      	mov	r0, r7
 800b460:	47c0      	blx	r8
 800b462:	3001      	adds	r0, #1
 800b464:	d01e      	beq.n	800b4a4 <_printf_common+0xa4>
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	68e5      	ldr	r5, [r4, #12]
 800b46a:	6832      	ldr	r2, [r6, #0]
 800b46c:	f003 0306 	and.w	r3, r3, #6
 800b470:	2b04      	cmp	r3, #4
 800b472:	bf08      	it	eq
 800b474:	1aad      	subeq	r5, r5, r2
 800b476:	68a3      	ldr	r3, [r4, #8]
 800b478:	6922      	ldr	r2, [r4, #16]
 800b47a:	bf0c      	ite	eq
 800b47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b480:	2500      	movne	r5, #0
 800b482:	4293      	cmp	r3, r2
 800b484:	bfc4      	itt	gt
 800b486:	1a9b      	subgt	r3, r3, r2
 800b488:	18ed      	addgt	r5, r5, r3
 800b48a:	2600      	movs	r6, #0
 800b48c:	341a      	adds	r4, #26
 800b48e:	42b5      	cmp	r5, r6
 800b490:	d11a      	bne.n	800b4c8 <_printf_common+0xc8>
 800b492:	2000      	movs	r0, #0
 800b494:	e008      	b.n	800b4a8 <_printf_common+0xa8>
 800b496:	2301      	movs	r3, #1
 800b498:	4652      	mov	r2, sl
 800b49a:	4649      	mov	r1, r9
 800b49c:	4638      	mov	r0, r7
 800b49e:	47c0      	blx	r8
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d103      	bne.n	800b4ac <_printf_common+0xac>
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	e7c6      	b.n	800b43e <_printf_common+0x3e>
 800b4b0:	18e1      	adds	r1, r4, r3
 800b4b2:	1c5a      	adds	r2, r3, #1
 800b4b4:	2030      	movs	r0, #48	; 0x30
 800b4b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b4ba:	4422      	add	r2, r4
 800b4bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4c4:	3302      	adds	r3, #2
 800b4c6:	e7c7      	b.n	800b458 <_printf_common+0x58>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	47c0      	blx	r8
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	d0e6      	beq.n	800b4a4 <_printf_common+0xa4>
 800b4d6:	3601      	adds	r6, #1
 800b4d8:	e7d9      	b.n	800b48e <_printf_common+0x8e>
	...

0800b4dc <_printf_i>:
 800b4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e0:	7e0f      	ldrb	r7, [r1, #24]
 800b4e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4e4:	2f78      	cmp	r7, #120	; 0x78
 800b4e6:	4691      	mov	r9, r2
 800b4e8:	4680      	mov	r8, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	469a      	mov	sl, r3
 800b4ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4f2:	d807      	bhi.n	800b504 <_printf_i+0x28>
 800b4f4:	2f62      	cmp	r7, #98	; 0x62
 800b4f6:	d80a      	bhi.n	800b50e <_printf_i+0x32>
 800b4f8:	2f00      	cmp	r7, #0
 800b4fa:	f000 80d8 	beq.w	800b6ae <_printf_i+0x1d2>
 800b4fe:	2f58      	cmp	r7, #88	; 0x58
 800b500:	f000 80a3 	beq.w	800b64a <_printf_i+0x16e>
 800b504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b50c:	e03a      	b.n	800b584 <_printf_i+0xa8>
 800b50e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b512:	2b15      	cmp	r3, #21
 800b514:	d8f6      	bhi.n	800b504 <_printf_i+0x28>
 800b516:	a101      	add	r1, pc, #4	; (adr r1, 800b51c <_printf_i+0x40>)
 800b518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b51c:	0800b575 	.word	0x0800b575
 800b520:	0800b589 	.word	0x0800b589
 800b524:	0800b505 	.word	0x0800b505
 800b528:	0800b505 	.word	0x0800b505
 800b52c:	0800b505 	.word	0x0800b505
 800b530:	0800b505 	.word	0x0800b505
 800b534:	0800b589 	.word	0x0800b589
 800b538:	0800b505 	.word	0x0800b505
 800b53c:	0800b505 	.word	0x0800b505
 800b540:	0800b505 	.word	0x0800b505
 800b544:	0800b505 	.word	0x0800b505
 800b548:	0800b695 	.word	0x0800b695
 800b54c:	0800b5b9 	.word	0x0800b5b9
 800b550:	0800b677 	.word	0x0800b677
 800b554:	0800b505 	.word	0x0800b505
 800b558:	0800b505 	.word	0x0800b505
 800b55c:	0800b6b7 	.word	0x0800b6b7
 800b560:	0800b505 	.word	0x0800b505
 800b564:	0800b5b9 	.word	0x0800b5b9
 800b568:	0800b505 	.word	0x0800b505
 800b56c:	0800b505 	.word	0x0800b505
 800b570:	0800b67f 	.word	0x0800b67f
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	1d1a      	adds	r2, r3, #4
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	602a      	str	r2, [r5, #0]
 800b57c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b584:	2301      	movs	r3, #1
 800b586:	e0a3      	b.n	800b6d0 <_printf_i+0x1f4>
 800b588:	6820      	ldr	r0, [r4, #0]
 800b58a:	6829      	ldr	r1, [r5, #0]
 800b58c:	0606      	lsls	r6, r0, #24
 800b58e:	f101 0304 	add.w	r3, r1, #4
 800b592:	d50a      	bpl.n	800b5aa <_printf_i+0xce>
 800b594:	680e      	ldr	r6, [r1, #0]
 800b596:	602b      	str	r3, [r5, #0]
 800b598:	2e00      	cmp	r6, #0
 800b59a:	da03      	bge.n	800b5a4 <_printf_i+0xc8>
 800b59c:	232d      	movs	r3, #45	; 0x2d
 800b59e:	4276      	negs	r6, r6
 800b5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5a4:	485e      	ldr	r0, [pc, #376]	; (800b720 <_printf_i+0x244>)
 800b5a6:	230a      	movs	r3, #10
 800b5a8:	e019      	b.n	800b5de <_printf_i+0x102>
 800b5aa:	680e      	ldr	r6, [r1, #0]
 800b5ac:	602b      	str	r3, [r5, #0]
 800b5ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b5b2:	bf18      	it	ne
 800b5b4:	b236      	sxthne	r6, r6
 800b5b6:	e7ef      	b.n	800b598 <_printf_i+0xbc>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	6820      	ldr	r0, [r4, #0]
 800b5bc:	1d19      	adds	r1, r3, #4
 800b5be:	6029      	str	r1, [r5, #0]
 800b5c0:	0601      	lsls	r1, r0, #24
 800b5c2:	d501      	bpl.n	800b5c8 <_printf_i+0xec>
 800b5c4:	681e      	ldr	r6, [r3, #0]
 800b5c6:	e002      	b.n	800b5ce <_printf_i+0xf2>
 800b5c8:	0646      	lsls	r6, r0, #25
 800b5ca:	d5fb      	bpl.n	800b5c4 <_printf_i+0xe8>
 800b5cc:	881e      	ldrh	r6, [r3, #0]
 800b5ce:	4854      	ldr	r0, [pc, #336]	; (800b720 <_printf_i+0x244>)
 800b5d0:	2f6f      	cmp	r7, #111	; 0x6f
 800b5d2:	bf0c      	ite	eq
 800b5d4:	2308      	moveq	r3, #8
 800b5d6:	230a      	movne	r3, #10
 800b5d8:	2100      	movs	r1, #0
 800b5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5de:	6865      	ldr	r5, [r4, #4]
 800b5e0:	60a5      	str	r5, [r4, #8]
 800b5e2:	2d00      	cmp	r5, #0
 800b5e4:	bfa2      	ittt	ge
 800b5e6:	6821      	ldrge	r1, [r4, #0]
 800b5e8:	f021 0104 	bicge.w	r1, r1, #4
 800b5ec:	6021      	strge	r1, [r4, #0]
 800b5ee:	b90e      	cbnz	r6, 800b5f4 <_printf_i+0x118>
 800b5f0:	2d00      	cmp	r5, #0
 800b5f2:	d04d      	beq.n	800b690 <_printf_i+0x1b4>
 800b5f4:	4615      	mov	r5, r2
 800b5f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5fa:	fb03 6711 	mls	r7, r3, r1, r6
 800b5fe:	5dc7      	ldrb	r7, [r0, r7]
 800b600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b604:	4637      	mov	r7, r6
 800b606:	42bb      	cmp	r3, r7
 800b608:	460e      	mov	r6, r1
 800b60a:	d9f4      	bls.n	800b5f6 <_printf_i+0x11a>
 800b60c:	2b08      	cmp	r3, #8
 800b60e:	d10b      	bne.n	800b628 <_printf_i+0x14c>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	07de      	lsls	r6, r3, #31
 800b614:	d508      	bpl.n	800b628 <_printf_i+0x14c>
 800b616:	6923      	ldr	r3, [r4, #16]
 800b618:	6861      	ldr	r1, [r4, #4]
 800b61a:	4299      	cmp	r1, r3
 800b61c:	bfde      	ittt	le
 800b61e:	2330      	movle	r3, #48	; 0x30
 800b620:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b624:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b628:	1b52      	subs	r2, r2, r5
 800b62a:	6122      	str	r2, [r4, #16]
 800b62c:	f8cd a000 	str.w	sl, [sp]
 800b630:	464b      	mov	r3, r9
 800b632:	aa03      	add	r2, sp, #12
 800b634:	4621      	mov	r1, r4
 800b636:	4640      	mov	r0, r8
 800b638:	f7ff fee2 	bl	800b400 <_printf_common>
 800b63c:	3001      	adds	r0, #1
 800b63e:	d14c      	bne.n	800b6da <_printf_i+0x1fe>
 800b640:	f04f 30ff 	mov.w	r0, #4294967295
 800b644:	b004      	add	sp, #16
 800b646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b64a:	4835      	ldr	r0, [pc, #212]	; (800b720 <_printf_i+0x244>)
 800b64c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b650:	6829      	ldr	r1, [r5, #0]
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	f851 6b04 	ldr.w	r6, [r1], #4
 800b658:	6029      	str	r1, [r5, #0]
 800b65a:	061d      	lsls	r5, r3, #24
 800b65c:	d514      	bpl.n	800b688 <_printf_i+0x1ac>
 800b65e:	07df      	lsls	r7, r3, #31
 800b660:	bf44      	itt	mi
 800b662:	f043 0320 	orrmi.w	r3, r3, #32
 800b666:	6023      	strmi	r3, [r4, #0]
 800b668:	b91e      	cbnz	r6, 800b672 <_printf_i+0x196>
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	f023 0320 	bic.w	r3, r3, #32
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	2310      	movs	r3, #16
 800b674:	e7b0      	b.n	800b5d8 <_printf_i+0xfc>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	f043 0320 	orr.w	r3, r3, #32
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	2378      	movs	r3, #120	; 0x78
 800b680:	4828      	ldr	r0, [pc, #160]	; (800b724 <_printf_i+0x248>)
 800b682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b686:	e7e3      	b.n	800b650 <_printf_i+0x174>
 800b688:	0659      	lsls	r1, r3, #25
 800b68a:	bf48      	it	mi
 800b68c:	b2b6      	uxthmi	r6, r6
 800b68e:	e7e6      	b.n	800b65e <_printf_i+0x182>
 800b690:	4615      	mov	r5, r2
 800b692:	e7bb      	b.n	800b60c <_printf_i+0x130>
 800b694:	682b      	ldr	r3, [r5, #0]
 800b696:	6826      	ldr	r6, [r4, #0]
 800b698:	6961      	ldr	r1, [r4, #20]
 800b69a:	1d18      	adds	r0, r3, #4
 800b69c:	6028      	str	r0, [r5, #0]
 800b69e:	0635      	lsls	r5, r6, #24
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	d501      	bpl.n	800b6a8 <_printf_i+0x1cc>
 800b6a4:	6019      	str	r1, [r3, #0]
 800b6a6:	e002      	b.n	800b6ae <_printf_i+0x1d2>
 800b6a8:	0670      	lsls	r0, r6, #25
 800b6aa:	d5fb      	bpl.n	800b6a4 <_printf_i+0x1c8>
 800b6ac:	8019      	strh	r1, [r3, #0]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	6123      	str	r3, [r4, #16]
 800b6b2:	4615      	mov	r5, r2
 800b6b4:	e7ba      	b.n	800b62c <_printf_i+0x150>
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	1d1a      	adds	r2, r3, #4
 800b6ba:	602a      	str	r2, [r5, #0]
 800b6bc:	681d      	ldr	r5, [r3, #0]
 800b6be:	6862      	ldr	r2, [r4, #4]
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	f7f4 fdac 	bl	8000220 <memchr>
 800b6c8:	b108      	cbz	r0, 800b6ce <_printf_i+0x1f2>
 800b6ca:	1b40      	subs	r0, r0, r5
 800b6cc:	6060      	str	r0, [r4, #4]
 800b6ce:	6863      	ldr	r3, [r4, #4]
 800b6d0:	6123      	str	r3, [r4, #16]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6d8:	e7a8      	b.n	800b62c <_printf_i+0x150>
 800b6da:	6923      	ldr	r3, [r4, #16]
 800b6dc:	462a      	mov	r2, r5
 800b6de:	4649      	mov	r1, r9
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	47d0      	blx	sl
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d0ab      	beq.n	800b640 <_printf_i+0x164>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	079b      	lsls	r3, r3, #30
 800b6ec:	d413      	bmi.n	800b716 <_printf_i+0x23a>
 800b6ee:	68e0      	ldr	r0, [r4, #12]
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	4298      	cmp	r0, r3
 800b6f4:	bfb8      	it	lt
 800b6f6:	4618      	movlt	r0, r3
 800b6f8:	e7a4      	b.n	800b644 <_printf_i+0x168>
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	4649      	mov	r1, r9
 800b700:	4640      	mov	r0, r8
 800b702:	47d0      	blx	sl
 800b704:	3001      	adds	r0, #1
 800b706:	d09b      	beq.n	800b640 <_printf_i+0x164>
 800b708:	3501      	adds	r5, #1
 800b70a:	68e3      	ldr	r3, [r4, #12]
 800b70c:	9903      	ldr	r1, [sp, #12]
 800b70e:	1a5b      	subs	r3, r3, r1
 800b710:	42ab      	cmp	r3, r5
 800b712:	dcf2      	bgt.n	800b6fa <_printf_i+0x21e>
 800b714:	e7eb      	b.n	800b6ee <_printf_i+0x212>
 800b716:	2500      	movs	r5, #0
 800b718:	f104 0619 	add.w	r6, r4, #25
 800b71c:	e7f5      	b.n	800b70a <_printf_i+0x22e>
 800b71e:	bf00      	nop
 800b720:	08010c26 	.word	0x08010c26
 800b724:	08010c37 	.word	0x08010c37

0800b728 <_scanf_float>:
 800b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	b087      	sub	sp, #28
 800b72e:	4617      	mov	r7, r2
 800b730:	9303      	str	r3, [sp, #12]
 800b732:	688b      	ldr	r3, [r1, #8]
 800b734:	1e5a      	subs	r2, r3, #1
 800b736:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b73a:	bf83      	ittte	hi
 800b73c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b740:	195b      	addhi	r3, r3, r5
 800b742:	9302      	strhi	r3, [sp, #8]
 800b744:	2300      	movls	r3, #0
 800b746:	bf86      	itte	hi
 800b748:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b74c:	608b      	strhi	r3, [r1, #8]
 800b74e:	9302      	strls	r3, [sp, #8]
 800b750:	680b      	ldr	r3, [r1, #0]
 800b752:	468b      	mov	fp, r1
 800b754:	2500      	movs	r5, #0
 800b756:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b75a:	f84b 3b1c 	str.w	r3, [fp], #28
 800b75e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b762:	4680      	mov	r8, r0
 800b764:	460c      	mov	r4, r1
 800b766:	465e      	mov	r6, fp
 800b768:	46aa      	mov	sl, r5
 800b76a:	46a9      	mov	r9, r5
 800b76c:	9501      	str	r5, [sp, #4]
 800b76e:	68a2      	ldr	r2, [r4, #8]
 800b770:	b152      	cbz	r2, 800b788 <_scanf_float+0x60>
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	2b4e      	cmp	r3, #78	; 0x4e
 800b778:	d864      	bhi.n	800b844 <_scanf_float+0x11c>
 800b77a:	2b40      	cmp	r3, #64	; 0x40
 800b77c:	d83c      	bhi.n	800b7f8 <_scanf_float+0xd0>
 800b77e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b782:	b2c8      	uxtb	r0, r1
 800b784:	280e      	cmp	r0, #14
 800b786:	d93a      	bls.n	800b7fe <_scanf_float+0xd6>
 800b788:	f1b9 0f00 	cmp.w	r9, #0
 800b78c:	d003      	beq.n	800b796 <_scanf_float+0x6e>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b79a:	f1ba 0f01 	cmp.w	sl, #1
 800b79e:	f200 8113 	bhi.w	800b9c8 <_scanf_float+0x2a0>
 800b7a2:	455e      	cmp	r6, fp
 800b7a4:	f200 8105 	bhi.w	800b9b2 <_scanf_float+0x28a>
 800b7a8:	2501      	movs	r5, #1
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	b007      	add	sp, #28
 800b7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b7b6:	2a0d      	cmp	r2, #13
 800b7b8:	d8e6      	bhi.n	800b788 <_scanf_float+0x60>
 800b7ba:	a101      	add	r1, pc, #4	; (adr r1, 800b7c0 <_scanf_float+0x98>)
 800b7bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b7c0:	0800b8ff 	.word	0x0800b8ff
 800b7c4:	0800b789 	.word	0x0800b789
 800b7c8:	0800b789 	.word	0x0800b789
 800b7cc:	0800b789 	.word	0x0800b789
 800b7d0:	0800b95f 	.word	0x0800b95f
 800b7d4:	0800b937 	.word	0x0800b937
 800b7d8:	0800b789 	.word	0x0800b789
 800b7dc:	0800b789 	.word	0x0800b789
 800b7e0:	0800b90d 	.word	0x0800b90d
 800b7e4:	0800b789 	.word	0x0800b789
 800b7e8:	0800b789 	.word	0x0800b789
 800b7ec:	0800b789 	.word	0x0800b789
 800b7f0:	0800b789 	.word	0x0800b789
 800b7f4:	0800b8c5 	.word	0x0800b8c5
 800b7f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b7fc:	e7db      	b.n	800b7b6 <_scanf_float+0x8e>
 800b7fe:	290e      	cmp	r1, #14
 800b800:	d8c2      	bhi.n	800b788 <_scanf_float+0x60>
 800b802:	a001      	add	r0, pc, #4	; (adr r0, 800b808 <_scanf_float+0xe0>)
 800b804:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b808:	0800b8b7 	.word	0x0800b8b7
 800b80c:	0800b789 	.word	0x0800b789
 800b810:	0800b8b7 	.word	0x0800b8b7
 800b814:	0800b94b 	.word	0x0800b94b
 800b818:	0800b789 	.word	0x0800b789
 800b81c:	0800b865 	.word	0x0800b865
 800b820:	0800b8a1 	.word	0x0800b8a1
 800b824:	0800b8a1 	.word	0x0800b8a1
 800b828:	0800b8a1 	.word	0x0800b8a1
 800b82c:	0800b8a1 	.word	0x0800b8a1
 800b830:	0800b8a1 	.word	0x0800b8a1
 800b834:	0800b8a1 	.word	0x0800b8a1
 800b838:	0800b8a1 	.word	0x0800b8a1
 800b83c:	0800b8a1 	.word	0x0800b8a1
 800b840:	0800b8a1 	.word	0x0800b8a1
 800b844:	2b6e      	cmp	r3, #110	; 0x6e
 800b846:	d809      	bhi.n	800b85c <_scanf_float+0x134>
 800b848:	2b60      	cmp	r3, #96	; 0x60
 800b84a:	d8b2      	bhi.n	800b7b2 <_scanf_float+0x8a>
 800b84c:	2b54      	cmp	r3, #84	; 0x54
 800b84e:	d077      	beq.n	800b940 <_scanf_float+0x218>
 800b850:	2b59      	cmp	r3, #89	; 0x59
 800b852:	d199      	bne.n	800b788 <_scanf_float+0x60>
 800b854:	2d07      	cmp	r5, #7
 800b856:	d197      	bne.n	800b788 <_scanf_float+0x60>
 800b858:	2508      	movs	r5, #8
 800b85a:	e029      	b.n	800b8b0 <_scanf_float+0x188>
 800b85c:	2b74      	cmp	r3, #116	; 0x74
 800b85e:	d06f      	beq.n	800b940 <_scanf_float+0x218>
 800b860:	2b79      	cmp	r3, #121	; 0x79
 800b862:	e7f6      	b.n	800b852 <_scanf_float+0x12a>
 800b864:	6821      	ldr	r1, [r4, #0]
 800b866:	05c8      	lsls	r0, r1, #23
 800b868:	d51a      	bpl.n	800b8a0 <_scanf_float+0x178>
 800b86a:	9b02      	ldr	r3, [sp, #8]
 800b86c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b870:	6021      	str	r1, [r4, #0]
 800b872:	f109 0901 	add.w	r9, r9, #1
 800b876:	b11b      	cbz	r3, 800b880 <_scanf_float+0x158>
 800b878:	3b01      	subs	r3, #1
 800b87a:	3201      	adds	r2, #1
 800b87c:	9302      	str	r3, [sp, #8]
 800b87e:	60a2      	str	r2, [r4, #8]
 800b880:	68a3      	ldr	r3, [r4, #8]
 800b882:	3b01      	subs	r3, #1
 800b884:	60a3      	str	r3, [r4, #8]
 800b886:	6923      	ldr	r3, [r4, #16]
 800b888:	3301      	adds	r3, #1
 800b88a:	6123      	str	r3, [r4, #16]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	3b01      	subs	r3, #1
 800b890:	2b00      	cmp	r3, #0
 800b892:	607b      	str	r3, [r7, #4]
 800b894:	f340 8084 	ble.w	800b9a0 <_scanf_float+0x278>
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	3301      	adds	r3, #1
 800b89c:	603b      	str	r3, [r7, #0]
 800b89e:	e766      	b.n	800b76e <_scanf_float+0x46>
 800b8a0:	eb1a 0f05 	cmn.w	sl, r5
 800b8a4:	f47f af70 	bne.w	800b788 <_scanf_float+0x60>
 800b8a8:	6822      	ldr	r2, [r4, #0]
 800b8aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b8ae:	6022      	str	r2, [r4, #0]
 800b8b0:	f806 3b01 	strb.w	r3, [r6], #1
 800b8b4:	e7e4      	b.n	800b880 <_scanf_float+0x158>
 800b8b6:	6822      	ldr	r2, [r4, #0]
 800b8b8:	0610      	lsls	r0, r2, #24
 800b8ba:	f57f af65 	bpl.w	800b788 <_scanf_float+0x60>
 800b8be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8c2:	e7f4      	b.n	800b8ae <_scanf_float+0x186>
 800b8c4:	f1ba 0f00 	cmp.w	sl, #0
 800b8c8:	d10e      	bne.n	800b8e8 <_scanf_float+0x1c0>
 800b8ca:	f1b9 0f00 	cmp.w	r9, #0
 800b8ce:	d10e      	bne.n	800b8ee <_scanf_float+0x1c6>
 800b8d0:	6822      	ldr	r2, [r4, #0]
 800b8d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b8d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b8da:	d108      	bne.n	800b8ee <_scanf_float+0x1c6>
 800b8dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8e0:	6022      	str	r2, [r4, #0]
 800b8e2:	f04f 0a01 	mov.w	sl, #1
 800b8e6:	e7e3      	b.n	800b8b0 <_scanf_float+0x188>
 800b8e8:	f1ba 0f02 	cmp.w	sl, #2
 800b8ec:	d055      	beq.n	800b99a <_scanf_float+0x272>
 800b8ee:	2d01      	cmp	r5, #1
 800b8f0:	d002      	beq.n	800b8f8 <_scanf_float+0x1d0>
 800b8f2:	2d04      	cmp	r5, #4
 800b8f4:	f47f af48 	bne.w	800b788 <_scanf_float+0x60>
 800b8f8:	3501      	adds	r5, #1
 800b8fa:	b2ed      	uxtb	r5, r5
 800b8fc:	e7d8      	b.n	800b8b0 <_scanf_float+0x188>
 800b8fe:	f1ba 0f01 	cmp.w	sl, #1
 800b902:	f47f af41 	bne.w	800b788 <_scanf_float+0x60>
 800b906:	f04f 0a02 	mov.w	sl, #2
 800b90a:	e7d1      	b.n	800b8b0 <_scanf_float+0x188>
 800b90c:	b97d      	cbnz	r5, 800b92e <_scanf_float+0x206>
 800b90e:	f1b9 0f00 	cmp.w	r9, #0
 800b912:	f47f af3c 	bne.w	800b78e <_scanf_float+0x66>
 800b916:	6822      	ldr	r2, [r4, #0]
 800b918:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b91c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b920:	f47f af39 	bne.w	800b796 <_scanf_float+0x6e>
 800b924:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b928:	6022      	str	r2, [r4, #0]
 800b92a:	2501      	movs	r5, #1
 800b92c:	e7c0      	b.n	800b8b0 <_scanf_float+0x188>
 800b92e:	2d03      	cmp	r5, #3
 800b930:	d0e2      	beq.n	800b8f8 <_scanf_float+0x1d0>
 800b932:	2d05      	cmp	r5, #5
 800b934:	e7de      	b.n	800b8f4 <_scanf_float+0x1cc>
 800b936:	2d02      	cmp	r5, #2
 800b938:	f47f af26 	bne.w	800b788 <_scanf_float+0x60>
 800b93c:	2503      	movs	r5, #3
 800b93e:	e7b7      	b.n	800b8b0 <_scanf_float+0x188>
 800b940:	2d06      	cmp	r5, #6
 800b942:	f47f af21 	bne.w	800b788 <_scanf_float+0x60>
 800b946:	2507      	movs	r5, #7
 800b948:	e7b2      	b.n	800b8b0 <_scanf_float+0x188>
 800b94a:	6822      	ldr	r2, [r4, #0]
 800b94c:	0591      	lsls	r1, r2, #22
 800b94e:	f57f af1b 	bpl.w	800b788 <_scanf_float+0x60>
 800b952:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b956:	6022      	str	r2, [r4, #0]
 800b958:	f8cd 9004 	str.w	r9, [sp, #4]
 800b95c:	e7a8      	b.n	800b8b0 <_scanf_float+0x188>
 800b95e:	6822      	ldr	r2, [r4, #0]
 800b960:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b964:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b968:	d006      	beq.n	800b978 <_scanf_float+0x250>
 800b96a:	0550      	lsls	r0, r2, #21
 800b96c:	f57f af0c 	bpl.w	800b788 <_scanf_float+0x60>
 800b970:	f1b9 0f00 	cmp.w	r9, #0
 800b974:	f43f af0f 	beq.w	800b796 <_scanf_float+0x6e>
 800b978:	0591      	lsls	r1, r2, #22
 800b97a:	bf58      	it	pl
 800b97c:	9901      	ldrpl	r1, [sp, #4]
 800b97e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b982:	bf58      	it	pl
 800b984:	eba9 0101 	subpl.w	r1, r9, r1
 800b988:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b98c:	bf58      	it	pl
 800b98e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b992:	6022      	str	r2, [r4, #0]
 800b994:	f04f 0900 	mov.w	r9, #0
 800b998:	e78a      	b.n	800b8b0 <_scanf_float+0x188>
 800b99a:	f04f 0a03 	mov.w	sl, #3
 800b99e:	e787      	b.n	800b8b0 <_scanf_float+0x188>
 800b9a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	4798      	blx	r3
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	f43f aedf 	beq.w	800b76e <_scanf_float+0x46>
 800b9b0:	e6ea      	b.n	800b788 <_scanf_float+0x60>
 800b9b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9ba:	463a      	mov	r2, r7
 800b9bc:	4640      	mov	r0, r8
 800b9be:	4798      	blx	r3
 800b9c0:	6923      	ldr	r3, [r4, #16]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	6123      	str	r3, [r4, #16]
 800b9c6:	e6ec      	b.n	800b7a2 <_scanf_float+0x7a>
 800b9c8:	1e6b      	subs	r3, r5, #1
 800b9ca:	2b06      	cmp	r3, #6
 800b9cc:	d825      	bhi.n	800ba1a <_scanf_float+0x2f2>
 800b9ce:	2d02      	cmp	r5, #2
 800b9d0:	d836      	bhi.n	800ba40 <_scanf_float+0x318>
 800b9d2:	455e      	cmp	r6, fp
 800b9d4:	f67f aee8 	bls.w	800b7a8 <_scanf_float+0x80>
 800b9d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b9e0:	463a      	mov	r2, r7
 800b9e2:	4640      	mov	r0, r8
 800b9e4:	4798      	blx	r3
 800b9e6:	6923      	ldr	r3, [r4, #16]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	6123      	str	r3, [r4, #16]
 800b9ec:	e7f1      	b.n	800b9d2 <_scanf_float+0x2aa>
 800b9ee:	9802      	ldr	r0, [sp, #8]
 800b9f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b9f8:	9002      	str	r0, [sp, #8]
 800b9fa:	463a      	mov	r2, r7
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	4798      	blx	r3
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	3b01      	subs	r3, #1
 800ba04:	6123      	str	r3, [r4, #16]
 800ba06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ba0a:	fa5f fa8a 	uxtb.w	sl, sl
 800ba0e:	f1ba 0f02 	cmp.w	sl, #2
 800ba12:	d1ec      	bne.n	800b9ee <_scanf_float+0x2c6>
 800ba14:	3d03      	subs	r5, #3
 800ba16:	b2ed      	uxtb	r5, r5
 800ba18:	1b76      	subs	r6, r6, r5
 800ba1a:	6823      	ldr	r3, [r4, #0]
 800ba1c:	05da      	lsls	r2, r3, #23
 800ba1e:	d52f      	bpl.n	800ba80 <_scanf_float+0x358>
 800ba20:	055b      	lsls	r3, r3, #21
 800ba22:	d510      	bpl.n	800ba46 <_scanf_float+0x31e>
 800ba24:	455e      	cmp	r6, fp
 800ba26:	f67f aebf 	bls.w	800b7a8 <_scanf_float+0x80>
 800ba2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ba32:	463a      	mov	r2, r7
 800ba34:	4640      	mov	r0, r8
 800ba36:	4798      	blx	r3
 800ba38:	6923      	ldr	r3, [r4, #16]
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	6123      	str	r3, [r4, #16]
 800ba3e:	e7f1      	b.n	800ba24 <_scanf_float+0x2fc>
 800ba40:	46aa      	mov	sl, r5
 800ba42:	9602      	str	r6, [sp, #8]
 800ba44:	e7df      	b.n	800ba06 <_scanf_float+0x2de>
 800ba46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ba4a:	6923      	ldr	r3, [r4, #16]
 800ba4c:	2965      	cmp	r1, #101	; 0x65
 800ba4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba52:	f106 35ff 	add.w	r5, r6, #4294967295
 800ba56:	6123      	str	r3, [r4, #16]
 800ba58:	d00c      	beq.n	800ba74 <_scanf_float+0x34c>
 800ba5a:	2945      	cmp	r1, #69	; 0x45
 800ba5c:	d00a      	beq.n	800ba74 <_scanf_float+0x34c>
 800ba5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba62:	463a      	mov	r2, r7
 800ba64:	4640      	mov	r0, r8
 800ba66:	4798      	blx	r3
 800ba68:	6923      	ldr	r3, [r4, #16]
 800ba6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	1eb5      	subs	r5, r6, #2
 800ba72:	6123      	str	r3, [r4, #16]
 800ba74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba78:	463a      	mov	r2, r7
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	4798      	blx	r3
 800ba7e:	462e      	mov	r6, r5
 800ba80:	6825      	ldr	r5, [r4, #0]
 800ba82:	f015 0510 	ands.w	r5, r5, #16
 800ba86:	d159      	bne.n	800bb3c <_scanf_float+0x414>
 800ba88:	7035      	strb	r5, [r6, #0]
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba94:	d11b      	bne.n	800bace <_scanf_float+0x3a6>
 800ba96:	9b01      	ldr	r3, [sp, #4]
 800ba98:	454b      	cmp	r3, r9
 800ba9a:	eba3 0209 	sub.w	r2, r3, r9
 800ba9e:	d123      	bne.n	800bae8 <_scanf_float+0x3c0>
 800baa0:	2200      	movs	r2, #0
 800baa2:	4659      	mov	r1, fp
 800baa4:	4640      	mov	r0, r8
 800baa6:	f001 f829 	bl	800cafc <_strtod_r>
 800baaa:	6822      	ldr	r2, [r4, #0]
 800baac:	9b03      	ldr	r3, [sp, #12]
 800baae:	f012 0f02 	tst.w	r2, #2
 800bab2:	ec57 6b10 	vmov	r6, r7, d0
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	d021      	beq.n	800bafe <_scanf_float+0x3d6>
 800baba:	9903      	ldr	r1, [sp, #12]
 800babc:	1d1a      	adds	r2, r3, #4
 800babe:	600a      	str	r2, [r1, #0]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	e9c3 6700 	strd	r6, r7, [r3]
 800bac6:	68e3      	ldr	r3, [r4, #12]
 800bac8:	3301      	adds	r3, #1
 800baca:	60e3      	str	r3, [r4, #12]
 800bacc:	e66d      	b.n	800b7aa <_scanf_float+0x82>
 800bace:	9b04      	ldr	r3, [sp, #16]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0e5      	beq.n	800baa0 <_scanf_float+0x378>
 800bad4:	9905      	ldr	r1, [sp, #20]
 800bad6:	230a      	movs	r3, #10
 800bad8:	462a      	mov	r2, r5
 800bada:	3101      	adds	r1, #1
 800badc:	4640      	mov	r0, r8
 800bade:	f001 f8fd 	bl	800ccdc <_strtol_r>
 800bae2:	9b04      	ldr	r3, [sp, #16]
 800bae4:	9e05      	ldr	r6, [sp, #20]
 800bae6:	1ac2      	subs	r2, r0, r3
 800bae8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800baec:	429e      	cmp	r6, r3
 800baee:	bf28      	it	cs
 800baf0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800baf4:	4912      	ldr	r1, [pc, #72]	; (800bb40 <_scanf_float+0x418>)
 800baf6:	4630      	mov	r0, r6
 800baf8:	f000 f968 	bl	800bdcc <siprintf>
 800bafc:	e7d0      	b.n	800baa0 <_scanf_float+0x378>
 800bafe:	9903      	ldr	r1, [sp, #12]
 800bb00:	f012 0f04 	tst.w	r2, #4
 800bb04:	f103 0204 	add.w	r2, r3, #4
 800bb08:	600a      	str	r2, [r1, #0]
 800bb0a:	d1d9      	bne.n	800bac0 <_scanf_float+0x398>
 800bb0c:	f8d3 8000 	ldr.w	r8, [r3]
 800bb10:	ee10 2a10 	vmov	r2, s0
 800bb14:	ee10 0a10 	vmov	r0, s0
 800bb18:	463b      	mov	r3, r7
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	f7f5 f826 	bl	8000b6c <__aeabi_dcmpun>
 800bb20:	b128      	cbz	r0, 800bb2e <_scanf_float+0x406>
 800bb22:	4808      	ldr	r0, [pc, #32]	; (800bb44 <_scanf_float+0x41c>)
 800bb24:	f000 f918 	bl	800bd58 <nanf>
 800bb28:	ed88 0a00 	vstr	s0, [r8]
 800bb2c:	e7cb      	b.n	800bac6 <_scanf_float+0x39e>
 800bb2e:	4630      	mov	r0, r6
 800bb30:	4639      	mov	r1, r7
 800bb32:	f7f5 f879 	bl	8000c28 <__aeabi_d2f>
 800bb36:	f8c8 0000 	str.w	r0, [r8]
 800bb3a:	e7c4      	b.n	800bac6 <_scanf_float+0x39e>
 800bb3c:	2500      	movs	r5, #0
 800bb3e:	e634      	b.n	800b7aa <_scanf_float+0x82>
 800bb40:	08010c48 	.word	0x08010c48
 800bb44:	08011050 	.word	0x08011050

0800bb48 <iprintf>:
 800bb48:	b40f      	push	{r0, r1, r2, r3}
 800bb4a:	4b0a      	ldr	r3, [pc, #40]	; (800bb74 <iprintf+0x2c>)
 800bb4c:	b513      	push	{r0, r1, r4, lr}
 800bb4e:	681c      	ldr	r4, [r3, #0]
 800bb50:	b124      	cbz	r4, 800bb5c <iprintf+0x14>
 800bb52:	69a3      	ldr	r3, [r4, #24]
 800bb54:	b913      	cbnz	r3, 800bb5c <iprintf+0x14>
 800bb56:	4620      	mov	r0, r4
 800bb58:	f7ff f80c 	bl	800ab74 <__sinit>
 800bb5c:	ab05      	add	r3, sp, #20
 800bb5e:	9a04      	ldr	r2, [sp, #16]
 800bb60:	68a1      	ldr	r1, [r4, #8]
 800bb62:	9301      	str	r3, [sp, #4]
 800bb64:	4620      	mov	r0, r4
 800bb66:	f003 fb9f 	bl	800f2a8 <_vfiprintf_r>
 800bb6a:	b002      	add	sp, #8
 800bb6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb70:	b004      	add	sp, #16
 800bb72:	4770      	bx	lr
 800bb74:	20000014 	.word	0x20000014

0800bb78 <_puts_r>:
 800bb78:	b570      	push	{r4, r5, r6, lr}
 800bb7a:	460e      	mov	r6, r1
 800bb7c:	4605      	mov	r5, r0
 800bb7e:	b118      	cbz	r0, 800bb88 <_puts_r+0x10>
 800bb80:	6983      	ldr	r3, [r0, #24]
 800bb82:	b90b      	cbnz	r3, 800bb88 <_puts_r+0x10>
 800bb84:	f7fe fff6 	bl	800ab74 <__sinit>
 800bb88:	69ab      	ldr	r3, [r5, #24]
 800bb8a:	68ac      	ldr	r4, [r5, #8]
 800bb8c:	b913      	cbnz	r3, 800bb94 <_puts_r+0x1c>
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f7fe fff0 	bl	800ab74 <__sinit>
 800bb94:	4b2c      	ldr	r3, [pc, #176]	; (800bc48 <_puts_r+0xd0>)
 800bb96:	429c      	cmp	r4, r3
 800bb98:	d120      	bne.n	800bbdc <_puts_r+0x64>
 800bb9a:	686c      	ldr	r4, [r5, #4]
 800bb9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb9e:	07db      	lsls	r3, r3, #31
 800bba0:	d405      	bmi.n	800bbae <_puts_r+0x36>
 800bba2:	89a3      	ldrh	r3, [r4, #12]
 800bba4:	0598      	lsls	r0, r3, #22
 800bba6:	d402      	bmi.n	800bbae <_puts_r+0x36>
 800bba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bbaa:	f7ff f8a6 	bl	800acfa <__retarget_lock_acquire_recursive>
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	0719      	lsls	r1, r3, #28
 800bbb2:	d51d      	bpl.n	800bbf0 <_puts_r+0x78>
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	b1db      	cbz	r3, 800bbf0 <_puts_r+0x78>
 800bbb8:	3e01      	subs	r6, #1
 800bbba:	68a3      	ldr	r3, [r4, #8]
 800bbbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bbc0:	3b01      	subs	r3, #1
 800bbc2:	60a3      	str	r3, [r4, #8]
 800bbc4:	bb39      	cbnz	r1, 800bc16 <_puts_r+0x9e>
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	da38      	bge.n	800bc3c <_puts_r+0xc4>
 800bbca:	4622      	mov	r2, r4
 800bbcc:	210a      	movs	r1, #10
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f001 f890 	bl	800ccf4 <__swbuf_r>
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	d011      	beq.n	800bbfc <_puts_r+0x84>
 800bbd8:	250a      	movs	r5, #10
 800bbda:	e011      	b.n	800bc00 <_puts_r+0x88>
 800bbdc:	4b1b      	ldr	r3, [pc, #108]	; (800bc4c <_puts_r+0xd4>)
 800bbde:	429c      	cmp	r4, r3
 800bbe0:	d101      	bne.n	800bbe6 <_puts_r+0x6e>
 800bbe2:	68ac      	ldr	r4, [r5, #8]
 800bbe4:	e7da      	b.n	800bb9c <_puts_r+0x24>
 800bbe6:	4b1a      	ldr	r3, [pc, #104]	; (800bc50 <_puts_r+0xd8>)
 800bbe8:	429c      	cmp	r4, r3
 800bbea:	bf08      	it	eq
 800bbec:	68ec      	ldreq	r4, [r5, #12]
 800bbee:	e7d5      	b.n	800bb9c <_puts_r+0x24>
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	f001 f8e2 	bl	800cdbc <__swsetup_r>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d0dd      	beq.n	800bbb8 <_puts_r+0x40>
 800bbfc:	f04f 35ff 	mov.w	r5, #4294967295
 800bc00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc02:	07da      	lsls	r2, r3, #31
 800bc04:	d405      	bmi.n	800bc12 <_puts_r+0x9a>
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	059b      	lsls	r3, r3, #22
 800bc0a:	d402      	bmi.n	800bc12 <_puts_r+0x9a>
 800bc0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc0e:	f7ff f875 	bl	800acfc <__retarget_lock_release_recursive>
 800bc12:	4628      	mov	r0, r5
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	da04      	bge.n	800bc24 <_puts_r+0xac>
 800bc1a:	69a2      	ldr	r2, [r4, #24]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	dc06      	bgt.n	800bc2e <_puts_r+0xb6>
 800bc20:	290a      	cmp	r1, #10
 800bc22:	d004      	beq.n	800bc2e <_puts_r+0xb6>
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	1c5a      	adds	r2, r3, #1
 800bc28:	6022      	str	r2, [r4, #0]
 800bc2a:	7019      	strb	r1, [r3, #0]
 800bc2c:	e7c5      	b.n	800bbba <_puts_r+0x42>
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4628      	mov	r0, r5
 800bc32:	f001 f85f 	bl	800ccf4 <__swbuf_r>
 800bc36:	3001      	adds	r0, #1
 800bc38:	d1bf      	bne.n	800bbba <_puts_r+0x42>
 800bc3a:	e7df      	b.n	800bbfc <_puts_r+0x84>
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	250a      	movs	r5, #10
 800bc40:	1c5a      	adds	r2, r3, #1
 800bc42:	6022      	str	r2, [r4, #0]
 800bc44:	701d      	strb	r5, [r3, #0]
 800bc46:	e7db      	b.n	800bc00 <_puts_r+0x88>
 800bc48:	08010bd0 	.word	0x08010bd0
 800bc4c:	08010bf0 	.word	0x08010bf0
 800bc50:	08010bb0 	.word	0x08010bb0

0800bc54 <puts>:
 800bc54:	4b02      	ldr	r3, [pc, #8]	; (800bc60 <puts+0xc>)
 800bc56:	4601      	mov	r1, r0
 800bc58:	6818      	ldr	r0, [r3, #0]
 800bc5a:	f7ff bf8d 	b.w	800bb78 <_puts_r>
 800bc5e:	bf00      	nop
 800bc60:	20000014 	.word	0x20000014

0800bc64 <cleanup_glue>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	460c      	mov	r4, r1
 800bc68:	6809      	ldr	r1, [r1, #0]
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	b109      	cbz	r1, 800bc72 <cleanup_glue+0xe>
 800bc6e:	f7ff fff9 	bl	800bc64 <cleanup_glue>
 800bc72:	4621      	mov	r1, r4
 800bc74:	4628      	mov	r0, r5
 800bc76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc7a:	f003 b943 	b.w	800ef04 <_free_r>
	...

0800bc80 <_reclaim_reent>:
 800bc80:	4b2c      	ldr	r3, [pc, #176]	; (800bd34 <_reclaim_reent+0xb4>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4283      	cmp	r3, r0
 800bc86:	b570      	push	{r4, r5, r6, lr}
 800bc88:	4604      	mov	r4, r0
 800bc8a:	d051      	beq.n	800bd30 <_reclaim_reent+0xb0>
 800bc8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bc8e:	b143      	cbz	r3, 800bca2 <_reclaim_reent+0x22>
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d14a      	bne.n	800bd2c <_reclaim_reent+0xac>
 800bc96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc98:	6819      	ldr	r1, [r3, #0]
 800bc9a:	b111      	cbz	r1, 800bca2 <_reclaim_reent+0x22>
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	f003 f931 	bl	800ef04 <_free_r>
 800bca2:	6961      	ldr	r1, [r4, #20]
 800bca4:	b111      	cbz	r1, 800bcac <_reclaim_reent+0x2c>
 800bca6:	4620      	mov	r0, r4
 800bca8:	f003 f92c 	bl	800ef04 <_free_r>
 800bcac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcae:	b111      	cbz	r1, 800bcb6 <_reclaim_reent+0x36>
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f003 f927 	bl	800ef04 <_free_r>
 800bcb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bcb8:	b111      	cbz	r1, 800bcc0 <_reclaim_reent+0x40>
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f003 f922 	bl	800ef04 <_free_r>
 800bcc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bcc2:	b111      	cbz	r1, 800bcca <_reclaim_reent+0x4a>
 800bcc4:	4620      	mov	r0, r4
 800bcc6:	f003 f91d 	bl	800ef04 <_free_r>
 800bcca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bccc:	b111      	cbz	r1, 800bcd4 <_reclaim_reent+0x54>
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f003 f918 	bl	800ef04 <_free_r>
 800bcd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bcd6:	b111      	cbz	r1, 800bcde <_reclaim_reent+0x5e>
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f003 f913 	bl	800ef04 <_free_r>
 800bcde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bce0:	b111      	cbz	r1, 800bce8 <_reclaim_reent+0x68>
 800bce2:	4620      	mov	r0, r4
 800bce4:	f003 f90e 	bl	800ef04 <_free_r>
 800bce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcea:	b111      	cbz	r1, 800bcf2 <_reclaim_reent+0x72>
 800bcec:	4620      	mov	r0, r4
 800bcee:	f003 f909 	bl	800ef04 <_free_r>
 800bcf2:	69a3      	ldr	r3, [r4, #24]
 800bcf4:	b1e3      	cbz	r3, 800bd30 <_reclaim_reent+0xb0>
 800bcf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	4798      	blx	r3
 800bcfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bcfe:	b1b9      	cbz	r1, 800bd30 <_reclaim_reent+0xb0>
 800bd00:	4620      	mov	r0, r4
 800bd02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd06:	f7ff bfad 	b.w	800bc64 <cleanup_glue>
 800bd0a:	5949      	ldr	r1, [r1, r5]
 800bd0c:	b941      	cbnz	r1, 800bd20 <_reclaim_reent+0xa0>
 800bd0e:	3504      	adds	r5, #4
 800bd10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd12:	2d80      	cmp	r5, #128	; 0x80
 800bd14:	68d9      	ldr	r1, [r3, #12]
 800bd16:	d1f8      	bne.n	800bd0a <_reclaim_reent+0x8a>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f003 f8f3 	bl	800ef04 <_free_r>
 800bd1e:	e7ba      	b.n	800bc96 <_reclaim_reent+0x16>
 800bd20:	680e      	ldr	r6, [r1, #0]
 800bd22:	4620      	mov	r0, r4
 800bd24:	f003 f8ee 	bl	800ef04 <_free_r>
 800bd28:	4631      	mov	r1, r6
 800bd2a:	e7ef      	b.n	800bd0c <_reclaim_reent+0x8c>
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	e7ef      	b.n	800bd10 <_reclaim_reent+0x90>
 800bd30:	bd70      	pop	{r4, r5, r6, pc}
 800bd32:	bf00      	nop
 800bd34:	20000014 	.word	0x20000014

0800bd38 <_sbrk_r>:
 800bd38:	b538      	push	{r3, r4, r5, lr}
 800bd3a:	4d06      	ldr	r5, [pc, #24]	; (800bd54 <_sbrk_r+0x1c>)
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	4604      	mov	r4, r0
 800bd40:	4608      	mov	r0, r1
 800bd42:	602b      	str	r3, [r5, #0]
 800bd44:	f7f5 fcfa 	bl	800173c <_sbrk>
 800bd48:	1c43      	adds	r3, r0, #1
 800bd4a:	d102      	bne.n	800bd52 <_sbrk_r+0x1a>
 800bd4c:	682b      	ldr	r3, [r5, #0]
 800bd4e:	b103      	cbz	r3, 800bd52 <_sbrk_r+0x1a>
 800bd50:	6023      	str	r3, [r4, #0]
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	20005df8 	.word	0x20005df8

0800bd58 <nanf>:
 800bd58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bd60 <nanf+0x8>
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	7fc00000 	.word	0x7fc00000

0800bd64 <sniprintf>:
 800bd64:	b40c      	push	{r2, r3}
 800bd66:	b530      	push	{r4, r5, lr}
 800bd68:	4b17      	ldr	r3, [pc, #92]	; (800bdc8 <sniprintf+0x64>)
 800bd6a:	1e0c      	subs	r4, r1, #0
 800bd6c:	681d      	ldr	r5, [r3, #0]
 800bd6e:	b09d      	sub	sp, #116	; 0x74
 800bd70:	da08      	bge.n	800bd84 <sniprintf+0x20>
 800bd72:	238b      	movs	r3, #139	; 0x8b
 800bd74:	602b      	str	r3, [r5, #0]
 800bd76:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7a:	b01d      	add	sp, #116	; 0x74
 800bd7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd80:	b002      	add	sp, #8
 800bd82:	4770      	bx	lr
 800bd84:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd88:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bd8c:	bf14      	ite	ne
 800bd8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd92:	4623      	moveq	r3, r4
 800bd94:	9304      	str	r3, [sp, #16]
 800bd96:	9307      	str	r3, [sp, #28]
 800bd98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd9c:	9002      	str	r0, [sp, #8]
 800bd9e:	9006      	str	r0, [sp, #24]
 800bda0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bda4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bda6:	ab21      	add	r3, sp, #132	; 0x84
 800bda8:	a902      	add	r1, sp, #8
 800bdaa:	4628      	mov	r0, r5
 800bdac:	9301      	str	r3, [sp, #4]
 800bdae:	f003 f951 	bl	800f054 <_svfiprintf_r>
 800bdb2:	1c43      	adds	r3, r0, #1
 800bdb4:	bfbc      	itt	lt
 800bdb6:	238b      	movlt	r3, #139	; 0x8b
 800bdb8:	602b      	strlt	r3, [r5, #0]
 800bdba:	2c00      	cmp	r4, #0
 800bdbc:	d0dd      	beq.n	800bd7a <sniprintf+0x16>
 800bdbe:	9b02      	ldr	r3, [sp, #8]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	701a      	strb	r2, [r3, #0]
 800bdc4:	e7d9      	b.n	800bd7a <sniprintf+0x16>
 800bdc6:	bf00      	nop
 800bdc8:	20000014 	.word	0x20000014

0800bdcc <siprintf>:
 800bdcc:	b40e      	push	{r1, r2, r3}
 800bdce:	b500      	push	{lr}
 800bdd0:	b09c      	sub	sp, #112	; 0x70
 800bdd2:	ab1d      	add	r3, sp, #116	; 0x74
 800bdd4:	9002      	str	r0, [sp, #8]
 800bdd6:	9006      	str	r0, [sp, #24]
 800bdd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bddc:	4809      	ldr	r0, [pc, #36]	; (800be04 <siprintf+0x38>)
 800bdde:	9107      	str	r1, [sp, #28]
 800bde0:	9104      	str	r1, [sp, #16]
 800bde2:	4909      	ldr	r1, [pc, #36]	; (800be08 <siprintf+0x3c>)
 800bde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde8:	9105      	str	r1, [sp, #20]
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	a902      	add	r1, sp, #8
 800bdf0:	f003 f930 	bl	800f054 <_svfiprintf_r>
 800bdf4:	9b02      	ldr	r3, [sp, #8]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	b01c      	add	sp, #112	; 0x70
 800bdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800be00:	b003      	add	sp, #12
 800be02:	4770      	bx	lr
 800be04:	20000014 	.word	0x20000014
 800be08:	ffff0208 	.word	0xffff0208

0800be0c <__sread>:
 800be0c:	b510      	push	{r4, lr}
 800be0e:	460c      	mov	r4, r1
 800be10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be14:	f003 fb78 	bl	800f508 <_read_r>
 800be18:	2800      	cmp	r0, #0
 800be1a:	bfab      	itete	ge
 800be1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be1e:	89a3      	ldrhlt	r3, [r4, #12]
 800be20:	181b      	addge	r3, r3, r0
 800be22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be26:	bfac      	ite	ge
 800be28:	6563      	strge	r3, [r4, #84]	; 0x54
 800be2a:	81a3      	strhlt	r3, [r4, #12]
 800be2c:	bd10      	pop	{r4, pc}

0800be2e <__swrite>:
 800be2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be32:	461f      	mov	r7, r3
 800be34:	898b      	ldrh	r3, [r1, #12]
 800be36:	05db      	lsls	r3, r3, #23
 800be38:	4605      	mov	r5, r0
 800be3a:	460c      	mov	r4, r1
 800be3c:	4616      	mov	r6, r2
 800be3e:	d505      	bpl.n	800be4c <__swrite+0x1e>
 800be40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be44:	2302      	movs	r3, #2
 800be46:	2200      	movs	r2, #0
 800be48:	f002 fae6 	bl	800e418 <_lseek_r>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	4632      	mov	r2, r6
 800be5a:	463b      	mov	r3, r7
 800be5c:	4628      	mov	r0, r5
 800be5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be62:	f000 bf99 	b.w	800cd98 <_write_r>

0800be66 <__sseek>:
 800be66:	b510      	push	{r4, lr}
 800be68:	460c      	mov	r4, r1
 800be6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be6e:	f002 fad3 	bl	800e418 <_lseek_r>
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	89a3      	ldrh	r3, [r4, #12]
 800be76:	bf15      	itete	ne
 800be78:	6560      	strne	r0, [r4, #84]	; 0x54
 800be7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be82:	81a3      	strheq	r3, [r4, #12]
 800be84:	bf18      	it	ne
 800be86:	81a3      	strhne	r3, [r4, #12]
 800be88:	bd10      	pop	{r4, pc}

0800be8a <__sclose>:
 800be8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be8e:	f001 b803 	b.w	800ce98 <_close_r>

0800be92 <strncpy>:
 800be92:	b510      	push	{r4, lr}
 800be94:	3901      	subs	r1, #1
 800be96:	4603      	mov	r3, r0
 800be98:	b132      	cbz	r2, 800bea8 <strncpy+0x16>
 800be9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800be9e:	f803 4b01 	strb.w	r4, [r3], #1
 800bea2:	3a01      	subs	r2, #1
 800bea4:	2c00      	cmp	r4, #0
 800bea6:	d1f7      	bne.n	800be98 <strncpy+0x6>
 800bea8:	441a      	add	r2, r3
 800beaa:	2100      	movs	r1, #0
 800beac:	4293      	cmp	r3, r2
 800beae:	d100      	bne.n	800beb2 <strncpy+0x20>
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	f803 1b01 	strb.w	r1, [r3], #1
 800beb6:	e7f9      	b.n	800beac <strncpy+0x1a>

0800beb8 <sulp>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	4604      	mov	r4, r0
 800bebc:	460d      	mov	r5, r1
 800bebe:	ec45 4b10 	vmov	d0, r4, r5
 800bec2:	4616      	mov	r6, r2
 800bec4:	f002 feb8 	bl	800ec38 <__ulp>
 800bec8:	ec51 0b10 	vmov	r0, r1, d0
 800becc:	b17e      	cbz	r6, 800beee <sulp+0x36>
 800bece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	dd09      	ble.n	800beee <sulp+0x36>
 800beda:	051b      	lsls	r3, r3, #20
 800bedc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bee0:	2400      	movs	r4, #0
 800bee2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bee6:	4622      	mov	r2, r4
 800bee8:	462b      	mov	r3, r5
 800beea:	f7f4 fba5 	bl	8000638 <__aeabi_dmul>
 800beee:	bd70      	pop	{r4, r5, r6, pc}

0800bef0 <_strtod_l>:
 800bef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bef4:	ed2d 8b02 	vpush	{d8}
 800bef8:	b09d      	sub	sp, #116	; 0x74
 800befa:	461f      	mov	r7, r3
 800befc:	2300      	movs	r3, #0
 800befe:	9318      	str	r3, [sp, #96]	; 0x60
 800bf00:	4ba2      	ldr	r3, [pc, #648]	; (800c18c <_strtod_l+0x29c>)
 800bf02:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9305      	str	r3, [sp, #20]
 800bf08:	4604      	mov	r4, r0
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	4688      	mov	r8, r1
 800bf0e:	f7f4 f979 	bl	8000204 <strlen>
 800bf12:	f04f 0a00 	mov.w	sl, #0
 800bf16:	4605      	mov	r5, r0
 800bf18:	f04f 0b00 	mov.w	fp, #0
 800bf1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bf20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf22:	781a      	ldrb	r2, [r3, #0]
 800bf24:	2a2b      	cmp	r2, #43	; 0x2b
 800bf26:	d04e      	beq.n	800bfc6 <_strtod_l+0xd6>
 800bf28:	d83b      	bhi.n	800bfa2 <_strtod_l+0xb2>
 800bf2a:	2a0d      	cmp	r2, #13
 800bf2c:	d834      	bhi.n	800bf98 <_strtod_l+0xa8>
 800bf2e:	2a08      	cmp	r2, #8
 800bf30:	d834      	bhi.n	800bf9c <_strtod_l+0xac>
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	d03e      	beq.n	800bfb4 <_strtod_l+0xc4>
 800bf36:	2300      	movs	r3, #0
 800bf38:	930a      	str	r3, [sp, #40]	; 0x28
 800bf3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bf3c:	7833      	ldrb	r3, [r6, #0]
 800bf3e:	2b30      	cmp	r3, #48	; 0x30
 800bf40:	f040 80b0 	bne.w	800c0a4 <_strtod_l+0x1b4>
 800bf44:	7873      	ldrb	r3, [r6, #1]
 800bf46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bf4a:	2b58      	cmp	r3, #88	; 0x58
 800bf4c:	d168      	bne.n	800c020 <_strtod_l+0x130>
 800bf4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf50:	9301      	str	r3, [sp, #4]
 800bf52:	ab18      	add	r3, sp, #96	; 0x60
 800bf54:	9702      	str	r7, [sp, #8]
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	4a8d      	ldr	r2, [pc, #564]	; (800c190 <_strtod_l+0x2a0>)
 800bf5a:	ab19      	add	r3, sp, #100	; 0x64
 800bf5c:	a917      	add	r1, sp, #92	; 0x5c
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f001 ff4e 	bl	800de00 <__gethex>
 800bf64:	f010 0707 	ands.w	r7, r0, #7
 800bf68:	4605      	mov	r5, r0
 800bf6a:	d005      	beq.n	800bf78 <_strtod_l+0x88>
 800bf6c:	2f06      	cmp	r7, #6
 800bf6e:	d12c      	bne.n	800bfca <_strtod_l+0xda>
 800bf70:	3601      	adds	r6, #1
 800bf72:	2300      	movs	r3, #0
 800bf74:	9617      	str	r6, [sp, #92]	; 0x5c
 800bf76:	930a      	str	r3, [sp, #40]	; 0x28
 800bf78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f040 8590 	bne.w	800caa0 <_strtod_l+0xbb0>
 800bf80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf82:	b1eb      	cbz	r3, 800bfc0 <_strtod_l+0xd0>
 800bf84:	4652      	mov	r2, sl
 800bf86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bf8a:	ec43 2b10 	vmov	d0, r2, r3
 800bf8e:	b01d      	add	sp, #116	; 0x74
 800bf90:	ecbd 8b02 	vpop	{d8}
 800bf94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf98:	2a20      	cmp	r2, #32
 800bf9a:	d1cc      	bne.n	800bf36 <_strtod_l+0x46>
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfa0:	e7be      	b.n	800bf20 <_strtod_l+0x30>
 800bfa2:	2a2d      	cmp	r2, #45	; 0x2d
 800bfa4:	d1c7      	bne.n	800bf36 <_strtod_l+0x46>
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	920a      	str	r2, [sp, #40]	; 0x28
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	9217      	str	r2, [sp, #92]	; 0x5c
 800bfae:	785b      	ldrb	r3, [r3, #1]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1c2      	bne.n	800bf3a <_strtod_l+0x4a>
 800bfb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f040 856e 	bne.w	800ca9c <_strtod_l+0xbac>
 800bfc0:	4652      	mov	r2, sl
 800bfc2:	465b      	mov	r3, fp
 800bfc4:	e7e1      	b.n	800bf8a <_strtod_l+0x9a>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	e7ee      	b.n	800bfa8 <_strtod_l+0xb8>
 800bfca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bfcc:	b13a      	cbz	r2, 800bfde <_strtod_l+0xee>
 800bfce:	2135      	movs	r1, #53	; 0x35
 800bfd0:	a81a      	add	r0, sp, #104	; 0x68
 800bfd2:	f002 ff3c 	bl	800ee4e <__copybits>
 800bfd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f002 fafb 	bl	800e5d4 <_Bfree>
 800bfde:	3f01      	subs	r7, #1
 800bfe0:	2f04      	cmp	r7, #4
 800bfe2:	d806      	bhi.n	800bff2 <_strtod_l+0x102>
 800bfe4:	e8df f007 	tbb	[pc, r7]
 800bfe8:	1714030a 	.word	0x1714030a
 800bfec:	0a          	.byte	0x0a
 800bfed:	00          	.byte	0x00
 800bfee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bff2:	0728      	lsls	r0, r5, #28
 800bff4:	d5c0      	bpl.n	800bf78 <_strtod_l+0x88>
 800bff6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bffa:	e7bd      	b.n	800bf78 <_strtod_l+0x88>
 800bffc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c000:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c002:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c006:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c00a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c00e:	e7f0      	b.n	800bff2 <_strtod_l+0x102>
 800c010:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c194 <_strtod_l+0x2a4>
 800c014:	e7ed      	b.n	800bff2 <_strtod_l+0x102>
 800c016:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c01a:	f04f 3aff 	mov.w	sl, #4294967295
 800c01e:	e7e8      	b.n	800bff2 <_strtod_l+0x102>
 800c020:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	9217      	str	r2, [sp, #92]	; 0x5c
 800c026:	785b      	ldrb	r3, [r3, #1]
 800c028:	2b30      	cmp	r3, #48	; 0x30
 800c02a:	d0f9      	beq.n	800c020 <_strtod_l+0x130>
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d0a3      	beq.n	800bf78 <_strtod_l+0x88>
 800c030:	2301      	movs	r3, #1
 800c032:	f04f 0900 	mov.w	r9, #0
 800c036:	9304      	str	r3, [sp, #16]
 800c038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c03a:	9308      	str	r3, [sp, #32]
 800c03c:	f8cd 901c 	str.w	r9, [sp, #28]
 800c040:	464f      	mov	r7, r9
 800c042:	220a      	movs	r2, #10
 800c044:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c046:	7806      	ldrb	r6, [r0, #0]
 800c048:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c04c:	b2d9      	uxtb	r1, r3
 800c04e:	2909      	cmp	r1, #9
 800c050:	d92a      	bls.n	800c0a8 <_strtod_l+0x1b8>
 800c052:	9905      	ldr	r1, [sp, #20]
 800c054:	462a      	mov	r2, r5
 800c056:	f003 fa73 	bl	800f540 <strncmp>
 800c05a:	b398      	cbz	r0, 800c0c4 <_strtod_l+0x1d4>
 800c05c:	2000      	movs	r0, #0
 800c05e:	4632      	mov	r2, r6
 800c060:	463d      	mov	r5, r7
 800c062:	9005      	str	r0, [sp, #20]
 800c064:	4603      	mov	r3, r0
 800c066:	2a65      	cmp	r2, #101	; 0x65
 800c068:	d001      	beq.n	800c06e <_strtod_l+0x17e>
 800c06a:	2a45      	cmp	r2, #69	; 0x45
 800c06c:	d118      	bne.n	800c0a0 <_strtod_l+0x1b0>
 800c06e:	b91d      	cbnz	r5, 800c078 <_strtod_l+0x188>
 800c070:	9a04      	ldr	r2, [sp, #16]
 800c072:	4302      	orrs	r2, r0
 800c074:	d09e      	beq.n	800bfb4 <_strtod_l+0xc4>
 800c076:	2500      	movs	r5, #0
 800c078:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c07c:	f108 0201 	add.w	r2, r8, #1
 800c080:	9217      	str	r2, [sp, #92]	; 0x5c
 800c082:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c086:	2a2b      	cmp	r2, #43	; 0x2b
 800c088:	d075      	beq.n	800c176 <_strtod_l+0x286>
 800c08a:	2a2d      	cmp	r2, #45	; 0x2d
 800c08c:	d07b      	beq.n	800c186 <_strtod_l+0x296>
 800c08e:	f04f 0c00 	mov.w	ip, #0
 800c092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c096:	2909      	cmp	r1, #9
 800c098:	f240 8082 	bls.w	800c1a0 <_strtod_l+0x2b0>
 800c09c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c0a0:	2600      	movs	r6, #0
 800c0a2:	e09d      	b.n	800c1e0 <_strtod_l+0x2f0>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	e7c4      	b.n	800c032 <_strtod_l+0x142>
 800c0a8:	2f08      	cmp	r7, #8
 800c0aa:	bfd8      	it	le
 800c0ac:	9907      	ldrle	r1, [sp, #28]
 800c0ae:	f100 0001 	add.w	r0, r0, #1
 800c0b2:	bfda      	itte	le
 800c0b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c0b8:	9307      	strle	r3, [sp, #28]
 800c0ba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c0be:	3701      	adds	r7, #1
 800c0c0:	9017      	str	r0, [sp, #92]	; 0x5c
 800c0c2:	e7bf      	b.n	800c044 <_strtod_l+0x154>
 800c0c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0c6:	195a      	adds	r2, r3, r5
 800c0c8:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0ca:	5d5a      	ldrb	r2, [r3, r5]
 800c0cc:	2f00      	cmp	r7, #0
 800c0ce:	d037      	beq.n	800c140 <_strtod_l+0x250>
 800c0d0:	9005      	str	r0, [sp, #20]
 800c0d2:	463d      	mov	r5, r7
 800c0d4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c0d8:	2b09      	cmp	r3, #9
 800c0da:	d912      	bls.n	800c102 <_strtod_l+0x212>
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e7c2      	b.n	800c066 <_strtod_l+0x176>
 800c0e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c0e6:	785a      	ldrb	r2, [r3, #1]
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	2a30      	cmp	r2, #48	; 0x30
 800c0ec:	d0f8      	beq.n	800c0e0 <_strtod_l+0x1f0>
 800c0ee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c0f2:	2b08      	cmp	r3, #8
 800c0f4:	f200 84d9 	bhi.w	800caaa <_strtod_l+0xbba>
 800c0f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c0fa:	9005      	str	r0, [sp, #20]
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	9308      	str	r3, [sp, #32]
 800c100:	4605      	mov	r5, r0
 800c102:	3a30      	subs	r2, #48	; 0x30
 800c104:	f100 0301 	add.w	r3, r0, #1
 800c108:	d014      	beq.n	800c134 <_strtod_l+0x244>
 800c10a:	9905      	ldr	r1, [sp, #20]
 800c10c:	4419      	add	r1, r3
 800c10e:	9105      	str	r1, [sp, #20]
 800c110:	462b      	mov	r3, r5
 800c112:	eb00 0e05 	add.w	lr, r0, r5
 800c116:	210a      	movs	r1, #10
 800c118:	4573      	cmp	r3, lr
 800c11a:	d113      	bne.n	800c144 <_strtod_l+0x254>
 800c11c:	182b      	adds	r3, r5, r0
 800c11e:	2b08      	cmp	r3, #8
 800c120:	f105 0501 	add.w	r5, r5, #1
 800c124:	4405      	add	r5, r0
 800c126:	dc1c      	bgt.n	800c162 <_strtod_l+0x272>
 800c128:	9907      	ldr	r1, [sp, #28]
 800c12a:	230a      	movs	r3, #10
 800c12c:	fb03 2301 	mla	r3, r3, r1, r2
 800c130:	9307      	str	r3, [sp, #28]
 800c132:	2300      	movs	r3, #0
 800c134:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c136:	1c51      	adds	r1, r2, #1
 800c138:	9117      	str	r1, [sp, #92]	; 0x5c
 800c13a:	7852      	ldrb	r2, [r2, #1]
 800c13c:	4618      	mov	r0, r3
 800c13e:	e7c9      	b.n	800c0d4 <_strtod_l+0x1e4>
 800c140:	4638      	mov	r0, r7
 800c142:	e7d2      	b.n	800c0ea <_strtod_l+0x1fa>
 800c144:	2b08      	cmp	r3, #8
 800c146:	dc04      	bgt.n	800c152 <_strtod_l+0x262>
 800c148:	9e07      	ldr	r6, [sp, #28]
 800c14a:	434e      	muls	r6, r1
 800c14c:	9607      	str	r6, [sp, #28]
 800c14e:	3301      	adds	r3, #1
 800c150:	e7e2      	b.n	800c118 <_strtod_l+0x228>
 800c152:	f103 0c01 	add.w	ip, r3, #1
 800c156:	f1bc 0f10 	cmp.w	ip, #16
 800c15a:	bfd8      	it	le
 800c15c:	fb01 f909 	mulle.w	r9, r1, r9
 800c160:	e7f5      	b.n	800c14e <_strtod_l+0x25e>
 800c162:	2d10      	cmp	r5, #16
 800c164:	bfdc      	itt	le
 800c166:	230a      	movle	r3, #10
 800c168:	fb03 2909 	mlale	r9, r3, r9, r2
 800c16c:	e7e1      	b.n	800c132 <_strtod_l+0x242>
 800c16e:	2300      	movs	r3, #0
 800c170:	9305      	str	r3, [sp, #20]
 800c172:	2301      	movs	r3, #1
 800c174:	e77c      	b.n	800c070 <_strtod_l+0x180>
 800c176:	f04f 0c00 	mov.w	ip, #0
 800c17a:	f108 0202 	add.w	r2, r8, #2
 800c17e:	9217      	str	r2, [sp, #92]	; 0x5c
 800c180:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c184:	e785      	b.n	800c092 <_strtod_l+0x1a2>
 800c186:	f04f 0c01 	mov.w	ip, #1
 800c18a:	e7f6      	b.n	800c17a <_strtod_l+0x28a>
 800c18c:	08010e98 	.word	0x08010e98
 800c190:	08010c50 	.word	0x08010c50
 800c194:	7ff00000 	.word	0x7ff00000
 800c198:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c19a:	1c51      	adds	r1, r2, #1
 800c19c:	9117      	str	r1, [sp, #92]	; 0x5c
 800c19e:	7852      	ldrb	r2, [r2, #1]
 800c1a0:	2a30      	cmp	r2, #48	; 0x30
 800c1a2:	d0f9      	beq.n	800c198 <_strtod_l+0x2a8>
 800c1a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c1a8:	2908      	cmp	r1, #8
 800c1aa:	f63f af79 	bhi.w	800c0a0 <_strtod_l+0x1b0>
 800c1ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c1b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1b4:	9206      	str	r2, [sp, #24]
 800c1b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c1b8:	1c51      	adds	r1, r2, #1
 800c1ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800c1bc:	7852      	ldrb	r2, [r2, #1]
 800c1be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c1c2:	2e09      	cmp	r6, #9
 800c1c4:	d937      	bls.n	800c236 <_strtod_l+0x346>
 800c1c6:	9e06      	ldr	r6, [sp, #24]
 800c1c8:	1b89      	subs	r1, r1, r6
 800c1ca:	2908      	cmp	r1, #8
 800c1cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c1d0:	dc02      	bgt.n	800c1d8 <_strtod_l+0x2e8>
 800c1d2:	4576      	cmp	r6, lr
 800c1d4:	bfa8      	it	ge
 800c1d6:	4676      	movge	r6, lr
 800c1d8:	f1bc 0f00 	cmp.w	ip, #0
 800c1dc:	d000      	beq.n	800c1e0 <_strtod_l+0x2f0>
 800c1de:	4276      	negs	r6, r6
 800c1e0:	2d00      	cmp	r5, #0
 800c1e2:	d14d      	bne.n	800c280 <_strtod_l+0x390>
 800c1e4:	9904      	ldr	r1, [sp, #16]
 800c1e6:	4301      	orrs	r1, r0
 800c1e8:	f47f aec6 	bne.w	800bf78 <_strtod_l+0x88>
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f47f aee1 	bne.w	800bfb4 <_strtod_l+0xc4>
 800c1f2:	2a69      	cmp	r2, #105	; 0x69
 800c1f4:	d027      	beq.n	800c246 <_strtod_l+0x356>
 800c1f6:	dc24      	bgt.n	800c242 <_strtod_l+0x352>
 800c1f8:	2a49      	cmp	r2, #73	; 0x49
 800c1fa:	d024      	beq.n	800c246 <_strtod_l+0x356>
 800c1fc:	2a4e      	cmp	r2, #78	; 0x4e
 800c1fe:	f47f aed9 	bne.w	800bfb4 <_strtod_l+0xc4>
 800c202:	499f      	ldr	r1, [pc, #636]	; (800c480 <_strtod_l+0x590>)
 800c204:	a817      	add	r0, sp, #92	; 0x5c
 800c206:	f002 f853 	bl	800e2b0 <__match>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	f43f aed2 	beq.w	800bfb4 <_strtod_l+0xc4>
 800c210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	2b28      	cmp	r3, #40	; 0x28
 800c216:	d12d      	bne.n	800c274 <_strtod_l+0x384>
 800c218:	499a      	ldr	r1, [pc, #616]	; (800c484 <_strtod_l+0x594>)
 800c21a:	aa1a      	add	r2, sp, #104	; 0x68
 800c21c:	a817      	add	r0, sp, #92	; 0x5c
 800c21e:	f002 f85b 	bl	800e2d8 <__hexnan>
 800c222:	2805      	cmp	r0, #5
 800c224:	d126      	bne.n	800c274 <_strtod_l+0x384>
 800c226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c228:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c22c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c230:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c234:	e6a0      	b.n	800bf78 <_strtod_l+0x88>
 800c236:	210a      	movs	r1, #10
 800c238:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c23c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c240:	e7b9      	b.n	800c1b6 <_strtod_l+0x2c6>
 800c242:	2a6e      	cmp	r2, #110	; 0x6e
 800c244:	e7db      	b.n	800c1fe <_strtod_l+0x30e>
 800c246:	4990      	ldr	r1, [pc, #576]	; (800c488 <_strtod_l+0x598>)
 800c248:	a817      	add	r0, sp, #92	; 0x5c
 800c24a:	f002 f831 	bl	800e2b0 <__match>
 800c24e:	2800      	cmp	r0, #0
 800c250:	f43f aeb0 	beq.w	800bfb4 <_strtod_l+0xc4>
 800c254:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c256:	498d      	ldr	r1, [pc, #564]	; (800c48c <_strtod_l+0x59c>)
 800c258:	3b01      	subs	r3, #1
 800c25a:	a817      	add	r0, sp, #92	; 0x5c
 800c25c:	9317      	str	r3, [sp, #92]	; 0x5c
 800c25e:	f002 f827 	bl	800e2b0 <__match>
 800c262:	b910      	cbnz	r0, 800c26a <_strtod_l+0x37a>
 800c264:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c266:	3301      	adds	r3, #1
 800c268:	9317      	str	r3, [sp, #92]	; 0x5c
 800c26a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c49c <_strtod_l+0x5ac>
 800c26e:	f04f 0a00 	mov.w	sl, #0
 800c272:	e681      	b.n	800bf78 <_strtod_l+0x88>
 800c274:	4886      	ldr	r0, [pc, #536]	; (800c490 <_strtod_l+0x5a0>)
 800c276:	f003 f95b 	bl	800f530 <nan>
 800c27a:	ec5b ab10 	vmov	sl, fp, d0
 800c27e:	e67b      	b.n	800bf78 <_strtod_l+0x88>
 800c280:	9b05      	ldr	r3, [sp, #20]
 800c282:	9807      	ldr	r0, [sp, #28]
 800c284:	1af3      	subs	r3, r6, r3
 800c286:	2f00      	cmp	r7, #0
 800c288:	bf08      	it	eq
 800c28a:	462f      	moveq	r7, r5
 800c28c:	2d10      	cmp	r5, #16
 800c28e:	9306      	str	r3, [sp, #24]
 800c290:	46a8      	mov	r8, r5
 800c292:	bfa8      	it	ge
 800c294:	f04f 0810 	movge.w	r8, #16
 800c298:	f7f4 f954 	bl	8000544 <__aeabi_ui2d>
 800c29c:	2d09      	cmp	r5, #9
 800c29e:	4682      	mov	sl, r0
 800c2a0:	468b      	mov	fp, r1
 800c2a2:	dd13      	ble.n	800c2cc <_strtod_l+0x3dc>
 800c2a4:	4b7b      	ldr	r3, [pc, #492]	; (800c494 <_strtod_l+0x5a4>)
 800c2a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c2aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c2ae:	f7f4 f9c3 	bl	8000638 <__aeabi_dmul>
 800c2b2:	4682      	mov	sl, r0
 800c2b4:	4648      	mov	r0, r9
 800c2b6:	468b      	mov	fp, r1
 800c2b8:	f7f4 f944 	bl	8000544 <__aeabi_ui2d>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	4659      	mov	r1, fp
 800c2c4:	f7f4 f802 	bl	80002cc <__adddf3>
 800c2c8:	4682      	mov	sl, r0
 800c2ca:	468b      	mov	fp, r1
 800c2cc:	2d0f      	cmp	r5, #15
 800c2ce:	dc38      	bgt.n	800c342 <_strtod_l+0x452>
 800c2d0:	9b06      	ldr	r3, [sp, #24]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f43f ae50 	beq.w	800bf78 <_strtod_l+0x88>
 800c2d8:	dd24      	ble.n	800c324 <_strtod_l+0x434>
 800c2da:	2b16      	cmp	r3, #22
 800c2dc:	dc0b      	bgt.n	800c2f6 <_strtod_l+0x406>
 800c2de:	496d      	ldr	r1, [pc, #436]	; (800c494 <_strtod_l+0x5a4>)
 800c2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c2e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2e8:	4652      	mov	r2, sl
 800c2ea:	465b      	mov	r3, fp
 800c2ec:	f7f4 f9a4 	bl	8000638 <__aeabi_dmul>
 800c2f0:	4682      	mov	sl, r0
 800c2f2:	468b      	mov	fp, r1
 800c2f4:	e640      	b.n	800bf78 <_strtod_l+0x88>
 800c2f6:	9a06      	ldr	r2, [sp, #24]
 800c2f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	db20      	blt.n	800c342 <_strtod_l+0x452>
 800c300:	4c64      	ldr	r4, [pc, #400]	; (800c494 <_strtod_l+0x5a4>)
 800c302:	f1c5 050f 	rsb	r5, r5, #15
 800c306:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c30a:	4652      	mov	r2, sl
 800c30c:	465b      	mov	r3, fp
 800c30e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c312:	f7f4 f991 	bl	8000638 <__aeabi_dmul>
 800c316:	9b06      	ldr	r3, [sp, #24]
 800c318:	1b5d      	subs	r5, r3, r5
 800c31a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c31e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c322:	e7e3      	b.n	800c2ec <_strtod_l+0x3fc>
 800c324:	9b06      	ldr	r3, [sp, #24]
 800c326:	3316      	adds	r3, #22
 800c328:	db0b      	blt.n	800c342 <_strtod_l+0x452>
 800c32a:	9b05      	ldr	r3, [sp, #20]
 800c32c:	1b9e      	subs	r6, r3, r6
 800c32e:	4b59      	ldr	r3, [pc, #356]	; (800c494 <_strtod_l+0x5a4>)
 800c330:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c334:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c338:	4650      	mov	r0, sl
 800c33a:	4659      	mov	r1, fp
 800c33c:	f7f4 faa6 	bl	800088c <__aeabi_ddiv>
 800c340:	e7d6      	b.n	800c2f0 <_strtod_l+0x400>
 800c342:	9b06      	ldr	r3, [sp, #24]
 800c344:	eba5 0808 	sub.w	r8, r5, r8
 800c348:	4498      	add	r8, r3
 800c34a:	f1b8 0f00 	cmp.w	r8, #0
 800c34e:	dd74      	ble.n	800c43a <_strtod_l+0x54a>
 800c350:	f018 030f 	ands.w	r3, r8, #15
 800c354:	d00a      	beq.n	800c36c <_strtod_l+0x47c>
 800c356:	494f      	ldr	r1, [pc, #316]	; (800c494 <_strtod_l+0x5a4>)
 800c358:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c35c:	4652      	mov	r2, sl
 800c35e:	465b      	mov	r3, fp
 800c360:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c364:	f7f4 f968 	bl	8000638 <__aeabi_dmul>
 800c368:	4682      	mov	sl, r0
 800c36a:	468b      	mov	fp, r1
 800c36c:	f038 080f 	bics.w	r8, r8, #15
 800c370:	d04f      	beq.n	800c412 <_strtod_l+0x522>
 800c372:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c376:	dd22      	ble.n	800c3be <_strtod_l+0x4ce>
 800c378:	2500      	movs	r5, #0
 800c37a:	462e      	mov	r6, r5
 800c37c:	9507      	str	r5, [sp, #28]
 800c37e:	9505      	str	r5, [sp, #20]
 800c380:	2322      	movs	r3, #34	; 0x22
 800c382:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c49c <_strtod_l+0x5ac>
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	f04f 0a00 	mov.w	sl, #0
 800c38c:	9b07      	ldr	r3, [sp, #28]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f43f adf2 	beq.w	800bf78 <_strtod_l+0x88>
 800c394:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c396:	4620      	mov	r0, r4
 800c398:	f002 f91c 	bl	800e5d4 <_Bfree>
 800c39c:	9905      	ldr	r1, [sp, #20]
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f002 f918 	bl	800e5d4 <_Bfree>
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f002 f914 	bl	800e5d4 <_Bfree>
 800c3ac:	9907      	ldr	r1, [sp, #28]
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f002 f910 	bl	800e5d4 <_Bfree>
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f002 f90c 	bl	800e5d4 <_Bfree>
 800c3bc:	e5dc      	b.n	800bf78 <_strtod_l+0x88>
 800c3be:	4b36      	ldr	r3, [pc, #216]	; (800c498 <_strtod_l+0x5a8>)
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c3c8:	4650      	mov	r0, sl
 800c3ca:	4659      	mov	r1, fp
 800c3cc:	4699      	mov	r9, r3
 800c3ce:	f1b8 0f01 	cmp.w	r8, #1
 800c3d2:	dc21      	bgt.n	800c418 <_strtod_l+0x528>
 800c3d4:	b10b      	cbz	r3, 800c3da <_strtod_l+0x4ea>
 800c3d6:	4682      	mov	sl, r0
 800c3d8:	468b      	mov	fp, r1
 800c3da:	4b2f      	ldr	r3, [pc, #188]	; (800c498 <_strtod_l+0x5a8>)
 800c3dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c3e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c3e4:	4652      	mov	r2, sl
 800c3e6:	465b      	mov	r3, fp
 800c3e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c3ec:	f7f4 f924 	bl	8000638 <__aeabi_dmul>
 800c3f0:	4b2a      	ldr	r3, [pc, #168]	; (800c49c <_strtod_l+0x5ac>)
 800c3f2:	460a      	mov	r2, r1
 800c3f4:	400b      	ands	r3, r1
 800c3f6:	492a      	ldr	r1, [pc, #168]	; (800c4a0 <_strtod_l+0x5b0>)
 800c3f8:	428b      	cmp	r3, r1
 800c3fa:	4682      	mov	sl, r0
 800c3fc:	d8bc      	bhi.n	800c378 <_strtod_l+0x488>
 800c3fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c402:	428b      	cmp	r3, r1
 800c404:	bf86      	itte	hi
 800c406:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c4a4 <_strtod_l+0x5b4>
 800c40a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c40e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c412:	2300      	movs	r3, #0
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	e084      	b.n	800c522 <_strtod_l+0x632>
 800c418:	f018 0f01 	tst.w	r8, #1
 800c41c:	d005      	beq.n	800c42a <_strtod_l+0x53a>
 800c41e:	9b04      	ldr	r3, [sp, #16]
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f7f4 f908 	bl	8000638 <__aeabi_dmul>
 800c428:	2301      	movs	r3, #1
 800c42a:	9a04      	ldr	r2, [sp, #16]
 800c42c:	3208      	adds	r2, #8
 800c42e:	f109 0901 	add.w	r9, r9, #1
 800c432:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c436:	9204      	str	r2, [sp, #16]
 800c438:	e7c9      	b.n	800c3ce <_strtod_l+0x4de>
 800c43a:	d0ea      	beq.n	800c412 <_strtod_l+0x522>
 800c43c:	f1c8 0800 	rsb	r8, r8, #0
 800c440:	f018 020f 	ands.w	r2, r8, #15
 800c444:	d00a      	beq.n	800c45c <_strtod_l+0x56c>
 800c446:	4b13      	ldr	r3, [pc, #76]	; (800c494 <_strtod_l+0x5a4>)
 800c448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c44c:	4650      	mov	r0, sl
 800c44e:	4659      	mov	r1, fp
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	f7f4 fa1a 	bl	800088c <__aeabi_ddiv>
 800c458:	4682      	mov	sl, r0
 800c45a:	468b      	mov	fp, r1
 800c45c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c460:	d0d7      	beq.n	800c412 <_strtod_l+0x522>
 800c462:	f1b8 0f1f 	cmp.w	r8, #31
 800c466:	dd1f      	ble.n	800c4a8 <_strtod_l+0x5b8>
 800c468:	2500      	movs	r5, #0
 800c46a:	462e      	mov	r6, r5
 800c46c:	9507      	str	r5, [sp, #28]
 800c46e:	9505      	str	r5, [sp, #20]
 800c470:	2322      	movs	r3, #34	; 0x22
 800c472:	f04f 0a00 	mov.w	sl, #0
 800c476:	f04f 0b00 	mov.w	fp, #0
 800c47a:	6023      	str	r3, [r4, #0]
 800c47c:	e786      	b.n	800c38c <_strtod_l+0x49c>
 800c47e:	bf00      	nop
 800c480:	08010c21 	.word	0x08010c21
 800c484:	08010c64 	.word	0x08010c64
 800c488:	08010c19 	.word	0x08010c19
 800c48c:	08010da4 	.word	0x08010da4
 800c490:	08011050 	.word	0x08011050
 800c494:	08010f30 	.word	0x08010f30
 800c498:	08010f08 	.word	0x08010f08
 800c49c:	7ff00000 	.word	0x7ff00000
 800c4a0:	7ca00000 	.word	0x7ca00000
 800c4a4:	7fefffff 	.word	0x7fefffff
 800c4a8:	f018 0310 	ands.w	r3, r8, #16
 800c4ac:	bf18      	it	ne
 800c4ae:	236a      	movne	r3, #106	; 0x6a
 800c4b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c860 <_strtod_l+0x970>
 800c4b4:	9304      	str	r3, [sp, #16]
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	4659      	mov	r1, fp
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	f018 0f01 	tst.w	r8, #1
 800c4c0:	d004      	beq.n	800c4cc <_strtod_l+0x5dc>
 800c4c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c4c6:	f7f4 f8b7 	bl	8000638 <__aeabi_dmul>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c4d0:	f109 0908 	add.w	r9, r9, #8
 800c4d4:	d1f2      	bne.n	800c4bc <_strtod_l+0x5cc>
 800c4d6:	b10b      	cbz	r3, 800c4dc <_strtod_l+0x5ec>
 800c4d8:	4682      	mov	sl, r0
 800c4da:	468b      	mov	fp, r1
 800c4dc:	9b04      	ldr	r3, [sp, #16]
 800c4de:	b1c3      	cbz	r3, 800c512 <_strtod_l+0x622>
 800c4e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c4e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	4659      	mov	r1, fp
 800c4ec:	dd11      	ble.n	800c512 <_strtod_l+0x622>
 800c4ee:	2b1f      	cmp	r3, #31
 800c4f0:	f340 8124 	ble.w	800c73c <_strtod_l+0x84c>
 800c4f4:	2b34      	cmp	r3, #52	; 0x34
 800c4f6:	bfde      	ittt	le
 800c4f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c4fc:	f04f 33ff 	movle.w	r3, #4294967295
 800c500:	fa03 f202 	lslle.w	r2, r3, r2
 800c504:	f04f 0a00 	mov.w	sl, #0
 800c508:	bfcc      	ite	gt
 800c50a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c50e:	ea02 0b01 	andle.w	fp, r2, r1
 800c512:	2200      	movs	r2, #0
 800c514:	2300      	movs	r3, #0
 800c516:	4650      	mov	r0, sl
 800c518:	4659      	mov	r1, fp
 800c51a:	f7f4 faf5 	bl	8000b08 <__aeabi_dcmpeq>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d1a2      	bne.n	800c468 <_strtod_l+0x578>
 800c522:	9b07      	ldr	r3, [sp, #28]
 800c524:	9300      	str	r3, [sp, #0]
 800c526:	9908      	ldr	r1, [sp, #32]
 800c528:	462b      	mov	r3, r5
 800c52a:	463a      	mov	r2, r7
 800c52c:	4620      	mov	r0, r4
 800c52e:	f002 f8b9 	bl	800e6a4 <__s2b>
 800c532:	9007      	str	r0, [sp, #28]
 800c534:	2800      	cmp	r0, #0
 800c536:	f43f af1f 	beq.w	800c378 <_strtod_l+0x488>
 800c53a:	9b05      	ldr	r3, [sp, #20]
 800c53c:	1b9e      	subs	r6, r3, r6
 800c53e:	9b06      	ldr	r3, [sp, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	bfb4      	ite	lt
 800c544:	4633      	movlt	r3, r6
 800c546:	2300      	movge	r3, #0
 800c548:	930c      	str	r3, [sp, #48]	; 0x30
 800c54a:	9b06      	ldr	r3, [sp, #24]
 800c54c:	2500      	movs	r5, #0
 800c54e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c552:	9312      	str	r3, [sp, #72]	; 0x48
 800c554:	462e      	mov	r6, r5
 800c556:	9b07      	ldr	r3, [sp, #28]
 800c558:	4620      	mov	r0, r4
 800c55a:	6859      	ldr	r1, [r3, #4]
 800c55c:	f001 fffa 	bl	800e554 <_Balloc>
 800c560:	9005      	str	r0, [sp, #20]
 800c562:	2800      	cmp	r0, #0
 800c564:	f43f af0c 	beq.w	800c380 <_strtod_l+0x490>
 800c568:	9b07      	ldr	r3, [sp, #28]
 800c56a:	691a      	ldr	r2, [r3, #16]
 800c56c:	3202      	adds	r2, #2
 800c56e:	f103 010c 	add.w	r1, r3, #12
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	300c      	adds	r0, #12
 800c576:	f7fe fbc2 	bl	800acfe <memcpy>
 800c57a:	ec4b ab10 	vmov	d0, sl, fp
 800c57e:	aa1a      	add	r2, sp, #104	; 0x68
 800c580:	a919      	add	r1, sp, #100	; 0x64
 800c582:	4620      	mov	r0, r4
 800c584:	f002 fbd4 	bl	800ed30 <__d2b>
 800c588:	ec4b ab18 	vmov	d8, sl, fp
 800c58c:	9018      	str	r0, [sp, #96]	; 0x60
 800c58e:	2800      	cmp	r0, #0
 800c590:	f43f aef6 	beq.w	800c380 <_strtod_l+0x490>
 800c594:	2101      	movs	r1, #1
 800c596:	4620      	mov	r0, r4
 800c598:	f002 f91e 	bl	800e7d8 <__i2b>
 800c59c:	4606      	mov	r6, r0
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	f43f aeee 	beq.w	800c380 <_strtod_l+0x490>
 800c5a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c5a6:	9904      	ldr	r1, [sp, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	bfab      	itete	ge
 800c5ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c5ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c5b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c5b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c5b6:	bfac      	ite	ge
 800c5b8:	eb03 0902 	addge.w	r9, r3, r2
 800c5bc:	1ad7      	sublt	r7, r2, r3
 800c5be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c5c0:	eba3 0801 	sub.w	r8, r3, r1
 800c5c4:	4490      	add	r8, r2
 800c5c6:	4ba1      	ldr	r3, [pc, #644]	; (800c84c <_strtod_l+0x95c>)
 800c5c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800c5cc:	4598      	cmp	r8, r3
 800c5ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c5d2:	f280 80c7 	bge.w	800c764 <_strtod_l+0x874>
 800c5d6:	eba3 0308 	sub.w	r3, r3, r8
 800c5da:	2b1f      	cmp	r3, #31
 800c5dc:	eba2 0203 	sub.w	r2, r2, r3
 800c5e0:	f04f 0101 	mov.w	r1, #1
 800c5e4:	f300 80b1 	bgt.w	800c74a <_strtod_l+0x85a>
 800c5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ec:	930d      	str	r3, [sp, #52]	; 0x34
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9308      	str	r3, [sp, #32]
 800c5f2:	eb09 0802 	add.w	r8, r9, r2
 800c5f6:	9b04      	ldr	r3, [sp, #16]
 800c5f8:	45c1      	cmp	r9, r8
 800c5fa:	4417      	add	r7, r2
 800c5fc:	441f      	add	r7, r3
 800c5fe:	464b      	mov	r3, r9
 800c600:	bfa8      	it	ge
 800c602:	4643      	movge	r3, r8
 800c604:	42bb      	cmp	r3, r7
 800c606:	bfa8      	it	ge
 800c608:	463b      	movge	r3, r7
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	bfc2      	ittt	gt
 800c60e:	eba8 0803 	subgt.w	r8, r8, r3
 800c612:	1aff      	subgt	r7, r7, r3
 800c614:	eba9 0903 	subgt.w	r9, r9, r3
 800c618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	dd17      	ble.n	800c64e <_strtod_l+0x75e>
 800c61e:	4631      	mov	r1, r6
 800c620:	461a      	mov	r2, r3
 800c622:	4620      	mov	r0, r4
 800c624:	f002 f998 	bl	800e958 <__pow5mult>
 800c628:	4606      	mov	r6, r0
 800c62a:	2800      	cmp	r0, #0
 800c62c:	f43f aea8 	beq.w	800c380 <_strtod_l+0x490>
 800c630:	4601      	mov	r1, r0
 800c632:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c634:	4620      	mov	r0, r4
 800c636:	f002 f8e5 	bl	800e804 <__multiply>
 800c63a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c63c:	2800      	cmp	r0, #0
 800c63e:	f43f ae9f 	beq.w	800c380 <_strtod_l+0x490>
 800c642:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c644:	4620      	mov	r0, r4
 800c646:	f001 ffc5 	bl	800e5d4 <_Bfree>
 800c64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c64c:	9318      	str	r3, [sp, #96]	; 0x60
 800c64e:	f1b8 0f00 	cmp.w	r8, #0
 800c652:	f300 808c 	bgt.w	800c76e <_strtod_l+0x87e>
 800c656:	9b06      	ldr	r3, [sp, #24]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	dd08      	ble.n	800c66e <_strtod_l+0x77e>
 800c65c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c65e:	9905      	ldr	r1, [sp, #20]
 800c660:	4620      	mov	r0, r4
 800c662:	f002 f979 	bl	800e958 <__pow5mult>
 800c666:	9005      	str	r0, [sp, #20]
 800c668:	2800      	cmp	r0, #0
 800c66a:	f43f ae89 	beq.w	800c380 <_strtod_l+0x490>
 800c66e:	2f00      	cmp	r7, #0
 800c670:	dd08      	ble.n	800c684 <_strtod_l+0x794>
 800c672:	9905      	ldr	r1, [sp, #20]
 800c674:	463a      	mov	r2, r7
 800c676:	4620      	mov	r0, r4
 800c678:	f002 f9c8 	bl	800ea0c <__lshift>
 800c67c:	9005      	str	r0, [sp, #20]
 800c67e:	2800      	cmp	r0, #0
 800c680:	f43f ae7e 	beq.w	800c380 <_strtod_l+0x490>
 800c684:	f1b9 0f00 	cmp.w	r9, #0
 800c688:	dd08      	ble.n	800c69c <_strtod_l+0x7ac>
 800c68a:	4631      	mov	r1, r6
 800c68c:	464a      	mov	r2, r9
 800c68e:	4620      	mov	r0, r4
 800c690:	f002 f9bc 	bl	800ea0c <__lshift>
 800c694:	4606      	mov	r6, r0
 800c696:	2800      	cmp	r0, #0
 800c698:	f43f ae72 	beq.w	800c380 <_strtod_l+0x490>
 800c69c:	9a05      	ldr	r2, [sp, #20]
 800c69e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f002 fa3f 	bl	800eb24 <__mdiff>
 800c6a6:	4605      	mov	r5, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	f43f ae69 	beq.w	800c380 <_strtod_l+0x490>
 800c6ae:	68c3      	ldr	r3, [r0, #12]
 800c6b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	60c3      	str	r3, [r0, #12]
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	f002 fa18 	bl	800eaec <__mcmp>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	da60      	bge.n	800c782 <_strtod_l+0x892>
 800c6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6c2:	ea53 030a 	orrs.w	r3, r3, sl
 800c6c6:	f040 8082 	bne.w	800c7ce <_strtod_l+0x8de>
 800c6ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d17d      	bne.n	800c7ce <_strtod_l+0x8de>
 800c6d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6d6:	0d1b      	lsrs	r3, r3, #20
 800c6d8:	051b      	lsls	r3, r3, #20
 800c6da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c6de:	d976      	bls.n	800c7ce <_strtod_l+0x8de>
 800c6e0:	696b      	ldr	r3, [r5, #20]
 800c6e2:	b913      	cbnz	r3, 800c6ea <_strtod_l+0x7fa>
 800c6e4:	692b      	ldr	r3, [r5, #16]
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	dd71      	ble.n	800c7ce <_strtod_l+0x8de>
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	4620      	mov	r0, r4
 800c6f0:	f002 f98c 	bl	800ea0c <__lshift>
 800c6f4:	4631      	mov	r1, r6
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	f002 f9f8 	bl	800eaec <__mcmp>
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	dd66      	ble.n	800c7ce <_strtod_l+0x8de>
 800c700:	9904      	ldr	r1, [sp, #16]
 800c702:	4a53      	ldr	r2, [pc, #332]	; (800c850 <_strtod_l+0x960>)
 800c704:	465b      	mov	r3, fp
 800c706:	2900      	cmp	r1, #0
 800c708:	f000 8081 	beq.w	800c80e <_strtod_l+0x91e>
 800c70c:	ea02 010b 	and.w	r1, r2, fp
 800c710:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c714:	dc7b      	bgt.n	800c80e <_strtod_l+0x91e>
 800c716:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c71a:	f77f aea9 	ble.w	800c470 <_strtod_l+0x580>
 800c71e:	4b4d      	ldr	r3, [pc, #308]	; (800c854 <_strtod_l+0x964>)
 800c720:	4650      	mov	r0, sl
 800c722:	4659      	mov	r1, fp
 800c724:	2200      	movs	r2, #0
 800c726:	f7f3 ff87 	bl	8000638 <__aeabi_dmul>
 800c72a:	460b      	mov	r3, r1
 800c72c:	4303      	orrs	r3, r0
 800c72e:	bf08      	it	eq
 800c730:	2322      	moveq	r3, #34	; 0x22
 800c732:	4682      	mov	sl, r0
 800c734:	468b      	mov	fp, r1
 800c736:	bf08      	it	eq
 800c738:	6023      	streq	r3, [r4, #0]
 800c73a:	e62b      	b.n	800c394 <_strtod_l+0x4a4>
 800c73c:	f04f 32ff 	mov.w	r2, #4294967295
 800c740:	fa02 f303 	lsl.w	r3, r2, r3
 800c744:	ea03 0a0a 	and.w	sl, r3, sl
 800c748:	e6e3      	b.n	800c512 <_strtod_l+0x622>
 800c74a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c74e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c752:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c756:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c75a:	fa01 f308 	lsl.w	r3, r1, r8
 800c75e:	9308      	str	r3, [sp, #32]
 800c760:	910d      	str	r1, [sp, #52]	; 0x34
 800c762:	e746      	b.n	800c5f2 <_strtod_l+0x702>
 800c764:	2300      	movs	r3, #0
 800c766:	9308      	str	r3, [sp, #32]
 800c768:	2301      	movs	r3, #1
 800c76a:	930d      	str	r3, [sp, #52]	; 0x34
 800c76c:	e741      	b.n	800c5f2 <_strtod_l+0x702>
 800c76e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c770:	4642      	mov	r2, r8
 800c772:	4620      	mov	r0, r4
 800c774:	f002 f94a 	bl	800ea0c <__lshift>
 800c778:	9018      	str	r0, [sp, #96]	; 0x60
 800c77a:	2800      	cmp	r0, #0
 800c77c:	f47f af6b 	bne.w	800c656 <_strtod_l+0x766>
 800c780:	e5fe      	b.n	800c380 <_strtod_l+0x490>
 800c782:	465f      	mov	r7, fp
 800c784:	d16e      	bne.n	800c864 <_strtod_l+0x974>
 800c786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c788:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c78c:	b342      	cbz	r2, 800c7e0 <_strtod_l+0x8f0>
 800c78e:	4a32      	ldr	r2, [pc, #200]	; (800c858 <_strtod_l+0x968>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d128      	bne.n	800c7e6 <_strtod_l+0x8f6>
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	4651      	mov	r1, sl
 800c798:	b1eb      	cbz	r3, 800c7d6 <_strtod_l+0x8e6>
 800c79a:	4b2d      	ldr	r3, [pc, #180]	; (800c850 <_strtod_l+0x960>)
 800c79c:	403b      	ands	r3, r7
 800c79e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c7a2:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a6:	d819      	bhi.n	800c7dc <_strtod_l+0x8ec>
 800c7a8:	0d1b      	lsrs	r3, r3, #20
 800c7aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c7b2:	4299      	cmp	r1, r3
 800c7b4:	d117      	bne.n	800c7e6 <_strtod_l+0x8f6>
 800c7b6:	4b29      	ldr	r3, [pc, #164]	; (800c85c <_strtod_l+0x96c>)
 800c7b8:	429f      	cmp	r7, r3
 800c7ba:	d102      	bne.n	800c7c2 <_strtod_l+0x8d2>
 800c7bc:	3101      	adds	r1, #1
 800c7be:	f43f addf 	beq.w	800c380 <_strtod_l+0x490>
 800c7c2:	4b23      	ldr	r3, [pc, #140]	; (800c850 <_strtod_l+0x960>)
 800c7c4:	403b      	ands	r3, r7
 800c7c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c7ca:	f04f 0a00 	mov.w	sl, #0
 800c7ce:	9b04      	ldr	r3, [sp, #16]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1a4      	bne.n	800c71e <_strtod_l+0x82e>
 800c7d4:	e5de      	b.n	800c394 <_strtod_l+0x4a4>
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7da:	e7ea      	b.n	800c7b2 <_strtod_l+0x8c2>
 800c7dc:	4613      	mov	r3, r2
 800c7de:	e7e8      	b.n	800c7b2 <_strtod_l+0x8c2>
 800c7e0:	ea53 030a 	orrs.w	r3, r3, sl
 800c7e4:	d08c      	beq.n	800c700 <_strtod_l+0x810>
 800c7e6:	9b08      	ldr	r3, [sp, #32]
 800c7e8:	b1db      	cbz	r3, 800c822 <_strtod_l+0x932>
 800c7ea:	423b      	tst	r3, r7
 800c7ec:	d0ef      	beq.n	800c7ce <_strtod_l+0x8de>
 800c7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7f0:	9a04      	ldr	r2, [sp, #16]
 800c7f2:	4650      	mov	r0, sl
 800c7f4:	4659      	mov	r1, fp
 800c7f6:	b1c3      	cbz	r3, 800c82a <_strtod_l+0x93a>
 800c7f8:	f7ff fb5e 	bl	800beb8 <sulp>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	ec51 0b18 	vmov	r0, r1, d8
 800c804:	f7f3 fd62 	bl	80002cc <__adddf3>
 800c808:	4682      	mov	sl, r0
 800c80a:	468b      	mov	fp, r1
 800c80c:	e7df      	b.n	800c7ce <_strtod_l+0x8de>
 800c80e:	4013      	ands	r3, r2
 800c810:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c814:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c818:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c81c:	f04f 3aff 	mov.w	sl, #4294967295
 800c820:	e7d5      	b.n	800c7ce <_strtod_l+0x8de>
 800c822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c824:	ea13 0f0a 	tst.w	r3, sl
 800c828:	e7e0      	b.n	800c7ec <_strtod_l+0x8fc>
 800c82a:	f7ff fb45 	bl	800beb8 <sulp>
 800c82e:	4602      	mov	r2, r0
 800c830:	460b      	mov	r3, r1
 800c832:	ec51 0b18 	vmov	r0, r1, d8
 800c836:	f7f3 fd47 	bl	80002c8 <__aeabi_dsub>
 800c83a:	2200      	movs	r2, #0
 800c83c:	2300      	movs	r3, #0
 800c83e:	4682      	mov	sl, r0
 800c840:	468b      	mov	fp, r1
 800c842:	f7f4 f961 	bl	8000b08 <__aeabi_dcmpeq>
 800c846:	2800      	cmp	r0, #0
 800c848:	d0c1      	beq.n	800c7ce <_strtod_l+0x8de>
 800c84a:	e611      	b.n	800c470 <_strtod_l+0x580>
 800c84c:	fffffc02 	.word	0xfffffc02
 800c850:	7ff00000 	.word	0x7ff00000
 800c854:	39500000 	.word	0x39500000
 800c858:	000fffff 	.word	0x000fffff
 800c85c:	7fefffff 	.word	0x7fefffff
 800c860:	08010c78 	.word	0x08010c78
 800c864:	4631      	mov	r1, r6
 800c866:	4628      	mov	r0, r5
 800c868:	f002 fabe 	bl	800ede8 <__ratio>
 800c86c:	ec59 8b10 	vmov	r8, r9, d0
 800c870:	ee10 0a10 	vmov	r0, s0
 800c874:	2200      	movs	r2, #0
 800c876:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c87a:	4649      	mov	r1, r9
 800c87c:	f7f4 f958 	bl	8000b30 <__aeabi_dcmple>
 800c880:	2800      	cmp	r0, #0
 800c882:	d07a      	beq.n	800c97a <_strtod_l+0xa8a>
 800c884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c886:	2b00      	cmp	r3, #0
 800c888:	d04a      	beq.n	800c920 <_strtod_l+0xa30>
 800c88a:	4b95      	ldr	r3, [pc, #596]	; (800cae0 <_strtod_l+0xbf0>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c892:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cae0 <_strtod_l+0xbf0>
 800c896:	f04f 0800 	mov.w	r8, #0
 800c89a:	4b92      	ldr	r3, [pc, #584]	; (800cae4 <_strtod_l+0xbf4>)
 800c89c:	403b      	ands	r3, r7
 800c89e:	930d      	str	r3, [sp, #52]	; 0x34
 800c8a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8a2:	4b91      	ldr	r3, [pc, #580]	; (800cae8 <_strtod_l+0xbf8>)
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	f040 80b0 	bne.w	800ca0a <_strtod_l+0xb1a>
 800c8aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c8b2:	ec4b ab10 	vmov	d0, sl, fp
 800c8b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c8ba:	f002 f9bd 	bl	800ec38 <__ulp>
 800c8be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8c2:	ec53 2b10 	vmov	r2, r3, d0
 800c8c6:	f7f3 feb7 	bl	8000638 <__aeabi_dmul>
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	465b      	mov	r3, fp
 800c8ce:	f7f3 fcfd 	bl	80002cc <__adddf3>
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4983      	ldr	r1, [pc, #524]	; (800cae4 <_strtod_l+0xbf4>)
 800c8d6:	4a85      	ldr	r2, [pc, #532]	; (800caec <_strtod_l+0xbfc>)
 800c8d8:	4019      	ands	r1, r3
 800c8da:	4291      	cmp	r1, r2
 800c8dc:	4682      	mov	sl, r0
 800c8de:	d960      	bls.n	800c9a2 <_strtod_l+0xab2>
 800c8e0:	ee18 3a90 	vmov	r3, s17
 800c8e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d104      	bne.n	800c8f6 <_strtod_l+0xa06>
 800c8ec:	ee18 3a10 	vmov	r3, s16
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	f43f ad45 	beq.w	800c380 <_strtod_l+0x490>
 800c8f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800caf8 <_strtod_l+0xc08>
 800c8fa:	f04f 3aff 	mov.w	sl, #4294967295
 800c8fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c900:	4620      	mov	r0, r4
 800c902:	f001 fe67 	bl	800e5d4 <_Bfree>
 800c906:	9905      	ldr	r1, [sp, #20]
 800c908:	4620      	mov	r0, r4
 800c90a:	f001 fe63 	bl	800e5d4 <_Bfree>
 800c90e:	4631      	mov	r1, r6
 800c910:	4620      	mov	r0, r4
 800c912:	f001 fe5f 	bl	800e5d4 <_Bfree>
 800c916:	4629      	mov	r1, r5
 800c918:	4620      	mov	r0, r4
 800c91a:	f001 fe5b 	bl	800e5d4 <_Bfree>
 800c91e:	e61a      	b.n	800c556 <_strtod_l+0x666>
 800c920:	f1ba 0f00 	cmp.w	sl, #0
 800c924:	d11b      	bne.n	800c95e <_strtod_l+0xa6e>
 800c926:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c92a:	b9f3      	cbnz	r3, 800c96a <_strtod_l+0xa7a>
 800c92c:	4b6c      	ldr	r3, [pc, #432]	; (800cae0 <_strtod_l+0xbf0>)
 800c92e:	2200      	movs	r2, #0
 800c930:	4640      	mov	r0, r8
 800c932:	4649      	mov	r1, r9
 800c934:	f7f4 f8f2 	bl	8000b1c <__aeabi_dcmplt>
 800c938:	b9d0      	cbnz	r0, 800c970 <_strtod_l+0xa80>
 800c93a:	4640      	mov	r0, r8
 800c93c:	4649      	mov	r1, r9
 800c93e:	4b6c      	ldr	r3, [pc, #432]	; (800caf0 <_strtod_l+0xc00>)
 800c940:	2200      	movs	r2, #0
 800c942:	f7f3 fe79 	bl	8000638 <__aeabi_dmul>
 800c946:	4680      	mov	r8, r0
 800c948:	4689      	mov	r9, r1
 800c94a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c94e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c952:	9315      	str	r3, [sp, #84]	; 0x54
 800c954:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c958:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c95c:	e79d      	b.n	800c89a <_strtod_l+0x9aa>
 800c95e:	f1ba 0f01 	cmp.w	sl, #1
 800c962:	d102      	bne.n	800c96a <_strtod_l+0xa7a>
 800c964:	2f00      	cmp	r7, #0
 800c966:	f43f ad83 	beq.w	800c470 <_strtod_l+0x580>
 800c96a:	4b62      	ldr	r3, [pc, #392]	; (800caf4 <_strtod_l+0xc04>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	e78e      	b.n	800c88e <_strtod_l+0x99e>
 800c970:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800caf0 <_strtod_l+0xc00>
 800c974:	f04f 0800 	mov.w	r8, #0
 800c978:	e7e7      	b.n	800c94a <_strtod_l+0xa5a>
 800c97a:	4b5d      	ldr	r3, [pc, #372]	; (800caf0 <_strtod_l+0xc00>)
 800c97c:	4640      	mov	r0, r8
 800c97e:	4649      	mov	r1, r9
 800c980:	2200      	movs	r2, #0
 800c982:	f7f3 fe59 	bl	8000638 <__aeabi_dmul>
 800c986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c988:	4680      	mov	r8, r0
 800c98a:	4689      	mov	r9, r1
 800c98c:	b933      	cbnz	r3, 800c99c <_strtod_l+0xaac>
 800c98e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c992:	900e      	str	r0, [sp, #56]	; 0x38
 800c994:	930f      	str	r3, [sp, #60]	; 0x3c
 800c996:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c99a:	e7dd      	b.n	800c958 <_strtod_l+0xa68>
 800c99c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c9a0:	e7f9      	b.n	800c996 <_strtod_l+0xaa6>
 800c9a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c9a6:	9b04      	ldr	r3, [sp, #16]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1a8      	bne.n	800c8fe <_strtod_l+0xa0e>
 800c9ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9b2:	0d1b      	lsrs	r3, r3, #20
 800c9b4:	051b      	lsls	r3, r3, #20
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d1a1      	bne.n	800c8fe <_strtod_l+0xa0e>
 800c9ba:	4640      	mov	r0, r8
 800c9bc:	4649      	mov	r1, r9
 800c9be:	f7f4 f99b 	bl	8000cf8 <__aeabi_d2lz>
 800c9c2:	f7f3 fe0b 	bl	80005dc <__aeabi_l2d>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	4649      	mov	r1, r9
 800c9ce:	f7f3 fc7b 	bl	80002c8 <__aeabi_dsub>
 800c9d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9d8:	ea43 030a 	orr.w	r3, r3, sl
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	4680      	mov	r8, r0
 800c9e0:	4689      	mov	r9, r1
 800c9e2:	d055      	beq.n	800ca90 <_strtod_l+0xba0>
 800c9e4:	a336      	add	r3, pc, #216	; (adr r3, 800cac0 <_strtod_l+0xbd0>)
 800c9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ea:	f7f4 f897 	bl	8000b1c <__aeabi_dcmplt>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f47f acd0 	bne.w	800c394 <_strtod_l+0x4a4>
 800c9f4:	a334      	add	r3, pc, #208	; (adr r3, 800cac8 <_strtod_l+0xbd8>)
 800c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fa:	4640      	mov	r0, r8
 800c9fc:	4649      	mov	r1, r9
 800c9fe:	f7f4 f8ab 	bl	8000b58 <__aeabi_dcmpgt>
 800ca02:	2800      	cmp	r0, #0
 800ca04:	f43f af7b 	beq.w	800c8fe <_strtod_l+0xa0e>
 800ca08:	e4c4      	b.n	800c394 <_strtod_l+0x4a4>
 800ca0a:	9b04      	ldr	r3, [sp, #16]
 800ca0c:	b333      	cbz	r3, 800ca5c <_strtod_l+0xb6c>
 800ca0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca10:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca14:	d822      	bhi.n	800ca5c <_strtod_l+0xb6c>
 800ca16:	a32e      	add	r3, pc, #184	; (adr r3, 800cad0 <_strtod_l+0xbe0>)
 800ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1c:	4640      	mov	r0, r8
 800ca1e:	4649      	mov	r1, r9
 800ca20:	f7f4 f886 	bl	8000b30 <__aeabi_dcmple>
 800ca24:	b1a0      	cbz	r0, 800ca50 <_strtod_l+0xb60>
 800ca26:	4649      	mov	r1, r9
 800ca28:	4640      	mov	r0, r8
 800ca2a:	f7f4 f8dd 	bl	8000be8 <__aeabi_d2uiz>
 800ca2e:	2801      	cmp	r0, #1
 800ca30:	bf38      	it	cc
 800ca32:	2001      	movcc	r0, #1
 800ca34:	f7f3 fd86 	bl	8000544 <__aeabi_ui2d>
 800ca38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	4689      	mov	r9, r1
 800ca3e:	bb23      	cbnz	r3, 800ca8a <_strtod_l+0xb9a>
 800ca40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca44:	9010      	str	r0, [sp, #64]	; 0x40
 800ca46:	9311      	str	r3, [sp, #68]	; 0x44
 800ca48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ca50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca54:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ca58:	1a9b      	subs	r3, r3, r2
 800ca5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca60:	eeb0 0a48 	vmov.f32	s0, s16
 800ca64:	eef0 0a68 	vmov.f32	s1, s17
 800ca68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca6c:	f002 f8e4 	bl	800ec38 <__ulp>
 800ca70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ca74:	ec53 2b10 	vmov	r2, r3, d0
 800ca78:	f7f3 fdde 	bl	8000638 <__aeabi_dmul>
 800ca7c:	ec53 2b18 	vmov	r2, r3, d8
 800ca80:	f7f3 fc24 	bl	80002cc <__adddf3>
 800ca84:	4682      	mov	sl, r0
 800ca86:	468b      	mov	fp, r1
 800ca88:	e78d      	b.n	800c9a6 <_strtod_l+0xab6>
 800ca8a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ca8e:	e7db      	b.n	800ca48 <_strtod_l+0xb58>
 800ca90:	a311      	add	r3, pc, #68	; (adr r3, 800cad8 <_strtod_l+0xbe8>)
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	f7f4 f841 	bl	8000b1c <__aeabi_dcmplt>
 800ca9a:	e7b2      	b.n	800ca02 <_strtod_l+0xb12>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	930a      	str	r3, [sp, #40]	; 0x28
 800caa0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800caa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	f7ff ba6b 	b.w	800bf80 <_strtod_l+0x90>
 800caaa:	2a65      	cmp	r2, #101	; 0x65
 800caac:	f43f ab5f 	beq.w	800c16e <_strtod_l+0x27e>
 800cab0:	2a45      	cmp	r2, #69	; 0x45
 800cab2:	f43f ab5c 	beq.w	800c16e <_strtod_l+0x27e>
 800cab6:	2301      	movs	r3, #1
 800cab8:	f7ff bb94 	b.w	800c1e4 <_strtod_l+0x2f4>
 800cabc:	f3af 8000 	nop.w
 800cac0:	94a03595 	.word	0x94a03595
 800cac4:	3fdfffff 	.word	0x3fdfffff
 800cac8:	35afe535 	.word	0x35afe535
 800cacc:	3fe00000 	.word	0x3fe00000
 800cad0:	ffc00000 	.word	0xffc00000
 800cad4:	41dfffff 	.word	0x41dfffff
 800cad8:	94a03595 	.word	0x94a03595
 800cadc:	3fcfffff 	.word	0x3fcfffff
 800cae0:	3ff00000 	.word	0x3ff00000
 800cae4:	7ff00000 	.word	0x7ff00000
 800cae8:	7fe00000 	.word	0x7fe00000
 800caec:	7c9fffff 	.word	0x7c9fffff
 800caf0:	3fe00000 	.word	0x3fe00000
 800caf4:	bff00000 	.word	0xbff00000
 800caf8:	7fefffff 	.word	0x7fefffff

0800cafc <_strtod_r>:
 800cafc:	4b01      	ldr	r3, [pc, #4]	; (800cb04 <_strtod_r+0x8>)
 800cafe:	f7ff b9f7 	b.w	800bef0 <_strtod_l>
 800cb02:	bf00      	nop
 800cb04:	2000007c 	.word	0x2000007c

0800cb08 <strtod>:
 800cb08:	460a      	mov	r2, r1
 800cb0a:	4601      	mov	r1, r0
 800cb0c:	4802      	ldr	r0, [pc, #8]	; (800cb18 <strtod+0x10>)
 800cb0e:	4b03      	ldr	r3, [pc, #12]	; (800cb1c <strtod+0x14>)
 800cb10:	6800      	ldr	r0, [r0, #0]
 800cb12:	f7ff b9ed 	b.w	800bef0 <_strtod_l>
 800cb16:	bf00      	nop
 800cb18:	20000014 	.word	0x20000014
 800cb1c:	2000007c 	.word	0x2000007c

0800cb20 <strtof>:
 800cb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb24:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800cbd4 <strtof+0xb4>
 800cb28:	4b26      	ldr	r3, [pc, #152]	; (800cbc4 <strtof+0xa4>)
 800cb2a:	460a      	mov	r2, r1
 800cb2c:	ed2d 8b02 	vpush	{d8}
 800cb30:	4601      	mov	r1, r0
 800cb32:	f8d8 0000 	ldr.w	r0, [r8]
 800cb36:	f7ff f9db 	bl	800bef0 <_strtod_l>
 800cb3a:	ec55 4b10 	vmov	r4, r5, d0
 800cb3e:	ee10 2a10 	vmov	r2, s0
 800cb42:	ee10 0a10 	vmov	r0, s0
 800cb46:	462b      	mov	r3, r5
 800cb48:	4629      	mov	r1, r5
 800cb4a:	f7f4 f80f 	bl	8000b6c <__aeabi_dcmpun>
 800cb4e:	b190      	cbz	r0, 800cb76 <strtof+0x56>
 800cb50:	2d00      	cmp	r5, #0
 800cb52:	481d      	ldr	r0, [pc, #116]	; (800cbc8 <strtof+0xa8>)
 800cb54:	da09      	bge.n	800cb6a <strtof+0x4a>
 800cb56:	f7ff f8ff 	bl	800bd58 <nanf>
 800cb5a:	eeb1 8a40 	vneg.f32	s16, s0
 800cb5e:	eeb0 0a48 	vmov.f32	s0, s16
 800cb62:	ecbd 8b02 	vpop	{d8}
 800cb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb6a:	ecbd 8b02 	vpop	{d8}
 800cb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb72:	f7ff b8f1 	b.w	800bd58 <nanf>
 800cb76:	4620      	mov	r0, r4
 800cb78:	4629      	mov	r1, r5
 800cb7a:	f7f4 f855 	bl	8000c28 <__aeabi_d2f>
 800cb7e:	ee08 0a10 	vmov	s16, r0
 800cb82:	eddf 7a12 	vldr	s15, [pc, #72]	; 800cbcc <strtof+0xac>
 800cb86:	eeb0 7ac8 	vabs.f32	s14, s16
 800cb8a:	eeb4 7a67 	vcmp.f32	s14, s15
 800cb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb92:	dde4      	ble.n	800cb5e <strtof+0x3e>
 800cb94:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800cb98:	4b0d      	ldr	r3, [pc, #52]	; (800cbd0 <strtof+0xb0>)
 800cb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cb9e:	4620      	mov	r0, r4
 800cba0:	4639      	mov	r1, r7
 800cba2:	f7f3 ffe3 	bl	8000b6c <__aeabi_dcmpun>
 800cba6:	b940      	cbnz	r0, 800cbba <strtof+0x9a>
 800cba8:	4b09      	ldr	r3, [pc, #36]	; (800cbd0 <strtof+0xb0>)
 800cbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbae:	4620      	mov	r0, r4
 800cbb0:	4639      	mov	r1, r7
 800cbb2:	f7f3 ffbd 	bl	8000b30 <__aeabi_dcmple>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d0d1      	beq.n	800cb5e <strtof+0x3e>
 800cbba:	f8d8 3000 	ldr.w	r3, [r8]
 800cbbe:	2222      	movs	r2, #34	; 0x22
 800cbc0:	601a      	str	r2, [r3, #0]
 800cbc2:	e7cc      	b.n	800cb5e <strtof+0x3e>
 800cbc4:	2000007c 	.word	0x2000007c
 800cbc8:	08011050 	.word	0x08011050
 800cbcc:	7f7fffff 	.word	0x7f7fffff
 800cbd0:	7fefffff 	.word	0x7fefffff
 800cbd4:	20000014 	.word	0x20000014

0800cbd8 <_strtol_l.constprop.0>:
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbde:	d001      	beq.n	800cbe4 <_strtol_l.constprop.0+0xc>
 800cbe0:	2b24      	cmp	r3, #36	; 0x24
 800cbe2:	d906      	bls.n	800cbf2 <_strtol_l.constprop.0+0x1a>
 800cbe4:	f7fd ff5e 	bl	800aaa4 <__errno>
 800cbe8:	2316      	movs	r3, #22
 800cbea:	6003      	str	r3, [r0, #0]
 800cbec:	2000      	movs	r0, #0
 800cbee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbf2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ccd8 <_strtol_l.constprop.0+0x100>
 800cbf6:	460d      	mov	r5, r1
 800cbf8:	462e      	mov	r6, r5
 800cbfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbfe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cc02:	f017 0708 	ands.w	r7, r7, #8
 800cc06:	d1f7      	bne.n	800cbf8 <_strtol_l.constprop.0+0x20>
 800cc08:	2c2d      	cmp	r4, #45	; 0x2d
 800cc0a:	d132      	bne.n	800cc72 <_strtol_l.constprop.0+0x9a>
 800cc0c:	782c      	ldrb	r4, [r5, #0]
 800cc0e:	2701      	movs	r7, #1
 800cc10:	1cb5      	adds	r5, r6, #2
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d05b      	beq.n	800ccce <_strtol_l.constprop.0+0xf6>
 800cc16:	2b10      	cmp	r3, #16
 800cc18:	d109      	bne.n	800cc2e <_strtol_l.constprop.0+0x56>
 800cc1a:	2c30      	cmp	r4, #48	; 0x30
 800cc1c:	d107      	bne.n	800cc2e <_strtol_l.constprop.0+0x56>
 800cc1e:	782c      	ldrb	r4, [r5, #0]
 800cc20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cc24:	2c58      	cmp	r4, #88	; 0x58
 800cc26:	d14d      	bne.n	800ccc4 <_strtol_l.constprop.0+0xec>
 800cc28:	786c      	ldrb	r4, [r5, #1]
 800cc2a:	2310      	movs	r3, #16
 800cc2c:	3502      	adds	r5, #2
 800cc2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cc32:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc36:	f04f 0c00 	mov.w	ip, #0
 800cc3a:	fbb8 f9f3 	udiv	r9, r8, r3
 800cc3e:	4666      	mov	r6, ip
 800cc40:	fb03 8a19 	mls	sl, r3, r9, r8
 800cc44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cc48:	f1be 0f09 	cmp.w	lr, #9
 800cc4c:	d816      	bhi.n	800cc7c <_strtol_l.constprop.0+0xa4>
 800cc4e:	4674      	mov	r4, lr
 800cc50:	42a3      	cmp	r3, r4
 800cc52:	dd24      	ble.n	800cc9e <_strtol_l.constprop.0+0xc6>
 800cc54:	f1bc 0f00 	cmp.w	ip, #0
 800cc58:	db1e      	blt.n	800cc98 <_strtol_l.constprop.0+0xc0>
 800cc5a:	45b1      	cmp	r9, r6
 800cc5c:	d31c      	bcc.n	800cc98 <_strtol_l.constprop.0+0xc0>
 800cc5e:	d101      	bne.n	800cc64 <_strtol_l.constprop.0+0x8c>
 800cc60:	45a2      	cmp	sl, r4
 800cc62:	db19      	blt.n	800cc98 <_strtol_l.constprop.0+0xc0>
 800cc64:	fb06 4603 	mla	r6, r6, r3, r4
 800cc68:	f04f 0c01 	mov.w	ip, #1
 800cc6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc70:	e7e8      	b.n	800cc44 <_strtol_l.constprop.0+0x6c>
 800cc72:	2c2b      	cmp	r4, #43	; 0x2b
 800cc74:	bf04      	itt	eq
 800cc76:	782c      	ldrbeq	r4, [r5, #0]
 800cc78:	1cb5      	addeq	r5, r6, #2
 800cc7a:	e7ca      	b.n	800cc12 <_strtol_l.constprop.0+0x3a>
 800cc7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cc80:	f1be 0f19 	cmp.w	lr, #25
 800cc84:	d801      	bhi.n	800cc8a <_strtol_l.constprop.0+0xb2>
 800cc86:	3c37      	subs	r4, #55	; 0x37
 800cc88:	e7e2      	b.n	800cc50 <_strtol_l.constprop.0+0x78>
 800cc8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cc8e:	f1be 0f19 	cmp.w	lr, #25
 800cc92:	d804      	bhi.n	800cc9e <_strtol_l.constprop.0+0xc6>
 800cc94:	3c57      	subs	r4, #87	; 0x57
 800cc96:	e7db      	b.n	800cc50 <_strtol_l.constprop.0+0x78>
 800cc98:	f04f 3cff 	mov.w	ip, #4294967295
 800cc9c:	e7e6      	b.n	800cc6c <_strtol_l.constprop.0+0x94>
 800cc9e:	f1bc 0f00 	cmp.w	ip, #0
 800cca2:	da05      	bge.n	800ccb0 <_strtol_l.constprop.0+0xd8>
 800cca4:	2322      	movs	r3, #34	; 0x22
 800cca6:	6003      	str	r3, [r0, #0]
 800cca8:	4646      	mov	r6, r8
 800ccaa:	b942      	cbnz	r2, 800ccbe <_strtol_l.constprop.0+0xe6>
 800ccac:	4630      	mov	r0, r6
 800ccae:	e79e      	b.n	800cbee <_strtol_l.constprop.0+0x16>
 800ccb0:	b107      	cbz	r7, 800ccb4 <_strtol_l.constprop.0+0xdc>
 800ccb2:	4276      	negs	r6, r6
 800ccb4:	2a00      	cmp	r2, #0
 800ccb6:	d0f9      	beq.n	800ccac <_strtol_l.constprop.0+0xd4>
 800ccb8:	f1bc 0f00 	cmp.w	ip, #0
 800ccbc:	d000      	beq.n	800ccc0 <_strtol_l.constprop.0+0xe8>
 800ccbe:	1e69      	subs	r1, r5, #1
 800ccc0:	6011      	str	r1, [r2, #0]
 800ccc2:	e7f3      	b.n	800ccac <_strtol_l.constprop.0+0xd4>
 800ccc4:	2430      	movs	r4, #48	; 0x30
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1b1      	bne.n	800cc2e <_strtol_l.constprop.0+0x56>
 800ccca:	2308      	movs	r3, #8
 800cccc:	e7af      	b.n	800cc2e <_strtol_l.constprop.0+0x56>
 800ccce:	2c30      	cmp	r4, #48	; 0x30
 800ccd0:	d0a5      	beq.n	800cc1e <_strtol_l.constprop.0+0x46>
 800ccd2:	230a      	movs	r3, #10
 800ccd4:	e7ab      	b.n	800cc2e <_strtol_l.constprop.0+0x56>
 800ccd6:	bf00      	nop
 800ccd8:	08010ca1 	.word	0x08010ca1

0800ccdc <_strtol_r>:
 800ccdc:	f7ff bf7c 	b.w	800cbd8 <_strtol_l.constprop.0>

0800cce0 <strtol>:
 800cce0:	4613      	mov	r3, r2
 800cce2:	460a      	mov	r2, r1
 800cce4:	4601      	mov	r1, r0
 800cce6:	4802      	ldr	r0, [pc, #8]	; (800ccf0 <strtol+0x10>)
 800cce8:	6800      	ldr	r0, [r0, #0]
 800ccea:	f7ff bf75 	b.w	800cbd8 <_strtol_l.constprop.0>
 800ccee:	bf00      	nop
 800ccf0:	20000014 	.word	0x20000014

0800ccf4 <__swbuf_r>:
 800ccf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf6:	460e      	mov	r6, r1
 800ccf8:	4614      	mov	r4, r2
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	b118      	cbz	r0, 800cd06 <__swbuf_r+0x12>
 800ccfe:	6983      	ldr	r3, [r0, #24]
 800cd00:	b90b      	cbnz	r3, 800cd06 <__swbuf_r+0x12>
 800cd02:	f7fd ff37 	bl	800ab74 <__sinit>
 800cd06:	4b21      	ldr	r3, [pc, #132]	; (800cd8c <__swbuf_r+0x98>)
 800cd08:	429c      	cmp	r4, r3
 800cd0a:	d12b      	bne.n	800cd64 <__swbuf_r+0x70>
 800cd0c:	686c      	ldr	r4, [r5, #4]
 800cd0e:	69a3      	ldr	r3, [r4, #24]
 800cd10:	60a3      	str	r3, [r4, #8]
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	071a      	lsls	r2, r3, #28
 800cd16:	d52f      	bpl.n	800cd78 <__swbuf_r+0x84>
 800cd18:	6923      	ldr	r3, [r4, #16]
 800cd1a:	b36b      	cbz	r3, 800cd78 <__swbuf_r+0x84>
 800cd1c:	6923      	ldr	r3, [r4, #16]
 800cd1e:	6820      	ldr	r0, [r4, #0]
 800cd20:	1ac0      	subs	r0, r0, r3
 800cd22:	6963      	ldr	r3, [r4, #20]
 800cd24:	b2f6      	uxtb	r6, r6
 800cd26:	4283      	cmp	r3, r0
 800cd28:	4637      	mov	r7, r6
 800cd2a:	dc04      	bgt.n	800cd36 <__swbuf_r+0x42>
 800cd2c:	4621      	mov	r1, r4
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f000 ffc2 	bl	800dcb8 <_fflush_r>
 800cd34:	bb30      	cbnz	r0, 800cd84 <__swbuf_r+0x90>
 800cd36:	68a3      	ldr	r3, [r4, #8]
 800cd38:	3b01      	subs	r3, #1
 800cd3a:	60a3      	str	r3, [r4, #8]
 800cd3c:	6823      	ldr	r3, [r4, #0]
 800cd3e:	1c5a      	adds	r2, r3, #1
 800cd40:	6022      	str	r2, [r4, #0]
 800cd42:	701e      	strb	r6, [r3, #0]
 800cd44:	6963      	ldr	r3, [r4, #20]
 800cd46:	3001      	adds	r0, #1
 800cd48:	4283      	cmp	r3, r0
 800cd4a:	d004      	beq.n	800cd56 <__swbuf_r+0x62>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	07db      	lsls	r3, r3, #31
 800cd50:	d506      	bpl.n	800cd60 <__swbuf_r+0x6c>
 800cd52:	2e0a      	cmp	r6, #10
 800cd54:	d104      	bne.n	800cd60 <__swbuf_r+0x6c>
 800cd56:	4621      	mov	r1, r4
 800cd58:	4628      	mov	r0, r5
 800cd5a:	f000 ffad 	bl	800dcb8 <_fflush_r>
 800cd5e:	b988      	cbnz	r0, 800cd84 <__swbuf_r+0x90>
 800cd60:	4638      	mov	r0, r7
 800cd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd64:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <__swbuf_r+0x9c>)
 800cd66:	429c      	cmp	r4, r3
 800cd68:	d101      	bne.n	800cd6e <__swbuf_r+0x7a>
 800cd6a:	68ac      	ldr	r4, [r5, #8]
 800cd6c:	e7cf      	b.n	800cd0e <__swbuf_r+0x1a>
 800cd6e:	4b09      	ldr	r3, [pc, #36]	; (800cd94 <__swbuf_r+0xa0>)
 800cd70:	429c      	cmp	r4, r3
 800cd72:	bf08      	it	eq
 800cd74:	68ec      	ldreq	r4, [r5, #12]
 800cd76:	e7ca      	b.n	800cd0e <__swbuf_r+0x1a>
 800cd78:	4621      	mov	r1, r4
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	f000 f81e 	bl	800cdbc <__swsetup_r>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d0cb      	beq.n	800cd1c <__swbuf_r+0x28>
 800cd84:	f04f 37ff 	mov.w	r7, #4294967295
 800cd88:	e7ea      	b.n	800cd60 <__swbuf_r+0x6c>
 800cd8a:	bf00      	nop
 800cd8c:	08010bd0 	.word	0x08010bd0
 800cd90:	08010bf0 	.word	0x08010bf0
 800cd94:	08010bb0 	.word	0x08010bb0

0800cd98 <_write_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	4d07      	ldr	r5, [pc, #28]	; (800cdb8 <_write_r+0x20>)
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	4608      	mov	r0, r1
 800cda0:	4611      	mov	r1, r2
 800cda2:	2200      	movs	r2, #0
 800cda4:	602a      	str	r2, [r5, #0]
 800cda6:	461a      	mov	r2, r3
 800cda8:	f7f4 fc77 	bl	800169a <_write>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	d102      	bne.n	800cdb6 <_write_r+0x1e>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	b103      	cbz	r3, 800cdb6 <_write_r+0x1e>
 800cdb4:	6023      	str	r3, [r4, #0]
 800cdb6:	bd38      	pop	{r3, r4, r5, pc}
 800cdb8:	20005df8 	.word	0x20005df8

0800cdbc <__swsetup_r>:
 800cdbc:	4b32      	ldr	r3, [pc, #200]	; (800ce88 <__swsetup_r+0xcc>)
 800cdbe:	b570      	push	{r4, r5, r6, lr}
 800cdc0:	681d      	ldr	r5, [r3, #0]
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	b125      	cbz	r5, 800cdd2 <__swsetup_r+0x16>
 800cdc8:	69ab      	ldr	r3, [r5, #24]
 800cdca:	b913      	cbnz	r3, 800cdd2 <__swsetup_r+0x16>
 800cdcc:	4628      	mov	r0, r5
 800cdce:	f7fd fed1 	bl	800ab74 <__sinit>
 800cdd2:	4b2e      	ldr	r3, [pc, #184]	; (800ce8c <__swsetup_r+0xd0>)
 800cdd4:	429c      	cmp	r4, r3
 800cdd6:	d10f      	bne.n	800cdf8 <__swsetup_r+0x3c>
 800cdd8:	686c      	ldr	r4, [r5, #4]
 800cdda:	89a3      	ldrh	r3, [r4, #12]
 800cddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cde0:	0719      	lsls	r1, r3, #28
 800cde2:	d42c      	bmi.n	800ce3e <__swsetup_r+0x82>
 800cde4:	06dd      	lsls	r5, r3, #27
 800cde6:	d411      	bmi.n	800ce0c <__swsetup_r+0x50>
 800cde8:	2309      	movs	r3, #9
 800cdea:	6033      	str	r3, [r6, #0]
 800cdec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cdf0:	81a3      	strh	r3, [r4, #12]
 800cdf2:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf6:	e03e      	b.n	800ce76 <__swsetup_r+0xba>
 800cdf8:	4b25      	ldr	r3, [pc, #148]	; (800ce90 <__swsetup_r+0xd4>)
 800cdfa:	429c      	cmp	r4, r3
 800cdfc:	d101      	bne.n	800ce02 <__swsetup_r+0x46>
 800cdfe:	68ac      	ldr	r4, [r5, #8]
 800ce00:	e7eb      	b.n	800cdda <__swsetup_r+0x1e>
 800ce02:	4b24      	ldr	r3, [pc, #144]	; (800ce94 <__swsetup_r+0xd8>)
 800ce04:	429c      	cmp	r4, r3
 800ce06:	bf08      	it	eq
 800ce08:	68ec      	ldreq	r4, [r5, #12]
 800ce0a:	e7e6      	b.n	800cdda <__swsetup_r+0x1e>
 800ce0c:	0758      	lsls	r0, r3, #29
 800ce0e:	d512      	bpl.n	800ce36 <__swsetup_r+0x7a>
 800ce10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce12:	b141      	cbz	r1, 800ce26 <__swsetup_r+0x6a>
 800ce14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce18:	4299      	cmp	r1, r3
 800ce1a:	d002      	beq.n	800ce22 <__swsetup_r+0x66>
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f002 f871 	bl	800ef04 <_free_r>
 800ce22:	2300      	movs	r3, #0
 800ce24:	6363      	str	r3, [r4, #52]	; 0x34
 800ce26:	89a3      	ldrh	r3, [r4, #12]
 800ce28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce2c:	81a3      	strh	r3, [r4, #12]
 800ce2e:	2300      	movs	r3, #0
 800ce30:	6063      	str	r3, [r4, #4]
 800ce32:	6923      	ldr	r3, [r4, #16]
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	89a3      	ldrh	r3, [r4, #12]
 800ce38:	f043 0308 	orr.w	r3, r3, #8
 800ce3c:	81a3      	strh	r3, [r4, #12]
 800ce3e:	6923      	ldr	r3, [r4, #16]
 800ce40:	b94b      	cbnz	r3, 800ce56 <__swsetup_r+0x9a>
 800ce42:	89a3      	ldrh	r3, [r4, #12]
 800ce44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ce48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce4c:	d003      	beq.n	800ce56 <__swsetup_r+0x9a>
 800ce4e:	4621      	mov	r1, r4
 800ce50:	4630      	mov	r0, r6
 800ce52:	f001 fb19 	bl	800e488 <__smakebuf_r>
 800ce56:	89a0      	ldrh	r0, [r4, #12]
 800ce58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce5c:	f010 0301 	ands.w	r3, r0, #1
 800ce60:	d00a      	beq.n	800ce78 <__swsetup_r+0xbc>
 800ce62:	2300      	movs	r3, #0
 800ce64:	60a3      	str	r3, [r4, #8]
 800ce66:	6963      	ldr	r3, [r4, #20]
 800ce68:	425b      	negs	r3, r3
 800ce6a:	61a3      	str	r3, [r4, #24]
 800ce6c:	6923      	ldr	r3, [r4, #16]
 800ce6e:	b943      	cbnz	r3, 800ce82 <__swsetup_r+0xc6>
 800ce70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ce74:	d1ba      	bne.n	800cdec <__swsetup_r+0x30>
 800ce76:	bd70      	pop	{r4, r5, r6, pc}
 800ce78:	0781      	lsls	r1, r0, #30
 800ce7a:	bf58      	it	pl
 800ce7c:	6963      	ldrpl	r3, [r4, #20]
 800ce7e:	60a3      	str	r3, [r4, #8]
 800ce80:	e7f4      	b.n	800ce6c <__swsetup_r+0xb0>
 800ce82:	2000      	movs	r0, #0
 800ce84:	e7f7      	b.n	800ce76 <__swsetup_r+0xba>
 800ce86:	bf00      	nop
 800ce88:	20000014 	.word	0x20000014
 800ce8c:	08010bd0 	.word	0x08010bd0
 800ce90:	08010bf0 	.word	0x08010bf0
 800ce94:	08010bb0 	.word	0x08010bb0

0800ce98 <_close_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d06      	ldr	r5, [pc, #24]	; (800ceb4 <_close_r+0x1c>)
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	602b      	str	r3, [r5, #0]
 800cea4:	f7f4 fc15 	bl	80016d2 <_close>
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	d102      	bne.n	800ceb2 <_close_r+0x1a>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	b103      	cbz	r3, 800ceb2 <_close_r+0x1a>
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	bd38      	pop	{r3, r4, r5, pc}
 800ceb4:	20005df8 	.word	0x20005df8

0800ceb8 <quorem>:
 800ceb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cebc:	6903      	ldr	r3, [r0, #16]
 800cebe:	690c      	ldr	r4, [r1, #16]
 800cec0:	42a3      	cmp	r3, r4
 800cec2:	4607      	mov	r7, r0
 800cec4:	f2c0 8081 	blt.w	800cfca <quorem+0x112>
 800cec8:	3c01      	subs	r4, #1
 800ceca:	f101 0814 	add.w	r8, r1, #20
 800cece:	f100 0514 	add.w	r5, r0, #20
 800ced2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cedc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cee0:	3301      	adds	r3, #1
 800cee2:	429a      	cmp	r2, r3
 800cee4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cee8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ceec:	fbb2 f6f3 	udiv	r6, r2, r3
 800cef0:	d331      	bcc.n	800cf56 <quorem+0x9e>
 800cef2:	f04f 0e00 	mov.w	lr, #0
 800cef6:	4640      	mov	r0, r8
 800cef8:	46ac      	mov	ip, r5
 800cefa:	46f2      	mov	sl, lr
 800cefc:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf00:	b293      	uxth	r3, r2
 800cf02:	fb06 e303 	mla	r3, r6, r3, lr
 800cf06:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	ebaa 0303 	sub.w	r3, sl, r3
 800cf10:	f8dc a000 	ldr.w	sl, [ip]
 800cf14:	0c12      	lsrs	r2, r2, #16
 800cf16:	fa13 f38a 	uxtah	r3, r3, sl
 800cf1a:	fb06 e202 	mla	r2, r6, r2, lr
 800cf1e:	9300      	str	r3, [sp, #0]
 800cf20:	9b00      	ldr	r3, [sp, #0]
 800cf22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf26:	b292      	uxth	r2, r2
 800cf28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf30:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf34:	4581      	cmp	r9, r0
 800cf36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf3a:	f84c 3b04 	str.w	r3, [ip], #4
 800cf3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf42:	d2db      	bcs.n	800cefc <quorem+0x44>
 800cf44:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf48:	b92b      	cbnz	r3, 800cf56 <quorem+0x9e>
 800cf4a:	9b01      	ldr	r3, [sp, #4]
 800cf4c:	3b04      	subs	r3, #4
 800cf4e:	429d      	cmp	r5, r3
 800cf50:	461a      	mov	r2, r3
 800cf52:	d32e      	bcc.n	800cfb2 <quorem+0xfa>
 800cf54:	613c      	str	r4, [r7, #16]
 800cf56:	4638      	mov	r0, r7
 800cf58:	f001 fdc8 	bl	800eaec <__mcmp>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	db24      	blt.n	800cfaa <quorem+0xf2>
 800cf60:	3601      	adds	r6, #1
 800cf62:	4628      	mov	r0, r5
 800cf64:	f04f 0c00 	mov.w	ip, #0
 800cf68:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf6c:	f8d0 e000 	ldr.w	lr, [r0]
 800cf70:	b293      	uxth	r3, r2
 800cf72:	ebac 0303 	sub.w	r3, ip, r3
 800cf76:	0c12      	lsrs	r2, r2, #16
 800cf78:	fa13 f38e 	uxtah	r3, r3, lr
 800cf7c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cf80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf8a:	45c1      	cmp	r9, r8
 800cf8c:	f840 3b04 	str.w	r3, [r0], #4
 800cf90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cf94:	d2e8      	bcs.n	800cf68 <quorem+0xb0>
 800cf96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf9e:	b922      	cbnz	r2, 800cfaa <quorem+0xf2>
 800cfa0:	3b04      	subs	r3, #4
 800cfa2:	429d      	cmp	r5, r3
 800cfa4:	461a      	mov	r2, r3
 800cfa6:	d30a      	bcc.n	800cfbe <quorem+0x106>
 800cfa8:	613c      	str	r4, [r7, #16]
 800cfaa:	4630      	mov	r0, r6
 800cfac:	b003      	add	sp, #12
 800cfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb2:	6812      	ldr	r2, [r2, #0]
 800cfb4:	3b04      	subs	r3, #4
 800cfb6:	2a00      	cmp	r2, #0
 800cfb8:	d1cc      	bne.n	800cf54 <quorem+0x9c>
 800cfba:	3c01      	subs	r4, #1
 800cfbc:	e7c7      	b.n	800cf4e <quorem+0x96>
 800cfbe:	6812      	ldr	r2, [r2, #0]
 800cfc0:	3b04      	subs	r3, #4
 800cfc2:	2a00      	cmp	r2, #0
 800cfc4:	d1f0      	bne.n	800cfa8 <quorem+0xf0>
 800cfc6:	3c01      	subs	r4, #1
 800cfc8:	e7eb      	b.n	800cfa2 <quorem+0xea>
 800cfca:	2000      	movs	r0, #0
 800cfcc:	e7ee      	b.n	800cfac <quorem+0xf4>
	...

0800cfd0 <_dtoa_r>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	ed2d 8b04 	vpush	{d8-d9}
 800cfd8:	ec57 6b10 	vmov	r6, r7, d0
 800cfdc:	b093      	sub	sp, #76	; 0x4c
 800cfde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cfe0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cfe4:	9106      	str	r1, [sp, #24]
 800cfe6:	ee10 aa10 	vmov	sl, s0
 800cfea:	4604      	mov	r4, r0
 800cfec:	9209      	str	r2, [sp, #36]	; 0x24
 800cfee:	930c      	str	r3, [sp, #48]	; 0x30
 800cff0:	46bb      	mov	fp, r7
 800cff2:	b975      	cbnz	r5, 800d012 <_dtoa_r+0x42>
 800cff4:	2010      	movs	r0, #16
 800cff6:	f001 fa87 	bl	800e508 <malloc>
 800cffa:	4602      	mov	r2, r0
 800cffc:	6260      	str	r0, [r4, #36]	; 0x24
 800cffe:	b920      	cbnz	r0, 800d00a <_dtoa_r+0x3a>
 800d000:	4ba7      	ldr	r3, [pc, #668]	; (800d2a0 <_dtoa_r+0x2d0>)
 800d002:	21ea      	movs	r1, #234	; 0xea
 800d004:	48a7      	ldr	r0, [pc, #668]	; (800d2a4 <_dtoa_r+0x2d4>)
 800d006:	f002 fabd 	bl	800f584 <__assert_func>
 800d00a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d00e:	6005      	str	r5, [r0, #0]
 800d010:	60c5      	str	r5, [r0, #12]
 800d012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d014:	6819      	ldr	r1, [r3, #0]
 800d016:	b151      	cbz	r1, 800d02e <_dtoa_r+0x5e>
 800d018:	685a      	ldr	r2, [r3, #4]
 800d01a:	604a      	str	r2, [r1, #4]
 800d01c:	2301      	movs	r3, #1
 800d01e:	4093      	lsls	r3, r2
 800d020:	608b      	str	r3, [r1, #8]
 800d022:	4620      	mov	r0, r4
 800d024:	f001 fad6 	bl	800e5d4 <_Bfree>
 800d028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	1e3b      	subs	r3, r7, #0
 800d030:	bfaa      	itet	ge
 800d032:	2300      	movge	r3, #0
 800d034:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d038:	f8c8 3000 	strge.w	r3, [r8]
 800d03c:	4b9a      	ldr	r3, [pc, #616]	; (800d2a8 <_dtoa_r+0x2d8>)
 800d03e:	bfbc      	itt	lt
 800d040:	2201      	movlt	r2, #1
 800d042:	f8c8 2000 	strlt.w	r2, [r8]
 800d046:	ea33 030b 	bics.w	r3, r3, fp
 800d04a:	d11b      	bne.n	800d084 <_dtoa_r+0xb4>
 800d04c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d04e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d052:	6013      	str	r3, [r2, #0]
 800d054:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d058:	4333      	orrs	r3, r6
 800d05a:	f000 8592 	beq.w	800db82 <_dtoa_r+0xbb2>
 800d05e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d060:	b963      	cbnz	r3, 800d07c <_dtoa_r+0xac>
 800d062:	4b92      	ldr	r3, [pc, #584]	; (800d2ac <_dtoa_r+0x2dc>)
 800d064:	e022      	b.n	800d0ac <_dtoa_r+0xdc>
 800d066:	4b92      	ldr	r3, [pc, #584]	; (800d2b0 <_dtoa_r+0x2e0>)
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	3308      	adds	r3, #8
 800d06c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d06e:	6013      	str	r3, [r2, #0]
 800d070:	9801      	ldr	r0, [sp, #4]
 800d072:	b013      	add	sp, #76	; 0x4c
 800d074:	ecbd 8b04 	vpop	{d8-d9}
 800d078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d07c:	4b8b      	ldr	r3, [pc, #556]	; (800d2ac <_dtoa_r+0x2dc>)
 800d07e:	9301      	str	r3, [sp, #4]
 800d080:	3303      	adds	r3, #3
 800d082:	e7f3      	b.n	800d06c <_dtoa_r+0x9c>
 800d084:	2200      	movs	r2, #0
 800d086:	2300      	movs	r3, #0
 800d088:	4650      	mov	r0, sl
 800d08a:	4659      	mov	r1, fp
 800d08c:	f7f3 fd3c 	bl	8000b08 <__aeabi_dcmpeq>
 800d090:	ec4b ab19 	vmov	d9, sl, fp
 800d094:	4680      	mov	r8, r0
 800d096:	b158      	cbz	r0, 800d0b0 <_dtoa_r+0xe0>
 800d098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d09a:	2301      	movs	r3, #1
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f000 856b 	beq.w	800db7c <_dtoa_r+0xbac>
 800d0a6:	4883      	ldr	r0, [pc, #524]	; (800d2b4 <_dtoa_r+0x2e4>)
 800d0a8:	6018      	str	r0, [r3, #0]
 800d0aa:	1e43      	subs	r3, r0, #1
 800d0ac:	9301      	str	r3, [sp, #4]
 800d0ae:	e7df      	b.n	800d070 <_dtoa_r+0xa0>
 800d0b0:	ec4b ab10 	vmov	d0, sl, fp
 800d0b4:	aa10      	add	r2, sp, #64	; 0x40
 800d0b6:	a911      	add	r1, sp, #68	; 0x44
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f001 fe39 	bl	800ed30 <__d2b>
 800d0be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d0c2:	ee08 0a10 	vmov	s16, r0
 800d0c6:	2d00      	cmp	r5, #0
 800d0c8:	f000 8084 	beq.w	800d1d4 <_dtoa_r+0x204>
 800d0cc:	ee19 3a90 	vmov	r3, s19
 800d0d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d0d8:	4656      	mov	r6, sl
 800d0da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d0de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d0e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d0e6:	4b74      	ldr	r3, [pc, #464]	; (800d2b8 <_dtoa_r+0x2e8>)
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	f7f3 f8eb 	bl	80002c8 <__aeabi_dsub>
 800d0f2:	a365      	add	r3, pc, #404	; (adr r3, 800d288 <_dtoa_r+0x2b8>)
 800d0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f8:	f7f3 fa9e 	bl	8000638 <__aeabi_dmul>
 800d0fc:	a364      	add	r3, pc, #400	; (adr r3, 800d290 <_dtoa_r+0x2c0>)
 800d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d102:	f7f3 f8e3 	bl	80002cc <__adddf3>
 800d106:	4606      	mov	r6, r0
 800d108:	4628      	mov	r0, r5
 800d10a:	460f      	mov	r7, r1
 800d10c:	f7f3 fa2a 	bl	8000564 <__aeabi_i2d>
 800d110:	a361      	add	r3, pc, #388	; (adr r3, 800d298 <_dtoa_r+0x2c8>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 fa8f 	bl	8000638 <__aeabi_dmul>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	4630      	mov	r0, r6
 800d120:	4639      	mov	r1, r7
 800d122:	f7f3 f8d3 	bl	80002cc <__adddf3>
 800d126:	4606      	mov	r6, r0
 800d128:	460f      	mov	r7, r1
 800d12a:	f7f3 fd35 	bl	8000b98 <__aeabi_d2iz>
 800d12e:	2200      	movs	r2, #0
 800d130:	9000      	str	r0, [sp, #0]
 800d132:	2300      	movs	r3, #0
 800d134:	4630      	mov	r0, r6
 800d136:	4639      	mov	r1, r7
 800d138:	f7f3 fcf0 	bl	8000b1c <__aeabi_dcmplt>
 800d13c:	b150      	cbz	r0, 800d154 <_dtoa_r+0x184>
 800d13e:	9800      	ldr	r0, [sp, #0]
 800d140:	f7f3 fa10 	bl	8000564 <__aeabi_i2d>
 800d144:	4632      	mov	r2, r6
 800d146:	463b      	mov	r3, r7
 800d148:	f7f3 fcde 	bl	8000b08 <__aeabi_dcmpeq>
 800d14c:	b910      	cbnz	r0, 800d154 <_dtoa_r+0x184>
 800d14e:	9b00      	ldr	r3, [sp, #0]
 800d150:	3b01      	subs	r3, #1
 800d152:	9300      	str	r3, [sp, #0]
 800d154:	9b00      	ldr	r3, [sp, #0]
 800d156:	2b16      	cmp	r3, #22
 800d158:	d85a      	bhi.n	800d210 <_dtoa_r+0x240>
 800d15a:	9a00      	ldr	r2, [sp, #0]
 800d15c:	4b57      	ldr	r3, [pc, #348]	; (800d2bc <_dtoa_r+0x2ec>)
 800d15e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	ec51 0b19 	vmov	r0, r1, d9
 800d16a:	f7f3 fcd7 	bl	8000b1c <__aeabi_dcmplt>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d050      	beq.n	800d214 <_dtoa_r+0x244>
 800d172:	9b00      	ldr	r3, [sp, #0]
 800d174:	3b01      	subs	r3, #1
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	2300      	movs	r3, #0
 800d17a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d17e:	1b5d      	subs	r5, r3, r5
 800d180:	1e6b      	subs	r3, r5, #1
 800d182:	9305      	str	r3, [sp, #20]
 800d184:	bf45      	ittet	mi
 800d186:	f1c5 0301 	rsbmi	r3, r5, #1
 800d18a:	9304      	strmi	r3, [sp, #16]
 800d18c:	2300      	movpl	r3, #0
 800d18e:	2300      	movmi	r3, #0
 800d190:	bf4c      	ite	mi
 800d192:	9305      	strmi	r3, [sp, #20]
 800d194:	9304      	strpl	r3, [sp, #16]
 800d196:	9b00      	ldr	r3, [sp, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	db3d      	blt.n	800d218 <_dtoa_r+0x248>
 800d19c:	9b05      	ldr	r3, [sp, #20]
 800d19e:	9a00      	ldr	r2, [sp, #0]
 800d1a0:	920a      	str	r2, [sp, #40]	; 0x28
 800d1a2:	4413      	add	r3, r2
 800d1a4:	9305      	str	r3, [sp, #20]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9307      	str	r3, [sp, #28]
 800d1aa:	9b06      	ldr	r3, [sp, #24]
 800d1ac:	2b09      	cmp	r3, #9
 800d1ae:	f200 8089 	bhi.w	800d2c4 <_dtoa_r+0x2f4>
 800d1b2:	2b05      	cmp	r3, #5
 800d1b4:	bfc4      	itt	gt
 800d1b6:	3b04      	subgt	r3, #4
 800d1b8:	9306      	strgt	r3, [sp, #24]
 800d1ba:	9b06      	ldr	r3, [sp, #24]
 800d1bc:	f1a3 0302 	sub.w	r3, r3, #2
 800d1c0:	bfcc      	ite	gt
 800d1c2:	2500      	movgt	r5, #0
 800d1c4:	2501      	movle	r5, #1
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	f200 8087 	bhi.w	800d2da <_dtoa_r+0x30a>
 800d1cc:	e8df f003 	tbb	[pc, r3]
 800d1d0:	59383a2d 	.word	0x59383a2d
 800d1d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d1d8:	441d      	add	r5, r3
 800d1da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d1de:	2b20      	cmp	r3, #32
 800d1e0:	bfc1      	itttt	gt
 800d1e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d1ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800d1ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d1f2:	bfda      	itte	le
 800d1f4:	f1c3 0320 	rsble	r3, r3, #32
 800d1f8:	fa06 f003 	lslle.w	r0, r6, r3
 800d1fc:	4318      	orrgt	r0, r3
 800d1fe:	f7f3 f9a1 	bl	8000544 <__aeabi_ui2d>
 800d202:	2301      	movs	r3, #1
 800d204:	4606      	mov	r6, r0
 800d206:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d20a:	3d01      	subs	r5, #1
 800d20c:	930e      	str	r3, [sp, #56]	; 0x38
 800d20e:	e76a      	b.n	800d0e6 <_dtoa_r+0x116>
 800d210:	2301      	movs	r3, #1
 800d212:	e7b2      	b.n	800d17a <_dtoa_r+0x1aa>
 800d214:	900b      	str	r0, [sp, #44]	; 0x2c
 800d216:	e7b1      	b.n	800d17c <_dtoa_r+0x1ac>
 800d218:	9b04      	ldr	r3, [sp, #16]
 800d21a:	9a00      	ldr	r2, [sp, #0]
 800d21c:	1a9b      	subs	r3, r3, r2
 800d21e:	9304      	str	r3, [sp, #16]
 800d220:	4253      	negs	r3, r2
 800d222:	9307      	str	r3, [sp, #28]
 800d224:	2300      	movs	r3, #0
 800d226:	930a      	str	r3, [sp, #40]	; 0x28
 800d228:	e7bf      	b.n	800d1aa <_dtoa_r+0x1da>
 800d22a:	2300      	movs	r3, #0
 800d22c:	9308      	str	r3, [sp, #32]
 800d22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d230:	2b00      	cmp	r3, #0
 800d232:	dc55      	bgt.n	800d2e0 <_dtoa_r+0x310>
 800d234:	2301      	movs	r3, #1
 800d236:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d23a:	461a      	mov	r2, r3
 800d23c:	9209      	str	r2, [sp, #36]	; 0x24
 800d23e:	e00c      	b.n	800d25a <_dtoa_r+0x28a>
 800d240:	2301      	movs	r3, #1
 800d242:	e7f3      	b.n	800d22c <_dtoa_r+0x25c>
 800d244:	2300      	movs	r3, #0
 800d246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d248:	9308      	str	r3, [sp, #32]
 800d24a:	9b00      	ldr	r3, [sp, #0]
 800d24c:	4413      	add	r3, r2
 800d24e:	9302      	str	r3, [sp, #8]
 800d250:	3301      	adds	r3, #1
 800d252:	2b01      	cmp	r3, #1
 800d254:	9303      	str	r3, [sp, #12]
 800d256:	bfb8      	it	lt
 800d258:	2301      	movlt	r3, #1
 800d25a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d25c:	2200      	movs	r2, #0
 800d25e:	6042      	str	r2, [r0, #4]
 800d260:	2204      	movs	r2, #4
 800d262:	f102 0614 	add.w	r6, r2, #20
 800d266:	429e      	cmp	r6, r3
 800d268:	6841      	ldr	r1, [r0, #4]
 800d26a:	d93d      	bls.n	800d2e8 <_dtoa_r+0x318>
 800d26c:	4620      	mov	r0, r4
 800d26e:	f001 f971 	bl	800e554 <_Balloc>
 800d272:	9001      	str	r0, [sp, #4]
 800d274:	2800      	cmp	r0, #0
 800d276:	d13b      	bne.n	800d2f0 <_dtoa_r+0x320>
 800d278:	4b11      	ldr	r3, [pc, #68]	; (800d2c0 <_dtoa_r+0x2f0>)
 800d27a:	4602      	mov	r2, r0
 800d27c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d280:	e6c0      	b.n	800d004 <_dtoa_r+0x34>
 800d282:	2301      	movs	r3, #1
 800d284:	e7df      	b.n	800d246 <_dtoa_r+0x276>
 800d286:	bf00      	nop
 800d288:	636f4361 	.word	0x636f4361
 800d28c:	3fd287a7 	.word	0x3fd287a7
 800d290:	8b60c8b3 	.word	0x8b60c8b3
 800d294:	3fc68a28 	.word	0x3fc68a28
 800d298:	509f79fb 	.word	0x509f79fb
 800d29c:	3fd34413 	.word	0x3fd34413
 800d2a0:	08010dae 	.word	0x08010dae
 800d2a4:	08010dc5 	.word	0x08010dc5
 800d2a8:	7ff00000 	.word	0x7ff00000
 800d2ac:	08010daa 	.word	0x08010daa
 800d2b0:	08010da1 	.word	0x08010da1
 800d2b4:	08010c25 	.word	0x08010c25
 800d2b8:	3ff80000 	.word	0x3ff80000
 800d2bc:	08010f30 	.word	0x08010f30
 800d2c0:	08010e20 	.word	0x08010e20
 800d2c4:	2501      	movs	r5, #1
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	9306      	str	r3, [sp, #24]
 800d2ca:	9508      	str	r5, [sp, #32]
 800d2cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	2312      	movs	r3, #18
 800d2d8:	e7b0      	b.n	800d23c <_dtoa_r+0x26c>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	9308      	str	r3, [sp, #32]
 800d2de:	e7f5      	b.n	800d2cc <_dtoa_r+0x2fc>
 800d2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d2e6:	e7b8      	b.n	800d25a <_dtoa_r+0x28a>
 800d2e8:	3101      	adds	r1, #1
 800d2ea:	6041      	str	r1, [r0, #4]
 800d2ec:	0052      	lsls	r2, r2, #1
 800d2ee:	e7b8      	b.n	800d262 <_dtoa_r+0x292>
 800d2f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2f2:	9a01      	ldr	r2, [sp, #4]
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	9b03      	ldr	r3, [sp, #12]
 800d2f8:	2b0e      	cmp	r3, #14
 800d2fa:	f200 809d 	bhi.w	800d438 <_dtoa_r+0x468>
 800d2fe:	2d00      	cmp	r5, #0
 800d300:	f000 809a 	beq.w	800d438 <_dtoa_r+0x468>
 800d304:	9b00      	ldr	r3, [sp, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	dd32      	ble.n	800d370 <_dtoa_r+0x3a0>
 800d30a:	4ab7      	ldr	r2, [pc, #732]	; (800d5e8 <_dtoa_r+0x618>)
 800d30c:	f003 030f 	and.w	r3, r3, #15
 800d310:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d314:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d318:	9b00      	ldr	r3, [sp, #0]
 800d31a:	05d8      	lsls	r0, r3, #23
 800d31c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d320:	d516      	bpl.n	800d350 <_dtoa_r+0x380>
 800d322:	4bb2      	ldr	r3, [pc, #712]	; (800d5ec <_dtoa_r+0x61c>)
 800d324:	ec51 0b19 	vmov	r0, r1, d9
 800d328:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d32c:	f7f3 faae 	bl	800088c <__aeabi_ddiv>
 800d330:	f007 070f 	and.w	r7, r7, #15
 800d334:	4682      	mov	sl, r0
 800d336:	468b      	mov	fp, r1
 800d338:	2503      	movs	r5, #3
 800d33a:	4eac      	ldr	r6, [pc, #688]	; (800d5ec <_dtoa_r+0x61c>)
 800d33c:	b957      	cbnz	r7, 800d354 <_dtoa_r+0x384>
 800d33e:	4642      	mov	r2, r8
 800d340:	464b      	mov	r3, r9
 800d342:	4650      	mov	r0, sl
 800d344:	4659      	mov	r1, fp
 800d346:	f7f3 faa1 	bl	800088c <__aeabi_ddiv>
 800d34a:	4682      	mov	sl, r0
 800d34c:	468b      	mov	fp, r1
 800d34e:	e028      	b.n	800d3a2 <_dtoa_r+0x3d2>
 800d350:	2502      	movs	r5, #2
 800d352:	e7f2      	b.n	800d33a <_dtoa_r+0x36a>
 800d354:	07f9      	lsls	r1, r7, #31
 800d356:	d508      	bpl.n	800d36a <_dtoa_r+0x39a>
 800d358:	4640      	mov	r0, r8
 800d35a:	4649      	mov	r1, r9
 800d35c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d360:	f7f3 f96a 	bl	8000638 <__aeabi_dmul>
 800d364:	3501      	adds	r5, #1
 800d366:	4680      	mov	r8, r0
 800d368:	4689      	mov	r9, r1
 800d36a:	107f      	asrs	r7, r7, #1
 800d36c:	3608      	adds	r6, #8
 800d36e:	e7e5      	b.n	800d33c <_dtoa_r+0x36c>
 800d370:	f000 809b 	beq.w	800d4aa <_dtoa_r+0x4da>
 800d374:	9b00      	ldr	r3, [sp, #0]
 800d376:	4f9d      	ldr	r7, [pc, #628]	; (800d5ec <_dtoa_r+0x61c>)
 800d378:	425e      	negs	r6, r3
 800d37a:	4b9b      	ldr	r3, [pc, #620]	; (800d5e8 <_dtoa_r+0x618>)
 800d37c:	f006 020f 	and.w	r2, r6, #15
 800d380:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d388:	ec51 0b19 	vmov	r0, r1, d9
 800d38c:	f7f3 f954 	bl	8000638 <__aeabi_dmul>
 800d390:	1136      	asrs	r6, r6, #4
 800d392:	4682      	mov	sl, r0
 800d394:	468b      	mov	fp, r1
 800d396:	2300      	movs	r3, #0
 800d398:	2502      	movs	r5, #2
 800d39a:	2e00      	cmp	r6, #0
 800d39c:	d17a      	bne.n	800d494 <_dtoa_r+0x4c4>
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1d3      	bne.n	800d34a <_dtoa_r+0x37a>
 800d3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f000 8082 	beq.w	800d4ae <_dtoa_r+0x4de>
 800d3aa:	4b91      	ldr	r3, [pc, #580]	; (800d5f0 <_dtoa_r+0x620>)
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	4650      	mov	r0, sl
 800d3b0:	4659      	mov	r1, fp
 800d3b2:	f7f3 fbb3 	bl	8000b1c <__aeabi_dcmplt>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d079      	beq.n	800d4ae <_dtoa_r+0x4de>
 800d3ba:	9b03      	ldr	r3, [sp, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d076      	beq.n	800d4ae <_dtoa_r+0x4de>
 800d3c0:	9b02      	ldr	r3, [sp, #8]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	dd36      	ble.n	800d434 <_dtoa_r+0x464>
 800d3c6:	9b00      	ldr	r3, [sp, #0]
 800d3c8:	4650      	mov	r0, sl
 800d3ca:	4659      	mov	r1, fp
 800d3cc:	1e5f      	subs	r7, r3, #1
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	4b88      	ldr	r3, [pc, #544]	; (800d5f4 <_dtoa_r+0x624>)
 800d3d2:	f7f3 f931 	bl	8000638 <__aeabi_dmul>
 800d3d6:	9e02      	ldr	r6, [sp, #8]
 800d3d8:	4682      	mov	sl, r0
 800d3da:	468b      	mov	fp, r1
 800d3dc:	3501      	adds	r5, #1
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f7f3 f8c0 	bl	8000564 <__aeabi_i2d>
 800d3e4:	4652      	mov	r2, sl
 800d3e6:	465b      	mov	r3, fp
 800d3e8:	f7f3 f926 	bl	8000638 <__aeabi_dmul>
 800d3ec:	4b82      	ldr	r3, [pc, #520]	; (800d5f8 <_dtoa_r+0x628>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	f7f2 ff6c 	bl	80002cc <__adddf3>
 800d3f4:	46d0      	mov	r8, sl
 800d3f6:	46d9      	mov	r9, fp
 800d3f8:	4682      	mov	sl, r0
 800d3fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d3fe:	2e00      	cmp	r6, #0
 800d400:	d158      	bne.n	800d4b4 <_dtoa_r+0x4e4>
 800d402:	4b7e      	ldr	r3, [pc, #504]	; (800d5fc <_dtoa_r+0x62c>)
 800d404:	2200      	movs	r2, #0
 800d406:	4640      	mov	r0, r8
 800d408:	4649      	mov	r1, r9
 800d40a:	f7f2 ff5d 	bl	80002c8 <__aeabi_dsub>
 800d40e:	4652      	mov	r2, sl
 800d410:	465b      	mov	r3, fp
 800d412:	4680      	mov	r8, r0
 800d414:	4689      	mov	r9, r1
 800d416:	f7f3 fb9f 	bl	8000b58 <__aeabi_dcmpgt>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	f040 8295 	bne.w	800d94a <_dtoa_r+0x97a>
 800d420:	4652      	mov	r2, sl
 800d422:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d426:	4640      	mov	r0, r8
 800d428:	4649      	mov	r1, r9
 800d42a:	f7f3 fb77 	bl	8000b1c <__aeabi_dcmplt>
 800d42e:	2800      	cmp	r0, #0
 800d430:	f040 8289 	bne.w	800d946 <_dtoa_r+0x976>
 800d434:	ec5b ab19 	vmov	sl, fp, d9
 800d438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f2c0 8148 	blt.w	800d6d0 <_dtoa_r+0x700>
 800d440:	9a00      	ldr	r2, [sp, #0]
 800d442:	2a0e      	cmp	r2, #14
 800d444:	f300 8144 	bgt.w	800d6d0 <_dtoa_r+0x700>
 800d448:	4b67      	ldr	r3, [pc, #412]	; (800d5e8 <_dtoa_r+0x618>)
 800d44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d44e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d454:	2b00      	cmp	r3, #0
 800d456:	f280 80d5 	bge.w	800d604 <_dtoa_r+0x634>
 800d45a:	9b03      	ldr	r3, [sp, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	f300 80d1 	bgt.w	800d604 <_dtoa_r+0x634>
 800d462:	f040 826f 	bne.w	800d944 <_dtoa_r+0x974>
 800d466:	4b65      	ldr	r3, [pc, #404]	; (800d5fc <_dtoa_r+0x62c>)
 800d468:	2200      	movs	r2, #0
 800d46a:	4640      	mov	r0, r8
 800d46c:	4649      	mov	r1, r9
 800d46e:	f7f3 f8e3 	bl	8000638 <__aeabi_dmul>
 800d472:	4652      	mov	r2, sl
 800d474:	465b      	mov	r3, fp
 800d476:	f7f3 fb65 	bl	8000b44 <__aeabi_dcmpge>
 800d47a:	9e03      	ldr	r6, [sp, #12]
 800d47c:	4637      	mov	r7, r6
 800d47e:	2800      	cmp	r0, #0
 800d480:	f040 8245 	bne.w	800d90e <_dtoa_r+0x93e>
 800d484:	9d01      	ldr	r5, [sp, #4]
 800d486:	2331      	movs	r3, #49	; 0x31
 800d488:	f805 3b01 	strb.w	r3, [r5], #1
 800d48c:	9b00      	ldr	r3, [sp, #0]
 800d48e:	3301      	adds	r3, #1
 800d490:	9300      	str	r3, [sp, #0]
 800d492:	e240      	b.n	800d916 <_dtoa_r+0x946>
 800d494:	07f2      	lsls	r2, r6, #31
 800d496:	d505      	bpl.n	800d4a4 <_dtoa_r+0x4d4>
 800d498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d49c:	f7f3 f8cc 	bl	8000638 <__aeabi_dmul>
 800d4a0:	3501      	adds	r5, #1
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	1076      	asrs	r6, r6, #1
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	e777      	b.n	800d39a <_dtoa_r+0x3ca>
 800d4aa:	2502      	movs	r5, #2
 800d4ac:	e779      	b.n	800d3a2 <_dtoa_r+0x3d2>
 800d4ae:	9f00      	ldr	r7, [sp, #0]
 800d4b0:	9e03      	ldr	r6, [sp, #12]
 800d4b2:	e794      	b.n	800d3de <_dtoa_r+0x40e>
 800d4b4:	9901      	ldr	r1, [sp, #4]
 800d4b6:	4b4c      	ldr	r3, [pc, #304]	; (800d5e8 <_dtoa_r+0x618>)
 800d4b8:	4431      	add	r1, r6
 800d4ba:	910d      	str	r1, [sp, #52]	; 0x34
 800d4bc:	9908      	ldr	r1, [sp, #32]
 800d4be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d4c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d4c6:	2900      	cmp	r1, #0
 800d4c8:	d043      	beq.n	800d552 <_dtoa_r+0x582>
 800d4ca:	494d      	ldr	r1, [pc, #308]	; (800d600 <_dtoa_r+0x630>)
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	f7f3 f9dd 	bl	800088c <__aeabi_ddiv>
 800d4d2:	4652      	mov	r2, sl
 800d4d4:	465b      	mov	r3, fp
 800d4d6:	f7f2 fef7 	bl	80002c8 <__aeabi_dsub>
 800d4da:	9d01      	ldr	r5, [sp, #4]
 800d4dc:	4682      	mov	sl, r0
 800d4de:	468b      	mov	fp, r1
 800d4e0:	4649      	mov	r1, r9
 800d4e2:	4640      	mov	r0, r8
 800d4e4:	f7f3 fb58 	bl	8000b98 <__aeabi_d2iz>
 800d4e8:	4606      	mov	r6, r0
 800d4ea:	f7f3 f83b 	bl	8000564 <__aeabi_i2d>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4640      	mov	r0, r8
 800d4f4:	4649      	mov	r1, r9
 800d4f6:	f7f2 fee7 	bl	80002c8 <__aeabi_dsub>
 800d4fa:	3630      	adds	r6, #48	; 0x30
 800d4fc:	f805 6b01 	strb.w	r6, [r5], #1
 800d500:	4652      	mov	r2, sl
 800d502:	465b      	mov	r3, fp
 800d504:	4680      	mov	r8, r0
 800d506:	4689      	mov	r9, r1
 800d508:	f7f3 fb08 	bl	8000b1c <__aeabi_dcmplt>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d163      	bne.n	800d5d8 <_dtoa_r+0x608>
 800d510:	4642      	mov	r2, r8
 800d512:	464b      	mov	r3, r9
 800d514:	4936      	ldr	r1, [pc, #216]	; (800d5f0 <_dtoa_r+0x620>)
 800d516:	2000      	movs	r0, #0
 800d518:	f7f2 fed6 	bl	80002c8 <__aeabi_dsub>
 800d51c:	4652      	mov	r2, sl
 800d51e:	465b      	mov	r3, fp
 800d520:	f7f3 fafc 	bl	8000b1c <__aeabi_dcmplt>
 800d524:	2800      	cmp	r0, #0
 800d526:	f040 80b5 	bne.w	800d694 <_dtoa_r+0x6c4>
 800d52a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d52c:	429d      	cmp	r5, r3
 800d52e:	d081      	beq.n	800d434 <_dtoa_r+0x464>
 800d530:	4b30      	ldr	r3, [pc, #192]	; (800d5f4 <_dtoa_r+0x624>)
 800d532:	2200      	movs	r2, #0
 800d534:	4650      	mov	r0, sl
 800d536:	4659      	mov	r1, fp
 800d538:	f7f3 f87e 	bl	8000638 <__aeabi_dmul>
 800d53c:	4b2d      	ldr	r3, [pc, #180]	; (800d5f4 <_dtoa_r+0x624>)
 800d53e:	4682      	mov	sl, r0
 800d540:	468b      	mov	fp, r1
 800d542:	4640      	mov	r0, r8
 800d544:	4649      	mov	r1, r9
 800d546:	2200      	movs	r2, #0
 800d548:	f7f3 f876 	bl	8000638 <__aeabi_dmul>
 800d54c:	4680      	mov	r8, r0
 800d54e:	4689      	mov	r9, r1
 800d550:	e7c6      	b.n	800d4e0 <_dtoa_r+0x510>
 800d552:	4650      	mov	r0, sl
 800d554:	4659      	mov	r1, fp
 800d556:	f7f3 f86f 	bl	8000638 <__aeabi_dmul>
 800d55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d55c:	9d01      	ldr	r5, [sp, #4]
 800d55e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d560:	4682      	mov	sl, r0
 800d562:	468b      	mov	fp, r1
 800d564:	4649      	mov	r1, r9
 800d566:	4640      	mov	r0, r8
 800d568:	f7f3 fb16 	bl	8000b98 <__aeabi_d2iz>
 800d56c:	4606      	mov	r6, r0
 800d56e:	f7f2 fff9 	bl	8000564 <__aeabi_i2d>
 800d572:	3630      	adds	r6, #48	; 0x30
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4640      	mov	r0, r8
 800d57a:	4649      	mov	r1, r9
 800d57c:	f7f2 fea4 	bl	80002c8 <__aeabi_dsub>
 800d580:	f805 6b01 	strb.w	r6, [r5], #1
 800d584:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d586:	429d      	cmp	r5, r3
 800d588:	4680      	mov	r8, r0
 800d58a:	4689      	mov	r9, r1
 800d58c:	f04f 0200 	mov.w	r2, #0
 800d590:	d124      	bne.n	800d5dc <_dtoa_r+0x60c>
 800d592:	4b1b      	ldr	r3, [pc, #108]	; (800d600 <_dtoa_r+0x630>)
 800d594:	4650      	mov	r0, sl
 800d596:	4659      	mov	r1, fp
 800d598:	f7f2 fe98 	bl	80002cc <__adddf3>
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	4640      	mov	r0, r8
 800d5a2:	4649      	mov	r1, r9
 800d5a4:	f7f3 fad8 	bl	8000b58 <__aeabi_dcmpgt>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	d173      	bne.n	800d694 <_dtoa_r+0x6c4>
 800d5ac:	4652      	mov	r2, sl
 800d5ae:	465b      	mov	r3, fp
 800d5b0:	4913      	ldr	r1, [pc, #76]	; (800d600 <_dtoa_r+0x630>)
 800d5b2:	2000      	movs	r0, #0
 800d5b4:	f7f2 fe88 	bl	80002c8 <__aeabi_dsub>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	460b      	mov	r3, r1
 800d5bc:	4640      	mov	r0, r8
 800d5be:	4649      	mov	r1, r9
 800d5c0:	f7f3 faac 	bl	8000b1c <__aeabi_dcmplt>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	f43f af35 	beq.w	800d434 <_dtoa_r+0x464>
 800d5ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d5cc:	1e6b      	subs	r3, r5, #1
 800d5ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5d4:	2b30      	cmp	r3, #48	; 0x30
 800d5d6:	d0f8      	beq.n	800d5ca <_dtoa_r+0x5fa>
 800d5d8:	9700      	str	r7, [sp, #0]
 800d5da:	e049      	b.n	800d670 <_dtoa_r+0x6a0>
 800d5dc:	4b05      	ldr	r3, [pc, #20]	; (800d5f4 <_dtoa_r+0x624>)
 800d5de:	f7f3 f82b 	bl	8000638 <__aeabi_dmul>
 800d5e2:	4680      	mov	r8, r0
 800d5e4:	4689      	mov	r9, r1
 800d5e6:	e7bd      	b.n	800d564 <_dtoa_r+0x594>
 800d5e8:	08010f30 	.word	0x08010f30
 800d5ec:	08010f08 	.word	0x08010f08
 800d5f0:	3ff00000 	.word	0x3ff00000
 800d5f4:	40240000 	.word	0x40240000
 800d5f8:	401c0000 	.word	0x401c0000
 800d5fc:	40140000 	.word	0x40140000
 800d600:	3fe00000 	.word	0x3fe00000
 800d604:	9d01      	ldr	r5, [sp, #4]
 800d606:	4656      	mov	r6, sl
 800d608:	465f      	mov	r7, fp
 800d60a:	4642      	mov	r2, r8
 800d60c:	464b      	mov	r3, r9
 800d60e:	4630      	mov	r0, r6
 800d610:	4639      	mov	r1, r7
 800d612:	f7f3 f93b 	bl	800088c <__aeabi_ddiv>
 800d616:	f7f3 fabf 	bl	8000b98 <__aeabi_d2iz>
 800d61a:	4682      	mov	sl, r0
 800d61c:	f7f2 ffa2 	bl	8000564 <__aeabi_i2d>
 800d620:	4642      	mov	r2, r8
 800d622:	464b      	mov	r3, r9
 800d624:	f7f3 f808 	bl	8000638 <__aeabi_dmul>
 800d628:	4602      	mov	r2, r0
 800d62a:	460b      	mov	r3, r1
 800d62c:	4630      	mov	r0, r6
 800d62e:	4639      	mov	r1, r7
 800d630:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d634:	f7f2 fe48 	bl	80002c8 <__aeabi_dsub>
 800d638:	f805 6b01 	strb.w	r6, [r5], #1
 800d63c:	9e01      	ldr	r6, [sp, #4]
 800d63e:	9f03      	ldr	r7, [sp, #12]
 800d640:	1bae      	subs	r6, r5, r6
 800d642:	42b7      	cmp	r7, r6
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	d135      	bne.n	800d6b6 <_dtoa_r+0x6e6>
 800d64a:	f7f2 fe3f 	bl	80002cc <__adddf3>
 800d64e:	4642      	mov	r2, r8
 800d650:	464b      	mov	r3, r9
 800d652:	4606      	mov	r6, r0
 800d654:	460f      	mov	r7, r1
 800d656:	f7f3 fa7f 	bl	8000b58 <__aeabi_dcmpgt>
 800d65a:	b9d0      	cbnz	r0, 800d692 <_dtoa_r+0x6c2>
 800d65c:	4642      	mov	r2, r8
 800d65e:	464b      	mov	r3, r9
 800d660:	4630      	mov	r0, r6
 800d662:	4639      	mov	r1, r7
 800d664:	f7f3 fa50 	bl	8000b08 <__aeabi_dcmpeq>
 800d668:	b110      	cbz	r0, 800d670 <_dtoa_r+0x6a0>
 800d66a:	f01a 0f01 	tst.w	sl, #1
 800d66e:	d110      	bne.n	800d692 <_dtoa_r+0x6c2>
 800d670:	4620      	mov	r0, r4
 800d672:	ee18 1a10 	vmov	r1, s16
 800d676:	f000 ffad 	bl	800e5d4 <_Bfree>
 800d67a:	2300      	movs	r3, #0
 800d67c:	9800      	ldr	r0, [sp, #0]
 800d67e:	702b      	strb	r3, [r5, #0]
 800d680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d682:	3001      	adds	r0, #1
 800d684:	6018      	str	r0, [r3, #0]
 800d686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f43f acf1 	beq.w	800d070 <_dtoa_r+0xa0>
 800d68e:	601d      	str	r5, [r3, #0]
 800d690:	e4ee      	b.n	800d070 <_dtoa_r+0xa0>
 800d692:	9f00      	ldr	r7, [sp, #0]
 800d694:	462b      	mov	r3, r5
 800d696:	461d      	mov	r5, r3
 800d698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d69c:	2a39      	cmp	r2, #57	; 0x39
 800d69e:	d106      	bne.n	800d6ae <_dtoa_r+0x6de>
 800d6a0:	9a01      	ldr	r2, [sp, #4]
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d1f7      	bne.n	800d696 <_dtoa_r+0x6c6>
 800d6a6:	9901      	ldr	r1, [sp, #4]
 800d6a8:	2230      	movs	r2, #48	; 0x30
 800d6aa:	3701      	adds	r7, #1
 800d6ac:	700a      	strb	r2, [r1, #0]
 800d6ae:	781a      	ldrb	r2, [r3, #0]
 800d6b0:	3201      	adds	r2, #1
 800d6b2:	701a      	strb	r2, [r3, #0]
 800d6b4:	e790      	b.n	800d5d8 <_dtoa_r+0x608>
 800d6b6:	4ba6      	ldr	r3, [pc, #664]	; (800d950 <_dtoa_r+0x980>)
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f7f2 ffbd 	bl	8000638 <__aeabi_dmul>
 800d6be:	2200      	movs	r2, #0
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	460f      	mov	r7, r1
 800d6c6:	f7f3 fa1f 	bl	8000b08 <__aeabi_dcmpeq>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	d09d      	beq.n	800d60a <_dtoa_r+0x63a>
 800d6ce:	e7cf      	b.n	800d670 <_dtoa_r+0x6a0>
 800d6d0:	9a08      	ldr	r2, [sp, #32]
 800d6d2:	2a00      	cmp	r2, #0
 800d6d4:	f000 80d7 	beq.w	800d886 <_dtoa_r+0x8b6>
 800d6d8:	9a06      	ldr	r2, [sp, #24]
 800d6da:	2a01      	cmp	r2, #1
 800d6dc:	f300 80ba 	bgt.w	800d854 <_dtoa_r+0x884>
 800d6e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6e2:	2a00      	cmp	r2, #0
 800d6e4:	f000 80b2 	beq.w	800d84c <_dtoa_r+0x87c>
 800d6e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d6ec:	9e07      	ldr	r6, [sp, #28]
 800d6ee:	9d04      	ldr	r5, [sp, #16]
 800d6f0:	9a04      	ldr	r2, [sp, #16]
 800d6f2:	441a      	add	r2, r3
 800d6f4:	9204      	str	r2, [sp, #16]
 800d6f6:	9a05      	ldr	r2, [sp, #20]
 800d6f8:	2101      	movs	r1, #1
 800d6fa:	441a      	add	r2, r3
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	9205      	str	r2, [sp, #20]
 800d700:	f001 f86a 	bl	800e7d8 <__i2b>
 800d704:	4607      	mov	r7, r0
 800d706:	2d00      	cmp	r5, #0
 800d708:	dd0c      	ble.n	800d724 <_dtoa_r+0x754>
 800d70a:	9b05      	ldr	r3, [sp, #20]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	dd09      	ble.n	800d724 <_dtoa_r+0x754>
 800d710:	42ab      	cmp	r3, r5
 800d712:	9a04      	ldr	r2, [sp, #16]
 800d714:	bfa8      	it	ge
 800d716:	462b      	movge	r3, r5
 800d718:	1ad2      	subs	r2, r2, r3
 800d71a:	9204      	str	r2, [sp, #16]
 800d71c:	9a05      	ldr	r2, [sp, #20]
 800d71e:	1aed      	subs	r5, r5, r3
 800d720:	1ad3      	subs	r3, r2, r3
 800d722:	9305      	str	r3, [sp, #20]
 800d724:	9b07      	ldr	r3, [sp, #28]
 800d726:	b31b      	cbz	r3, 800d770 <_dtoa_r+0x7a0>
 800d728:	9b08      	ldr	r3, [sp, #32]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	f000 80af 	beq.w	800d88e <_dtoa_r+0x8be>
 800d730:	2e00      	cmp	r6, #0
 800d732:	dd13      	ble.n	800d75c <_dtoa_r+0x78c>
 800d734:	4639      	mov	r1, r7
 800d736:	4632      	mov	r2, r6
 800d738:	4620      	mov	r0, r4
 800d73a:	f001 f90d 	bl	800e958 <__pow5mult>
 800d73e:	ee18 2a10 	vmov	r2, s16
 800d742:	4601      	mov	r1, r0
 800d744:	4607      	mov	r7, r0
 800d746:	4620      	mov	r0, r4
 800d748:	f001 f85c 	bl	800e804 <__multiply>
 800d74c:	ee18 1a10 	vmov	r1, s16
 800d750:	4680      	mov	r8, r0
 800d752:	4620      	mov	r0, r4
 800d754:	f000 ff3e 	bl	800e5d4 <_Bfree>
 800d758:	ee08 8a10 	vmov	s16, r8
 800d75c:	9b07      	ldr	r3, [sp, #28]
 800d75e:	1b9a      	subs	r2, r3, r6
 800d760:	d006      	beq.n	800d770 <_dtoa_r+0x7a0>
 800d762:	ee18 1a10 	vmov	r1, s16
 800d766:	4620      	mov	r0, r4
 800d768:	f001 f8f6 	bl	800e958 <__pow5mult>
 800d76c:	ee08 0a10 	vmov	s16, r0
 800d770:	2101      	movs	r1, #1
 800d772:	4620      	mov	r0, r4
 800d774:	f001 f830 	bl	800e7d8 <__i2b>
 800d778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	4606      	mov	r6, r0
 800d77e:	f340 8088 	ble.w	800d892 <_dtoa_r+0x8c2>
 800d782:	461a      	mov	r2, r3
 800d784:	4601      	mov	r1, r0
 800d786:	4620      	mov	r0, r4
 800d788:	f001 f8e6 	bl	800e958 <__pow5mult>
 800d78c:	9b06      	ldr	r3, [sp, #24]
 800d78e:	2b01      	cmp	r3, #1
 800d790:	4606      	mov	r6, r0
 800d792:	f340 8081 	ble.w	800d898 <_dtoa_r+0x8c8>
 800d796:	f04f 0800 	mov.w	r8, #0
 800d79a:	6933      	ldr	r3, [r6, #16]
 800d79c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d7a0:	6918      	ldr	r0, [r3, #16]
 800d7a2:	f000 ffc9 	bl	800e738 <__hi0bits>
 800d7a6:	f1c0 0020 	rsb	r0, r0, #32
 800d7aa:	9b05      	ldr	r3, [sp, #20]
 800d7ac:	4418      	add	r0, r3
 800d7ae:	f010 001f 	ands.w	r0, r0, #31
 800d7b2:	f000 8092 	beq.w	800d8da <_dtoa_r+0x90a>
 800d7b6:	f1c0 0320 	rsb	r3, r0, #32
 800d7ba:	2b04      	cmp	r3, #4
 800d7bc:	f340 808a 	ble.w	800d8d4 <_dtoa_r+0x904>
 800d7c0:	f1c0 001c 	rsb	r0, r0, #28
 800d7c4:	9b04      	ldr	r3, [sp, #16]
 800d7c6:	4403      	add	r3, r0
 800d7c8:	9304      	str	r3, [sp, #16]
 800d7ca:	9b05      	ldr	r3, [sp, #20]
 800d7cc:	4403      	add	r3, r0
 800d7ce:	4405      	add	r5, r0
 800d7d0:	9305      	str	r3, [sp, #20]
 800d7d2:	9b04      	ldr	r3, [sp, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	dd07      	ble.n	800d7e8 <_dtoa_r+0x818>
 800d7d8:	ee18 1a10 	vmov	r1, s16
 800d7dc:	461a      	mov	r2, r3
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f001 f914 	bl	800ea0c <__lshift>
 800d7e4:	ee08 0a10 	vmov	s16, r0
 800d7e8:	9b05      	ldr	r3, [sp, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	dd05      	ble.n	800d7fa <_dtoa_r+0x82a>
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f001 f90a 	bl	800ea0c <__lshift>
 800d7f8:	4606      	mov	r6, r0
 800d7fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d06e      	beq.n	800d8de <_dtoa_r+0x90e>
 800d800:	ee18 0a10 	vmov	r0, s16
 800d804:	4631      	mov	r1, r6
 800d806:	f001 f971 	bl	800eaec <__mcmp>
 800d80a:	2800      	cmp	r0, #0
 800d80c:	da67      	bge.n	800d8de <_dtoa_r+0x90e>
 800d80e:	9b00      	ldr	r3, [sp, #0]
 800d810:	3b01      	subs	r3, #1
 800d812:	ee18 1a10 	vmov	r1, s16
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	220a      	movs	r2, #10
 800d81a:	2300      	movs	r3, #0
 800d81c:	4620      	mov	r0, r4
 800d81e:	f000 fefb 	bl	800e618 <__multadd>
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	ee08 0a10 	vmov	s16, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f000 81b1 	beq.w	800db90 <_dtoa_r+0xbc0>
 800d82e:	2300      	movs	r3, #0
 800d830:	4639      	mov	r1, r7
 800d832:	220a      	movs	r2, #10
 800d834:	4620      	mov	r0, r4
 800d836:	f000 feef 	bl	800e618 <__multadd>
 800d83a:	9b02      	ldr	r3, [sp, #8]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	4607      	mov	r7, r0
 800d840:	f300 808e 	bgt.w	800d960 <_dtoa_r+0x990>
 800d844:	9b06      	ldr	r3, [sp, #24]
 800d846:	2b02      	cmp	r3, #2
 800d848:	dc51      	bgt.n	800d8ee <_dtoa_r+0x91e>
 800d84a:	e089      	b.n	800d960 <_dtoa_r+0x990>
 800d84c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d84e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d852:	e74b      	b.n	800d6ec <_dtoa_r+0x71c>
 800d854:	9b03      	ldr	r3, [sp, #12]
 800d856:	1e5e      	subs	r6, r3, #1
 800d858:	9b07      	ldr	r3, [sp, #28]
 800d85a:	42b3      	cmp	r3, r6
 800d85c:	bfbf      	itttt	lt
 800d85e:	9b07      	ldrlt	r3, [sp, #28]
 800d860:	9607      	strlt	r6, [sp, #28]
 800d862:	1af2      	sublt	r2, r6, r3
 800d864:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d866:	bfb6      	itet	lt
 800d868:	189b      	addlt	r3, r3, r2
 800d86a:	1b9e      	subge	r6, r3, r6
 800d86c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d86e:	9b03      	ldr	r3, [sp, #12]
 800d870:	bfb8      	it	lt
 800d872:	2600      	movlt	r6, #0
 800d874:	2b00      	cmp	r3, #0
 800d876:	bfb7      	itett	lt
 800d878:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d87c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d880:	1a9d      	sublt	r5, r3, r2
 800d882:	2300      	movlt	r3, #0
 800d884:	e734      	b.n	800d6f0 <_dtoa_r+0x720>
 800d886:	9e07      	ldr	r6, [sp, #28]
 800d888:	9d04      	ldr	r5, [sp, #16]
 800d88a:	9f08      	ldr	r7, [sp, #32]
 800d88c:	e73b      	b.n	800d706 <_dtoa_r+0x736>
 800d88e:	9a07      	ldr	r2, [sp, #28]
 800d890:	e767      	b.n	800d762 <_dtoa_r+0x792>
 800d892:	9b06      	ldr	r3, [sp, #24]
 800d894:	2b01      	cmp	r3, #1
 800d896:	dc18      	bgt.n	800d8ca <_dtoa_r+0x8fa>
 800d898:	f1ba 0f00 	cmp.w	sl, #0
 800d89c:	d115      	bne.n	800d8ca <_dtoa_r+0x8fa>
 800d89e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8a2:	b993      	cbnz	r3, 800d8ca <_dtoa_r+0x8fa>
 800d8a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d8a8:	0d1b      	lsrs	r3, r3, #20
 800d8aa:	051b      	lsls	r3, r3, #20
 800d8ac:	b183      	cbz	r3, 800d8d0 <_dtoa_r+0x900>
 800d8ae:	9b04      	ldr	r3, [sp, #16]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	9304      	str	r3, [sp, #16]
 800d8b4:	9b05      	ldr	r3, [sp, #20]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	9305      	str	r3, [sp, #20]
 800d8ba:	f04f 0801 	mov.w	r8, #1
 800d8be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f47f af6a 	bne.w	800d79a <_dtoa_r+0x7ca>
 800d8c6:	2001      	movs	r0, #1
 800d8c8:	e76f      	b.n	800d7aa <_dtoa_r+0x7da>
 800d8ca:	f04f 0800 	mov.w	r8, #0
 800d8ce:	e7f6      	b.n	800d8be <_dtoa_r+0x8ee>
 800d8d0:	4698      	mov	r8, r3
 800d8d2:	e7f4      	b.n	800d8be <_dtoa_r+0x8ee>
 800d8d4:	f43f af7d 	beq.w	800d7d2 <_dtoa_r+0x802>
 800d8d8:	4618      	mov	r0, r3
 800d8da:	301c      	adds	r0, #28
 800d8dc:	e772      	b.n	800d7c4 <_dtoa_r+0x7f4>
 800d8de:	9b03      	ldr	r3, [sp, #12]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	dc37      	bgt.n	800d954 <_dtoa_r+0x984>
 800d8e4:	9b06      	ldr	r3, [sp, #24]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	dd34      	ble.n	800d954 <_dtoa_r+0x984>
 800d8ea:	9b03      	ldr	r3, [sp, #12]
 800d8ec:	9302      	str	r3, [sp, #8]
 800d8ee:	9b02      	ldr	r3, [sp, #8]
 800d8f0:	b96b      	cbnz	r3, 800d90e <_dtoa_r+0x93e>
 800d8f2:	4631      	mov	r1, r6
 800d8f4:	2205      	movs	r2, #5
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f000 fe8e 	bl	800e618 <__multadd>
 800d8fc:	4601      	mov	r1, r0
 800d8fe:	4606      	mov	r6, r0
 800d900:	ee18 0a10 	vmov	r0, s16
 800d904:	f001 f8f2 	bl	800eaec <__mcmp>
 800d908:	2800      	cmp	r0, #0
 800d90a:	f73f adbb 	bgt.w	800d484 <_dtoa_r+0x4b4>
 800d90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d910:	9d01      	ldr	r5, [sp, #4]
 800d912:	43db      	mvns	r3, r3
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	f04f 0800 	mov.w	r8, #0
 800d91a:	4631      	mov	r1, r6
 800d91c:	4620      	mov	r0, r4
 800d91e:	f000 fe59 	bl	800e5d4 <_Bfree>
 800d922:	2f00      	cmp	r7, #0
 800d924:	f43f aea4 	beq.w	800d670 <_dtoa_r+0x6a0>
 800d928:	f1b8 0f00 	cmp.w	r8, #0
 800d92c:	d005      	beq.n	800d93a <_dtoa_r+0x96a>
 800d92e:	45b8      	cmp	r8, r7
 800d930:	d003      	beq.n	800d93a <_dtoa_r+0x96a>
 800d932:	4641      	mov	r1, r8
 800d934:	4620      	mov	r0, r4
 800d936:	f000 fe4d 	bl	800e5d4 <_Bfree>
 800d93a:	4639      	mov	r1, r7
 800d93c:	4620      	mov	r0, r4
 800d93e:	f000 fe49 	bl	800e5d4 <_Bfree>
 800d942:	e695      	b.n	800d670 <_dtoa_r+0x6a0>
 800d944:	2600      	movs	r6, #0
 800d946:	4637      	mov	r7, r6
 800d948:	e7e1      	b.n	800d90e <_dtoa_r+0x93e>
 800d94a:	9700      	str	r7, [sp, #0]
 800d94c:	4637      	mov	r7, r6
 800d94e:	e599      	b.n	800d484 <_dtoa_r+0x4b4>
 800d950:	40240000 	.word	0x40240000
 800d954:	9b08      	ldr	r3, [sp, #32]
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 80ca 	beq.w	800daf0 <_dtoa_r+0xb20>
 800d95c:	9b03      	ldr	r3, [sp, #12]
 800d95e:	9302      	str	r3, [sp, #8]
 800d960:	2d00      	cmp	r5, #0
 800d962:	dd05      	ble.n	800d970 <_dtoa_r+0x9a0>
 800d964:	4639      	mov	r1, r7
 800d966:	462a      	mov	r2, r5
 800d968:	4620      	mov	r0, r4
 800d96a:	f001 f84f 	bl	800ea0c <__lshift>
 800d96e:	4607      	mov	r7, r0
 800d970:	f1b8 0f00 	cmp.w	r8, #0
 800d974:	d05b      	beq.n	800da2e <_dtoa_r+0xa5e>
 800d976:	6879      	ldr	r1, [r7, #4]
 800d978:	4620      	mov	r0, r4
 800d97a:	f000 fdeb 	bl	800e554 <_Balloc>
 800d97e:	4605      	mov	r5, r0
 800d980:	b928      	cbnz	r0, 800d98e <_dtoa_r+0x9be>
 800d982:	4b87      	ldr	r3, [pc, #540]	; (800dba0 <_dtoa_r+0xbd0>)
 800d984:	4602      	mov	r2, r0
 800d986:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d98a:	f7ff bb3b 	b.w	800d004 <_dtoa_r+0x34>
 800d98e:	693a      	ldr	r2, [r7, #16]
 800d990:	3202      	adds	r2, #2
 800d992:	0092      	lsls	r2, r2, #2
 800d994:	f107 010c 	add.w	r1, r7, #12
 800d998:	300c      	adds	r0, #12
 800d99a:	f7fd f9b0 	bl	800acfe <memcpy>
 800d99e:	2201      	movs	r2, #1
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f001 f832 	bl	800ea0c <__lshift>
 800d9a8:	9b01      	ldr	r3, [sp, #4]
 800d9aa:	f103 0901 	add.w	r9, r3, #1
 800d9ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d9b2:	4413      	add	r3, r2
 800d9b4:	9305      	str	r3, [sp, #20]
 800d9b6:	f00a 0301 	and.w	r3, sl, #1
 800d9ba:	46b8      	mov	r8, r7
 800d9bc:	9304      	str	r3, [sp, #16]
 800d9be:	4607      	mov	r7, r0
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	ee18 0a10 	vmov	r0, s16
 800d9c6:	f7ff fa77 	bl	800ceb8 <quorem>
 800d9ca:	4641      	mov	r1, r8
 800d9cc:	9002      	str	r0, [sp, #8]
 800d9ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d9d2:	ee18 0a10 	vmov	r0, s16
 800d9d6:	f001 f889 	bl	800eaec <__mcmp>
 800d9da:	463a      	mov	r2, r7
 800d9dc:	9003      	str	r0, [sp, #12]
 800d9de:	4631      	mov	r1, r6
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f001 f89f 	bl	800eb24 <__mdiff>
 800d9e6:	68c2      	ldr	r2, [r0, #12]
 800d9e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	bb02      	cbnz	r2, 800da32 <_dtoa_r+0xa62>
 800d9f0:	4601      	mov	r1, r0
 800d9f2:	ee18 0a10 	vmov	r0, s16
 800d9f6:	f001 f879 	bl	800eaec <__mcmp>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	4629      	mov	r1, r5
 800d9fe:	4620      	mov	r0, r4
 800da00:	9207      	str	r2, [sp, #28]
 800da02:	f000 fde7 	bl	800e5d4 <_Bfree>
 800da06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800da0a:	ea43 0102 	orr.w	r1, r3, r2
 800da0e:	9b04      	ldr	r3, [sp, #16]
 800da10:	430b      	orrs	r3, r1
 800da12:	464d      	mov	r5, r9
 800da14:	d10f      	bne.n	800da36 <_dtoa_r+0xa66>
 800da16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da1a:	d02a      	beq.n	800da72 <_dtoa_r+0xaa2>
 800da1c:	9b03      	ldr	r3, [sp, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	dd02      	ble.n	800da28 <_dtoa_r+0xa58>
 800da22:	9b02      	ldr	r3, [sp, #8]
 800da24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800da28:	f88b a000 	strb.w	sl, [fp]
 800da2c:	e775      	b.n	800d91a <_dtoa_r+0x94a>
 800da2e:	4638      	mov	r0, r7
 800da30:	e7ba      	b.n	800d9a8 <_dtoa_r+0x9d8>
 800da32:	2201      	movs	r2, #1
 800da34:	e7e2      	b.n	800d9fc <_dtoa_r+0xa2c>
 800da36:	9b03      	ldr	r3, [sp, #12]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	db04      	blt.n	800da46 <_dtoa_r+0xa76>
 800da3c:	9906      	ldr	r1, [sp, #24]
 800da3e:	430b      	orrs	r3, r1
 800da40:	9904      	ldr	r1, [sp, #16]
 800da42:	430b      	orrs	r3, r1
 800da44:	d122      	bne.n	800da8c <_dtoa_r+0xabc>
 800da46:	2a00      	cmp	r2, #0
 800da48:	ddee      	ble.n	800da28 <_dtoa_r+0xa58>
 800da4a:	ee18 1a10 	vmov	r1, s16
 800da4e:	2201      	movs	r2, #1
 800da50:	4620      	mov	r0, r4
 800da52:	f000 ffdb 	bl	800ea0c <__lshift>
 800da56:	4631      	mov	r1, r6
 800da58:	ee08 0a10 	vmov	s16, r0
 800da5c:	f001 f846 	bl	800eaec <__mcmp>
 800da60:	2800      	cmp	r0, #0
 800da62:	dc03      	bgt.n	800da6c <_dtoa_r+0xa9c>
 800da64:	d1e0      	bne.n	800da28 <_dtoa_r+0xa58>
 800da66:	f01a 0f01 	tst.w	sl, #1
 800da6a:	d0dd      	beq.n	800da28 <_dtoa_r+0xa58>
 800da6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da70:	d1d7      	bne.n	800da22 <_dtoa_r+0xa52>
 800da72:	2339      	movs	r3, #57	; 0x39
 800da74:	f88b 3000 	strb.w	r3, [fp]
 800da78:	462b      	mov	r3, r5
 800da7a:	461d      	mov	r5, r3
 800da7c:	3b01      	subs	r3, #1
 800da7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da82:	2a39      	cmp	r2, #57	; 0x39
 800da84:	d071      	beq.n	800db6a <_dtoa_r+0xb9a>
 800da86:	3201      	adds	r2, #1
 800da88:	701a      	strb	r2, [r3, #0]
 800da8a:	e746      	b.n	800d91a <_dtoa_r+0x94a>
 800da8c:	2a00      	cmp	r2, #0
 800da8e:	dd07      	ble.n	800daa0 <_dtoa_r+0xad0>
 800da90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da94:	d0ed      	beq.n	800da72 <_dtoa_r+0xaa2>
 800da96:	f10a 0301 	add.w	r3, sl, #1
 800da9a:	f88b 3000 	strb.w	r3, [fp]
 800da9e:	e73c      	b.n	800d91a <_dtoa_r+0x94a>
 800daa0:	9b05      	ldr	r3, [sp, #20]
 800daa2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800daa6:	4599      	cmp	r9, r3
 800daa8:	d047      	beq.n	800db3a <_dtoa_r+0xb6a>
 800daaa:	ee18 1a10 	vmov	r1, s16
 800daae:	2300      	movs	r3, #0
 800dab0:	220a      	movs	r2, #10
 800dab2:	4620      	mov	r0, r4
 800dab4:	f000 fdb0 	bl	800e618 <__multadd>
 800dab8:	45b8      	cmp	r8, r7
 800daba:	ee08 0a10 	vmov	s16, r0
 800dabe:	f04f 0300 	mov.w	r3, #0
 800dac2:	f04f 020a 	mov.w	r2, #10
 800dac6:	4641      	mov	r1, r8
 800dac8:	4620      	mov	r0, r4
 800daca:	d106      	bne.n	800dada <_dtoa_r+0xb0a>
 800dacc:	f000 fda4 	bl	800e618 <__multadd>
 800dad0:	4680      	mov	r8, r0
 800dad2:	4607      	mov	r7, r0
 800dad4:	f109 0901 	add.w	r9, r9, #1
 800dad8:	e772      	b.n	800d9c0 <_dtoa_r+0x9f0>
 800dada:	f000 fd9d 	bl	800e618 <__multadd>
 800dade:	4639      	mov	r1, r7
 800dae0:	4680      	mov	r8, r0
 800dae2:	2300      	movs	r3, #0
 800dae4:	220a      	movs	r2, #10
 800dae6:	4620      	mov	r0, r4
 800dae8:	f000 fd96 	bl	800e618 <__multadd>
 800daec:	4607      	mov	r7, r0
 800daee:	e7f1      	b.n	800dad4 <_dtoa_r+0xb04>
 800daf0:	9b03      	ldr	r3, [sp, #12]
 800daf2:	9302      	str	r3, [sp, #8]
 800daf4:	9d01      	ldr	r5, [sp, #4]
 800daf6:	ee18 0a10 	vmov	r0, s16
 800dafa:	4631      	mov	r1, r6
 800dafc:	f7ff f9dc 	bl	800ceb8 <quorem>
 800db00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800db04:	9b01      	ldr	r3, [sp, #4]
 800db06:	f805 ab01 	strb.w	sl, [r5], #1
 800db0a:	1aea      	subs	r2, r5, r3
 800db0c:	9b02      	ldr	r3, [sp, #8]
 800db0e:	4293      	cmp	r3, r2
 800db10:	dd09      	ble.n	800db26 <_dtoa_r+0xb56>
 800db12:	ee18 1a10 	vmov	r1, s16
 800db16:	2300      	movs	r3, #0
 800db18:	220a      	movs	r2, #10
 800db1a:	4620      	mov	r0, r4
 800db1c:	f000 fd7c 	bl	800e618 <__multadd>
 800db20:	ee08 0a10 	vmov	s16, r0
 800db24:	e7e7      	b.n	800daf6 <_dtoa_r+0xb26>
 800db26:	9b02      	ldr	r3, [sp, #8]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	bfc8      	it	gt
 800db2c:	461d      	movgt	r5, r3
 800db2e:	9b01      	ldr	r3, [sp, #4]
 800db30:	bfd8      	it	le
 800db32:	2501      	movle	r5, #1
 800db34:	441d      	add	r5, r3
 800db36:	f04f 0800 	mov.w	r8, #0
 800db3a:	ee18 1a10 	vmov	r1, s16
 800db3e:	2201      	movs	r2, #1
 800db40:	4620      	mov	r0, r4
 800db42:	f000 ff63 	bl	800ea0c <__lshift>
 800db46:	4631      	mov	r1, r6
 800db48:	ee08 0a10 	vmov	s16, r0
 800db4c:	f000 ffce 	bl	800eaec <__mcmp>
 800db50:	2800      	cmp	r0, #0
 800db52:	dc91      	bgt.n	800da78 <_dtoa_r+0xaa8>
 800db54:	d102      	bne.n	800db5c <_dtoa_r+0xb8c>
 800db56:	f01a 0f01 	tst.w	sl, #1
 800db5a:	d18d      	bne.n	800da78 <_dtoa_r+0xaa8>
 800db5c:	462b      	mov	r3, r5
 800db5e:	461d      	mov	r5, r3
 800db60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db64:	2a30      	cmp	r2, #48	; 0x30
 800db66:	d0fa      	beq.n	800db5e <_dtoa_r+0xb8e>
 800db68:	e6d7      	b.n	800d91a <_dtoa_r+0x94a>
 800db6a:	9a01      	ldr	r2, [sp, #4]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d184      	bne.n	800da7a <_dtoa_r+0xaaa>
 800db70:	9b00      	ldr	r3, [sp, #0]
 800db72:	3301      	adds	r3, #1
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	2331      	movs	r3, #49	; 0x31
 800db78:	7013      	strb	r3, [r2, #0]
 800db7a:	e6ce      	b.n	800d91a <_dtoa_r+0x94a>
 800db7c:	4b09      	ldr	r3, [pc, #36]	; (800dba4 <_dtoa_r+0xbd4>)
 800db7e:	f7ff ba95 	b.w	800d0ac <_dtoa_r+0xdc>
 800db82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db84:	2b00      	cmp	r3, #0
 800db86:	f47f aa6e 	bne.w	800d066 <_dtoa_r+0x96>
 800db8a:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <_dtoa_r+0xbd8>)
 800db8c:	f7ff ba8e 	b.w	800d0ac <_dtoa_r+0xdc>
 800db90:	9b02      	ldr	r3, [sp, #8]
 800db92:	2b00      	cmp	r3, #0
 800db94:	dcae      	bgt.n	800daf4 <_dtoa_r+0xb24>
 800db96:	9b06      	ldr	r3, [sp, #24]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	f73f aea8 	bgt.w	800d8ee <_dtoa_r+0x91e>
 800db9e:	e7a9      	b.n	800daf4 <_dtoa_r+0xb24>
 800dba0:	08010e20 	.word	0x08010e20
 800dba4:	08010c24 	.word	0x08010c24
 800dba8:	08010da1 	.word	0x08010da1

0800dbac <__sflush_r>:
 800dbac:	898a      	ldrh	r2, [r1, #12]
 800dbae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	0710      	lsls	r0, r2, #28
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	d458      	bmi.n	800dc6c <__sflush_r+0xc0>
 800dbba:	684b      	ldr	r3, [r1, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	dc05      	bgt.n	800dbcc <__sflush_r+0x20>
 800dbc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	dc02      	bgt.n	800dbcc <__sflush_r+0x20>
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbce:	2e00      	cmp	r6, #0
 800dbd0:	d0f9      	beq.n	800dbc6 <__sflush_r+0x1a>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbd8:	682f      	ldr	r7, [r5, #0]
 800dbda:	602b      	str	r3, [r5, #0]
 800dbdc:	d032      	beq.n	800dc44 <__sflush_r+0x98>
 800dbde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbe0:	89a3      	ldrh	r3, [r4, #12]
 800dbe2:	075a      	lsls	r2, r3, #29
 800dbe4:	d505      	bpl.n	800dbf2 <__sflush_r+0x46>
 800dbe6:	6863      	ldr	r3, [r4, #4]
 800dbe8:	1ac0      	subs	r0, r0, r3
 800dbea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbec:	b10b      	cbz	r3, 800dbf2 <__sflush_r+0x46>
 800dbee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbf0:	1ac0      	subs	r0, r0, r3
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbf8:	6a21      	ldr	r1, [r4, #32]
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	47b0      	blx	r6
 800dbfe:	1c43      	adds	r3, r0, #1
 800dc00:	89a3      	ldrh	r3, [r4, #12]
 800dc02:	d106      	bne.n	800dc12 <__sflush_r+0x66>
 800dc04:	6829      	ldr	r1, [r5, #0]
 800dc06:	291d      	cmp	r1, #29
 800dc08:	d82c      	bhi.n	800dc64 <__sflush_r+0xb8>
 800dc0a:	4a2a      	ldr	r2, [pc, #168]	; (800dcb4 <__sflush_r+0x108>)
 800dc0c:	40ca      	lsrs	r2, r1
 800dc0e:	07d6      	lsls	r6, r2, #31
 800dc10:	d528      	bpl.n	800dc64 <__sflush_r+0xb8>
 800dc12:	2200      	movs	r2, #0
 800dc14:	6062      	str	r2, [r4, #4]
 800dc16:	04d9      	lsls	r1, r3, #19
 800dc18:	6922      	ldr	r2, [r4, #16]
 800dc1a:	6022      	str	r2, [r4, #0]
 800dc1c:	d504      	bpl.n	800dc28 <__sflush_r+0x7c>
 800dc1e:	1c42      	adds	r2, r0, #1
 800dc20:	d101      	bne.n	800dc26 <__sflush_r+0x7a>
 800dc22:	682b      	ldr	r3, [r5, #0]
 800dc24:	b903      	cbnz	r3, 800dc28 <__sflush_r+0x7c>
 800dc26:	6560      	str	r0, [r4, #84]	; 0x54
 800dc28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc2a:	602f      	str	r7, [r5, #0]
 800dc2c:	2900      	cmp	r1, #0
 800dc2e:	d0ca      	beq.n	800dbc6 <__sflush_r+0x1a>
 800dc30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc34:	4299      	cmp	r1, r3
 800dc36:	d002      	beq.n	800dc3e <__sflush_r+0x92>
 800dc38:	4628      	mov	r0, r5
 800dc3a:	f001 f963 	bl	800ef04 <_free_r>
 800dc3e:	2000      	movs	r0, #0
 800dc40:	6360      	str	r0, [r4, #52]	; 0x34
 800dc42:	e7c1      	b.n	800dbc8 <__sflush_r+0x1c>
 800dc44:	6a21      	ldr	r1, [r4, #32]
 800dc46:	2301      	movs	r3, #1
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b0      	blx	r6
 800dc4c:	1c41      	adds	r1, r0, #1
 800dc4e:	d1c7      	bne.n	800dbe0 <__sflush_r+0x34>
 800dc50:	682b      	ldr	r3, [r5, #0]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0c4      	beq.n	800dbe0 <__sflush_r+0x34>
 800dc56:	2b1d      	cmp	r3, #29
 800dc58:	d001      	beq.n	800dc5e <__sflush_r+0xb2>
 800dc5a:	2b16      	cmp	r3, #22
 800dc5c:	d101      	bne.n	800dc62 <__sflush_r+0xb6>
 800dc5e:	602f      	str	r7, [r5, #0]
 800dc60:	e7b1      	b.n	800dbc6 <__sflush_r+0x1a>
 800dc62:	89a3      	ldrh	r3, [r4, #12]
 800dc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	e7ad      	b.n	800dbc8 <__sflush_r+0x1c>
 800dc6c:	690f      	ldr	r7, [r1, #16]
 800dc6e:	2f00      	cmp	r7, #0
 800dc70:	d0a9      	beq.n	800dbc6 <__sflush_r+0x1a>
 800dc72:	0793      	lsls	r3, r2, #30
 800dc74:	680e      	ldr	r6, [r1, #0]
 800dc76:	bf08      	it	eq
 800dc78:	694b      	ldreq	r3, [r1, #20]
 800dc7a:	600f      	str	r7, [r1, #0]
 800dc7c:	bf18      	it	ne
 800dc7e:	2300      	movne	r3, #0
 800dc80:	eba6 0807 	sub.w	r8, r6, r7
 800dc84:	608b      	str	r3, [r1, #8]
 800dc86:	f1b8 0f00 	cmp.w	r8, #0
 800dc8a:	dd9c      	ble.n	800dbc6 <__sflush_r+0x1a>
 800dc8c:	6a21      	ldr	r1, [r4, #32]
 800dc8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc90:	4643      	mov	r3, r8
 800dc92:	463a      	mov	r2, r7
 800dc94:	4628      	mov	r0, r5
 800dc96:	47b0      	blx	r6
 800dc98:	2800      	cmp	r0, #0
 800dc9a:	dc06      	bgt.n	800dcaa <__sflush_r+0xfe>
 800dc9c:	89a3      	ldrh	r3, [r4, #12]
 800dc9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca2:	81a3      	strh	r3, [r4, #12]
 800dca4:	f04f 30ff 	mov.w	r0, #4294967295
 800dca8:	e78e      	b.n	800dbc8 <__sflush_r+0x1c>
 800dcaa:	4407      	add	r7, r0
 800dcac:	eba8 0800 	sub.w	r8, r8, r0
 800dcb0:	e7e9      	b.n	800dc86 <__sflush_r+0xda>
 800dcb2:	bf00      	nop
 800dcb4:	20400001 	.word	0x20400001

0800dcb8 <_fflush_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	690b      	ldr	r3, [r1, #16]
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	b913      	cbnz	r3, 800dcc8 <_fflush_r+0x10>
 800dcc2:	2500      	movs	r5, #0
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
 800dcc8:	b118      	cbz	r0, 800dcd2 <_fflush_r+0x1a>
 800dcca:	6983      	ldr	r3, [r0, #24]
 800dccc:	b90b      	cbnz	r3, 800dcd2 <_fflush_r+0x1a>
 800dcce:	f7fc ff51 	bl	800ab74 <__sinit>
 800dcd2:	4b14      	ldr	r3, [pc, #80]	; (800dd24 <_fflush_r+0x6c>)
 800dcd4:	429c      	cmp	r4, r3
 800dcd6:	d11b      	bne.n	800dd10 <_fflush_r+0x58>
 800dcd8:	686c      	ldr	r4, [r5, #4]
 800dcda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d0ef      	beq.n	800dcc2 <_fflush_r+0xa>
 800dce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dce4:	07d0      	lsls	r0, r2, #31
 800dce6:	d404      	bmi.n	800dcf2 <_fflush_r+0x3a>
 800dce8:	0599      	lsls	r1, r3, #22
 800dcea:	d402      	bmi.n	800dcf2 <_fflush_r+0x3a>
 800dcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcee:	f7fd f804 	bl	800acfa <__retarget_lock_acquire_recursive>
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	f7ff ff59 	bl	800dbac <__sflush_r>
 800dcfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcfc:	07da      	lsls	r2, r3, #31
 800dcfe:	4605      	mov	r5, r0
 800dd00:	d4e0      	bmi.n	800dcc4 <_fflush_r+0xc>
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	059b      	lsls	r3, r3, #22
 800dd06:	d4dd      	bmi.n	800dcc4 <_fflush_r+0xc>
 800dd08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd0a:	f7fc fff7 	bl	800acfc <__retarget_lock_release_recursive>
 800dd0e:	e7d9      	b.n	800dcc4 <_fflush_r+0xc>
 800dd10:	4b05      	ldr	r3, [pc, #20]	; (800dd28 <_fflush_r+0x70>)
 800dd12:	429c      	cmp	r4, r3
 800dd14:	d101      	bne.n	800dd1a <_fflush_r+0x62>
 800dd16:	68ac      	ldr	r4, [r5, #8]
 800dd18:	e7df      	b.n	800dcda <_fflush_r+0x22>
 800dd1a:	4b04      	ldr	r3, [pc, #16]	; (800dd2c <_fflush_r+0x74>)
 800dd1c:	429c      	cmp	r4, r3
 800dd1e:	bf08      	it	eq
 800dd20:	68ec      	ldreq	r4, [r5, #12]
 800dd22:	e7da      	b.n	800dcda <_fflush_r+0x22>
 800dd24:	08010bd0 	.word	0x08010bd0
 800dd28:	08010bf0 	.word	0x08010bf0
 800dd2c:	08010bb0 	.word	0x08010bb0

0800dd30 <rshift>:
 800dd30:	6903      	ldr	r3, [r0, #16]
 800dd32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd3e:	f100 0414 	add.w	r4, r0, #20
 800dd42:	dd45      	ble.n	800ddd0 <rshift+0xa0>
 800dd44:	f011 011f 	ands.w	r1, r1, #31
 800dd48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dd4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dd50:	d10c      	bne.n	800dd6c <rshift+0x3c>
 800dd52:	f100 0710 	add.w	r7, r0, #16
 800dd56:	4629      	mov	r1, r5
 800dd58:	42b1      	cmp	r1, r6
 800dd5a:	d334      	bcc.n	800ddc6 <rshift+0x96>
 800dd5c:	1a9b      	subs	r3, r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	1eea      	subs	r2, r5, #3
 800dd62:	4296      	cmp	r6, r2
 800dd64:	bf38      	it	cc
 800dd66:	2300      	movcc	r3, #0
 800dd68:	4423      	add	r3, r4
 800dd6a:	e015      	b.n	800dd98 <rshift+0x68>
 800dd6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dd70:	f1c1 0820 	rsb	r8, r1, #32
 800dd74:	40cf      	lsrs	r7, r1
 800dd76:	f105 0e04 	add.w	lr, r5, #4
 800dd7a:	46a1      	mov	r9, r4
 800dd7c:	4576      	cmp	r6, lr
 800dd7e:	46f4      	mov	ip, lr
 800dd80:	d815      	bhi.n	800ddae <rshift+0x7e>
 800dd82:	1a9a      	subs	r2, r3, r2
 800dd84:	0092      	lsls	r2, r2, #2
 800dd86:	3a04      	subs	r2, #4
 800dd88:	3501      	adds	r5, #1
 800dd8a:	42ae      	cmp	r6, r5
 800dd8c:	bf38      	it	cc
 800dd8e:	2200      	movcc	r2, #0
 800dd90:	18a3      	adds	r3, r4, r2
 800dd92:	50a7      	str	r7, [r4, r2]
 800dd94:	b107      	cbz	r7, 800dd98 <rshift+0x68>
 800dd96:	3304      	adds	r3, #4
 800dd98:	1b1a      	subs	r2, r3, r4
 800dd9a:	42a3      	cmp	r3, r4
 800dd9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dda0:	bf08      	it	eq
 800dda2:	2300      	moveq	r3, #0
 800dda4:	6102      	str	r2, [r0, #16]
 800dda6:	bf08      	it	eq
 800dda8:	6143      	streq	r3, [r0, #20]
 800ddaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddae:	f8dc c000 	ldr.w	ip, [ip]
 800ddb2:	fa0c fc08 	lsl.w	ip, ip, r8
 800ddb6:	ea4c 0707 	orr.w	r7, ip, r7
 800ddba:	f849 7b04 	str.w	r7, [r9], #4
 800ddbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ddc2:	40cf      	lsrs	r7, r1
 800ddc4:	e7da      	b.n	800dd7c <rshift+0x4c>
 800ddc6:	f851 cb04 	ldr.w	ip, [r1], #4
 800ddca:	f847 cf04 	str.w	ip, [r7, #4]!
 800ddce:	e7c3      	b.n	800dd58 <rshift+0x28>
 800ddd0:	4623      	mov	r3, r4
 800ddd2:	e7e1      	b.n	800dd98 <rshift+0x68>

0800ddd4 <__hexdig_fun>:
 800ddd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ddd8:	2b09      	cmp	r3, #9
 800ddda:	d802      	bhi.n	800dde2 <__hexdig_fun+0xe>
 800dddc:	3820      	subs	r0, #32
 800ddde:	b2c0      	uxtb	r0, r0
 800dde0:	4770      	bx	lr
 800dde2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dde6:	2b05      	cmp	r3, #5
 800dde8:	d801      	bhi.n	800ddee <__hexdig_fun+0x1a>
 800ddea:	3847      	subs	r0, #71	; 0x47
 800ddec:	e7f7      	b.n	800ddde <__hexdig_fun+0xa>
 800ddee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ddf2:	2b05      	cmp	r3, #5
 800ddf4:	d801      	bhi.n	800ddfa <__hexdig_fun+0x26>
 800ddf6:	3827      	subs	r0, #39	; 0x27
 800ddf8:	e7f1      	b.n	800ddde <__hexdig_fun+0xa>
 800ddfa:	2000      	movs	r0, #0
 800ddfc:	4770      	bx	lr
	...

0800de00 <__gethex>:
 800de00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de04:	ed2d 8b02 	vpush	{d8}
 800de08:	b089      	sub	sp, #36	; 0x24
 800de0a:	ee08 0a10 	vmov	s16, r0
 800de0e:	9304      	str	r3, [sp, #16]
 800de10:	4bb4      	ldr	r3, [pc, #720]	; (800e0e4 <__gethex+0x2e4>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	4618      	mov	r0, r3
 800de18:	468b      	mov	fp, r1
 800de1a:	4690      	mov	r8, r2
 800de1c:	f7f2 f9f2 	bl	8000204 <strlen>
 800de20:	9b01      	ldr	r3, [sp, #4]
 800de22:	f8db 2000 	ldr.w	r2, [fp]
 800de26:	4403      	add	r3, r0
 800de28:	4682      	mov	sl, r0
 800de2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800de2e:	9305      	str	r3, [sp, #20]
 800de30:	1c93      	adds	r3, r2, #2
 800de32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800de36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800de3a:	32fe      	adds	r2, #254	; 0xfe
 800de3c:	18d1      	adds	r1, r2, r3
 800de3e:	461f      	mov	r7, r3
 800de40:	f813 0b01 	ldrb.w	r0, [r3], #1
 800de44:	9100      	str	r1, [sp, #0]
 800de46:	2830      	cmp	r0, #48	; 0x30
 800de48:	d0f8      	beq.n	800de3c <__gethex+0x3c>
 800de4a:	f7ff ffc3 	bl	800ddd4 <__hexdig_fun>
 800de4e:	4604      	mov	r4, r0
 800de50:	2800      	cmp	r0, #0
 800de52:	d13a      	bne.n	800deca <__gethex+0xca>
 800de54:	9901      	ldr	r1, [sp, #4]
 800de56:	4652      	mov	r2, sl
 800de58:	4638      	mov	r0, r7
 800de5a:	f001 fb71 	bl	800f540 <strncmp>
 800de5e:	4605      	mov	r5, r0
 800de60:	2800      	cmp	r0, #0
 800de62:	d168      	bne.n	800df36 <__gethex+0x136>
 800de64:	f817 000a 	ldrb.w	r0, [r7, sl]
 800de68:	eb07 060a 	add.w	r6, r7, sl
 800de6c:	f7ff ffb2 	bl	800ddd4 <__hexdig_fun>
 800de70:	2800      	cmp	r0, #0
 800de72:	d062      	beq.n	800df3a <__gethex+0x13a>
 800de74:	4633      	mov	r3, r6
 800de76:	7818      	ldrb	r0, [r3, #0]
 800de78:	2830      	cmp	r0, #48	; 0x30
 800de7a:	461f      	mov	r7, r3
 800de7c:	f103 0301 	add.w	r3, r3, #1
 800de80:	d0f9      	beq.n	800de76 <__gethex+0x76>
 800de82:	f7ff ffa7 	bl	800ddd4 <__hexdig_fun>
 800de86:	2301      	movs	r3, #1
 800de88:	fab0 f480 	clz	r4, r0
 800de8c:	0964      	lsrs	r4, r4, #5
 800de8e:	4635      	mov	r5, r6
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	463a      	mov	r2, r7
 800de94:	4616      	mov	r6, r2
 800de96:	3201      	adds	r2, #1
 800de98:	7830      	ldrb	r0, [r6, #0]
 800de9a:	f7ff ff9b 	bl	800ddd4 <__hexdig_fun>
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d1f8      	bne.n	800de94 <__gethex+0x94>
 800dea2:	9901      	ldr	r1, [sp, #4]
 800dea4:	4652      	mov	r2, sl
 800dea6:	4630      	mov	r0, r6
 800dea8:	f001 fb4a 	bl	800f540 <strncmp>
 800deac:	b980      	cbnz	r0, 800ded0 <__gethex+0xd0>
 800deae:	b94d      	cbnz	r5, 800dec4 <__gethex+0xc4>
 800deb0:	eb06 050a 	add.w	r5, r6, sl
 800deb4:	462a      	mov	r2, r5
 800deb6:	4616      	mov	r6, r2
 800deb8:	3201      	adds	r2, #1
 800deba:	7830      	ldrb	r0, [r6, #0]
 800debc:	f7ff ff8a 	bl	800ddd4 <__hexdig_fun>
 800dec0:	2800      	cmp	r0, #0
 800dec2:	d1f8      	bne.n	800deb6 <__gethex+0xb6>
 800dec4:	1bad      	subs	r5, r5, r6
 800dec6:	00ad      	lsls	r5, r5, #2
 800dec8:	e004      	b.n	800ded4 <__gethex+0xd4>
 800deca:	2400      	movs	r4, #0
 800decc:	4625      	mov	r5, r4
 800dece:	e7e0      	b.n	800de92 <__gethex+0x92>
 800ded0:	2d00      	cmp	r5, #0
 800ded2:	d1f7      	bne.n	800dec4 <__gethex+0xc4>
 800ded4:	7833      	ldrb	r3, [r6, #0]
 800ded6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800deda:	2b50      	cmp	r3, #80	; 0x50
 800dedc:	d13b      	bne.n	800df56 <__gethex+0x156>
 800dede:	7873      	ldrb	r3, [r6, #1]
 800dee0:	2b2b      	cmp	r3, #43	; 0x2b
 800dee2:	d02c      	beq.n	800df3e <__gethex+0x13e>
 800dee4:	2b2d      	cmp	r3, #45	; 0x2d
 800dee6:	d02e      	beq.n	800df46 <__gethex+0x146>
 800dee8:	1c71      	adds	r1, r6, #1
 800deea:	f04f 0900 	mov.w	r9, #0
 800deee:	7808      	ldrb	r0, [r1, #0]
 800def0:	f7ff ff70 	bl	800ddd4 <__hexdig_fun>
 800def4:	1e43      	subs	r3, r0, #1
 800def6:	b2db      	uxtb	r3, r3
 800def8:	2b18      	cmp	r3, #24
 800defa:	d82c      	bhi.n	800df56 <__gethex+0x156>
 800defc:	f1a0 0210 	sub.w	r2, r0, #16
 800df00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df04:	f7ff ff66 	bl	800ddd4 <__hexdig_fun>
 800df08:	1e43      	subs	r3, r0, #1
 800df0a:	b2db      	uxtb	r3, r3
 800df0c:	2b18      	cmp	r3, #24
 800df0e:	d91d      	bls.n	800df4c <__gethex+0x14c>
 800df10:	f1b9 0f00 	cmp.w	r9, #0
 800df14:	d000      	beq.n	800df18 <__gethex+0x118>
 800df16:	4252      	negs	r2, r2
 800df18:	4415      	add	r5, r2
 800df1a:	f8cb 1000 	str.w	r1, [fp]
 800df1e:	b1e4      	cbz	r4, 800df5a <__gethex+0x15a>
 800df20:	9b00      	ldr	r3, [sp, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	bf14      	ite	ne
 800df26:	2700      	movne	r7, #0
 800df28:	2706      	moveq	r7, #6
 800df2a:	4638      	mov	r0, r7
 800df2c:	b009      	add	sp, #36	; 0x24
 800df2e:	ecbd 8b02 	vpop	{d8}
 800df32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df36:	463e      	mov	r6, r7
 800df38:	4625      	mov	r5, r4
 800df3a:	2401      	movs	r4, #1
 800df3c:	e7ca      	b.n	800ded4 <__gethex+0xd4>
 800df3e:	f04f 0900 	mov.w	r9, #0
 800df42:	1cb1      	adds	r1, r6, #2
 800df44:	e7d3      	b.n	800deee <__gethex+0xee>
 800df46:	f04f 0901 	mov.w	r9, #1
 800df4a:	e7fa      	b.n	800df42 <__gethex+0x142>
 800df4c:	230a      	movs	r3, #10
 800df4e:	fb03 0202 	mla	r2, r3, r2, r0
 800df52:	3a10      	subs	r2, #16
 800df54:	e7d4      	b.n	800df00 <__gethex+0x100>
 800df56:	4631      	mov	r1, r6
 800df58:	e7df      	b.n	800df1a <__gethex+0x11a>
 800df5a:	1bf3      	subs	r3, r6, r7
 800df5c:	3b01      	subs	r3, #1
 800df5e:	4621      	mov	r1, r4
 800df60:	2b07      	cmp	r3, #7
 800df62:	dc0b      	bgt.n	800df7c <__gethex+0x17c>
 800df64:	ee18 0a10 	vmov	r0, s16
 800df68:	f000 faf4 	bl	800e554 <_Balloc>
 800df6c:	4604      	mov	r4, r0
 800df6e:	b940      	cbnz	r0, 800df82 <__gethex+0x182>
 800df70:	4b5d      	ldr	r3, [pc, #372]	; (800e0e8 <__gethex+0x2e8>)
 800df72:	4602      	mov	r2, r0
 800df74:	21de      	movs	r1, #222	; 0xde
 800df76:	485d      	ldr	r0, [pc, #372]	; (800e0ec <__gethex+0x2ec>)
 800df78:	f001 fb04 	bl	800f584 <__assert_func>
 800df7c:	3101      	adds	r1, #1
 800df7e:	105b      	asrs	r3, r3, #1
 800df80:	e7ee      	b.n	800df60 <__gethex+0x160>
 800df82:	f100 0914 	add.w	r9, r0, #20
 800df86:	f04f 0b00 	mov.w	fp, #0
 800df8a:	f1ca 0301 	rsb	r3, sl, #1
 800df8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800df92:	f8cd b000 	str.w	fp, [sp]
 800df96:	9306      	str	r3, [sp, #24]
 800df98:	42b7      	cmp	r7, r6
 800df9a:	d340      	bcc.n	800e01e <__gethex+0x21e>
 800df9c:	9802      	ldr	r0, [sp, #8]
 800df9e:	9b00      	ldr	r3, [sp, #0]
 800dfa0:	f840 3b04 	str.w	r3, [r0], #4
 800dfa4:	eba0 0009 	sub.w	r0, r0, r9
 800dfa8:	1080      	asrs	r0, r0, #2
 800dfaa:	0146      	lsls	r6, r0, #5
 800dfac:	6120      	str	r0, [r4, #16]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 fbc2 	bl	800e738 <__hi0bits>
 800dfb4:	1a30      	subs	r0, r6, r0
 800dfb6:	f8d8 6000 	ldr.w	r6, [r8]
 800dfba:	42b0      	cmp	r0, r6
 800dfbc:	dd63      	ble.n	800e086 <__gethex+0x286>
 800dfbe:	1b87      	subs	r7, r0, r6
 800dfc0:	4639      	mov	r1, r7
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f000 ff66 	bl	800ee94 <__any_on>
 800dfc8:	4682      	mov	sl, r0
 800dfca:	b1a8      	cbz	r0, 800dff8 <__gethex+0x1f8>
 800dfcc:	1e7b      	subs	r3, r7, #1
 800dfce:	1159      	asrs	r1, r3, #5
 800dfd0:	f003 021f 	and.w	r2, r3, #31
 800dfd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dfd8:	f04f 0a01 	mov.w	sl, #1
 800dfdc:	fa0a f202 	lsl.w	r2, sl, r2
 800dfe0:	420a      	tst	r2, r1
 800dfe2:	d009      	beq.n	800dff8 <__gethex+0x1f8>
 800dfe4:	4553      	cmp	r3, sl
 800dfe6:	dd05      	ble.n	800dff4 <__gethex+0x1f4>
 800dfe8:	1eb9      	subs	r1, r7, #2
 800dfea:	4620      	mov	r0, r4
 800dfec:	f000 ff52 	bl	800ee94 <__any_on>
 800dff0:	2800      	cmp	r0, #0
 800dff2:	d145      	bne.n	800e080 <__gethex+0x280>
 800dff4:	f04f 0a02 	mov.w	sl, #2
 800dff8:	4639      	mov	r1, r7
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7ff fe98 	bl	800dd30 <rshift>
 800e000:	443d      	add	r5, r7
 800e002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e006:	42ab      	cmp	r3, r5
 800e008:	da4c      	bge.n	800e0a4 <__gethex+0x2a4>
 800e00a:	ee18 0a10 	vmov	r0, s16
 800e00e:	4621      	mov	r1, r4
 800e010:	f000 fae0 	bl	800e5d4 <_Bfree>
 800e014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e016:	2300      	movs	r3, #0
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	27a3      	movs	r7, #163	; 0xa3
 800e01c:	e785      	b.n	800df2a <__gethex+0x12a>
 800e01e:	1e73      	subs	r3, r6, #1
 800e020:	9a05      	ldr	r2, [sp, #20]
 800e022:	9303      	str	r3, [sp, #12]
 800e024:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e028:	4293      	cmp	r3, r2
 800e02a:	d019      	beq.n	800e060 <__gethex+0x260>
 800e02c:	f1bb 0f20 	cmp.w	fp, #32
 800e030:	d107      	bne.n	800e042 <__gethex+0x242>
 800e032:	9b02      	ldr	r3, [sp, #8]
 800e034:	9a00      	ldr	r2, [sp, #0]
 800e036:	f843 2b04 	str.w	r2, [r3], #4
 800e03a:	9302      	str	r3, [sp, #8]
 800e03c:	2300      	movs	r3, #0
 800e03e:	9300      	str	r3, [sp, #0]
 800e040:	469b      	mov	fp, r3
 800e042:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e046:	f7ff fec5 	bl	800ddd4 <__hexdig_fun>
 800e04a:	9b00      	ldr	r3, [sp, #0]
 800e04c:	f000 000f 	and.w	r0, r0, #15
 800e050:	fa00 f00b 	lsl.w	r0, r0, fp
 800e054:	4303      	orrs	r3, r0
 800e056:	9300      	str	r3, [sp, #0]
 800e058:	f10b 0b04 	add.w	fp, fp, #4
 800e05c:	9b03      	ldr	r3, [sp, #12]
 800e05e:	e00d      	b.n	800e07c <__gethex+0x27c>
 800e060:	9b03      	ldr	r3, [sp, #12]
 800e062:	9a06      	ldr	r2, [sp, #24]
 800e064:	4413      	add	r3, r2
 800e066:	42bb      	cmp	r3, r7
 800e068:	d3e0      	bcc.n	800e02c <__gethex+0x22c>
 800e06a:	4618      	mov	r0, r3
 800e06c:	9901      	ldr	r1, [sp, #4]
 800e06e:	9307      	str	r3, [sp, #28]
 800e070:	4652      	mov	r2, sl
 800e072:	f001 fa65 	bl	800f540 <strncmp>
 800e076:	9b07      	ldr	r3, [sp, #28]
 800e078:	2800      	cmp	r0, #0
 800e07a:	d1d7      	bne.n	800e02c <__gethex+0x22c>
 800e07c:	461e      	mov	r6, r3
 800e07e:	e78b      	b.n	800df98 <__gethex+0x198>
 800e080:	f04f 0a03 	mov.w	sl, #3
 800e084:	e7b8      	b.n	800dff8 <__gethex+0x1f8>
 800e086:	da0a      	bge.n	800e09e <__gethex+0x29e>
 800e088:	1a37      	subs	r7, r6, r0
 800e08a:	4621      	mov	r1, r4
 800e08c:	ee18 0a10 	vmov	r0, s16
 800e090:	463a      	mov	r2, r7
 800e092:	f000 fcbb 	bl	800ea0c <__lshift>
 800e096:	1bed      	subs	r5, r5, r7
 800e098:	4604      	mov	r4, r0
 800e09a:	f100 0914 	add.w	r9, r0, #20
 800e09e:	f04f 0a00 	mov.w	sl, #0
 800e0a2:	e7ae      	b.n	800e002 <__gethex+0x202>
 800e0a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e0a8:	42a8      	cmp	r0, r5
 800e0aa:	dd72      	ble.n	800e192 <__gethex+0x392>
 800e0ac:	1b45      	subs	r5, r0, r5
 800e0ae:	42ae      	cmp	r6, r5
 800e0b0:	dc36      	bgt.n	800e120 <__gethex+0x320>
 800e0b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d02a      	beq.n	800e110 <__gethex+0x310>
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d02c      	beq.n	800e118 <__gethex+0x318>
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d11c      	bne.n	800e0fc <__gethex+0x2fc>
 800e0c2:	42ae      	cmp	r6, r5
 800e0c4:	d11a      	bne.n	800e0fc <__gethex+0x2fc>
 800e0c6:	2e01      	cmp	r6, #1
 800e0c8:	d112      	bne.n	800e0f0 <__gethex+0x2f0>
 800e0ca:	9a04      	ldr	r2, [sp, #16]
 800e0cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0d0:	6013      	str	r3, [r2, #0]
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	6123      	str	r3, [r4, #16]
 800e0d6:	f8c9 3000 	str.w	r3, [r9]
 800e0da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e0dc:	2762      	movs	r7, #98	; 0x62
 800e0de:	601c      	str	r4, [r3, #0]
 800e0e0:	e723      	b.n	800df2a <__gethex+0x12a>
 800e0e2:	bf00      	nop
 800e0e4:	08010e98 	.word	0x08010e98
 800e0e8:	08010e20 	.word	0x08010e20
 800e0ec:	08010e31 	.word	0x08010e31
 800e0f0:	1e71      	subs	r1, r6, #1
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	f000 fece 	bl	800ee94 <__any_on>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	d1e6      	bne.n	800e0ca <__gethex+0x2ca>
 800e0fc:	ee18 0a10 	vmov	r0, s16
 800e100:	4621      	mov	r1, r4
 800e102:	f000 fa67 	bl	800e5d4 <_Bfree>
 800e106:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e108:	2300      	movs	r3, #0
 800e10a:	6013      	str	r3, [r2, #0]
 800e10c:	2750      	movs	r7, #80	; 0x50
 800e10e:	e70c      	b.n	800df2a <__gethex+0x12a>
 800e110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1f2      	bne.n	800e0fc <__gethex+0x2fc>
 800e116:	e7d8      	b.n	800e0ca <__gethex+0x2ca>
 800e118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1d5      	bne.n	800e0ca <__gethex+0x2ca>
 800e11e:	e7ed      	b.n	800e0fc <__gethex+0x2fc>
 800e120:	1e6f      	subs	r7, r5, #1
 800e122:	f1ba 0f00 	cmp.w	sl, #0
 800e126:	d131      	bne.n	800e18c <__gethex+0x38c>
 800e128:	b127      	cbz	r7, 800e134 <__gethex+0x334>
 800e12a:	4639      	mov	r1, r7
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 feb1 	bl	800ee94 <__any_on>
 800e132:	4682      	mov	sl, r0
 800e134:	117b      	asrs	r3, r7, #5
 800e136:	2101      	movs	r1, #1
 800e138:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e13c:	f007 071f 	and.w	r7, r7, #31
 800e140:	fa01 f707 	lsl.w	r7, r1, r7
 800e144:	421f      	tst	r7, r3
 800e146:	4629      	mov	r1, r5
 800e148:	4620      	mov	r0, r4
 800e14a:	bf18      	it	ne
 800e14c:	f04a 0a02 	orrne.w	sl, sl, #2
 800e150:	1b76      	subs	r6, r6, r5
 800e152:	f7ff fded 	bl	800dd30 <rshift>
 800e156:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e15a:	2702      	movs	r7, #2
 800e15c:	f1ba 0f00 	cmp.w	sl, #0
 800e160:	d048      	beq.n	800e1f4 <__gethex+0x3f4>
 800e162:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e166:	2b02      	cmp	r3, #2
 800e168:	d015      	beq.n	800e196 <__gethex+0x396>
 800e16a:	2b03      	cmp	r3, #3
 800e16c:	d017      	beq.n	800e19e <__gethex+0x39e>
 800e16e:	2b01      	cmp	r3, #1
 800e170:	d109      	bne.n	800e186 <__gethex+0x386>
 800e172:	f01a 0f02 	tst.w	sl, #2
 800e176:	d006      	beq.n	800e186 <__gethex+0x386>
 800e178:	f8d9 0000 	ldr.w	r0, [r9]
 800e17c:	ea4a 0a00 	orr.w	sl, sl, r0
 800e180:	f01a 0f01 	tst.w	sl, #1
 800e184:	d10e      	bne.n	800e1a4 <__gethex+0x3a4>
 800e186:	f047 0710 	orr.w	r7, r7, #16
 800e18a:	e033      	b.n	800e1f4 <__gethex+0x3f4>
 800e18c:	f04f 0a01 	mov.w	sl, #1
 800e190:	e7d0      	b.n	800e134 <__gethex+0x334>
 800e192:	2701      	movs	r7, #1
 800e194:	e7e2      	b.n	800e15c <__gethex+0x35c>
 800e196:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e198:	f1c3 0301 	rsb	r3, r3, #1
 800e19c:	9315      	str	r3, [sp, #84]	; 0x54
 800e19e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d0f0      	beq.n	800e186 <__gethex+0x386>
 800e1a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e1a8:	f104 0314 	add.w	r3, r4, #20
 800e1ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e1b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e1b4:	f04f 0c00 	mov.w	ip, #0
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1be:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e1c2:	d01c      	beq.n	800e1fe <__gethex+0x3fe>
 800e1c4:	3201      	adds	r2, #1
 800e1c6:	6002      	str	r2, [r0, #0]
 800e1c8:	2f02      	cmp	r7, #2
 800e1ca:	f104 0314 	add.w	r3, r4, #20
 800e1ce:	d13f      	bne.n	800e250 <__gethex+0x450>
 800e1d0:	f8d8 2000 	ldr.w	r2, [r8]
 800e1d4:	3a01      	subs	r2, #1
 800e1d6:	42b2      	cmp	r2, r6
 800e1d8:	d10a      	bne.n	800e1f0 <__gethex+0x3f0>
 800e1da:	1171      	asrs	r1, r6, #5
 800e1dc:	2201      	movs	r2, #1
 800e1de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1e2:	f006 061f 	and.w	r6, r6, #31
 800e1e6:	fa02 f606 	lsl.w	r6, r2, r6
 800e1ea:	421e      	tst	r6, r3
 800e1ec:	bf18      	it	ne
 800e1ee:	4617      	movne	r7, r2
 800e1f0:	f047 0720 	orr.w	r7, r7, #32
 800e1f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e1f6:	601c      	str	r4, [r3, #0]
 800e1f8:	9b04      	ldr	r3, [sp, #16]
 800e1fa:	601d      	str	r5, [r3, #0]
 800e1fc:	e695      	b.n	800df2a <__gethex+0x12a>
 800e1fe:	4299      	cmp	r1, r3
 800e200:	f843 cc04 	str.w	ip, [r3, #-4]
 800e204:	d8d8      	bhi.n	800e1b8 <__gethex+0x3b8>
 800e206:	68a3      	ldr	r3, [r4, #8]
 800e208:	459b      	cmp	fp, r3
 800e20a:	db19      	blt.n	800e240 <__gethex+0x440>
 800e20c:	6861      	ldr	r1, [r4, #4]
 800e20e:	ee18 0a10 	vmov	r0, s16
 800e212:	3101      	adds	r1, #1
 800e214:	f000 f99e 	bl	800e554 <_Balloc>
 800e218:	4681      	mov	r9, r0
 800e21a:	b918      	cbnz	r0, 800e224 <__gethex+0x424>
 800e21c:	4b1a      	ldr	r3, [pc, #104]	; (800e288 <__gethex+0x488>)
 800e21e:	4602      	mov	r2, r0
 800e220:	2184      	movs	r1, #132	; 0x84
 800e222:	e6a8      	b.n	800df76 <__gethex+0x176>
 800e224:	6922      	ldr	r2, [r4, #16]
 800e226:	3202      	adds	r2, #2
 800e228:	f104 010c 	add.w	r1, r4, #12
 800e22c:	0092      	lsls	r2, r2, #2
 800e22e:	300c      	adds	r0, #12
 800e230:	f7fc fd65 	bl	800acfe <memcpy>
 800e234:	4621      	mov	r1, r4
 800e236:	ee18 0a10 	vmov	r0, s16
 800e23a:	f000 f9cb 	bl	800e5d4 <_Bfree>
 800e23e:	464c      	mov	r4, r9
 800e240:	6923      	ldr	r3, [r4, #16]
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e248:	6122      	str	r2, [r4, #16]
 800e24a:	2201      	movs	r2, #1
 800e24c:	615a      	str	r2, [r3, #20]
 800e24e:	e7bb      	b.n	800e1c8 <__gethex+0x3c8>
 800e250:	6922      	ldr	r2, [r4, #16]
 800e252:	455a      	cmp	r2, fp
 800e254:	dd0b      	ble.n	800e26e <__gethex+0x46e>
 800e256:	2101      	movs	r1, #1
 800e258:	4620      	mov	r0, r4
 800e25a:	f7ff fd69 	bl	800dd30 <rshift>
 800e25e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e262:	3501      	adds	r5, #1
 800e264:	42ab      	cmp	r3, r5
 800e266:	f6ff aed0 	blt.w	800e00a <__gethex+0x20a>
 800e26a:	2701      	movs	r7, #1
 800e26c:	e7c0      	b.n	800e1f0 <__gethex+0x3f0>
 800e26e:	f016 061f 	ands.w	r6, r6, #31
 800e272:	d0fa      	beq.n	800e26a <__gethex+0x46a>
 800e274:	4453      	add	r3, sl
 800e276:	f1c6 0620 	rsb	r6, r6, #32
 800e27a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e27e:	f000 fa5b 	bl	800e738 <__hi0bits>
 800e282:	42b0      	cmp	r0, r6
 800e284:	dbe7      	blt.n	800e256 <__gethex+0x456>
 800e286:	e7f0      	b.n	800e26a <__gethex+0x46a>
 800e288:	08010e20 	.word	0x08010e20

0800e28c <L_shift>:
 800e28c:	f1c2 0208 	rsb	r2, r2, #8
 800e290:	0092      	lsls	r2, r2, #2
 800e292:	b570      	push	{r4, r5, r6, lr}
 800e294:	f1c2 0620 	rsb	r6, r2, #32
 800e298:	6843      	ldr	r3, [r0, #4]
 800e29a:	6804      	ldr	r4, [r0, #0]
 800e29c:	fa03 f506 	lsl.w	r5, r3, r6
 800e2a0:	432c      	orrs	r4, r5
 800e2a2:	40d3      	lsrs	r3, r2
 800e2a4:	6004      	str	r4, [r0, #0]
 800e2a6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e2aa:	4288      	cmp	r0, r1
 800e2ac:	d3f4      	bcc.n	800e298 <L_shift+0xc>
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}

0800e2b0 <__match>:
 800e2b0:	b530      	push	{r4, r5, lr}
 800e2b2:	6803      	ldr	r3, [r0, #0]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2ba:	b914      	cbnz	r4, 800e2c2 <__match+0x12>
 800e2bc:	6003      	str	r3, [r0, #0]
 800e2be:	2001      	movs	r0, #1
 800e2c0:	bd30      	pop	{r4, r5, pc}
 800e2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e2ca:	2d19      	cmp	r5, #25
 800e2cc:	bf98      	it	ls
 800e2ce:	3220      	addls	r2, #32
 800e2d0:	42a2      	cmp	r2, r4
 800e2d2:	d0f0      	beq.n	800e2b6 <__match+0x6>
 800e2d4:	2000      	movs	r0, #0
 800e2d6:	e7f3      	b.n	800e2c0 <__match+0x10>

0800e2d8 <__hexnan>:
 800e2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2dc:	680b      	ldr	r3, [r1, #0]
 800e2de:	115e      	asrs	r6, r3, #5
 800e2e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2e4:	f013 031f 	ands.w	r3, r3, #31
 800e2e8:	b087      	sub	sp, #28
 800e2ea:	bf18      	it	ne
 800e2ec:	3604      	addne	r6, #4
 800e2ee:	2500      	movs	r5, #0
 800e2f0:	1f37      	subs	r7, r6, #4
 800e2f2:	4690      	mov	r8, r2
 800e2f4:	6802      	ldr	r2, [r0, #0]
 800e2f6:	9301      	str	r3, [sp, #4]
 800e2f8:	4682      	mov	sl, r0
 800e2fa:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2fe:	46b9      	mov	r9, r7
 800e300:	463c      	mov	r4, r7
 800e302:	9502      	str	r5, [sp, #8]
 800e304:	46ab      	mov	fp, r5
 800e306:	7851      	ldrb	r1, [r2, #1]
 800e308:	1c53      	adds	r3, r2, #1
 800e30a:	9303      	str	r3, [sp, #12]
 800e30c:	b341      	cbz	r1, 800e360 <__hexnan+0x88>
 800e30e:	4608      	mov	r0, r1
 800e310:	9205      	str	r2, [sp, #20]
 800e312:	9104      	str	r1, [sp, #16]
 800e314:	f7ff fd5e 	bl	800ddd4 <__hexdig_fun>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d14f      	bne.n	800e3bc <__hexnan+0xe4>
 800e31c:	9904      	ldr	r1, [sp, #16]
 800e31e:	9a05      	ldr	r2, [sp, #20]
 800e320:	2920      	cmp	r1, #32
 800e322:	d818      	bhi.n	800e356 <__hexnan+0x7e>
 800e324:	9b02      	ldr	r3, [sp, #8]
 800e326:	459b      	cmp	fp, r3
 800e328:	dd13      	ble.n	800e352 <__hexnan+0x7a>
 800e32a:	454c      	cmp	r4, r9
 800e32c:	d206      	bcs.n	800e33c <__hexnan+0x64>
 800e32e:	2d07      	cmp	r5, #7
 800e330:	dc04      	bgt.n	800e33c <__hexnan+0x64>
 800e332:	462a      	mov	r2, r5
 800e334:	4649      	mov	r1, r9
 800e336:	4620      	mov	r0, r4
 800e338:	f7ff ffa8 	bl	800e28c <L_shift>
 800e33c:	4544      	cmp	r4, r8
 800e33e:	d950      	bls.n	800e3e2 <__hexnan+0x10a>
 800e340:	2300      	movs	r3, #0
 800e342:	f1a4 0904 	sub.w	r9, r4, #4
 800e346:	f844 3c04 	str.w	r3, [r4, #-4]
 800e34a:	f8cd b008 	str.w	fp, [sp, #8]
 800e34e:	464c      	mov	r4, r9
 800e350:	461d      	mov	r5, r3
 800e352:	9a03      	ldr	r2, [sp, #12]
 800e354:	e7d7      	b.n	800e306 <__hexnan+0x2e>
 800e356:	2929      	cmp	r1, #41	; 0x29
 800e358:	d156      	bne.n	800e408 <__hexnan+0x130>
 800e35a:	3202      	adds	r2, #2
 800e35c:	f8ca 2000 	str.w	r2, [sl]
 800e360:	f1bb 0f00 	cmp.w	fp, #0
 800e364:	d050      	beq.n	800e408 <__hexnan+0x130>
 800e366:	454c      	cmp	r4, r9
 800e368:	d206      	bcs.n	800e378 <__hexnan+0xa0>
 800e36a:	2d07      	cmp	r5, #7
 800e36c:	dc04      	bgt.n	800e378 <__hexnan+0xa0>
 800e36e:	462a      	mov	r2, r5
 800e370:	4649      	mov	r1, r9
 800e372:	4620      	mov	r0, r4
 800e374:	f7ff ff8a 	bl	800e28c <L_shift>
 800e378:	4544      	cmp	r4, r8
 800e37a:	d934      	bls.n	800e3e6 <__hexnan+0x10e>
 800e37c:	f1a8 0204 	sub.w	r2, r8, #4
 800e380:	4623      	mov	r3, r4
 800e382:	f853 1b04 	ldr.w	r1, [r3], #4
 800e386:	f842 1f04 	str.w	r1, [r2, #4]!
 800e38a:	429f      	cmp	r7, r3
 800e38c:	d2f9      	bcs.n	800e382 <__hexnan+0xaa>
 800e38e:	1b3b      	subs	r3, r7, r4
 800e390:	f023 0303 	bic.w	r3, r3, #3
 800e394:	3304      	adds	r3, #4
 800e396:	3401      	adds	r4, #1
 800e398:	3e03      	subs	r6, #3
 800e39a:	42b4      	cmp	r4, r6
 800e39c:	bf88      	it	hi
 800e39e:	2304      	movhi	r3, #4
 800e3a0:	4443      	add	r3, r8
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f843 2b04 	str.w	r2, [r3], #4
 800e3a8:	429f      	cmp	r7, r3
 800e3aa:	d2fb      	bcs.n	800e3a4 <__hexnan+0xcc>
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	b91b      	cbnz	r3, 800e3b8 <__hexnan+0xe0>
 800e3b0:	4547      	cmp	r7, r8
 800e3b2:	d127      	bne.n	800e404 <__hexnan+0x12c>
 800e3b4:	2301      	movs	r3, #1
 800e3b6:	603b      	str	r3, [r7, #0]
 800e3b8:	2005      	movs	r0, #5
 800e3ba:	e026      	b.n	800e40a <__hexnan+0x132>
 800e3bc:	3501      	adds	r5, #1
 800e3be:	2d08      	cmp	r5, #8
 800e3c0:	f10b 0b01 	add.w	fp, fp, #1
 800e3c4:	dd06      	ble.n	800e3d4 <__hexnan+0xfc>
 800e3c6:	4544      	cmp	r4, r8
 800e3c8:	d9c3      	bls.n	800e352 <__hexnan+0x7a>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3d0:	2501      	movs	r5, #1
 800e3d2:	3c04      	subs	r4, #4
 800e3d4:	6822      	ldr	r2, [r4, #0]
 800e3d6:	f000 000f 	and.w	r0, r0, #15
 800e3da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e3de:	6022      	str	r2, [r4, #0]
 800e3e0:	e7b7      	b.n	800e352 <__hexnan+0x7a>
 800e3e2:	2508      	movs	r5, #8
 800e3e4:	e7b5      	b.n	800e352 <__hexnan+0x7a>
 800e3e6:	9b01      	ldr	r3, [sp, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d0df      	beq.n	800e3ac <__hexnan+0xd4>
 800e3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f0:	f1c3 0320 	rsb	r3, r3, #32
 800e3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800e3f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e3fc:	401a      	ands	r2, r3
 800e3fe:	f846 2c04 	str.w	r2, [r6, #-4]
 800e402:	e7d3      	b.n	800e3ac <__hexnan+0xd4>
 800e404:	3f04      	subs	r7, #4
 800e406:	e7d1      	b.n	800e3ac <__hexnan+0xd4>
 800e408:	2004      	movs	r0, #4
 800e40a:	b007      	add	sp, #28
 800e40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e410 <_localeconv_r>:
 800e410:	4800      	ldr	r0, [pc, #0]	; (800e414 <_localeconv_r+0x4>)
 800e412:	4770      	bx	lr
 800e414:	2000016c 	.word	0x2000016c

0800e418 <_lseek_r>:
 800e418:	b538      	push	{r3, r4, r5, lr}
 800e41a:	4d07      	ldr	r5, [pc, #28]	; (800e438 <_lseek_r+0x20>)
 800e41c:	4604      	mov	r4, r0
 800e41e:	4608      	mov	r0, r1
 800e420:	4611      	mov	r1, r2
 800e422:	2200      	movs	r2, #0
 800e424:	602a      	str	r2, [r5, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	f7f3 f97a 	bl	8001720 <_lseek>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_lseek_r+0x1e>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	b103      	cbz	r3, 800e436 <_lseek_r+0x1e>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	20005df8 	.word	0x20005df8

0800e43c <__swhatbuf_r>:
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	460e      	mov	r6, r1
 800e440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e444:	2900      	cmp	r1, #0
 800e446:	b096      	sub	sp, #88	; 0x58
 800e448:	4614      	mov	r4, r2
 800e44a:	461d      	mov	r5, r3
 800e44c:	da08      	bge.n	800e460 <__swhatbuf_r+0x24>
 800e44e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	602a      	str	r2, [r5, #0]
 800e456:	061a      	lsls	r2, r3, #24
 800e458:	d410      	bmi.n	800e47c <__swhatbuf_r+0x40>
 800e45a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e45e:	e00e      	b.n	800e47e <__swhatbuf_r+0x42>
 800e460:	466a      	mov	r2, sp
 800e462:	f001 f8bf 	bl	800f5e4 <_fstat_r>
 800e466:	2800      	cmp	r0, #0
 800e468:	dbf1      	blt.n	800e44e <__swhatbuf_r+0x12>
 800e46a:	9a01      	ldr	r2, [sp, #4]
 800e46c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e470:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e474:	425a      	negs	r2, r3
 800e476:	415a      	adcs	r2, r3
 800e478:	602a      	str	r2, [r5, #0]
 800e47a:	e7ee      	b.n	800e45a <__swhatbuf_r+0x1e>
 800e47c:	2340      	movs	r3, #64	; 0x40
 800e47e:	2000      	movs	r0, #0
 800e480:	6023      	str	r3, [r4, #0]
 800e482:	b016      	add	sp, #88	; 0x58
 800e484:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e488 <__smakebuf_r>:
 800e488:	898b      	ldrh	r3, [r1, #12]
 800e48a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e48c:	079d      	lsls	r5, r3, #30
 800e48e:	4606      	mov	r6, r0
 800e490:	460c      	mov	r4, r1
 800e492:	d507      	bpl.n	800e4a4 <__smakebuf_r+0x1c>
 800e494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	6123      	str	r3, [r4, #16]
 800e49c:	2301      	movs	r3, #1
 800e49e:	6163      	str	r3, [r4, #20]
 800e4a0:	b002      	add	sp, #8
 800e4a2:	bd70      	pop	{r4, r5, r6, pc}
 800e4a4:	ab01      	add	r3, sp, #4
 800e4a6:	466a      	mov	r2, sp
 800e4a8:	f7ff ffc8 	bl	800e43c <__swhatbuf_r>
 800e4ac:	9900      	ldr	r1, [sp, #0]
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	4630      	mov	r0, r6
 800e4b2:	f7fc fc5b 	bl	800ad6c <_malloc_r>
 800e4b6:	b948      	cbnz	r0, 800e4cc <__smakebuf_r+0x44>
 800e4b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4bc:	059a      	lsls	r2, r3, #22
 800e4be:	d4ef      	bmi.n	800e4a0 <__smakebuf_r+0x18>
 800e4c0:	f023 0303 	bic.w	r3, r3, #3
 800e4c4:	f043 0302 	orr.w	r3, r3, #2
 800e4c8:	81a3      	strh	r3, [r4, #12]
 800e4ca:	e7e3      	b.n	800e494 <__smakebuf_r+0xc>
 800e4cc:	4b0d      	ldr	r3, [pc, #52]	; (800e504 <__smakebuf_r+0x7c>)
 800e4ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800e4d0:	89a3      	ldrh	r3, [r4, #12]
 800e4d2:	6020      	str	r0, [r4, #0]
 800e4d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4d8:	81a3      	strh	r3, [r4, #12]
 800e4da:	9b00      	ldr	r3, [sp, #0]
 800e4dc:	6163      	str	r3, [r4, #20]
 800e4de:	9b01      	ldr	r3, [sp, #4]
 800e4e0:	6120      	str	r0, [r4, #16]
 800e4e2:	b15b      	cbz	r3, 800e4fc <__smakebuf_r+0x74>
 800e4e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f001 f88d 	bl	800f608 <_isatty_r>
 800e4ee:	b128      	cbz	r0, 800e4fc <__smakebuf_r+0x74>
 800e4f0:	89a3      	ldrh	r3, [r4, #12]
 800e4f2:	f023 0303 	bic.w	r3, r3, #3
 800e4f6:	f043 0301 	orr.w	r3, r3, #1
 800e4fa:	81a3      	strh	r3, [r4, #12]
 800e4fc:	89a0      	ldrh	r0, [r4, #12]
 800e4fe:	4305      	orrs	r5, r0
 800e500:	81a5      	strh	r5, [r4, #12]
 800e502:	e7cd      	b.n	800e4a0 <__smakebuf_r+0x18>
 800e504:	0800ab0d 	.word	0x0800ab0d

0800e508 <malloc>:
 800e508:	4b02      	ldr	r3, [pc, #8]	; (800e514 <malloc+0xc>)
 800e50a:	4601      	mov	r1, r0
 800e50c:	6818      	ldr	r0, [r3, #0]
 800e50e:	f7fc bc2d 	b.w	800ad6c <_malloc_r>
 800e512:	bf00      	nop
 800e514:	20000014 	.word	0x20000014

0800e518 <__ascii_mbtowc>:
 800e518:	b082      	sub	sp, #8
 800e51a:	b901      	cbnz	r1, 800e51e <__ascii_mbtowc+0x6>
 800e51c:	a901      	add	r1, sp, #4
 800e51e:	b142      	cbz	r2, 800e532 <__ascii_mbtowc+0x1a>
 800e520:	b14b      	cbz	r3, 800e536 <__ascii_mbtowc+0x1e>
 800e522:	7813      	ldrb	r3, [r2, #0]
 800e524:	600b      	str	r3, [r1, #0]
 800e526:	7812      	ldrb	r2, [r2, #0]
 800e528:	1e10      	subs	r0, r2, #0
 800e52a:	bf18      	it	ne
 800e52c:	2001      	movne	r0, #1
 800e52e:	b002      	add	sp, #8
 800e530:	4770      	bx	lr
 800e532:	4610      	mov	r0, r2
 800e534:	e7fb      	b.n	800e52e <__ascii_mbtowc+0x16>
 800e536:	f06f 0001 	mvn.w	r0, #1
 800e53a:	e7f8      	b.n	800e52e <__ascii_mbtowc+0x16>

0800e53c <__malloc_lock>:
 800e53c:	4801      	ldr	r0, [pc, #4]	; (800e544 <__malloc_lock+0x8>)
 800e53e:	f7fc bbdc 	b.w	800acfa <__retarget_lock_acquire_recursive>
 800e542:	bf00      	nop
 800e544:	20005dec 	.word	0x20005dec

0800e548 <__malloc_unlock>:
 800e548:	4801      	ldr	r0, [pc, #4]	; (800e550 <__malloc_unlock+0x8>)
 800e54a:	f7fc bbd7 	b.w	800acfc <__retarget_lock_release_recursive>
 800e54e:	bf00      	nop
 800e550:	20005dec 	.word	0x20005dec

0800e554 <_Balloc>:
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e558:	4604      	mov	r4, r0
 800e55a:	460d      	mov	r5, r1
 800e55c:	b976      	cbnz	r6, 800e57c <_Balloc+0x28>
 800e55e:	2010      	movs	r0, #16
 800e560:	f7ff ffd2 	bl	800e508 <malloc>
 800e564:	4602      	mov	r2, r0
 800e566:	6260      	str	r0, [r4, #36]	; 0x24
 800e568:	b920      	cbnz	r0, 800e574 <_Balloc+0x20>
 800e56a:	4b18      	ldr	r3, [pc, #96]	; (800e5cc <_Balloc+0x78>)
 800e56c:	4818      	ldr	r0, [pc, #96]	; (800e5d0 <_Balloc+0x7c>)
 800e56e:	2166      	movs	r1, #102	; 0x66
 800e570:	f001 f808 	bl	800f584 <__assert_func>
 800e574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e578:	6006      	str	r6, [r0, #0]
 800e57a:	60c6      	str	r6, [r0, #12]
 800e57c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e57e:	68f3      	ldr	r3, [r6, #12]
 800e580:	b183      	cbz	r3, 800e5a4 <_Balloc+0x50>
 800e582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e58a:	b9b8      	cbnz	r0, 800e5bc <_Balloc+0x68>
 800e58c:	2101      	movs	r1, #1
 800e58e:	fa01 f605 	lsl.w	r6, r1, r5
 800e592:	1d72      	adds	r2, r6, #5
 800e594:	0092      	lsls	r2, r2, #2
 800e596:	4620      	mov	r0, r4
 800e598:	f000 fc9d 	bl	800eed6 <_calloc_r>
 800e59c:	b160      	cbz	r0, 800e5b8 <_Balloc+0x64>
 800e59e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5a2:	e00e      	b.n	800e5c2 <_Balloc+0x6e>
 800e5a4:	2221      	movs	r2, #33	; 0x21
 800e5a6:	2104      	movs	r1, #4
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	f000 fc94 	bl	800eed6 <_calloc_r>
 800e5ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5b0:	60f0      	str	r0, [r6, #12]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1e4      	bne.n	800e582 <_Balloc+0x2e>
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	bd70      	pop	{r4, r5, r6, pc}
 800e5bc:	6802      	ldr	r2, [r0, #0]
 800e5be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5c8:	e7f7      	b.n	800e5ba <_Balloc+0x66>
 800e5ca:	bf00      	nop
 800e5cc:	08010dae 	.word	0x08010dae
 800e5d0:	08010eac 	.word	0x08010eac

0800e5d4 <_Bfree>:
 800e5d4:	b570      	push	{r4, r5, r6, lr}
 800e5d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e5d8:	4605      	mov	r5, r0
 800e5da:	460c      	mov	r4, r1
 800e5dc:	b976      	cbnz	r6, 800e5fc <_Bfree+0x28>
 800e5de:	2010      	movs	r0, #16
 800e5e0:	f7ff ff92 	bl	800e508 <malloc>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	6268      	str	r0, [r5, #36]	; 0x24
 800e5e8:	b920      	cbnz	r0, 800e5f4 <_Bfree+0x20>
 800e5ea:	4b09      	ldr	r3, [pc, #36]	; (800e610 <_Bfree+0x3c>)
 800e5ec:	4809      	ldr	r0, [pc, #36]	; (800e614 <_Bfree+0x40>)
 800e5ee:	218a      	movs	r1, #138	; 0x8a
 800e5f0:	f000 ffc8 	bl	800f584 <__assert_func>
 800e5f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5f8:	6006      	str	r6, [r0, #0]
 800e5fa:	60c6      	str	r6, [r0, #12]
 800e5fc:	b13c      	cbz	r4, 800e60e <_Bfree+0x3a>
 800e5fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e600:	6862      	ldr	r2, [r4, #4]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e608:	6021      	str	r1, [r4, #0]
 800e60a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	08010dae 	.word	0x08010dae
 800e614:	08010eac 	.word	0x08010eac

0800e618 <__multadd>:
 800e618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61c:	690d      	ldr	r5, [r1, #16]
 800e61e:	4607      	mov	r7, r0
 800e620:	460c      	mov	r4, r1
 800e622:	461e      	mov	r6, r3
 800e624:	f101 0c14 	add.w	ip, r1, #20
 800e628:	2000      	movs	r0, #0
 800e62a:	f8dc 3000 	ldr.w	r3, [ip]
 800e62e:	b299      	uxth	r1, r3
 800e630:	fb02 6101 	mla	r1, r2, r1, r6
 800e634:	0c1e      	lsrs	r6, r3, #16
 800e636:	0c0b      	lsrs	r3, r1, #16
 800e638:	fb02 3306 	mla	r3, r2, r6, r3
 800e63c:	b289      	uxth	r1, r1
 800e63e:	3001      	adds	r0, #1
 800e640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e644:	4285      	cmp	r5, r0
 800e646:	f84c 1b04 	str.w	r1, [ip], #4
 800e64a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e64e:	dcec      	bgt.n	800e62a <__multadd+0x12>
 800e650:	b30e      	cbz	r6, 800e696 <__multadd+0x7e>
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	42ab      	cmp	r3, r5
 800e656:	dc19      	bgt.n	800e68c <__multadd+0x74>
 800e658:	6861      	ldr	r1, [r4, #4]
 800e65a:	4638      	mov	r0, r7
 800e65c:	3101      	adds	r1, #1
 800e65e:	f7ff ff79 	bl	800e554 <_Balloc>
 800e662:	4680      	mov	r8, r0
 800e664:	b928      	cbnz	r0, 800e672 <__multadd+0x5a>
 800e666:	4602      	mov	r2, r0
 800e668:	4b0c      	ldr	r3, [pc, #48]	; (800e69c <__multadd+0x84>)
 800e66a:	480d      	ldr	r0, [pc, #52]	; (800e6a0 <__multadd+0x88>)
 800e66c:	21b5      	movs	r1, #181	; 0xb5
 800e66e:	f000 ff89 	bl	800f584 <__assert_func>
 800e672:	6922      	ldr	r2, [r4, #16]
 800e674:	3202      	adds	r2, #2
 800e676:	f104 010c 	add.w	r1, r4, #12
 800e67a:	0092      	lsls	r2, r2, #2
 800e67c:	300c      	adds	r0, #12
 800e67e:	f7fc fb3e 	bl	800acfe <memcpy>
 800e682:	4621      	mov	r1, r4
 800e684:	4638      	mov	r0, r7
 800e686:	f7ff ffa5 	bl	800e5d4 <_Bfree>
 800e68a:	4644      	mov	r4, r8
 800e68c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e690:	3501      	adds	r5, #1
 800e692:	615e      	str	r6, [r3, #20]
 800e694:	6125      	str	r5, [r4, #16]
 800e696:	4620      	mov	r0, r4
 800e698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e69c:	08010e20 	.word	0x08010e20
 800e6a0:	08010eac 	.word	0x08010eac

0800e6a4 <__s2b>:
 800e6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	4615      	mov	r5, r2
 800e6ac:	461f      	mov	r7, r3
 800e6ae:	2209      	movs	r2, #9
 800e6b0:	3308      	adds	r3, #8
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	2201      	movs	r2, #1
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	db09      	blt.n	800e6d4 <__s2b+0x30>
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	f7ff ff47 	bl	800e554 <_Balloc>
 800e6c6:	b940      	cbnz	r0, 800e6da <__s2b+0x36>
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	4b19      	ldr	r3, [pc, #100]	; (800e730 <__s2b+0x8c>)
 800e6cc:	4819      	ldr	r0, [pc, #100]	; (800e734 <__s2b+0x90>)
 800e6ce:	21ce      	movs	r1, #206	; 0xce
 800e6d0:	f000 ff58 	bl	800f584 <__assert_func>
 800e6d4:	0052      	lsls	r2, r2, #1
 800e6d6:	3101      	adds	r1, #1
 800e6d8:	e7f0      	b.n	800e6bc <__s2b+0x18>
 800e6da:	9b08      	ldr	r3, [sp, #32]
 800e6dc:	6143      	str	r3, [r0, #20]
 800e6de:	2d09      	cmp	r5, #9
 800e6e0:	f04f 0301 	mov.w	r3, #1
 800e6e4:	6103      	str	r3, [r0, #16]
 800e6e6:	dd16      	ble.n	800e716 <__s2b+0x72>
 800e6e8:	f104 0909 	add.w	r9, r4, #9
 800e6ec:	46c8      	mov	r8, r9
 800e6ee:	442c      	add	r4, r5
 800e6f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e6f4:	4601      	mov	r1, r0
 800e6f6:	3b30      	subs	r3, #48	; 0x30
 800e6f8:	220a      	movs	r2, #10
 800e6fa:	4630      	mov	r0, r6
 800e6fc:	f7ff ff8c 	bl	800e618 <__multadd>
 800e700:	45a0      	cmp	r8, r4
 800e702:	d1f5      	bne.n	800e6f0 <__s2b+0x4c>
 800e704:	f1a5 0408 	sub.w	r4, r5, #8
 800e708:	444c      	add	r4, r9
 800e70a:	1b2d      	subs	r5, r5, r4
 800e70c:	1963      	adds	r3, r4, r5
 800e70e:	42bb      	cmp	r3, r7
 800e710:	db04      	blt.n	800e71c <__s2b+0x78>
 800e712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e716:	340a      	adds	r4, #10
 800e718:	2509      	movs	r5, #9
 800e71a:	e7f6      	b.n	800e70a <__s2b+0x66>
 800e71c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e720:	4601      	mov	r1, r0
 800e722:	3b30      	subs	r3, #48	; 0x30
 800e724:	220a      	movs	r2, #10
 800e726:	4630      	mov	r0, r6
 800e728:	f7ff ff76 	bl	800e618 <__multadd>
 800e72c:	e7ee      	b.n	800e70c <__s2b+0x68>
 800e72e:	bf00      	nop
 800e730:	08010e20 	.word	0x08010e20
 800e734:	08010eac 	.word	0x08010eac

0800e738 <__hi0bits>:
 800e738:	0c03      	lsrs	r3, r0, #16
 800e73a:	041b      	lsls	r3, r3, #16
 800e73c:	b9d3      	cbnz	r3, 800e774 <__hi0bits+0x3c>
 800e73e:	0400      	lsls	r0, r0, #16
 800e740:	2310      	movs	r3, #16
 800e742:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e746:	bf04      	itt	eq
 800e748:	0200      	lsleq	r0, r0, #8
 800e74a:	3308      	addeq	r3, #8
 800e74c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e750:	bf04      	itt	eq
 800e752:	0100      	lsleq	r0, r0, #4
 800e754:	3304      	addeq	r3, #4
 800e756:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e75a:	bf04      	itt	eq
 800e75c:	0080      	lsleq	r0, r0, #2
 800e75e:	3302      	addeq	r3, #2
 800e760:	2800      	cmp	r0, #0
 800e762:	db05      	blt.n	800e770 <__hi0bits+0x38>
 800e764:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e768:	f103 0301 	add.w	r3, r3, #1
 800e76c:	bf08      	it	eq
 800e76e:	2320      	moveq	r3, #32
 800e770:	4618      	mov	r0, r3
 800e772:	4770      	bx	lr
 800e774:	2300      	movs	r3, #0
 800e776:	e7e4      	b.n	800e742 <__hi0bits+0xa>

0800e778 <__lo0bits>:
 800e778:	6803      	ldr	r3, [r0, #0]
 800e77a:	f013 0207 	ands.w	r2, r3, #7
 800e77e:	4601      	mov	r1, r0
 800e780:	d00b      	beq.n	800e79a <__lo0bits+0x22>
 800e782:	07da      	lsls	r2, r3, #31
 800e784:	d423      	bmi.n	800e7ce <__lo0bits+0x56>
 800e786:	0798      	lsls	r0, r3, #30
 800e788:	bf49      	itett	mi
 800e78a:	085b      	lsrmi	r3, r3, #1
 800e78c:	089b      	lsrpl	r3, r3, #2
 800e78e:	2001      	movmi	r0, #1
 800e790:	600b      	strmi	r3, [r1, #0]
 800e792:	bf5c      	itt	pl
 800e794:	600b      	strpl	r3, [r1, #0]
 800e796:	2002      	movpl	r0, #2
 800e798:	4770      	bx	lr
 800e79a:	b298      	uxth	r0, r3
 800e79c:	b9a8      	cbnz	r0, 800e7ca <__lo0bits+0x52>
 800e79e:	0c1b      	lsrs	r3, r3, #16
 800e7a0:	2010      	movs	r0, #16
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	b90a      	cbnz	r2, 800e7aa <__lo0bits+0x32>
 800e7a6:	3008      	adds	r0, #8
 800e7a8:	0a1b      	lsrs	r3, r3, #8
 800e7aa:	071a      	lsls	r2, r3, #28
 800e7ac:	bf04      	itt	eq
 800e7ae:	091b      	lsreq	r3, r3, #4
 800e7b0:	3004      	addeq	r0, #4
 800e7b2:	079a      	lsls	r2, r3, #30
 800e7b4:	bf04      	itt	eq
 800e7b6:	089b      	lsreq	r3, r3, #2
 800e7b8:	3002      	addeq	r0, #2
 800e7ba:	07da      	lsls	r2, r3, #31
 800e7bc:	d403      	bmi.n	800e7c6 <__lo0bits+0x4e>
 800e7be:	085b      	lsrs	r3, r3, #1
 800e7c0:	f100 0001 	add.w	r0, r0, #1
 800e7c4:	d005      	beq.n	800e7d2 <__lo0bits+0x5a>
 800e7c6:	600b      	str	r3, [r1, #0]
 800e7c8:	4770      	bx	lr
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	e7e9      	b.n	800e7a2 <__lo0bits+0x2a>
 800e7ce:	2000      	movs	r0, #0
 800e7d0:	4770      	bx	lr
 800e7d2:	2020      	movs	r0, #32
 800e7d4:	4770      	bx	lr
	...

0800e7d8 <__i2b>:
 800e7d8:	b510      	push	{r4, lr}
 800e7da:	460c      	mov	r4, r1
 800e7dc:	2101      	movs	r1, #1
 800e7de:	f7ff feb9 	bl	800e554 <_Balloc>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	b928      	cbnz	r0, 800e7f2 <__i2b+0x1a>
 800e7e6:	4b05      	ldr	r3, [pc, #20]	; (800e7fc <__i2b+0x24>)
 800e7e8:	4805      	ldr	r0, [pc, #20]	; (800e800 <__i2b+0x28>)
 800e7ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e7ee:	f000 fec9 	bl	800f584 <__assert_func>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	6144      	str	r4, [r0, #20]
 800e7f6:	6103      	str	r3, [r0, #16]
 800e7f8:	bd10      	pop	{r4, pc}
 800e7fa:	bf00      	nop
 800e7fc:	08010e20 	.word	0x08010e20
 800e800:	08010eac 	.word	0x08010eac

0800e804 <__multiply>:
 800e804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e808:	4691      	mov	r9, r2
 800e80a:	690a      	ldr	r2, [r1, #16]
 800e80c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e810:	429a      	cmp	r2, r3
 800e812:	bfb8      	it	lt
 800e814:	460b      	movlt	r3, r1
 800e816:	460c      	mov	r4, r1
 800e818:	bfbc      	itt	lt
 800e81a:	464c      	movlt	r4, r9
 800e81c:	4699      	movlt	r9, r3
 800e81e:	6927      	ldr	r7, [r4, #16]
 800e820:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e824:	68a3      	ldr	r3, [r4, #8]
 800e826:	6861      	ldr	r1, [r4, #4]
 800e828:	eb07 060a 	add.w	r6, r7, sl
 800e82c:	42b3      	cmp	r3, r6
 800e82e:	b085      	sub	sp, #20
 800e830:	bfb8      	it	lt
 800e832:	3101      	addlt	r1, #1
 800e834:	f7ff fe8e 	bl	800e554 <_Balloc>
 800e838:	b930      	cbnz	r0, 800e848 <__multiply+0x44>
 800e83a:	4602      	mov	r2, r0
 800e83c:	4b44      	ldr	r3, [pc, #272]	; (800e950 <__multiply+0x14c>)
 800e83e:	4845      	ldr	r0, [pc, #276]	; (800e954 <__multiply+0x150>)
 800e840:	f240 115d 	movw	r1, #349	; 0x15d
 800e844:	f000 fe9e 	bl	800f584 <__assert_func>
 800e848:	f100 0514 	add.w	r5, r0, #20
 800e84c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e850:	462b      	mov	r3, r5
 800e852:	2200      	movs	r2, #0
 800e854:	4543      	cmp	r3, r8
 800e856:	d321      	bcc.n	800e89c <__multiply+0x98>
 800e858:	f104 0314 	add.w	r3, r4, #20
 800e85c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e860:	f109 0314 	add.w	r3, r9, #20
 800e864:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e868:	9202      	str	r2, [sp, #8]
 800e86a:	1b3a      	subs	r2, r7, r4
 800e86c:	3a15      	subs	r2, #21
 800e86e:	f022 0203 	bic.w	r2, r2, #3
 800e872:	3204      	adds	r2, #4
 800e874:	f104 0115 	add.w	r1, r4, #21
 800e878:	428f      	cmp	r7, r1
 800e87a:	bf38      	it	cc
 800e87c:	2204      	movcc	r2, #4
 800e87e:	9201      	str	r2, [sp, #4]
 800e880:	9a02      	ldr	r2, [sp, #8]
 800e882:	9303      	str	r3, [sp, #12]
 800e884:	429a      	cmp	r2, r3
 800e886:	d80c      	bhi.n	800e8a2 <__multiply+0x9e>
 800e888:	2e00      	cmp	r6, #0
 800e88a:	dd03      	ble.n	800e894 <__multiply+0x90>
 800e88c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e890:	2b00      	cmp	r3, #0
 800e892:	d05a      	beq.n	800e94a <__multiply+0x146>
 800e894:	6106      	str	r6, [r0, #16]
 800e896:	b005      	add	sp, #20
 800e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89c:	f843 2b04 	str.w	r2, [r3], #4
 800e8a0:	e7d8      	b.n	800e854 <__multiply+0x50>
 800e8a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8a6:	f1ba 0f00 	cmp.w	sl, #0
 800e8aa:	d024      	beq.n	800e8f6 <__multiply+0xf2>
 800e8ac:	f104 0e14 	add.w	lr, r4, #20
 800e8b0:	46a9      	mov	r9, r5
 800e8b2:	f04f 0c00 	mov.w	ip, #0
 800e8b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e8ba:	f8d9 1000 	ldr.w	r1, [r9]
 800e8be:	fa1f fb82 	uxth.w	fp, r2
 800e8c2:	b289      	uxth	r1, r1
 800e8c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e8c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e8cc:	f8d9 2000 	ldr.w	r2, [r9]
 800e8d0:	4461      	add	r1, ip
 800e8d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e8da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e8de:	b289      	uxth	r1, r1
 800e8e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e8e4:	4577      	cmp	r7, lr
 800e8e6:	f849 1b04 	str.w	r1, [r9], #4
 800e8ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e8ee:	d8e2      	bhi.n	800e8b6 <__multiply+0xb2>
 800e8f0:	9a01      	ldr	r2, [sp, #4]
 800e8f2:	f845 c002 	str.w	ip, [r5, r2]
 800e8f6:	9a03      	ldr	r2, [sp, #12]
 800e8f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e8fc:	3304      	adds	r3, #4
 800e8fe:	f1b9 0f00 	cmp.w	r9, #0
 800e902:	d020      	beq.n	800e946 <__multiply+0x142>
 800e904:	6829      	ldr	r1, [r5, #0]
 800e906:	f104 0c14 	add.w	ip, r4, #20
 800e90a:	46ae      	mov	lr, r5
 800e90c:	f04f 0a00 	mov.w	sl, #0
 800e910:	f8bc b000 	ldrh.w	fp, [ip]
 800e914:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e918:	fb09 220b 	mla	r2, r9, fp, r2
 800e91c:	4492      	add	sl, r2
 800e91e:	b289      	uxth	r1, r1
 800e920:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e924:	f84e 1b04 	str.w	r1, [lr], #4
 800e928:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e92c:	f8be 1000 	ldrh.w	r1, [lr]
 800e930:	0c12      	lsrs	r2, r2, #16
 800e932:	fb09 1102 	mla	r1, r9, r2, r1
 800e936:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e93a:	4567      	cmp	r7, ip
 800e93c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e940:	d8e6      	bhi.n	800e910 <__multiply+0x10c>
 800e942:	9a01      	ldr	r2, [sp, #4]
 800e944:	50a9      	str	r1, [r5, r2]
 800e946:	3504      	adds	r5, #4
 800e948:	e79a      	b.n	800e880 <__multiply+0x7c>
 800e94a:	3e01      	subs	r6, #1
 800e94c:	e79c      	b.n	800e888 <__multiply+0x84>
 800e94e:	bf00      	nop
 800e950:	08010e20 	.word	0x08010e20
 800e954:	08010eac 	.word	0x08010eac

0800e958 <__pow5mult>:
 800e958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e95c:	4615      	mov	r5, r2
 800e95e:	f012 0203 	ands.w	r2, r2, #3
 800e962:	4606      	mov	r6, r0
 800e964:	460f      	mov	r7, r1
 800e966:	d007      	beq.n	800e978 <__pow5mult+0x20>
 800e968:	4c25      	ldr	r4, [pc, #148]	; (800ea00 <__pow5mult+0xa8>)
 800e96a:	3a01      	subs	r2, #1
 800e96c:	2300      	movs	r3, #0
 800e96e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e972:	f7ff fe51 	bl	800e618 <__multadd>
 800e976:	4607      	mov	r7, r0
 800e978:	10ad      	asrs	r5, r5, #2
 800e97a:	d03d      	beq.n	800e9f8 <__pow5mult+0xa0>
 800e97c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e97e:	b97c      	cbnz	r4, 800e9a0 <__pow5mult+0x48>
 800e980:	2010      	movs	r0, #16
 800e982:	f7ff fdc1 	bl	800e508 <malloc>
 800e986:	4602      	mov	r2, r0
 800e988:	6270      	str	r0, [r6, #36]	; 0x24
 800e98a:	b928      	cbnz	r0, 800e998 <__pow5mult+0x40>
 800e98c:	4b1d      	ldr	r3, [pc, #116]	; (800ea04 <__pow5mult+0xac>)
 800e98e:	481e      	ldr	r0, [pc, #120]	; (800ea08 <__pow5mult+0xb0>)
 800e990:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e994:	f000 fdf6 	bl	800f584 <__assert_func>
 800e998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e99c:	6004      	str	r4, [r0, #0]
 800e99e:	60c4      	str	r4, [r0, #12]
 800e9a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e9a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9a8:	b94c      	cbnz	r4, 800e9be <__pow5mult+0x66>
 800e9aa:	f240 2171 	movw	r1, #625	; 0x271
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	f7ff ff12 	bl	800e7d8 <__i2b>
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9ba:	4604      	mov	r4, r0
 800e9bc:	6003      	str	r3, [r0, #0]
 800e9be:	f04f 0900 	mov.w	r9, #0
 800e9c2:	07eb      	lsls	r3, r5, #31
 800e9c4:	d50a      	bpl.n	800e9dc <__pow5mult+0x84>
 800e9c6:	4639      	mov	r1, r7
 800e9c8:	4622      	mov	r2, r4
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f7ff ff1a 	bl	800e804 <__multiply>
 800e9d0:	4639      	mov	r1, r7
 800e9d2:	4680      	mov	r8, r0
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f7ff fdfd 	bl	800e5d4 <_Bfree>
 800e9da:	4647      	mov	r7, r8
 800e9dc:	106d      	asrs	r5, r5, #1
 800e9de:	d00b      	beq.n	800e9f8 <__pow5mult+0xa0>
 800e9e0:	6820      	ldr	r0, [r4, #0]
 800e9e2:	b938      	cbnz	r0, 800e9f4 <__pow5mult+0x9c>
 800e9e4:	4622      	mov	r2, r4
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f7ff ff0b 	bl	800e804 <__multiply>
 800e9ee:	6020      	str	r0, [r4, #0]
 800e9f0:	f8c0 9000 	str.w	r9, [r0]
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	e7e4      	b.n	800e9c2 <__pow5mult+0x6a>
 800e9f8:	4638      	mov	r0, r7
 800e9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9fe:	bf00      	nop
 800ea00:	08010ff8 	.word	0x08010ff8
 800ea04:	08010dae 	.word	0x08010dae
 800ea08:	08010eac 	.word	0x08010eac

0800ea0c <__lshift>:
 800ea0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea10:	460c      	mov	r4, r1
 800ea12:	6849      	ldr	r1, [r1, #4]
 800ea14:	6923      	ldr	r3, [r4, #16]
 800ea16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea1a:	68a3      	ldr	r3, [r4, #8]
 800ea1c:	4607      	mov	r7, r0
 800ea1e:	4691      	mov	r9, r2
 800ea20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea24:	f108 0601 	add.w	r6, r8, #1
 800ea28:	42b3      	cmp	r3, r6
 800ea2a:	db0b      	blt.n	800ea44 <__lshift+0x38>
 800ea2c:	4638      	mov	r0, r7
 800ea2e:	f7ff fd91 	bl	800e554 <_Balloc>
 800ea32:	4605      	mov	r5, r0
 800ea34:	b948      	cbnz	r0, 800ea4a <__lshift+0x3e>
 800ea36:	4602      	mov	r2, r0
 800ea38:	4b2a      	ldr	r3, [pc, #168]	; (800eae4 <__lshift+0xd8>)
 800ea3a:	482b      	ldr	r0, [pc, #172]	; (800eae8 <__lshift+0xdc>)
 800ea3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea40:	f000 fda0 	bl	800f584 <__assert_func>
 800ea44:	3101      	adds	r1, #1
 800ea46:	005b      	lsls	r3, r3, #1
 800ea48:	e7ee      	b.n	800ea28 <__lshift+0x1c>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	f100 0114 	add.w	r1, r0, #20
 800ea50:	f100 0210 	add.w	r2, r0, #16
 800ea54:	4618      	mov	r0, r3
 800ea56:	4553      	cmp	r3, sl
 800ea58:	db37      	blt.n	800eaca <__lshift+0xbe>
 800ea5a:	6920      	ldr	r0, [r4, #16]
 800ea5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea60:	f104 0314 	add.w	r3, r4, #20
 800ea64:	f019 091f 	ands.w	r9, r9, #31
 800ea68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ea6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ea70:	d02f      	beq.n	800ead2 <__lshift+0xc6>
 800ea72:	f1c9 0e20 	rsb	lr, r9, #32
 800ea76:	468a      	mov	sl, r1
 800ea78:	f04f 0c00 	mov.w	ip, #0
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	fa02 f209 	lsl.w	r2, r2, r9
 800ea82:	ea42 020c 	orr.w	r2, r2, ip
 800ea86:	f84a 2b04 	str.w	r2, [sl], #4
 800ea8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea8e:	4298      	cmp	r0, r3
 800ea90:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ea94:	d8f2      	bhi.n	800ea7c <__lshift+0x70>
 800ea96:	1b03      	subs	r3, r0, r4
 800ea98:	3b15      	subs	r3, #21
 800ea9a:	f023 0303 	bic.w	r3, r3, #3
 800ea9e:	3304      	adds	r3, #4
 800eaa0:	f104 0215 	add.w	r2, r4, #21
 800eaa4:	4290      	cmp	r0, r2
 800eaa6:	bf38      	it	cc
 800eaa8:	2304      	movcc	r3, #4
 800eaaa:	f841 c003 	str.w	ip, [r1, r3]
 800eaae:	f1bc 0f00 	cmp.w	ip, #0
 800eab2:	d001      	beq.n	800eab8 <__lshift+0xac>
 800eab4:	f108 0602 	add.w	r6, r8, #2
 800eab8:	3e01      	subs	r6, #1
 800eaba:	4638      	mov	r0, r7
 800eabc:	612e      	str	r6, [r5, #16]
 800eabe:	4621      	mov	r1, r4
 800eac0:	f7ff fd88 	bl	800e5d4 <_Bfree>
 800eac4:	4628      	mov	r0, r5
 800eac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaca:	f842 0f04 	str.w	r0, [r2, #4]!
 800eace:	3301      	adds	r3, #1
 800ead0:	e7c1      	b.n	800ea56 <__lshift+0x4a>
 800ead2:	3904      	subs	r1, #4
 800ead4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ead8:	f841 2f04 	str.w	r2, [r1, #4]!
 800eadc:	4298      	cmp	r0, r3
 800eade:	d8f9      	bhi.n	800ead4 <__lshift+0xc8>
 800eae0:	e7ea      	b.n	800eab8 <__lshift+0xac>
 800eae2:	bf00      	nop
 800eae4:	08010e20 	.word	0x08010e20
 800eae8:	08010eac 	.word	0x08010eac

0800eaec <__mcmp>:
 800eaec:	b530      	push	{r4, r5, lr}
 800eaee:	6902      	ldr	r2, [r0, #16]
 800eaf0:	690c      	ldr	r4, [r1, #16]
 800eaf2:	1b12      	subs	r2, r2, r4
 800eaf4:	d10e      	bne.n	800eb14 <__mcmp+0x28>
 800eaf6:	f100 0314 	add.w	r3, r0, #20
 800eafa:	3114      	adds	r1, #20
 800eafc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb0c:	42a5      	cmp	r5, r4
 800eb0e:	d003      	beq.n	800eb18 <__mcmp+0x2c>
 800eb10:	d305      	bcc.n	800eb1e <__mcmp+0x32>
 800eb12:	2201      	movs	r2, #1
 800eb14:	4610      	mov	r0, r2
 800eb16:	bd30      	pop	{r4, r5, pc}
 800eb18:	4283      	cmp	r3, r0
 800eb1a:	d3f3      	bcc.n	800eb04 <__mcmp+0x18>
 800eb1c:	e7fa      	b.n	800eb14 <__mcmp+0x28>
 800eb1e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb22:	e7f7      	b.n	800eb14 <__mcmp+0x28>

0800eb24 <__mdiff>:
 800eb24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb28:	460c      	mov	r4, r1
 800eb2a:	4606      	mov	r6, r0
 800eb2c:	4611      	mov	r1, r2
 800eb2e:	4620      	mov	r0, r4
 800eb30:	4690      	mov	r8, r2
 800eb32:	f7ff ffdb 	bl	800eaec <__mcmp>
 800eb36:	1e05      	subs	r5, r0, #0
 800eb38:	d110      	bne.n	800eb5c <__mdiff+0x38>
 800eb3a:	4629      	mov	r1, r5
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	f7ff fd09 	bl	800e554 <_Balloc>
 800eb42:	b930      	cbnz	r0, 800eb52 <__mdiff+0x2e>
 800eb44:	4b3a      	ldr	r3, [pc, #232]	; (800ec30 <__mdiff+0x10c>)
 800eb46:	4602      	mov	r2, r0
 800eb48:	f240 2132 	movw	r1, #562	; 0x232
 800eb4c:	4839      	ldr	r0, [pc, #228]	; (800ec34 <__mdiff+0x110>)
 800eb4e:	f000 fd19 	bl	800f584 <__assert_func>
 800eb52:	2301      	movs	r3, #1
 800eb54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb5c:	bfa4      	itt	ge
 800eb5e:	4643      	movge	r3, r8
 800eb60:	46a0      	movge	r8, r4
 800eb62:	4630      	mov	r0, r6
 800eb64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800eb68:	bfa6      	itte	ge
 800eb6a:	461c      	movge	r4, r3
 800eb6c:	2500      	movge	r5, #0
 800eb6e:	2501      	movlt	r5, #1
 800eb70:	f7ff fcf0 	bl	800e554 <_Balloc>
 800eb74:	b920      	cbnz	r0, 800eb80 <__mdiff+0x5c>
 800eb76:	4b2e      	ldr	r3, [pc, #184]	; (800ec30 <__mdiff+0x10c>)
 800eb78:	4602      	mov	r2, r0
 800eb7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800eb7e:	e7e5      	b.n	800eb4c <__mdiff+0x28>
 800eb80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800eb84:	6926      	ldr	r6, [r4, #16]
 800eb86:	60c5      	str	r5, [r0, #12]
 800eb88:	f104 0914 	add.w	r9, r4, #20
 800eb8c:	f108 0514 	add.w	r5, r8, #20
 800eb90:	f100 0e14 	add.w	lr, r0, #20
 800eb94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eb98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eb9c:	f108 0210 	add.w	r2, r8, #16
 800eba0:	46f2      	mov	sl, lr
 800eba2:	2100      	movs	r1, #0
 800eba4:	f859 3b04 	ldr.w	r3, [r9], #4
 800eba8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ebac:	fa1f f883 	uxth.w	r8, r3
 800ebb0:	fa11 f18b 	uxtah	r1, r1, fp
 800ebb4:	0c1b      	lsrs	r3, r3, #16
 800ebb6:	eba1 0808 	sub.w	r8, r1, r8
 800ebba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ebc2:	fa1f f888 	uxth.w	r8, r8
 800ebc6:	1419      	asrs	r1, r3, #16
 800ebc8:	454e      	cmp	r6, r9
 800ebca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ebce:	f84a 3b04 	str.w	r3, [sl], #4
 800ebd2:	d8e7      	bhi.n	800eba4 <__mdiff+0x80>
 800ebd4:	1b33      	subs	r3, r6, r4
 800ebd6:	3b15      	subs	r3, #21
 800ebd8:	f023 0303 	bic.w	r3, r3, #3
 800ebdc:	3304      	adds	r3, #4
 800ebde:	3415      	adds	r4, #21
 800ebe0:	42a6      	cmp	r6, r4
 800ebe2:	bf38      	it	cc
 800ebe4:	2304      	movcc	r3, #4
 800ebe6:	441d      	add	r5, r3
 800ebe8:	4473      	add	r3, lr
 800ebea:	469e      	mov	lr, r3
 800ebec:	462e      	mov	r6, r5
 800ebee:	4566      	cmp	r6, ip
 800ebf0:	d30e      	bcc.n	800ec10 <__mdiff+0xec>
 800ebf2:	f10c 0203 	add.w	r2, ip, #3
 800ebf6:	1b52      	subs	r2, r2, r5
 800ebf8:	f022 0203 	bic.w	r2, r2, #3
 800ebfc:	3d03      	subs	r5, #3
 800ebfe:	45ac      	cmp	ip, r5
 800ec00:	bf38      	it	cc
 800ec02:	2200      	movcc	r2, #0
 800ec04:	441a      	add	r2, r3
 800ec06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ec0a:	b17b      	cbz	r3, 800ec2c <__mdiff+0x108>
 800ec0c:	6107      	str	r7, [r0, #16]
 800ec0e:	e7a3      	b.n	800eb58 <__mdiff+0x34>
 800ec10:	f856 8b04 	ldr.w	r8, [r6], #4
 800ec14:	fa11 f288 	uxtah	r2, r1, r8
 800ec18:	1414      	asrs	r4, r2, #16
 800ec1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ec1e:	b292      	uxth	r2, r2
 800ec20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ec24:	f84e 2b04 	str.w	r2, [lr], #4
 800ec28:	1421      	asrs	r1, r4, #16
 800ec2a:	e7e0      	b.n	800ebee <__mdiff+0xca>
 800ec2c:	3f01      	subs	r7, #1
 800ec2e:	e7ea      	b.n	800ec06 <__mdiff+0xe2>
 800ec30:	08010e20 	.word	0x08010e20
 800ec34:	08010eac 	.word	0x08010eac

0800ec38 <__ulp>:
 800ec38:	b082      	sub	sp, #8
 800ec3a:	ed8d 0b00 	vstr	d0, [sp]
 800ec3e:	9b01      	ldr	r3, [sp, #4]
 800ec40:	4912      	ldr	r1, [pc, #72]	; (800ec8c <__ulp+0x54>)
 800ec42:	4019      	ands	r1, r3
 800ec44:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ec48:	2900      	cmp	r1, #0
 800ec4a:	dd05      	ble.n	800ec58 <__ulp+0x20>
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	460b      	mov	r3, r1
 800ec50:	ec43 2b10 	vmov	d0, r2, r3
 800ec54:	b002      	add	sp, #8
 800ec56:	4770      	bx	lr
 800ec58:	4249      	negs	r1, r1
 800ec5a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ec5e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ec62:	f04f 0200 	mov.w	r2, #0
 800ec66:	f04f 0300 	mov.w	r3, #0
 800ec6a:	da04      	bge.n	800ec76 <__ulp+0x3e>
 800ec6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ec70:	fa41 f300 	asr.w	r3, r1, r0
 800ec74:	e7ec      	b.n	800ec50 <__ulp+0x18>
 800ec76:	f1a0 0114 	sub.w	r1, r0, #20
 800ec7a:	291e      	cmp	r1, #30
 800ec7c:	bfda      	itte	le
 800ec7e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ec82:	fa20 f101 	lsrle.w	r1, r0, r1
 800ec86:	2101      	movgt	r1, #1
 800ec88:	460a      	mov	r2, r1
 800ec8a:	e7e1      	b.n	800ec50 <__ulp+0x18>
 800ec8c:	7ff00000 	.word	0x7ff00000

0800ec90 <__b2d>:
 800ec90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec92:	6905      	ldr	r5, [r0, #16]
 800ec94:	f100 0714 	add.w	r7, r0, #20
 800ec98:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ec9c:	1f2e      	subs	r6, r5, #4
 800ec9e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eca2:	4620      	mov	r0, r4
 800eca4:	f7ff fd48 	bl	800e738 <__hi0bits>
 800eca8:	f1c0 0320 	rsb	r3, r0, #32
 800ecac:	280a      	cmp	r0, #10
 800ecae:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ed2c <__b2d+0x9c>
 800ecb2:	600b      	str	r3, [r1, #0]
 800ecb4:	dc14      	bgt.n	800ece0 <__b2d+0x50>
 800ecb6:	f1c0 0e0b 	rsb	lr, r0, #11
 800ecba:	fa24 f10e 	lsr.w	r1, r4, lr
 800ecbe:	42b7      	cmp	r7, r6
 800ecc0:	ea41 030c 	orr.w	r3, r1, ip
 800ecc4:	bf34      	ite	cc
 800ecc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ecca:	2100      	movcs	r1, #0
 800eccc:	3015      	adds	r0, #21
 800ecce:	fa04 f000 	lsl.w	r0, r4, r0
 800ecd2:	fa21 f10e 	lsr.w	r1, r1, lr
 800ecd6:	ea40 0201 	orr.w	r2, r0, r1
 800ecda:	ec43 2b10 	vmov	d0, r2, r3
 800ecde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece0:	42b7      	cmp	r7, r6
 800ece2:	bf3a      	itte	cc
 800ece4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ece8:	f1a5 0608 	subcc.w	r6, r5, #8
 800ecec:	2100      	movcs	r1, #0
 800ecee:	380b      	subs	r0, #11
 800ecf0:	d017      	beq.n	800ed22 <__b2d+0x92>
 800ecf2:	f1c0 0c20 	rsb	ip, r0, #32
 800ecf6:	fa04 f500 	lsl.w	r5, r4, r0
 800ecfa:	42be      	cmp	r6, r7
 800ecfc:	fa21 f40c 	lsr.w	r4, r1, ip
 800ed00:	ea45 0504 	orr.w	r5, r5, r4
 800ed04:	bf8c      	ite	hi
 800ed06:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ed0a:	2400      	movls	r4, #0
 800ed0c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ed10:	fa01 f000 	lsl.w	r0, r1, r0
 800ed14:	fa24 f40c 	lsr.w	r4, r4, ip
 800ed18:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ed1c:	ea40 0204 	orr.w	r2, r0, r4
 800ed20:	e7db      	b.n	800ecda <__b2d+0x4a>
 800ed22:	ea44 030c 	orr.w	r3, r4, ip
 800ed26:	460a      	mov	r2, r1
 800ed28:	e7d7      	b.n	800ecda <__b2d+0x4a>
 800ed2a:	bf00      	nop
 800ed2c:	3ff00000 	.word	0x3ff00000

0800ed30 <__d2b>:
 800ed30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed34:	4689      	mov	r9, r1
 800ed36:	2101      	movs	r1, #1
 800ed38:	ec57 6b10 	vmov	r6, r7, d0
 800ed3c:	4690      	mov	r8, r2
 800ed3e:	f7ff fc09 	bl	800e554 <_Balloc>
 800ed42:	4604      	mov	r4, r0
 800ed44:	b930      	cbnz	r0, 800ed54 <__d2b+0x24>
 800ed46:	4602      	mov	r2, r0
 800ed48:	4b25      	ldr	r3, [pc, #148]	; (800ede0 <__d2b+0xb0>)
 800ed4a:	4826      	ldr	r0, [pc, #152]	; (800ede4 <__d2b+0xb4>)
 800ed4c:	f240 310a 	movw	r1, #778	; 0x30a
 800ed50:	f000 fc18 	bl	800f584 <__assert_func>
 800ed54:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ed58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ed5c:	bb35      	cbnz	r5, 800edac <__d2b+0x7c>
 800ed5e:	2e00      	cmp	r6, #0
 800ed60:	9301      	str	r3, [sp, #4]
 800ed62:	d028      	beq.n	800edb6 <__d2b+0x86>
 800ed64:	4668      	mov	r0, sp
 800ed66:	9600      	str	r6, [sp, #0]
 800ed68:	f7ff fd06 	bl	800e778 <__lo0bits>
 800ed6c:	9900      	ldr	r1, [sp, #0]
 800ed6e:	b300      	cbz	r0, 800edb2 <__d2b+0x82>
 800ed70:	9a01      	ldr	r2, [sp, #4]
 800ed72:	f1c0 0320 	rsb	r3, r0, #32
 800ed76:	fa02 f303 	lsl.w	r3, r2, r3
 800ed7a:	430b      	orrs	r3, r1
 800ed7c:	40c2      	lsrs	r2, r0
 800ed7e:	6163      	str	r3, [r4, #20]
 800ed80:	9201      	str	r2, [sp, #4]
 800ed82:	9b01      	ldr	r3, [sp, #4]
 800ed84:	61a3      	str	r3, [r4, #24]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	bf14      	ite	ne
 800ed8a:	2202      	movne	r2, #2
 800ed8c:	2201      	moveq	r2, #1
 800ed8e:	6122      	str	r2, [r4, #16]
 800ed90:	b1d5      	cbz	r5, 800edc8 <__d2b+0x98>
 800ed92:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ed96:	4405      	add	r5, r0
 800ed98:	f8c9 5000 	str.w	r5, [r9]
 800ed9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eda0:	f8c8 0000 	str.w	r0, [r8]
 800eda4:	4620      	mov	r0, r4
 800eda6:	b003      	add	sp, #12
 800eda8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800edb0:	e7d5      	b.n	800ed5e <__d2b+0x2e>
 800edb2:	6161      	str	r1, [r4, #20]
 800edb4:	e7e5      	b.n	800ed82 <__d2b+0x52>
 800edb6:	a801      	add	r0, sp, #4
 800edb8:	f7ff fcde 	bl	800e778 <__lo0bits>
 800edbc:	9b01      	ldr	r3, [sp, #4]
 800edbe:	6163      	str	r3, [r4, #20]
 800edc0:	2201      	movs	r2, #1
 800edc2:	6122      	str	r2, [r4, #16]
 800edc4:	3020      	adds	r0, #32
 800edc6:	e7e3      	b.n	800ed90 <__d2b+0x60>
 800edc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800edcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800edd0:	f8c9 0000 	str.w	r0, [r9]
 800edd4:	6918      	ldr	r0, [r3, #16]
 800edd6:	f7ff fcaf 	bl	800e738 <__hi0bits>
 800edda:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800edde:	e7df      	b.n	800eda0 <__d2b+0x70>
 800ede0:	08010e20 	.word	0x08010e20
 800ede4:	08010eac 	.word	0x08010eac

0800ede8 <__ratio>:
 800ede8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edec:	4688      	mov	r8, r1
 800edee:	4669      	mov	r1, sp
 800edf0:	4681      	mov	r9, r0
 800edf2:	f7ff ff4d 	bl	800ec90 <__b2d>
 800edf6:	a901      	add	r1, sp, #4
 800edf8:	4640      	mov	r0, r8
 800edfa:	ec55 4b10 	vmov	r4, r5, d0
 800edfe:	f7ff ff47 	bl	800ec90 <__b2d>
 800ee02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee06:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ee0a:	eba3 0c02 	sub.w	ip, r3, r2
 800ee0e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ee12:	1a9b      	subs	r3, r3, r2
 800ee14:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ee18:	ec51 0b10 	vmov	r0, r1, d0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	bfd6      	itet	le
 800ee20:	460a      	movle	r2, r1
 800ee22:	462a      	movgt	r2, r5
 800ee24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ee28:	468b      	mov	fp, r1
 800ee2a:	462f      	mov	r7, r5
 800ee2c:	bfd4      	ite	le
 800ee2e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ee32:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ee36:	4620      	mov	r0, r4
 800ee38:	ee10 2a10 	vmov	r2, s0
 800ee3c:	465b      	mov	r3, fp
 800ee3e:	4639      	mov	r1, r7
 800ee40:	f7f1 fd24 	bl	800088c <__aeabi_ddiv>
 800ee44:	ec41 0b10 	vmov	d0, r0, r1
 800ee48:	b003      	add	sp, #12
 800ee4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee4e <__copybits>:
 800ee4e:	3901      	subs	r1, #1
 800ee50:	b570      	push	{r4, r5, r6, lr}
 800ee52:	1149      	asrs	r1, r1, #5
 800ee54:	6914      	ldr	r4, [r2, #16]
 800ee56:	3101      	adds	r1, #1
 800ee58:	f102 0314 	add.w	r3, r2, #20
 800ee5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee60:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee64:	1f05      	subs	r5, r0, #4
 800ee66:	42a3      	cmp	r3, r4
 800ee68:	d30c      	bcc.n	800ee84 <__copybits+0x36>
 800ee6a:	1aa3      	subs	r3, r4, r2
 800ee6c:	3b11      	subs	r3, #17
 800ee6e:	f023 0303 	bic.w	r3, r3, #3
 800ee72:	3211      	adds	r2, #17
 800ee74:	42a2      	cmp	r2, r4
 800ee76:	bf88      	it	hi
 800ee78:	2300      	movhi	r3, #0
 800ee7a:	4418      	add	r0, r3
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	4288      	cmp	r0, r1
 800ee80:	d305      	bcc.n	800ee8e <__copybits+0x40>
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	f853 6b04 	ldr.w	r6, [r3], #4
 800ee88:	f845 6f04 	str.w	r6, [r5, #4]!
 800ee8c:	e7eb      	b.n	800ee66 <__copybits+0x18>
 800ee8e:	f840 3b04 	str.w	r3, [r0], #4
 800ee92:	e7f4      	b.n	800ee7e <__copybits+0x30>

0800ee94 <__any_on>:
 800ee94:	f100 0214 	add.w	r2, r0, #20
 800ee98:	6900      	ldr	r0, [r0, #16]
 800ee9a:	114b      	asrs	r3, r1, #5
 800ee9c:	4298      	cmp	r0, r3
 800ee9e:	b510      	push	{r4, lr}
 800eea0:	db11      	blt.n	800eec6 <__any_on+0x32>
 800eea2:	dd0a      	ble.n	800eeba <__any_on+0x26>
 800eea4:	f011 011f 	ands.w	r1, r1, #31
 800eea8:	d007      	beq.n	800eeba <__any_on+0x26>
 800eeaa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eeae:	fa24 f001 	lsr.w	r0, r4, r1
 800eeb2:	fa00 f101 	lsl.w	r1, r0, r1
 800eeb6:	428c      	cmp	r4, r1
 800eeb8:	d10b      	bne.n	800eed2 <__any_on+0x3e>
 800eeba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d803      	bhi.n	800eeca <__any_on+0x36>
 800eec2:	2000      	movs	r0, #0
 800eec4:	bd10      	pop	{r4, pc}
 800eec6:	4603      	mov	r3, r0
 800eec8:	e7f7      	b.n	800eeba <__any_on+0x26>
 800eeca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eece:	2900      	cmp	r1, #0
 800eed0:	d0f5      	beq.n	800eebe <__any_on+0x2a>
 800eed2:	2001      	movs	r0, #1
 800eed4:	e7f6      	b.n	800eec4 <__any_on+0x30>

0800eed6 <_calloc_r>:
 800eed6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eed8:	fba1 2402 	umull	r2, r4, r1, r2
 800eedc:	b94c      	cbnz	r4, 800eef2 <_calloc_r+0x1c>
 800eede:	4611      	mov	r1, r2
 800eee0:	9201      	str	r2, [sp, #4]
 800eee2:	f7fb ff43 	bl	800ad6c <_malloc_r>
 800eee6:	9a01      	ldr	r2, [sp, #4]
 800eee8:	4605      	mov	r5, r0
 800eeea:	b930      	cbnz	r0, 800eefa <_calloc_r+0x24>
 800eeec:	4628      	mov	r0, r5
 800eeee:	b003      	add	sp, #12
 800eef0:	bd30      	pop	{r4, r5, pc}
 800eef2:	220c      	movs	r2, #12
 800eef4:	6002      	str	r2, [r0, #0]
 800eef6:	2500      	movs	r5, #0
 800eef8:	e7f8      	b.n	800eeec <_calloc_r+0x16>
 800eefa:	4621      	mov	r1, r4
 800eefc:	f7fb ff0d 	bl	800ad1a <memset>
 800ef00:	e7f4      	b.n	800eeec <_calloc_r+0x16>
	...

0800ef04 <_free_r>:
 800ef04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef06:	2900      	cmp	r1, #0
 800ef08:	d044      	beq.n	800ef94 <_free_r+0x90>
 800ef0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef0e:	9001      	str	r0, [sp, #4]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f1a1 0404 	sub.w	r4, r1, #4
 800ef16:	bfb8      	it	lt
 800ef18:	18e4      	addlt	r4, r4, r3
 800ef1a:	f7ff fb0f 	bl	800e53c <__malloc_lock>
 800ef1e:	4a1e      	ldr	r2, [pc, #120]	; (800ef98 <_free_r+0x94>)
 800ef20:	9801      	ldr	r0, [sp, #4]
 800ef22:	6813      	ldr	r3, [r2, #0]
 800ef24:	b933      	cbnz	r3, 800ef34 <_free_r+0x30>
 800ef26:	6063      	str	r3, [r4, #4]
 800ef28:	6014      	str	r4, [r2, #0]
 800ef2a:	b003      	add	sp, #12
 800ef2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef30:	f7ff bb0a 	b.w	800e548 <__malloc_unlock>
 800ef34:	42a3      	cmp	r3, r4
 800ef36:	d908      	bls.n	800ef4a <_free_r+0x46>
 800ef38:	6825      	ldr	r5, [r4, #0]
 800ef3a:	1961      	adds	r1, r4, r5
 800ef3c:	428b      	cmp	r3, r1
 800ef3e:	bf01      	itttt	eq
 800ef40:	6819      	ldreq	r1, [r3, #0]
 800ef42:	685b      	ldreq	r3, [r3, #4]
 800ef44:	1949      	addeq	r1, r1, r5
 800ef46:	6021      	streq	r1, [r4, #0]
 800ef48:	e7ed      	b.n	800ef26 <_free_r+0x22>
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	685b      	ldr	r3, [r3, #4]
 800ef4e:	b10b      	cbz	r3, 800ef54 <_free_r+0x50>
 800ef50:	42a3      	cmp	r3, r4
 800ef52:	d9fa      	bls.n	800ef4a <_free_r+0x46>
 800ef54:	6811      	ldr	r1, [r2, #0]
 800ef56:	1855      	adds	r5, r2, r1
 800ef58:	42a5      	cmp	r5, r4
 800ef5a:	d10b      	bne.n	800ef74 <_free_r+0x70>
 800ef5c:	6824      	ldr	r4, [r4, #0]
 800ef5e:	4421      	add	r1, r4
 800ef60:	1854      	adds	r4, r2, r1
 800ef62:	42a3      	cmp	r3, r4
 800ef64:	6011      	str	r1, [r2, #0]
 800ef66:	d1e0      	bne.n	800ef2a <_free_r+0x26>
 800ef68:	681c      	ldr	r4, [r3, #0]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	6053      	str	r3, [r2, #4]
 800ef6e:	4421      	add	r1, r4
 800ef70:	6011      	str	r1, [r2, #0]
 800ef72:	e7da      	b.n	800ef2a <_free_r+0x26>
 800ef74:	d902      	bls.n	800ef7c <_free_r+0x78>
 800ef76:	230c      	movs	r3, #12
 800ef78:	6003      	str	r3, [r0, #0]
 800ef7a:	e7d6      	b.n	800ef2a <_free_r+0x26>
 800ef7c:	6825      	ldr	r5, [r4, #0]
 800ef7e:	1961      	adds	r1, r4, r5
 800ef80:	428b      	cmp	r3, r1
 800ef82:	bf04      	itt	eq
 800ef84:	6819      	ldreq	r1, [r3, #0]
 800ef86:	685b      	ldreq	r3, [r3, #4]
 800ef88:	6063      	str	r3, [r4, #4]
 800ef8a:	bf04      	itt	eq
 800ef8c:	1949      	addeq	r1, r1, r5
 800ef8e:	6021      	streq	r1, [r4, #0]
 800ef90:	6054      	str	r4, [r2, #4]
 800ef92:	e7ca      	b.n	800ef2a <_free_r+0x26>
 800ef94:	b003      	add	sp, #12
 800ef96:	bd30      	pop	{r4, r5, pc}
 800ef98:	20005df0 	.word	0x20005df0

0800ef9c <__ssputs_r>:
 800ef9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efa0:	688e      	ldr	r6, [r1, #8]
 800efa2:	429e      	cmp	r6, r3
 800efa4:	4682      	mov	sl, r0
 800efa6:	460c      	mov	r4, r1
 800efa8:	4690      	mov	r8, r2
 800efaa:	461f      	mov	r7, r3
 800efac:	d838      	bhi.n	800f020 <__ssputs_r+0x84>
 800efae:	898a      	ldrh	r2, [r1, #12]
 800efb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800efb4:	d032      	beq.n	800f01c <__ssputs_r+0x80>
 800efb6:	6825      	ldr	r5, [r4, #0]
 800efb8:	6909      	ldr	r1, [r1, #16]
 800efba:	eba5 0901 	sub.w	r9, r5, r1
 800efbe:	6965      	ldr	r5, [r4, #20]
 800efc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800efc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800efc8:	3301      	adds	r3, #1
 800efca:	444b      	add	r3, r9
 800efcc:	106d      	asrs	r5, r5, #1
 800efce:	429d      	cmp	r5, r3
 800efd0:	bf38      	it	cc
 800efd2:	461d      	movcc	r5, r3
 800efd4:	0553      	lsls	r3, r2, #21
 800efd6:	d531      	bpl.n	800f03c <__ssputs_r+0xa0>
 800efd8:	4629      	mov	r1, r5
 800efda:	f7fb fec7 	bl	800ad6c <_malloc_r>
 800efde:	4606      	mov	r6, r0
 800efe0:	b950      	cbnz	r0, 800eff8 <__ssputs_r+0x5c>
 800efe2:	230c      	movs	r3, #12
 800efe4:	f8ca 3000 	str.w	r3, [sl]
 800efe8:	89a3      	ldrh	r3, [r4, #12]
 800efea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efee:	81a3      	strh	r3, [r4, #12]
 800eff0:	f04f 30ff 	mov.w	r0, #4294967295
 800eff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eff8:	6921      	ldr	r1, [r4, #16]
 800effa:	464a      	mov	r2, r9
 800effc:	f7fb fe7f 	bl	800acfe <memcpy>
 800f000:	89a3      	ldrh	r3, [r4, #12]
 800f002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f00a:	81a3      	strh	r3, [r4, #12]
 800f00c:	6126      	str	r6, [r4, #16]
 800f00e:	6165      	str	r5, [r4, #20]
 800f010:	444e      	add	r6, r9
 800f012:	eba5 0509 	sub.w	r5, r5, r9
 800f016:	6026      	str	r6, [r4, #0]
 800f018:	60a5      	str	r5, [r4, #8]
 800f01a:	463e      	mov	r6, r7
 800f01c:	42be      	cmp	r6, r7
 800f01e:	d900      	bls.n	800f022 <__ssputs_r+0x86>
 800f020:	463e      	mov	r6, r7
 800f022:	6820      	ldr	r0, [r4, #0]
 800f024:	4632      	mov	r2, r6
 800f026:	4641      	mov	r1, r8
 800f028:	f000 fafe 	bl	800f628 <memmove>
 800f02c:	68a3      	ldr	r3, [r4, #8]
 800f02e:	1b9b      	subs	r3, r3, r6
 800f030:	60a3      	str	r3, [r4, #8]
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	4433      	add	r3, r6
 800f036:	6023      	str	r3, [r4, #0]
 800f038:	2000      	movs	r0, #0
 800f03a:	e7db      	b.n	800eff4 <__ssputs_r+0x58>
 800f03c:	462a      	mov	r2, r5
 800f03e:	f000 fb0d 	bl	800f65c <_realloc_r>
 800f042:	4606      	mov	r6, r0
 800f044:	2800      	cmp	r0, #0
 800f046:	d1e1      	bne.n	800f00c <__ssputs_r+0x70>
 800f048:	6921      	ldr	r1, [r4, #16]
 800f04a:	4650      	mov	r0, sl
 800f04c:	f7ff ff5a 	bl	800ef04 <_free_r>
 800f050:	e7c7      	b.n	800efe2 <__ssputs_r+0x46>
	...

0800f054 <_svfiprintf_r>:
 800f054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f058:	4698      	mov	r8, r3
 800f05a:	898b      	ldrh	r3, [r1, #12]
 800f05c:	061b      	lsls	r3, r3, #24
 800f05e:	b09d      	sub	sp, #116	; 0x74
 800f060:	4607      	mov	r7, r0
 800f062:	460d      	mov	r5, r1
 800f064:	4614      	mov	r4, r2
 800f066:	d50e      	bpl.n	800f086 <_svfiprintf_r+0x32>
 800f068:	690b      	ldr	r3, [r1, #16]
 800f06a:	b963      	cbnz	r3, 800f086 <_svfiprintf_r+0x32>
 800f06c:	2140      	movs	r1, #64	; 0x40
 800f06e:	f7fb fe7d 	bl	800ad6c <_malloc_r>
 800f072:	6028      	str	r0, [r5, #0]
 800f074:	6128      	str	r0, [r5, #16]
 800f076:	b920      	cbnz	r0, 800f082 <_svfiprintf_r+0x2e>
 800f078:	230c      	movs	r3, #12
 800f07a:	603b      	str	r3, [r7, #0]
 800f07c:	f04f 30ff 	mov.w	r0, #4294967295
 800f080:	e0d1      	b.n	800f226 <_svfiprintf_r+0x1d2>
 800f082:	2340      	movs	r3, #64	; 0x40
 800f084:	616b      	str	r3, [r5, #20]
 800f086:	2300      	movs	r3, #0
 800f088:	9309      	str	r3, [sp, #36]	; 0x24
 800f08a:	2320      	movs	r3, #32
 800f08c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f090:	f8cd 800c 	str.w	r8, [sp, #12]
 800f094:	2330      	movs	r3, #48	; 0x30
 800f096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f240 <_svfiprintf_r+0x1ec>
 800f09a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f09e:	f04f 0901 	mov.w	r9, #1
 800f0a2:	4623      	mov	r3, r4
 800f0a4:	469a      	mov	sl, r3
 800f0a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f0aa:	b10a      	cbz	r2, 800f0b0 <_svfiprintf_r+0x5c>
 800f0ac:	2a25      	cmp	r2, #37	; 0x25
 800f0ae:	d1f9      	bne.n	800f0a4 <_svfiprintf_r+0x50>
 800f0b0:	ebba 0b04 	subs.w	fp, sl, r4
 800f0b4:	d00b      	beq.n	800f0ce <_svfiprintf_r+0x7a>
 800f0b6:	465b      	mov	r3, fp
 800f0b8:	4622      	mov	r2, r4
 800f0ba:	4629      	mov	r1, r5
 800f0bc:	4638      	mov	r0, r7
 800f0be:	f7ff ff6d 	bl	800ef9c <__ssputs_r>
 800f0c2:	3001      	adds	r0, #1
 800f0c4:	f000 80aa 	beq.w	800f21c <_svfiprintf_r+0x1c8>
 800f0c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0ca:	445a      	add	r2, fp
 800f0cc:	9209      	str	r2, [sp, #36]	; 0x24
 800f0ce:	f89a 3000 	ldrb.w	r3, [sl]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f000 80a2 	beq.w	800f21c <_svfiprintf_r+0x1c8>
 800f0d8:	2300      	movs	r3, #0
 800f0da:	f04f 32ff 	mov.w	r2, #4294967295
 800f0de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0e2:	f10a 0a01 	add.w	sl, sl, #1
 800f0e6:	9304      	str	r3, [sp, #16]
 800f0e8:	9307      	str	r3, [sp, #28]
 800f0ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0ee:	931a      	str	r3, [sp, #104]	; 0x68
 800f0f0:	4654      	mov	r4, sl
 800f0f2:	2205      	movs	r2, #5
 800f0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0f8:	4851      	ldr	r0, [pc, #324]	; (800f240 <_svfiprintf_r+0x1ec>)
 800f0fa:	f7f1 f891 	bl	8000220 <memchr>
 800f0fe:	9a04      	ldr	r2, [sp, #16]
 800f100:	b9d8      	cbnz	r0, 800f13a <_svfiprintf_r+0xe6>
 800f102:	06d0      	lsls	r0, r2, #27
 800f104:	bf44      	itt	mi
 800f106:	2320      	movmi	r3, #32
 800f108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f10c:	0711      	lsls	r1, r2, #28
 800f10e:	bf44      	itt	mi
 800f110:	232b      	movmi	r3, #43	; 0x2b
 800f112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f116:	f89a 3000 	ldrb.w	r3, [sl]
 800f11a:	2b2a      	cmp	r3, #42	; 0x2a
 800f11c:	d015      	beq.n	800f14a <_svfiprintf_r+0xf6>
 800f11e:	9a07      	ldr	r2, [sp, #28]
 800f120:	4654      	mov	r4, sl
 800f122:	2000      	movs	r0, #0
 800f124:	f04f 0c0a 	mov.w	ip, #10
 800f128:	4621      	mov	r1, r4
 800f12a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f12e:	3b30      	subs	r3, #48	; 0x30
 800f130:	2b09      	cmp	r3, #9
 800f132:	d94e      	bls.n	800f1d2 <_svfiprintf_r+0x17e>
 800f134:	b1b0      	cbz	r0, 800f164 <_svfiprintf_r+0x110>
 800f136:	9207      	str	r2, [sp, #28]
 800f138:	e014      	b.n	800f164 <_svfiprintf_r+0x110>
 800f13a:	eba0 0308 	sub.w	r3, r0, r8
 800f13e:	fa09 f303 	lsl.w	r3, r9, r3
 800f142:	4313      	orrs	r3, r2
 800f144:	9304      	str	r3, [sp, #16]
 800f146:	46a2      	mov	sl, r4
 800f148:	e7d2      	b.n	800f0f0 <_svfiprintf_r+0x9c>
 800f14a:	9b03      	ldr	r3, [sp, #12]
 800f14c:	1d19      	adds	r1, r3, #4
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	9103      	str	r1, [sp, #12]
 800f152:	2b00      	cmp	r3, #0
 800f154:	bfbb      	ittet	lt
 800f156:	425b      	neglt	r3, r3
 800f158:	f042 0202 	orrlt.w	r2, r2, #2
 800f15c:	9307      	strge	r3, [sp, #28]
 800f15e:	9307      	strlt	r3, [sp, #28]
 800f160:	bfb8      	it	lt
 800f162:	9204      	strlt	r2, [sp, #16]
 800f164:	7823      	ldrb	r3, [r4, #0]
 800f166:	2b2e      	cmp	r3, #46	; 0x2e
 800f168:	d10c      	bne.n	800f184 <_svfiprintf_r+0x130>
 800f16a:	7863      	ldrb	r3, [r4, #1]
 800f16c:	2b2a      	cmp	r3, #42	; 0x2a
 800f16e:	d135      	bne.n	800f1dc <_svfiprintf_r+0x188>
 800f170:	9b03      	ldr	r3, [sp, #12]
 800f172:	1d1a      	adds	r2, r3, #4
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	9203      	str	r2, [sp, #12]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	bfb8      	it	lt
 800f17c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f180:	3402      	adds	r4, #2
 800f182:	9305      	str	r3, [sp, #20]
 800f184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f250 <_svfiprintf_r+0x1fc>
 800f188:	7821      	ldrb	r1, [r4, #0]
 800f18a:	2203      	movs	r2, #3
 800f18c:	4650      	mov	r0, sl
 800f18e:	f7f1 f847 	bl	8000220 <memchr>
 800f192:	b140      	cbz	r0, 800f1a6 <_svfiprintf_r+0x152>
 800f194:	2340      	movs	r3, #64	; 0x40
 800f196:	eba0 000a 	sub.w	r0, r0, sl
 800f19a:	fa03 f000 	lsl.w	r0, r3, r0
 800f19e:	9b04      	ldr	r3, [sp, #16]
 800f1a0:	4303      	orrs	r3, r0
 800f1a2:	3401      	adds	r4, #1
 800f1a4:	9304      	str	r3, [sp, #16]
 800f1a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1aa:	4826      	ldr	r0, [pc, #152]	; (800f244 <_svfiprintf_r+0x1f0>)
 800f1ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1b0:	2206      	movs	r2, #6
 800f1b2:	f7f1 f835 	bl	8000220 <memchr>
 800f1b6:	2800      	cmp	r0, #0
 800f1b8:	d038      	beq.n	800f22c <_svfiprintf_r+0x1d8>
 800f1ba:	4b23      	ldr	r3, [pc, #140]	; (800f248 <_svfiprintf_r+0x1f4>)
 800f1bc:	bb1b      	cbnz	r3, 800f206 <_svfiprintf_r+0x1b2>
 800f1be:	9b03      	ldr	r3, [sp, #12]
 800f1c0:	3307      	adds	r3, #7
 800f1c2:	f023 0307 	bic.w	r3, r3, #7
 800f1c6:	3308      	adds	r3, #8
 800f1c8:	9303      	str	r3, [sp, #12]
 800f1ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1cc:	4433      	add	r3, r6
 800f1ce:	9309      	str	r3, [sp, #36]	; 0x24
 800f1d0:	e767      	b.n	800f0a2 <_svfiprintf_r+0x4e>
 800f1d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1d6:	460c      	mov	r4, r1
 800f1d8:	2001      	movs	r0, #1
 800f1da:	e7a5      	b.n	800f128 <_svfiprintf_r+0xd4>
 800f1dc:	2300      	movs	r3, #0
 800f1de:	3401      	adds	r4, #1
 800f1e0:	9305      	str	r3, [sp, #20]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	f04f 0c0a 	mov.w	ip, #10
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1ee:	3a30      	subs	r2, #48	; 0x30
 800f1f0:	2a09      	cmp	r2, #9
 800f1f2:	d903      	bls.n	800f1fc <_svfiprintf_r+0x1a8>
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d0c5      	beq.n	800f184 <_svfiprintf_r+0x130>
 800f1f8:	9105      	str	r1, [sp, #20]
 800f1fa:	e7c3      	b.n	800f184 <_svfiprintf_r+0x130>
 800f1fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f200:	4604      	mov	r4, r0
 800f202:	2301      	movs	r3, #1
 800f204:	e7f0      	b.n	800f1e8 <_svfiprintf_r+0x194>
 800f206:	ab03      	add	r3, sp, #12
 800f208:	9300      	str	r3, [sp, #0]
 800f20a:	462a      	mov	r2, r5
 800f20c:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <_svfiprintf_r+0x1f8>)
 800f20e:	a904      	add	r1, sp, #16
 800f210:	4638      	mov	r0, r7
 800f212:	f7fb febf 	bl	800af94 <_printf_float>
 800f216:	1c42      	adds	r2, r0, #1
 800f218:	4606      	mov	r6, r0
 800f21a:	d1d6      	bne.n	800f1ca <_svfiprintf_r+0x176>
 800f21c:	89ab      	ldrh	r3, [r5, #12]
 800f21e:	065b      	lsls	r3, r3, #25
 800f220:	f53f af2c 	bmi.w	800f07c <_svfiprintf_r+0x28>
 800f224:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f226:	b01d      	add	sp, #116	; 0x74
 800f228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22c:	ab03      	add	r3, sp, #12
 800f22e:	9300      	str	r3, [sp, #0]
 800f230:	462a      	mov	r2, r5
 800f232:	4b06      	ldr	r3, [pc, #24]	; (800f24c <_svfiprintf_r+0x1f8>)
 800f234:	a904      	add	r1, sp, #16
 800f236:	4638      	mov	r0, r7
 800f238:	f7fc f950 	bl	800b4dc <_printf_i>
 800f23c:	e7eb      	b.n	800f216 <_svfiprintf_r+0x1c2>
 800f23e:	bf00      	nop
 800f240:	08011004 	.word	0x08011004
 800f244:	0801100e 	.word	0x0801100e
 800f248:	0800af95 	.word	0x0800af95
 800f24c:	0800ef9d 	.word	0x0800ef9d
 800f250:	0801100a 	.word	0x0801100a

0800f254 <__sfputc_r>:
 800f254:	6893      	ldr	r3, [r2, #8]
 800f256:	3b01      	subs	r3, #1
 800f258:	2b00      	cmp	r3, #0
 800f25a:	b410      	push	{r4}
 800f25c:	6093      	str	r3, [r2, #8]
 800f25e:	da08      	bge.n	800f272 <__sfputc_r+0x1e>
 800f260:	6994      	ldr	r4, [r2, #24]
 800f262:	42a3      	cmp	r3, r4
 800f264:	db01      	blt.n	800f26a <__sfputc_r+0x16>
 800f266:	290a      	cmp	r1, #10
 800f268:	d103      	bne.n	800f272 <__sfputc_r+0x1e>
 800f26a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f26e:	f7fd bd41 	b.w	800ccf4 <__swbuf_r>
 800f272:	6813      	ldr	r3, [r2, #0]
 800f274:	1c58      	adds	r0, r3, #1
 800f276:	6010      	str	r0, [r2, #0]
 800f278:	7019      	strb	r1, [r3, #0]
 800f27a:	4608      	mov	r0, r1
 800f27c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f280:	4770      	bx	lr

0800f282 <__sfputs_r>:
 800f282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f284:	4606      	mov	r6, r0
 800f286:	460f      	mov	r7, r1
 800f288:	4614      	mov	r4, r2
 800f28a:	18d5      	adds	r5, r2, r3
 800f28c:	42ac      	cmp	r4, r5
 800f28e:	d101      	bne.n	800f294 <__sfputs_r+0x12>
 800f290:	2000      	movs	r0, #0
 800f292:	e007      	b.n	800f2a4 <__sfputs_r+0x22>
 800f294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f298:	463a      	mov	r2, r7
 800f29a:	4630      	mov	r0, r6
 800f29c:	f7ff ffda 	bl	800f254 <__sfputc_r>
 800f2a0:	1c43      	adds	r3, r0, #1
 800f2a2:	d1f3      	bne.n	800f28c <__sfputs_r+0xa>
 800f2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2a8 <_vfiprintf_r>:
 800f2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	460d      	mov	r5, r1
 800f2ae:	b09d      	sub	sp, #116	; 0x74
 800f2b0:	4614      	mov	r4, r2
 800f2b2:	4698      	mov	r8, r3
 800f2b4:	4606      	mov	r6, r0
 800f2b6:	b118      	cbz	r0, 800f2c0 <_vfiprintf_r+0x18>
 800f2b8:	6983      	ldr	r3, [r0, #24]
 800f2ba:	b90b      	cbnz	r3, 800f2c0 <_vfiprintf_r+0x18>
 800f2bc:	f7fb fc5a 	bl	800ab74 <__sinit>
 800f2c0:	4b89      	ldr	r3, [pc, #548]	; (800f4e8 <_vfiprintf_r+0x240>)
 800f2c2:	429d      	cmp	r5, r3
 800f2c4:	d11b      	bne.n	800f2fe <_vfiprintf_r+0x56>
 800f2c6:	6875      	ldr	r5, [r6, #4]
 800f2c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2ca:	07d9      	lsls	r1, r3, #31
 800f2cc:	d405      	bmi.n	800f2da <_vfiprintf_r+0x32>
 800f2ce:	89ab      	ldrh	r3, [r5, #12]
 800f2d0:	059a      	lsls	r2, r3, #22
 800f2d2:	d402      	bmi.n	800f2da <_vfiprintf_r+0x32>
 800f2d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2d6:	f7fb fd10 	bl	800acfa <__retarget_lock_acquire_recursive>
 800f2da:	89ab      	ldrh	r3, [r5, #12]
 800f2dc:	071b      	lsls	r3, r3, #28
 800f2de:	d501      	bpl.n	800f2e4 <_vfiprintf_r+0x3c>
 800f2e0:	692b      	ldr	r3, [r5, #16]
 800f2e2:	b9eb      	cbnz	r3, 800f320 <_vfiprintf_r+0x78>
 800f2e4:	4629      	mov	r1, r5
 800f2e6:	4630      	mov	r0, r6
 800f2e8:	f7fd fd68 	bl	800cdbc <__swsetup_r>
 800f2ec:	b1c0      	cbz	r0, 800f320 <_vfiprintf_r+0x78>
 800f2ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2f0:	07dc      	lsls	r4, r3, #31
 800f2f2:	d50e      	bpl.n	800f312 <_vfiprintf_r+0x6a>
 800f2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f8:	b01d      	add	sp, #116	; 0x74
 800f2fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2fe:	4b7b      	ldr	r3, [pc, #492]	; (800f4ec <_vfiprintf_r+0x244>)
 800f300:	429d      	cmp	r5, r3
 800f302:	d101      	bne.n	800f308 <_vfiprintf_r+0x60>
 800f304:	68b5      	ldr	r5, [r6, #8]
 800f306:	e7df      	b.n	800f2c8 <_vfiprintf_r+0x20>
 800f308:	4b79      	ldr	r3, [pc, #484]	; (800f4f0 <_vfiprintf_r+0x248>)
 800f30a:	429d      	cmp	r5, r3
 800f30c:	bf08      	it	eq
 800f30e:	68f5      	ldreq	r5, [r6, #12]
 800f310:	e7da      	b.n	800f2c8 <_vfiprintf_r+0x20>
 800f312:	89ab      	ldrh	r3, [r5, #12]
 800f314:	0598      	lsls	r0, r3, #22
 800f316:	d4ed      	bmi.n	800f2f4 <_vfiprintf_r+0x4c>
 800f318:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f31a:	f7fb fcef 	bl	800acfc <__retarget_lock_release_recursive>
 800f31e:	e7e9      	b.n	800f2f4 <_vfiprintf_r+0x4c>
 800f320:	2300      	movs	r3, #0
 800f322:	9309      	str	r3, [sp, #36]	; 0x24
 800f324:	2320      	movs	r3, #32
 800f326:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f32a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f32e:	2330      	movs	r3, #48	; 0x30
 800f330:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f4f4 <_vfiprintf_r+0x24c>
 800f334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f338:	f04f 0901 	mov.w	r9, #1
 800f33c:	4623      	mov	r3, r4
 800f33e:	469a      	mov	sl, r3
 800f340:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f344:	b10a      	cbz	r2, 800f34a <_vfiprintf_r+0xa2>
 800f346:	2a25      	cmp	r2, #37	; 0x25
 800f348:	d1f9      	bne.n	800f33e <_vfiprintf_r+0x96>
 800f34a:	ebba 0b04 	subs.w	fp, sl, r4
 800f34e:	d00b      	beq.n	800f368 <_vfiprintf_r+0xc0>
 800f350:	465b      	mov	r3, fp
 800f352:	4622      	mov	r2, r4
 800f354:	4629      	mov	r1, r5
 800f356:	4630      	mov	r0, r6
 800f358:	f7ff ff93 	bl	800f282 <__sfputs_r>
 800f35c:	3001      	adds	r0, #1
 800f35e:	f000 80aa 	beq.w	800f4b6 <_vfiprintf_r+0x20e>
 800f362:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f364:	445a      	add	r2, fp
 800f366:	9209      	str	r2, [sp, #36]	; 0x24
 800f368:	f89a 3000 	ldrb.w	r3, [sl]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f000 80a2 	beq.w	800f4b6 <_vfiprintf_r+0x20e>
 800f372:	2300      	movs	r3, #0
 800f374:	f04f 32ff 	mov.w	r2, #4294967295
 800f378:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f37c:	f10a 0a01 	add.w	sl, sl, #1
 800f380:	9304      	str	r3, [sp, #16]
 800f382:	9307      	str	r3, [sp, #28]
 800f384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f388:	931a      	str	r3, [sp, #104]	; 0x68
 800f38a:	4654      	mov	r4, sl
 800f38c:	2205      	movs	r2, #5
 800f38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f392:	4858      	ldr	r0, [pc, #352]	; (800f4f4 <_vfiprintf_r+0x24c>)
 800f394:	f7f0 ff44 	bl	8000220 <memchr>
 800f398:	9a04      	ldr	r2, [sp, #16]
 800f39a:	b9d8      	cbnz	r0, 800f3d4 <_vfiprintf_r+0x12c>
 800f39c:	06d1      	lsls	r1, r2, #27
 800f39e:	bf44      	itt	mi
 800f3a0:	2320      	movmi	r3, #32
 800f3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3a6:	0713      	lsls	r3, r2, #28
 800f3a8:	bf44      	itt	mi
 800f3aa:	232b      	movmi	r3, #43	; 0x2b
 800f3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3b4:	2b2a      	cmp	r3, #42	; 0x2a
 800f3b6:	d015      	beq.n	800f3e4 <_vfiprintf_r+0x13c>
 800f3b8:	9a07      	ldr	r2, [sp, #28]
 800f3ba:	4654      	mov	r4, sl
 800f3bc:	2000      	movs	r0, #0
 800f3be:	f04f 0c0a 	mov.w	ip, #10
 800f3c2:	4621      	mov	r1, r4
 800f3c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3c8:	3b30      	subs	r3, #48	; 0x30
 800f3ca:	2b09      	cmp	r3, #9
 800f3cc:	d94e      	bls.n	800f46c <_vfiprintf_r+0x1c4>
 800f3ce:	b1b0      	cbz	r0, 800f3fe <_vfiprintf_r+0x156>
 800f3d0:	9207      	str	r2, [sp, #28]
 800f3d2:	e014      	b.n	800f3fe <_vfiprintf_r+0x156>
 800f3d4:	eba0 0308 	sub.w	r3, r0, r8
 800f3d8:	fa09 f303 	lsl.w	r3, r9, r3
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	9304      	str	r3, [sp, #16]
 800f3e0:	46a2      	mov	sl, r4
 800f3e2:	e7d2      	b.n	800f38a <_vfiprintf_r+0xe2>
 800f3e4:	9b03      	ldr	r3, [sp, #12]
 800f3e6:	1d19      	adds	r1, r3, #4
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	9103      	str	r1, [sp, #12]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	bfbb      	ittet	lt
 800f3f0:	425b      	neglt	r3, r3
 800f3f2:	f042 0202 	orrlt.w	r2, r2, #2
 800f3f6:	9307      	strge	r3, [sp, #28]
 800f3f8:	9307      	strlt	r3, [sp, #28]
 800f3fa:	bfb8      	it	lt
 800f3fc:	9204      	strlt	r2, [sp, #16]
 800f3fe:	7823      	ldrb	r3, [r4, #0]
 800f400:	2b2e      	cmp	r3, #46	; 0x2e
 800f402:	d10c      	bne.n	800f41e <_vfiprintf_r+0x176>
 800f404:	7863      	ldrb	r3, [r4, #1]
 800f406:	2b2a      	cmp	r3, #42	; 0x2a
 800f408:	d135      	bne.n	800f476 <_vfiprintf_r+0x1ce>
 800f40a:	9b03      	ldr	r3, [sp, #12]
 800f40c:	1d1a      	adds	r2, r3, #4
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	9203      	str	r2, [sp, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	bfb8      	it	lt
 800f416:	f04f 33ff 	movlt.w	r3, #4294967295
 800f41a:	3402      	adds	r4, #2
 800f41c:	9305      	str	r3, [sp, #20]
 800f41e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f504 <_vfiprintf_r+0x25c>
 800f422:	7821      	ldrb	r1, [r4, #0]
 800f424:	2203      	movs	r2, #3
 800f426:	4650      	mov	r0, sl
 800f428:	f7f0 fefa 	bl	8000220 <memchr>
 800f42c:	b140      	cbz	r0, 800f440 <_vfiprintf_r+0x198>
 800f42e:	2340      	movs	r3, #64	; 0x40
 800f430:	eba0 000a 	sub.w	r0, r0, sl
 800f434:	fa03 f000 	lsl.w	r0, r3, r0
 800f438:	9b04      	ldr	r3, [sp, #16]
 800f43a:	4303      	orrs	r3, r0
 800f43c:	3401      	adds	r4, #1
 800f43e:	9304      	str	r3, [sp, #16]
 800f440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f444:	482c      	ldr	r0, [pc, #176]	; (800f4f8 <_vfiprintf_r+0x250>)
 800f446:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f44a:	2206      	movs	r2, #6
 800f44c:	f7f0 fee8 	bl	8000220 <memchr>
 800f450:	2800      	cmp	r0, #0
 800f452:	d03f      	beq.n	800f4d4 <_vfiprintf_r+0x22c>
 800f454:	4b29      	ldr	r3, [pc, #164]	; (800f4fc <_vfiprintf_r+0x254>)
 800f456:	bb1b      	cbnz	r3, 800f4a0 <_vfiprintf_r+0x1f8>
 800f458:	9b03      	ldr	r3, [sp, #12]
 800f45a:	3307      	adds	r3, #7
 800f45c:	f023 0307 	bic.w	r3, r3, #7
 800f460:	3308      	adds	r3, #8
 800f462:	9303      	str	r3, [sp, #12]
 800f464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f466:	443b      	add	r3, r7
 800f468:	9309      	str	r3, [sp, #36]	; 0x24
 800f46a:	e767      	b.n	800f33c <_vfiprintf_r+0x94>
 800f46c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f470:	460c      	mov	r4, r1
 800f472:	2001      	movs	r0, #1
 800f474:	e7a5      	b.n	800f3c2 <_vfiprintf_r+0x11a>
 800f476:	2300      	movs	r3, #0
 800f478:	3401      	adds	r4, #1
 800f47a:	9305      	str	r3, [sp, #20]
 800f47c:	4619      	mov	r1, r3
 800f47e:	f04f 0c0a 	mov.w	ip, #10
 800f482:	4620      	mov	r0, r4
 800f484:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f488:	3a30      	subs	r2, #48	; 0x30
 800f48a:	2a09      	cmp	r2, #9
 800f48c:	d903      	bls.n	800f496 <_vfiprintf_r+0x1ee>
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d0c5      	beq.n	800f41e <_vfiprintf_r+0x176>
 800f492:	9105      	str	r1, [sp, #20]
 800f494:	e7c3      	b.n	800f41e <_vfiprintf_r+0x176>
 800f496:	fb0c 2101 	mla	r1, ip, r1, r2
 800f49a:	4604      	mov	r4, r0
 800f49c:	2301      	movs	r3, #1
 800f49e:	e7f0      	b.n	800f482 <_vfiprintf_r+0x1da>
 800f4a0:	ab03      	add	r3, sp, #12
 800f4a2:	9300      	str	r3, [sp, #0]
 800f4a4:	462a      	mov	r2, r5
 800f4a6:	4b16      	ldr	r3, [pc, #88]	; (800f500 <_vfiprintf_r+0x258>)
 800f4a8:	a904      	add	r1, sp, #16
 800f4aa:	4630      	mov	r0, r6
 800f4ac:	f7fb fd72 	bl	800af94 <_printf_float>
 800f4b0:	4607      	mov	r7, r0
 800f4b2:	1c78      	adds	r0, r7, #1
 800f4b4:	d1d6      	bne.n	800f464 <_vfiprintf_r+0x1bc>
 800f4b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4b8:	07d9      	lsls	r1, r3, #31
 800f4ba:	d405      	bmi.n	800f4c8 <_vfiprintf_r+0x220>
 800f4bc:	89ab      	ldrh	r3, [r5, #12]
 800f4be:	059a      	lsls	r2, r3, #22
 800f4c0:	d402      	bmi.n	800f4c8 <_vfiprintf_r+0x220>
 800f4c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4c4:	f7fb fc1a 	bl	800acfc <__retarget_lock_release_recursive>
 800f4c8:	89ab      	ldrh	r3, [r5, #12]
 800f4ca:	065b      	lsls	r3, r3, #25
 800f4cc:	f53f af12 	bmi.w	800f2f4 <_vfiprintf_r+0x4c>
 800f4d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4d2:	e711      	b.n	800f2f8 <_vfiprintf_r+0x50>
 800f4d4:	ab03      	add	r3, sp, #12
 800f4d6:	9300      	str	r3, [sp, #0]
 800f4d8:	462a      	mov	r2, r5
 800f4da:	4b09      	ldr	r3, [pc, #36]	; (800f500 <_vfiprintf_r+0x258>)
 800f4dc:	a904      	add	r1, sp, #16
 800f4de:	4630      	mov	r0, r6
 800f4e0:	f7fb fffc 	bl	800b4dc <_printf_i>
 800f4e4:	e7e4      	b.n	800f4b0 <_vfiprintf_r+0x208>
 800f4e6:	bf00      	nop
 800f4e8:	08010bd0 	.word	0x08010bd0
 800f4ec:	08010bf0 	.word	0x08010bf0
 800f4f0:	08010bb0 	.word	0x08010bb0
 800f4f4:	08011004 	.word	0x08011004
 800f4f8:	0801100e 	.word	0x0801100e
 800f4fc:	0800af95 	.word	0x0800af95
 800f500:	0800f283 	.word	0x0800f283
 800f504:	0801100a 	.word	0x0801100a

0800f508 <_read_r>:
 800f508:	b538      	push	{r3, r4, r5, lr}
 800f50a:	4d07      	ldr	r5, [pc, #28]	; (800f528 <_read_r+0x20>)
 800f50c:	4604      	mov	r4, r0
 800f50e:	4608      	mov	r0, r1
 800f510:	4611      	mov	r1, r2
 800f512:	2200      	movs	r2, #0
 800f514:	602a      	str	r2, [r5, #0]
 800f516:	461a      	mov	r2, r3
 800f518:	f7f2 f8a2 	bl	8001660 <_read>
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	d102      	bne.n	800f526 <_read_r+0x1e>
 800f520:	682b      	ldr	r3, [r5, #0]
 800f522:	b103      	cbz	r3, 800f526 <_read_r+0x1e>
 800f524:	6023      	str	r3, [r4, #0]
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	20005df8 	.word	0x20005df8
 800f52c:	00000000 	.word	0x00000000

0800f530 <nan>:
 800f530:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f538 <nan+0x8>
 800f534:	4770      	bx	lr
 800f536:	bf00      	nop
 800f538:	00000000 	.word	0x00000000
 800f53c:	7ff80000 	.word	0x7ff80000

0800f540 <strncmp>:
 800f540:	b510      	push	{r4, lr}
 800f542:	b17a      	cbz	r2, 800f564 <strncmp+0x24>
 800f544:	4603      	mov	r3, r0
 800f546:	3901      	subs	r1, #1
 800f548:	1884      	adds	r4, r0, r2
 800f54a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f54e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f552:	4290      	cmp	r0, r2
 800f554:	d101      	bne.n	800f55a <strncmp+0x1a>
 800f556:	42a3      	cmp	r3, r4
 800f558:	d101      	bne.n	800f55e <strncmp+0x1e>
 800f55a:	1a80      	subs	r0, r0, r2
 800f55c:	bd10      	pop	{r4, pc}
 800f55e:	2800      	cmp	r0, #0
 800f560:	d1f3      	bne.n	800f54a <strncmp+0xa>
 800f562:	e7fa      	b.n	800f55a <strncmp+0x1a>
 800f564:	4610      	mov	r0, r2
 800f566:	e7f9      	b.n	800f55c <strncmp+0x1c>

0800f568 <__ascii_wctomb>:
 800f568:	b149      	cbz	r1, 800f57e <__ascii_wctomb+0x16>
 800f56a:	2aff      	cmp	r2, #255	; 0xff
 800f56c:	bf85      	ittet	hi
 800f56e:	238a      	movhi	r3, #138	; 0x8a
 800f570:	6003      	strhi	r3, [r0, #0]
 800f572:	700a      	strbls	r2, [r1, #0]
 800f574:	f04f 30ff 	movhi.w	r0, #4294967295
 800f578:	bf98      	it	ls
 800f57a:	2001      	movls	r0, #1
 800f57c:	4770      	bx	lr
 800f57e:	4608      	mov	r0, r1
 800f580:	4770      	bx	lr
	...

0800f584 <__assert_func>:
 800f584:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f586:	4614      	mov	r4, r2
 800f588:	461a      	mov	r2, r3
 800f58a:	4b09      	ldr	r3, [pc, #36]	; (800f5b0 <__assert_func+0x2c>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4605      	mov	r5, r0
 800f590:	68d8      	ldr	r0, [r3, #12]
 800f592:	b14c      	cbz	r4, 800f5a8 <__assert_func+0x24>
 800f594:	4b07      	ldr	r3, [pc, #28]	; (800f5b4 <__assert_func+0x30>)
 800f596:	9100      	str	r1, [sp, #0]
 800f598:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f59c:	4906      	ldr	r1, [pc, #24]	; (800f5b8 <__assert_func+0x34>)
 800f59e:	462b      	mov	r3, r5
 800f5a0:	f000 f80e 	bl	800f5c0 <fiprintf>
 800f5a4:	f000 f889 	bl	800f6ba <abort>
 800f5a8:	4b04      	ldr	r3, [pc, #16]	; (800f5bc <__assert_func+0x38>)
 800f5aa:	461c      	mov	r4, r3
 800f5ac:	e7f3      	b.n	800f596 <__assert_func+0x12>
 800f5ae:	bf00      	nop
 800f5b0:	20000014 	.word	0x20000014
 800f5b4:	08011015 	.word	0x08011015
 800f5b8:	08011022 	.word	0x08011022
 800f5bc:	08011050 	.word	0x08011050

0800f5c0 <fiprintf>:
 800f5c0:	b40e      	push	{r1, r2, r3}
 800f5c2:	b503      	push	{r0, r1, lr}
 800f5c4:	4601      	mov	r1, r0
 800f5c6:	ab03      	add	r3, sp, #12
 800f5c8:	4805      	ldr	r0, [pc, #20]	; (800f5e0 <fiprintf+0x20>)
 800f5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5ce:	6800      	ldr	r0, [r0, #0]
 800f5d0:	9301      	str	r3, [sp, #4]
 800f5d2:	f7ff fe69 	bl	800f2a8 <_vfiprintf_r>
 800f5d6:	b002      	add	sp, #8
 800f5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5dc:	b003      	add	sp, #12
 800f5de:	4770      	bx	lr
 800f5e0:	20000014 	.word	0x20000014

0800f5e4 <_fstat_r>:
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	4d07      	ldr	r5, [pc, #28]	; (800f604 <_fstat_r+0x20>)
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	4608      	mov	r0, r1
 800f5ee:	4611      	mov	r1, r2
 800f5f0:	602b      	str	r3, [r5, #0]
 800f5f2:	f7f2 f87a 	bl	80016ea <_fstat>
 800f5f6:	1c43      	adds	r3, r0, #1
 800f5f8:	d102      	bne.n	800f600 <_fstat_r+0x1c>
 800f5fa:	682b      	ldr	r3, [r5, #0]
 800f5fc:	b103      	cbz	r3, 800f600 <_fstat_r+0x1c>
 800f5fe:	6023      	str	r3, [r4, #0]
 800f600:	bd38      	pop	{r3, r4, r5, pc}
 800f602:	bf00      	nop
 800f604:	20005df8 	.word	0x20005df8

0800f608 <_isatty_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d06      	ldr	r5, [pc, #24]	; (800f624 <_isatty_r+0x1c>)
 800f60c:	2300      	movs	r3, #0
 800f60e:	4604      	mov	r4, r0
 800f610:	4608      	mov	r0, r1
 800f612:	602b      	str	r3, [r5, #0]
 800f614:	f7f2 f879 	bl	800170a <_isatty>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	d102      	bne.n	800f622 <_isatty_r+0x1a>
 800f61c:	682b      	ldr	r3, [r5, #0]
 800f61e:	b103      	cbz	r3, 800f622 <_isatty_r+0x1a>
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	bd38      	pop	{r3, r4, r5, pc}
 800f624:	20005df8 	.word	0x20005df8

0800f628 <memmove>:
 800f628:	4288      	cmp	r0, r1
 800f62a:	b510      	push	{r4, lr}
 800f62c:	eb01 0402 	add.w	r4, r1, r2
 800f630:	d902      	bls.n	800f638 <memmove+0x10>
 800f632:	4284      	cmp	r4, r0
 800f634:	4623      	mov	r3, r4
 800f636:	d807      	bhi.n	800f648 <memmove+0x20>
 800f638:	1e43      	subs	r3, r0, #1
 800f63a:	42a1      	cmp	r1, r4
 800f63c:	d008      	beq.n	800f650 <memmove+0x28>
 800f63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f642:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f646:	e7f8      	b.n	800f63a <memmove+0x12>
 800f648:	4402      	add	r2, r0
 800f64a:	4601      	mov	r1, r0
 800f64c:	428a      	cmp	r2, r1
 800f64e:	d100      	bne.n	800f652 <memmove+0x2a>
 800f650:	bd10      	pop	{r4, pc}
 800f652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f65a:	e7f7      	b.n	800f64c <memmove+0x24>

0800f65c <_realloc_r>:
 800f65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f660:	4680      	mov	r8, r0
 800f662:	4614      	mov	r4, r2
 800f664:	460e      	mov	r6, r1
 800f666:	b921      	cbnz	r1, 800f672 <_realloc_r+0x16>
 800f668:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f66c:	4611      	mov	r1, r2
 800f66e:	f7fb bb7d 	b.w	800ad6c <_malloc_r>
 800f672:	b92a      	cbnz	r2, 800f680 <_realloc_r+0x24>
 800f674:	f7ff fc46 	bl	800ef04 <_free_r>
 800f678:	4625      	mov	r5, r4
 800f67a:	4628      	mov	r0, r5
 800f67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f680:	f000 f822 	bl	800f6c8 <_malloc_usable_size_r>
 800f684:	4284      	cmp	r4, r0
 800f686:	4607      	mov	r7, r0
 800f688:	d802      	bhi.n	800f690 <_realloc_r+0x34>
 800f68a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f68e:	d812      	bhi.n	800f6b6 <_realloc_r+0x5a>
 800f690:	4621      	mov	r1, r4
 800f692:	4640      	mov	r0, r8
 800f694:	f7fb fb6a 	bl	800ad6c <_malloc_r>
 800f698:	4605      	mov	r5, r0
 800f69a:	2800      	cmp	r0, #0
 800f69c:	d0ed      	beq.n	800f67a <_realloc_r+0x1e>
 800f69e:	42bc      	cmp	r4, r7
 800f6a0:	4622      	mov	r2, r4
 800f6a2:	4631      	mov	r1, r6
 800f6a4:	bf28      	it	cs
 800f6a6:	463a      	movcs	r2, r7
 800f6a8:	f7fb fb29 	bl	800acfe <memcpy>
 800f6ac:	4631      	mov	r1, r6
 800f6ae:	4640      	mov	r0, r8
 800f6b0:	f7ff fc28 	bl	800ef04 <_free_r>
 800f6b4:	e7e1      	b.n	800f67a <_realloc_r+0x1e>
 800f6b6:	4635      	mov	r5, r6
 800f6b8:	e7df      	b.n	800f67a <_realloc_r+0x1e>

0800f6ba <abort>:
 800f6ba:	b508      	push	{r3, lr}
 800f6bc:	2006      	movs	r0, #6
 800f6be:	f000 f833 	bl	800f728 <raise>
 800f6c2:	2001      	movs	r0, #1
 800f6c4:	f7f1 ffc2 	bl	800164c <_exit>

0800f6c8 <_malloc_usable_size_r>:
 800f6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6cc:	1f18      	subs	r0, r3, #4
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	bfbc      	itt	lt
 800f6d2:	580b      	ldrlt	r3, [r1, r0]
 800f6d4:	18c0      	addlt	r0, r0, r3
 800f6d6:	4770      	bx	lr

0800f6d8 <_raise_r>:
 800f6d8:	291f      	cmp	r1, #31
 800f6da:	b538      	push	{r3, r4, r5, lr}
 800f6dc:	4604      	mov	r4, r0
 800f6de:	460d      	mov	r5, r1
 800f6e0:	d904      	bls.n	800f6ec <_raise_r+0x14>
 800f6e2:	2316      	movs	r3, #22
 800f6e4:	6003      	str	r3, [r0, #0]
 800f6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ea:	bd38      	pop	{r3, r4, r5, pc}
 800f6ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f6ee:	b112      	cbz	r2, 800f6f6 <_raise_r+0x1e>
 800f6f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6f4:	b94b      	cbnz	r3, 800f70a <_raise_r+0x32>
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 f830 	bl	800f75c <_getpid_r>
 800f6fc:	462a      	mov	r2, r5
 800f6fe:	4601      	mov	r1, r0
 800f700:	4620      	mov	r0, r4
 800f702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f706:	f000 b817 	b.w	800f738 <_kill_r>
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d00a      	beq.n	800f724 <_raise_r+0x4c>
 800f70e:	1c59      	adds	r1, r3, #1
 800f710:	d103      	bne.n	800f71a <_raise_r+0x42>
 800f712:	2316      	movs	r3, #22
 800f714:	6003      	str	r3, [r0, #0]
 800f716:	2001      	movs	r0, #1
 800f718:	e7e7      	b.n	800f6ea <_raise_r+0x12>
 800f71a:	2400      	movs	r4, #0
 800f71c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f720:	4628      	mov	r0, r5
 800f722:	4798      	blx	r3
 800f724:	2000      	movs	r0, #0
 800f726:	e7e0      	b.n	800f6ea <_raise_r+0x12>

0800f728 <raise>:
 800f728:	4b02      	ldr	r3, [pc, #8]	; (800f734 <raise+0xc>)
 800f72a:	4601      	mov	r1, r0
 800f72c:	6818      	ldr	r0, [r3, #0]
 800f72e:	f7ff bfd3 	b.w	800f6d8 <_raise_r>
 800f732:	bf00      	nop
 800f734:	20000014 	.word	0x20000014

0800f738 <_kill_r>:
 800f738:	b538      	push	{r3, r4, r5, lr}
 800f73a:	4d07      	ldr	r5, [pc, #28]	; (800f758 <_kill_r+0x20>)
 800f73c:	2300      	movs	r3, #0
 800f73e:	4604      	mov	r4, r0
 800f740:	4608      	mov	r0, r1
 800f742:	4611      	mov	r1, r2
 800f744:	602b      	str	r3, [r5, #0]
 800f746:	f7f1 ff71 	bl	800162c <_kill>
 800f74a:	1c43      	adds	r3, r0, #1
 800f74c:	d102      	bne.n	800f754 <_kill_r+0x1c>
 800f74e:	682b      	ldr	r3, [r5, #0]
 800f750:	b103      	cbz	r3, 800f754 <_kill_r+0x1c>
 800f752:	6023      	str	r3, [r4, #0]
 800f754:	bd38      	pop	{r3, r4, r5, pc}
 800f756:	bf00      	nop
 800f758:	20005df8 	.word	0x20005df8

0800f75c <_getpid_r>:
 800f75c:	f7f1 bf5e 	b.w	800161c <_getpid>

0800f760 <_init>:
 800f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f762:	bf00      	nop
 800f764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f766:	bc08      	pop	{r3}
 800f768:	469e      	mov	lr, r3
 800f76a:	4770      	bx	lr

0800f76c <_fini>:
 800f76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76e:	bf00      	nop
 800f770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f772:	bc08      	pop	{r3}
 800f774:	469e      	mov	lr, r3
 800f776:	4770      	bx	lr
