
gps-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b928  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  0800bad8  0800bad8  0001bad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c034  0800c034  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c034  0800c034  0001c034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c03c  0800c03c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c03c  0800c03c  0001c03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00005164  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000534c  2000534c  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c98  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003827  00000000  00000000  00037eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  0003b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f58  00000000  00000000  0003c798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb06  00000000  00000000  0003d6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006874  00000000  00000000  0004c1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00052a6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005980  00000000  00000000  00052abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bac0 	.word	0x0800bac0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800bac0 	.word	0x0800bac0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
//	evtGrpHandle = xEventGroupCreate();

	GPS_TaskHandle = osThreadNew(StartGPSTask, NULL, &GPS_Task_attributes);
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <MX_FREERTOS_Init+0x18>)
 800101e:	2100      	movs	r1, #0
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_FREERTOS_Init+0x1c>)
 8001022:	f002 fe4d 	bl	8003cc0 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a03      	ldr	r2, [pc, #12]	; (8001038 <MX_FREERTOS_Init+0x20>)
 800102a:	6013      	str	r3, [r2, #0]
  */

/**
  * @}
  */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	0800bb44 	.word	0x0800bb44
 8001034:	0800103d 	.word	0x0800103d
 8001038:	200005b0 	.word	0x200005b0

0800103c <StartGPSTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGPSTask */
void StartGPSTask(void *argument)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGPSTask */
	GNSSParser_Status_t status, check;
	const GNSS_MsgTypeDef *gnssMsg;

	gnssDataMutexHandle = osMutexNew(&gnssDataMutex_attributes);
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <StartGPSTask+0x28>)
 8001046:	f002 fee8 	bl	8003e1a <osMutexNew>
 800104a:	4603      	mov	r3, r0
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <StartGPSTask+0x2c>)
 800104e:	6013      	str	r3, [r2, #0]

	printf("\n\rTeseo Consumer Task running\n\r");
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <StartGPSTask+0x30>)
 8001052:	f006 ffdf 	bl	8008014 <iprintf>
	GNSS_PARSER_Init(&GNSSParser_Data);
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <StartGPSTask+0x34>)
 8001058:	f005 fd78 	bl	8006b4c <GNSS_PARSER_Init>

	for(;;){
		osDelay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f002 fec1 	bl	8003de4 <osDelay>
 8001062:	e7fb      	b.n	800105c <StartGPSTask+0x20>
 8001064:	0800bb68 	.word	0x0800bb68
 8001068:	200005b4 	.word	0x200005b4
 800106c:	0800baf4 	.word	0x0800baf4
 8001070:	20000208 	.word	0x20000208

08001074 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MX_GPIO_Init+0xc4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a29      	ldr	r2, [pc, #164]	; (8001138 <MX_GPIO_Init+0xc4>)
 8001094:	f043 0310 	orr.w	r3, r3, #16
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_GPIO_Init+0xc4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0310 	and.w	r3, r3, #16
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_GPIO_Init+0xc4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a22      	ldr	r2, [pc, #136]	; (8001138 <MX_GPIO_Init+0xc4>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_GPIO_Init+0xc4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_GPIO_Init+0xc4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_GPIO_Init+0xc4>)
 80010cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_GPIO_Init+0xc4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_RED_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2118      	movs	r1, #24
 80010e2:	4816      	ldr	r0, [pc, #88]	; (800113c <MX_GPIO_Init+0xc8>)
 80010e4:	f000 ffe2 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_PWR_ON_GPIO_Port, GPS_PWR_ON_Pin, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ee:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_GPIO_Init+0xcc>)
 80010f0:	f000 ffdc 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin;
 80010f4:	2318      	movs	r3, #24
 80010f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	4619      	mov	r1, r3
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <MX_GPIO_Init+0xc8>)
 800110c:	f000 fe22 	bl	8001d54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_PWR_ON_Pin;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPS_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	4619      	mov	r1, r3
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_GPIO_Init+0xcc>)
 800112a:	f000 fe13 	bl	8001d54 <HAL_GPIO_Init>

}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40021000 	.word	0x40021000
 8001140:	40021800 	.word	0x40021800

08001144 <GPS_setDrvParam>:
 * Instance of UART private data handler
 */
GPS_DrvTypeDef GPS;

uint32_t GPS_setDrvParam(uint32_t param, uint32_t value)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	uint32_t status = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]

	switch(param)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <GPS_setDrvParam+0x1c>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d011      	beq.n	8001182 <GPS_setDrvParam+0x3e>
 800115e:	e03a      	b.n	80011d6 <GPS_setDrvParam+0x92>
	{
		case GPS_PWR_CTRL:
			if(value){
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d006      	beq.n	8001174 <GPS_setDrvParam+0x30>
				//#define GPS_PWR_ON_Pin GPIO_PIN_12
				//#define GPS_PWR_ON_GPIO_Port GPIOG
				HAL_GPIO_WritePin(GPS_PWR_ON_GPIO_Port, GPS_PWR_ON_Pin, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	481c      	ldr	r0, [pc, #112]	; (80011e0 <GPS_setDrvParam+0x9c>)
 800116e:	f000 ff9d 	bl	80020ac <HAL_GPIO_WritePin>
			}
			else{
				HAL_GPIO_WritePin(GPS_PWR_ON_GPIO_Port, GPS_PWR_ON_Pin, GPIO_PIN_RESET);
			}
			break;
 8001172:	e030      	b.n	80011d6 <GPS_setDrvParam+0x92>
				HAL_GPIO_WritePin(GPS_PWR_ON_GPIO_Port, GPS_PWR_ON_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800117a:	4819      	ldr	r0, [pc, #100]	; (80011e0 <GPS_setDrvParam+0x9c>)
 800117c:	f000 ff96 	bl	80020ac <HAL_GPIO_WritePin>
			break;
 8001180:	e029      	b.n	80011d6 <GPS_setDrvParam+0x92>

		case GPS_UART_INT_ON:
			if ((GPS.fsm_state == fsm_discard) && (value == 0U)){
 8001182:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <GPS_setDrvParam+0xa0>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <GPS_setDrvParam+0x4e>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d020      	beq.n	80011d4 <GPS_setDrvParam+0x90>
			    break;
			}

			if (value == 0U){
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <GPS_setDrvParam+0x68>
			    GPS.fsm_next_state = fsm_stop;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <GPS_setDrvParam+0xa0>)
 800119a:	2202      	movs	r2, #2
 800119c:	705a      	strb	r2, [r3, #1]

			    while (GPS.fsm_state != fsm_stop) {};
 800119e:	bf00      	nop
 80011a0:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <GPS_setDrvParam+0xa0>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d1fa      	bne.n	80011a0 <GPS_setDrvParam+0x5c>
			    break;
 80011aa:	e014      	b.n	80011d6 <GPS_setDrvParam+0x92>
			}

			GPS.pQueue = teseo_queue_init();
 80011ac:	f005 fe1a 	bl	8006de4 <teseo_queue_init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a0c      	ldr	r2, [pc, #48]	; (80011e4 <GPS_setDrvParam+0xa0>)
 80011b4:	6113      	str	r3, [r2, #16]
			GPS.wr_msg = NULL;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <GPS_setDrvParam+0xa0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
			GPS.fsm_state = fsm_discard;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <GPS_setDrvParam+0xa0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
			GPS.fsm_next_state = fsm_discard;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <GPS_setDrvParam+0xa0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	705a      	strb	r2, [r3, #1]

			(void)HAL_UART_Receive_IT(&huart6, &GPS.dummy_char, 1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	4907      	ldr	r1, [pc, #28]	; (80011e8 <GPS_setDrvParam+0xa4>)
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <GPS_setDrvParam+0xa8>)
 80011ce:	f001 fd60 	bl	8002c92 <HAL_UART_Receive_IT>

			break;
 80011d2:	e000      	b.n	80011d6 <GPS_setDrvParam+0x92>
			    break;
 80011d4:	bf00      	nop

	}

	return status;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021800 	.word	0x40021800
 80011e4:	200005b8 	.word	0x200005b8
 80011e8:	200005ba 	.word	0x200005ba
 80011ec:	20000614 	.word	0x20000614

080011f0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* redirect to USART */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80011f8:	1d39      	adds	r1, r7, #4
 80011fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fe:	2201      	movs	r2, #1
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <__io_putchar+0x20>)
 8001202:	f001 fc12 	bl	8002a2a <HAL_UART_Transmit>
  return ch;
 8001206:	687b      	ldr	r3, [r7, #4]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200005d0 	.word	0x200005d0

08001214 <__io_getchar>:
  * @brief  Retargets the C library scanf function to the USART.
  * @param  None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  /* Place your implementation of fgetc here */
  /* e.g. read a character on USART and loop until the end of read */
  uint8_t ch = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
  while (HAL_OK != HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 30000))
 800121e:	bf00      	nop
 8001220:	1df9      	adds	r1, r7, #7
 8001222:	f247 5330 	movw	r3, #30000	; 0x7530
 8001226:	2201      	movs	r2, #1
 8001228:	4805      	ldr	r0, [pc, #20]	; (8001240 <__io_getchar+0x2c>)
 800122a:	f001 fc90 	bl	8002b4e <HAL_UART_Receive>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f5      	bne.n	8001220 <__io_getchar+0xc>
  {
    ;
  }
  return ch;
 8001234:	79fb      	ldrb	r3, [r7, #7]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	200005d0 	.word	0x200005d0

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fb6e 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f81a 	bl	8001284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f7ff ff10 	bl	8001074 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001254:	f000 f9ae 	bl	80015b4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001258:	f000 f9d6 	bl	8001608 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("++Start GPS Tracker++\r\n");
 800125c:	4808      	ldr	r0, [pc, #32]	; (8001280 <main+0x3c>)
 800125e:	f006 ff5f 	bl	8008120 <puts>

  GPS_setDrvParam(GPS_UART_INT_ON, 0);
 8001262:	2100      	movs	r1, #0
 8001264:	2001      	movs	r0, #1
 8001266:	f7ff ff6d 	bl	8001144 <GPS_setDrvParam>

  GPS_setDrvParam(GPS_PWR_CTRL, 1);
 800126a:	2101      	movs	r1, #1
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff ff69 	bl	8001144 <GPS_setDrvParam>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001272:	f002 fcdb 	bl	8003c2c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001276:	f7ff fecf 	bl	8001018 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800127a:	f002 fcfb 	bl	8003c74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127e:	e7fe      	b.n	800127e <main+0x3a>
 8001280:	0800bb14 	.word	0x0800bb14

08001284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	; 0x50
 8001288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2230      	movs	r2, #48	; 0x30
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f005 ffa7 	bl	80071e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	2300      	movs	r3, #0
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <SystemClock_Config+0xb8>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	4a22      	ldr	r2, [pc, #136]	; (800133c <SystemClock_Config+0xb8>)
 80012b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b6:	6413      	str	r3, [r2, #64]	; 0x40
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <SystemClock_Config+0xb8>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012c4:	2300      	movs	r3, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <SystemClock_Config+0xbc>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <SystemClock_Config+0xbc>)
 80012d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <SystemClock_Config+0xbc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e4:	2302      	movs	r3, #2
 80012e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e8:	2301      	movs	r3, #1
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ec:	2310      	movs	r3, #16
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f4:	f107 0320 	add.w	r3, r7, #32
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fef1 	bl	80020e0 <HAL_RCC_OscConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001304:	f000 f81e 	bl	8001344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001308:	230f      	movs	r3, #15
 800130a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f001 f954 	bl	80025d0 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800132e:	f000 f809 	bl	8001344 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3750      	adds	r7, #80	; 0x50
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>
	...

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_MspInit+0x54>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_MspInit+0x54>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_MspInit+0x54>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_MspInit+0x54>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <HAL_MspInit+0x54>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_MspInit+0x54>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	210f      	movs	r1, #15
 8001392:	f06f 0001 	mvn.w	r0, #1
 8001396:	f000 fc14 	bl	8001bc2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 faf8 	bl	80019cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013dc:	f004 fb52 	bl	8005a84 <xTaskGetSchedulerState>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013e6:	f005 f937 	bl	8006658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013f4:	4802      	ldr	r0, [pc, #8]	; (8001400 <USART6_IRQHandler+0x10>)
 80013f6:	f001 fc7d 	bl	8002cf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000614 	.word	0x20000614

08001404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return 1;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_kill>:

int _kill(int pid, int sig)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800141e:	f005 fda7 	bl	8006f70 <__errno>
 8001422:	4603      	mov	r3, r0
 8001424:	2216      	movs	r2, #22
 8001426:	601a      	str	r2, [r3, #0]
  return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_exit>:

void _exit (int status)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ffe7 	bl	8001414 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001446:	e7fe      	b.n	8001446 <_exit+0x12>

08001448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00a      	b.n	8001470 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800145a:	f7ff fedb 	bl	8001214 <__io_getchar>
 800145e:	4601      	mov	r1, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf0      	blt.n	800145a <_read+0x12>
  }

  return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e009      	b.n	80014a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fea7 	bl	80011f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <_write+0x12>
  }
  return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:

int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
  return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f005 fd0c 	bl	8006f70 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20030000 	.word	0x20030000
 8001584:	00000400 	.word	0x00000400
 8001588:	200005cc 	.word	0x200005cc
 800158c:	20005350 	.word	0x20005350

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <MX_USART2_UART_Init+0x50>)
 80015bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015da:	220c      	movs	r2, #12
 80015dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART2_UART_Init+0x4c>)
 80015ec:	f001 f9d0 	bl	8002990 <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015f6:	f7ff fea5 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200005d0 	.word	0x200005d0
 8001604:	40004400 	.word	0x40004400

08001608 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <MX_USART6_UART_Init+0x50>)
 8001610:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 8001614:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001618:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b09      	ldr	r3, [pc, #36]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_USART6_UART_Init+0x4c>)
 8001640:	f001 f9a6 	bl	8002990 <HAL_UART_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800164a:	f7ff fe7b 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000614 	.word	0x20000614
 8001658:	40011400 	.word	0x40011400

0800165c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08c      	sub	sp, #48	; 0x30
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a36      	ldr	r2, [pc, #216]	; (8001754 <HAL_UART_MspInit+0xf8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12c      	bne.n	80016d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	4b35      	ldr	r3, [pc, #212]	; (8001758 <HAL_UART_MspInit+0xfc>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a34      	ldr	r2, [pc, #208]	; (8001758 <HAL_UART_MspInit+0xfc>)
 8001688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <HAL_UART_MspInit+0xfc>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_UART_MspInit+0xfc>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a2d      	ldr	r2, [pc, #180]	; (8001758 <HAL_UART_MspInit+0xfc>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_UART_MspInit+0xfc>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016b6:	230c      	movs	r3, #12
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c6:	2307      	movs	r3, #7
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	f107 031c 	add.w	r3, r7, #28
 80016ce:	4619      	mov	r1, r3
 80016d0:	4822      	ldr	r0, [pc, #136]	; (800175c <HAL_UART_MspInit+0x100>)
 80016d2:	f000 fb3f 	bl	8001d54 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80016d6:	e039      	b.n	800174c <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART6)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a20      	ldr	r2, [pc, #128]	; (8001760 <HAL_UART_MspInit+0x104>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d134      	bne.n	800174c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <HAL_UART_MspInit+0xfc>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <HAL_UART_MspInit+0xfc>)
 80016ec:	f043 0320 	orr.w	r3, r3, #32
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_UART_MspInit+0xfc>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_UART_MspInit+0xfc>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_UART_MspInit+0xfc>)
 8001708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_UART_MspInit+0xfc>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_RXD_3V3_Pin|GPS_TXD_3V3_Pin;
 800171a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800171e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800172c:	2308      	movs	r3, #8
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	4619      	mov	r1, r3
 8001736:	480b      	ldr	r0, [pc, #44]	; (8001764 <HAL_UART_MspInit+0x108>)
 8001738:	f000 fb0c 	bl	8001d54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2105      	movs	r1, #5
 8001740:	2047      	movs	r0, #71	; 0x47
 8001742:	f000 fa3e 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001746:	2047      	movs	r0, #71	; 0x47
 8001748:	f000 fa57 	bl	8001bfa <HAL_NVIC_EnableIRQ>
}
 800174c:	bf00      	nop
 800174e:	3730      	adds	r7, #48	; 0x30
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40004400 	.word	0x40004400
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000
 8001760:	40011400 	.word	0x40011400
 8001764:	40021800 	.word	0x40021800

08001768 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	if(huart->Instance == USART6){
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a53      	ldr	r2, [pc, #332]	; (80018c4 <HAL_UART_RxCpltCallback+0x15c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	f040 80a0 	bne.w	80018bc <HAL_UART_RxCpltCallback+0x154>
//		if (huart != teseo_io_data->huart)
//		{
//		return;
//		}

		GPS.fsm_restart = 1;
 800177c:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 800177e:	2201      	movs	r2, #1
 8001780:	721a      	strb	r2, [r3, #8]

		while(GPS.fsm_restart == 1)
 8001782:	e095      	b.n	80018b0 <HAL_UART_RxCpltCallback+0x148>
		{

		GPS.fsm_state = GPS.fsm_next_state;
 8001784:	4b50      	ldr	r3, [pc, #320]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b4f      	ldr	r3, [pc, #316]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 800178c:	701a      	strb	r2, [r3, #0]

		switch (GPS.fsm_state)
 800178e:	4b4e      	ldr	r3, [pc, #312]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <HAL_UART_RxCpltCallback+0x36>
 8001798:	2b01      	cmp	r3, #1
 800179a:	d045      	beq.n	8001828 <HAL_UART_RxCpltCallback+0xc0>
 800179c:	e084      	b.n	80018a8 <HAL_UART_RxCpltCallback+0x140>
		{

		case fsm_discard:
		  GPS.fsm_restart = 0;
 800179e:	4b4a      	ldr	r3, [pc, #296]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	721a      	strb	r2, [r3, #8]
		  GPS.fsm_next_state = fsm_discard;
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	705a      	strb	r2, [r3, #1]

		  if (GPS.dummy_char != (uint8_t)'$')
 80017aa:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017ac:	789b      	ldrb	r3, [r3, #2]
 80017ae:	2b24      	cmp	r3, #36	; 0x24
 80017b0:	d005      	beq.n	80017be <HAL_UART_RxCpltCallback+0x56>
		  {
			//Console_Debug((uint8_t *)".");
			(void)HAL_UART_Receive_IT(&huart6, &GPS.dummy_char, 1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	4945      	ldr	r1, [pc, #276]	; (80018cc <HAL_UART_RxCpltCallback+0x164>)
 80017b6:	4846      	ldr	r0, [pc, #280]	; (80018d0 <HAL_UART_RxCpltCallback+0x168>)
 80017b8:	f001 fa6b 	bl	8002c92 <HAL_UART_Receive_IT>
			break;
 80017bc:	e078      	b.n	80018b0 <HAL_UART_RxCpltCallback+0x148>
		  }

		  if (GPS.wr_msg == NULL)
 80017be:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d107      	bne.n	80017d6 <HAL_UART_RxCpltCallback+0x6e>
		  {
			GPS.wr_msg = teseo_queue_claim_wr_buffer(GPS.pQueue);
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f005 fb4d 	bl	8006e6a <teseo_queue_claim_wr_buffer>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4a3d      	ldr	r2, [pc, #244]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017d4:	6053      	str	r3, [r2, #4]
		  }

		  if (GPS.wr_msg == NULL)
 80017d6:	4b3c      	ldr	r3, [pc, #240]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <HAL_UART_RxCpltCallback+0x82>
		  {
			//Console_Debug((uint8_t *)".");
			(void)HAL_UART_Receive_IT(&huart6, &GPS.dummy_char, 1);
 80017de:	2201      	movs	r2, #1
 80017e0:	493a      	ldr	r1, [pc, #232]	; (80018cc <HAL_UART_RxCpltCallback+0x164>)
 80017e2:	483b      	ldr	r0, [pc, #236]	; (80018d0 <HAL_UART_RxCpltCallback+0x168>)
 80017e4:	f001 fa55 	bl	8002c92 <HAL_UART_Receive_IT>
			break;
 80017e8:	e062      	b.n	80018b0 <HAL_UART_RxCpltCallback+0x148>
		  }
		  //Console_Debug((uint8_t *)"S");

		  /* save '$' */
		  GPS.wr_msg->buf[GPS.wr_msg->len] = GPS.dummy_char;
 80017ea:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a33      	ldr	r2, [pc, #204]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80017fa:	7892      	ldrb	r2, [r2, #2]
 80017fc:	701a      	strb	r2, [r3, #0]
		  GPS.wr_msg->len++;
 80017fe:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	3201      	adds	r2, #1
 8001806:	605a      	str	r2, [r3, #4]
		  GPS.fsm_next_state = fsm_synch ;
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 800180a:	2201      	movs	r2, #1
 800180c:	705a      	strb	r2, [r3, #1]
		  (void)HAL_UART_Receive_IT(&huart6,(uint8_t *)&GPS.wr_msg->buf[GPS.wr_msg->len], 1);
 800180e:	4b2e      	ldr	r3, [pc, #184]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4413      	add	r3, r2
 800181c:	2201      	movs	r2, #1
 800181e:	4619      	mov	r1, r3
 8001820:	482b      	ldr	r0, [pc, #172]	; (80018d0 <HAL_UART_RxCpltCallback+0x168>)
 8001822:	f001 fa36 	bl	8002c92 <HAL_UART_Receive_IT>
		   break;
 8001826:	e043      	b.n	80018b0 <HAL_UART_RxCpltCallback+0x148>

		case fsm_synch:
		  GPS.fsm_restart = 0;
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 800182a:	2200      	movs	r2, #0
 800182c:	721a      	strb	r2, [r3, #8]

		  if (GPS.wr_msg->buf[GPS.wr_msg->len] == (uint8_t)'$')
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b24      	cmp	r3, #36	; 0x24
 8001840:	d11d      	bne.n	800187e <HAL_UART_RxCpltCallback+0x116>
		  {
			GPS.dummy_char = (uint8_t)'$';
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001844:	2224      	movs	r2, #36	; 0x24
 8001846:	709a      	strb	r2, [r3, #2]
			GPS.wr_msg->buf[GPS.wr_msg->len] = (uint8_t)'\0';
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	4413      	add	r3, r2
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
			teseo_queue_release_wr_buffer(GPS.pQueue, GPS.wr_msg);
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001860:	6852      	ldr	r2, [r2, #4]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f005 fb42 	bl	8006eee <teseo_queue_release_wr_buffer>
			GPS.wr_msg = NULL;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
			GPS.fsm_next_state = fsm_discard ;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001872:	2200      	movs	r2, #0
 8001874:	705a      	strb	r2, [r3, #1]
			/* check if we can resynch the new sentence */
			GPS.fsm_restart = 1;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001878:	2201      	movs	r2, #1
 800187a:	721a      	strb	r2, [r3, #8]
			break;
 800187c:	e018      	b.n	80018b0 <HAL_UART_RxCpltCallback+0x148>
		  }

		  //Console_Debug((uint8_t *)"+");
		  GPS.wr_msg->len++;
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	3201      	adds	r2, #1
 8001886:	605a      	str	r2, [r3, #4]
			GPS.wr_msg->len = 0;
			GPS.fsm_restart = 1;
			break;
		  }
		#endif
		  GPS.fsm_next_state = fsm_synch;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 800188a:	2201      	movs	r2, #1
 800188c:	705a      	strb	r2, [r3, #1]
		  (void)HAL_UART_Receive_IT(&huart6,(uint8_t *)&GPS.wr_msg->buf[GPS.wr_msg->len],1);
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	4413      	add	r3, r2
 800189c:	2201      	movs	r2, #1
 800189e:	4619      	mov	r1, r3
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_UART_RxCpltCallback+0x168>)
 80018a2:	f001 f9f6 	bl	8002c92 <HAL_UART_Receive_IT>
		  break;
 80018a6:	e003      	b.n	80018b0 <HAL_UART_RxCpltCallback+0x148>

		case fsm_stop:
		default:
		  GPS.fsm_restart = 0;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	721a      	strb	r2, [r3, #8]
		  break;
 80018ae:	bf00      	nop
		while(GPS.fsm_restart == 1)
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_UART_RxCpltCallback+0x160>)
 80018b2:	7a1b      	ldrb	r3, [r3, #8]
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f43f af64 	beq.w	8001784 <HAL_UART_RxCpltCallback+0x1c>

	}
	/* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40011400 	.word	0x40011400
 80018c8:	200005b8 	.word	0x200005b8
 80018cc:	200005ba 	.word	0x200005ba
 80018d0:	20000614 	.word	0x20000614

080018d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800190c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018f0:	4c0b      	ldr	r4, [pc, #44]	; (8001920 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fe:	f7ff fe47 	bl	8001590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001902:	f005 fc3b 	bl	800717c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001906:	f7ff fc9d 	bl	8001244 <main>
  bx  lr    
 800190a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800190c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001918:	0800c044 	.word	0x0800c044
  ldr r2, =_sbss
 800191c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001920:	2000534c 	.word	0x2000534c

08001924 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <HAL_Init+0x40>)
 8001932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_Init+0x40>)
 800193e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a07      	ldr	r2, [pc, #28]	; (8001968 <HAL_Init+0x40>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001950:	2003      	movs	r0, #3
 8001952:	f000 f92b 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001956:	200f      	movs	r0, #15
 8001958:	f000 f808 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800195c:	f7ff fcf8 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023c00 	.word	0x40023c00

0800196c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x54>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <HAL_InitTick+0x58>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001982:	fbb3 f3f1 	udiv	r3, r3, r1
 8001986:	fbb2 f3f3 	udiv	r3, r2, r3
 800198a:	4618      	mov	r0, r3
 800198c:	f000 f943 	bl	8001c16 <HAL_SYSTICK_Config>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e00e      	b.n	80019b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b0f      	cmp	r3, #15
 800199e:	d80a      	bhi.n	80019b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019a0:	2200      	movs	r2, #0
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	f04f 30ff 	mov.w	r0, #4294967295
 80019a8:	f000 f90b 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ac:	4a06      	ldr	r2, [pc, #24]	; (80019c8 <HAL_InitTick+0x5c>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e000      	b.n	80019b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000008 	.word	0x20000008
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000658 	.word	0x20000658

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000658 	.word	0x20000658

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	; (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	; (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	; (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	; 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff8e 	bl	8001aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	; (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff29 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff3e 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff8e 	bl	8001b00 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5d 	bl	8001aac <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff31 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa2 	bl	8001b68 <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c3c:	f7ff feda 	bl	80019f4 <HAL_GetTick>
 8001c40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d008      	beq.n	8001c60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e052      	b.n	8001d06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0216 	bic.w	r2, r2, #22
 8001c6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d103      	bne.n	8001c90 <HAL_DMA_Abort+0x62>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d007      	beq.n	8001ca0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0208 	bic.w	r2, r2, #8
 8001c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb0:	e013      	b.n	8001cda <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb2:	f7ff fe9f 	bl	80019f4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d90c      	bls.n	8001cda <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e015      	b.n	8001d06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e4      	bne.n	8001cb2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	223f      	movs	r2, #63	; 0x3f
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d004      	beq.n	8001d2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e00c      	b.n	8001d46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2205      	movs	r2, #5
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0201 	bic.w	r2, r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e177      	b.n	8002060 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8166 	bne.w	800205a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80c0 	beq.w	800205a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b66      	ldr	r3, [pc, #408]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a65      	ldr	r2, [pc, #404]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <HAL_GPIO_Init+0x324>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ef6:	4a61      	ldr	r2, [pc, #388]	; (800207c <HAL_GPIO_Init+0x328>)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	3302      	adds	r3, #2
 8001efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_GPIO_Init+0x32c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d037      	beq.n	8001f92 <HAL_GPIO_Init+0x23e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a57      	ldr	r2, [pc, #348]	; (8002084 <HAL_GPIO_Init+0x330>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d031      	beq.n	8001f8e <HAL_GPIO_Init+0x23a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a56      	ldr	r2, [pc, #344]	; (8002088 <HAL_GPIO_Init+0x334>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d02b      	beq.n	8001f8a <HAL_GPIO_Init+0x236>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a55      	ldr	r2, [pc, #340]	; (800208c <HAL_GPIO_Init+0x338>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d025      	beq.n	8001f86 <HAL_GPIO_Init+0x232>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a54      	ldr	r2, [pc, #336]	; (8002090 <HAL_GPIO_Init+0x33c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x22e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a53      	ldr	r2, [pc, #332]	; (8002094 <HAL_GPIO_Init+0x340>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x22a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a52      	ldr	r2, [pc, #328]	; (8002098 <HAL_GPIO_Init+0x344>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x226>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a51      	ldr	r2, [pc, #324]	; (800209c <HAL_GPIO_Init+0x348>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x222>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a50      	ldr	r2, [pc, #320]	; (80020a0 <HAL_GPIO_Init+0x34c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x21e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_GPIO_Init+0x350>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x21a>
 8001f6a:	2309      	movs	r3, #9
 8001f6c:	e012      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f6e:	230a      	movs	r3, #10
 8001f70:	e010      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f72:	2308      	movs	r3, #8
 8001f74:	e00e      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f76:	2307      	movs	r3, #7
 8001f78:	e00c      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f7a:	2306      	movs	r3, #6
 8001f7c:	e00a      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f7e:	2305      	movs	r3, #5
 8001f80:	e008      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f82:	2304      	movs	r3, #4
 8001f84:	e006      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f86:	2303      	movs	r3, #3
 8001f88:	e004      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	e002      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_GPIO_Init+0x240>
 8001f92:	2300      	movs	r3, #0
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	f002 0203 	and.w	r2, r2, #3
 8001f9a:	0092      	lsls	r2, r2, #2
 8001f9c:	4093      	lsls	r3, r2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fa4:	4935      	ldr	r1, [pc, #212]	; (800207c <HAL_GPIO_Init+0x328>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	3302      	adds	r3, #2
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd6:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fdc:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d003      	beq.n	8002000 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002000:	4a29      	ldr	r2, [pc, #164]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800202a:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <HAL_GPIO_Init+0x354>)
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <HAL_GPIO_Init+0x354>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3301      	adds	r3, #1
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b0f      	cmp	r3, #15
 8002064:	f67f ae84 	bls.w	8001d70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3724      	adds	r7, #36	; 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	40013800 	.word	0x40013800
 8002080:	40020000 	.word	0x40020000
 8002084:	40020400 	.word	0x40020400
 8002088:	40020800 	.word	0x40020800
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40021000 	.word	0x40021000
 8002094:	40021400 	.word	0x40021400
 8002098:	40021800 	.word	0x40021800
 800209c:	40021c00 	.word	0x40021c00
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40022400 	.word	0x40022400
 80020a8:	40013c00 	.word	0x40013c00

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e267      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d075      	beq.n	80021ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020fe:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d00c      	beq.n	8002124 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210a:	4b85      	ldr	r3, [pc, #532]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002112:	2b08      	cmp	r3, #8
 8002114:	d112      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002116:	4b82      	ldr	r3, [pc, #520]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002122:	d10b      	bne.n	800213c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d05b      	beq.n	80021e8 <HAL_RCC_OscConfig+0x108>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d157      	bne.n	80021e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e242      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d106      	bne.n	8002154 <HAL_RCC_OscConfig+0x74>
 8002146:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a75      	ldr	r2, [pc, #468]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a6f      	ldr	r2, [pc, #444]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b6d      	ldr	r3, [pc, #436]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a6c      	ldr	r2, [pc, #432]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xb0>
 8002178:	4b69      	ldr	r3, [pc, #420]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a68      	ldr	r2, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002198:	f7ff fc2c 	bl	80019f4 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fc28 	bl	80019f4 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e207      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b2:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xc0>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc18 	bl	80019f4 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fc14 	bl	80019f4 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e1f3      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021da:	4b51      	ldr	r3, [pc, #324]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0xe8>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d063      	beq.n	80022be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002202:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800220a:	2b08      	cmp	r3, #8
 800220c:	d11c      	bne.n	8002248 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220e:	4b44      	ldr	r3, [pc, #272]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d116      	bne.n	8002248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_RCC_OscConfig+0x152>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e1c7      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002232:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	4937      	ldr	r1, [pc, #220]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002246:	e03a      	b.n	80022be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d020      	beq.n	8002292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_RCC_OscConfig+0x244>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002256:	f7ff fbcd 	bl	80019f4 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800225e:	f7ff fbc9 	bl	80019f4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e1a8      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002270:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4925      	ldr	r1, [pc, #148]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]
 8002290:	e015      	b.n	80022be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCC_OscConfig+0x244>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fbac 	bl	80019f4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a0:	f7ff fba8 	bl	80019f4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e187      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d036      	beq.n	8002338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d016      	beq.n	8002300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_RCC_OscConfig+0x248>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7ff fb8c 	bl	80019f4 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e0:	f7ff fb88 	bl	80019f4 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e167      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x240>)
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x200>
 80022fe:	e01b      	b.n	8002338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_OscConfig+0x248>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002306:	f7ff fb75 	bl	80019f4 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800230c:	e00e      	b.n	800232c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800230e:	f7ff fb71 	bl	80019f4 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d907      	bls.n	800232c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e150      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
 8002320:	40023800 	.word	0x40023800
 8002324:	42470000 	.word	0x42470000
 8002328:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	4b88      	ldr	r3, [pc, #544]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800232e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ea      	bne.n	800230e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8097 	beq.w	8002474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10f      	bne.n	8002376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4a7c      	ldr	r2, [pc, #496]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	; 0x40
 8002366:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002372:	2301      	movs	r3, #1
 8002374:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b77      	ldr	r3, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d118      	bne.n	80023b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	4b74      	ldr	r3, [pc, #464]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a73      	ldr	r2, [pc, #460]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 8002388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238e:	f7ff fb31 	bl	80019f4 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7ff fb2d 	bl	80019f4 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e10c      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x474>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d106      	bne.n	80023ca <HAL_RCC_OscConfig+0x2ea>
 80023bc:	4b64      	ldr	r3, [pc, #400]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	4a63      	ldr	r2, [pc, #396]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6713      	str	r3, [r2, #112]	; 0x70
 80023c8:	e01c      	b.n	8002404 <HAL_RCC_OscConfig+0x324>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x30c>
 80023d2:	4b5f      	ldr	r3, [pc, #380]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d6:	4a5e      	ldr	r2, [pc, #376]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6713      	str	r3, [r2, #112]	; 0x70
 80023de:	4b5c      	ldr	r3, [pc, #368]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a5b      	ldr	r2, [pc, #364]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0x324>
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023f2:	f023 0301 	bic.w	r3, r3, #1
 80023f6:	6713      	str	r3, [r2, #112]	; 0x70
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80023fe:	f023 0304 	bic.w	r3, r3, #4
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d015      	beq.n	8002438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7ff faf2 	bl	80019f4 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002414:	f7ff faee 	bl	80019f4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0cb      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ee      	beq.n	8002414 <HAL_RCC_OscConfig+0x334>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7ff fadc 	bl	80019f4 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7ff fad8 	bl	80019f4 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e0b5      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002456:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ee      	bne.n	8002440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002462:	7dfb      	ldrb	r3, [r7, #23]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4a38      	ldr	r2, [pc, #224]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800246e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002472:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a1 	beq.w	80025c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800247e:	4b34      	ldr	r3, [pc, #208]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b08      	cmp	r3, #8
 8002488:	d05c      	beq.n	8002544 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d141      	bne.n	8002516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff faac 	bl	80019f4 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff faa8 	bl	80019f4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e087      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	019b      	lsls	r3, r3, #6
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	3b01      	subs	r3, #1
 80024d8:	041b      	lsls	r3, r3, #16
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	491b      	ldr	r1, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e8:	4b1b      	ldr	r3, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff fa81 	bl	80019f4 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff fa7d 	bl	80019f4 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e05c      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002508:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x416>
 8002514:	e054      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_OscConfig+0x478>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fa6a 	bl	80019f4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002524:	f7ff fa66 	bl	80019f4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e045      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_RCC_OscConfig+0x470>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0x444>
 8002542:	e03d      	b.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e038      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
 8002550:	40023800 	.word	0x40023800
 8002554:	40007000 	.word	0x40007000
 8002558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <HAL_RCC_OscConfig+0x4ec>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d028      	beq.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d121      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d11a      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002594:	4293      	cmp	r3, r2
 8002596:	d111      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	3b01      	subs	r3, #1
 80025a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0cc      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d90c      	bls.n	800260c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b65      	ldr	r3, [pc, #404]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	429a      	cmp	r2, r3
 8002606:	d001      	beq.n	800260c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e0b8      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002624:	4b59      	ldr	r3, [pc, #356]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800262e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800263c:	4b53      	ldr	r3, [pc, #332]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a52      	ldr	r2, [pc, #328]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	494d      	ldr	r1, [pc, #308]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d044      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266e:	4b47      	ldr	r3, [pc, #284]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d119      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e07f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d003      	beq.n	800268e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800268a:	2b03      	cmp	r3, #3
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d109      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e067      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f023 0203 	bic.w	r2, r3, #3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4934      	ldr	r1, [pc, #208]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c0:	f7ff f998 	bl	80019f4 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c6:	e00a      	b.n	80026de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c8:	f7ff f994 	bl	80019f4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e04f      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 020c 	and.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1eb      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d20c      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d001      	beq.n	8002718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e032      	b.n	800277e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4916      	ldr	r1, [pc, #88]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b12      	ldr	r3, [pc, #72]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002756:	f000 f821 	bl	800279c <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	490a      	ldr	r1, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a09      	ldr	r2, [pc, #36]	; (8002794 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f8f8 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40023c00 	.word	0x40023c00
 800278c:	40023800 	.word	0x40023800
 8002790:	0800bb78 	.word	0x0800bb78
 8002794:	20000000 	.word	0x20000000
 8002798:	20000004 	.word	0x20000004

0800279c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b090      	sub	sp, #64	; 0x40
 80027a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
 80027a8:	2300      	movs	r3, #0
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ac:	2300      	movs	r3, #0
 80027ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027b4:	4b59      	ldr	r3, [pc, #356]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 030c 	and.w	r3, r3, #12
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d00d      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x40>
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	f200 80a1 	bhi.w	8002908 <HAL_RCC_GetSysClockFreq+0x16c>
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d003      	beq.n	80027d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ce:	e09b      	b.n	8002908 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d0:	4b53      	ldr	r3, [pc, #332]	; (8002920 <HAL_RCC_GetSysClockFreq+0x184>)
 80027d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027d4:	e09b      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027d6:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_RCC_GetSysClockFreq+0x188>)
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027da:	e098      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027dc:	4b4f      	ldr	r3, [pc, #316]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027e6:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d028      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	2200      	movs	r2, #0
 80027fa:	623b      	str	r3, [r7, #32]
 80027fc:	627a      	str	r2, [r7, #36]	; 0x24
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002804:	2100      	movs	r1, #0
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_RCC_GetSysClockFreq+0x188>)
 8002808:	fb03 f201 	mul.w	r2, r3, r1
 800280c:	2300      	movs	r3, #0
 800280e:	fb00 f303 	mul.w	r3, r0, r3
 8002812:	4413      	add	r3, r2
 8002814:	4a43      	ldr	r2, [pc, #268]	; (8002924 <HAL_RCC_GetSysClockFreq+0x188>)
 8002816:	fba0 1202 	umull	r1, r2, r0, r2
 800281a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800281c:	460a      	mov	r2, r1
 800281e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002822:	4413      	add	r3, r2
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	2200      	movs	r2, #0
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	61fa      	str	r2, [r7, #28]
 800282e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002832:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002836:	f7fe fa37 	bl	8000ca8 <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4613      	mov	r3, r2
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002842:	e053      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002844:	4b35      	ldr	r3, [pc, #212]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	2200      	movs	r2, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	617a      	str	r2, [r7, #20]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002856:	f04f 0b00 	mov.w	fp, #0
 800285a:	4652      	mov	r2, sl
 800285c:	465b      	mov	r3, fp
 800285e:	f04f 0000 	mov.w	r0, #0
 8002862:	f04f 0100 	mov.w	r1, #0
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800286c:	0150      	lsls	r0, r2, #5
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	ebb2 080a 	subs.w	r8, r2, sl
 8002876:	eb63 090b 	sbc.w	r9, r3, fp
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002886:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800288a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800288e:	ebb2 0408 	subs.w	r4, r2, r8
 8002892:	eb63 0509 	sbc.w	r5, r3, r9
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	00eb      	lsls	r3, r5, #3
 80028a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a4:	00e2      	lsls	r2, r4, #3
 80028a6:	4614      	mov	r4, r2
 80028a8:	461d      	mov	r5, r3
 80028aa:	eb14 030a 	adds.w	r3, r4, sl
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	eb45 030b 	adc.w	r3, r5, fp
 80028b4:	607b      	str	r3, [r7, #4]
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028c2:	4629      	mov	r1, r5
 80028c4:	028b      	lsls	r3, r1, #10
 80028c6:	4621      	mov	r1, r4
 80028c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028cc:	4621      	mov	r1, r4
 80028ce:	028a      	lsls	r2, r1, #10
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	2200      	movs	r2, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	60fa      	str	r2, [r7, #12]
 80028dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028e0:	f7fe f9e2 	bl	8000ca8 <__aeabi_uldivmod>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4613      	mov	r3, r2
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028ec:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_GetSysClockFreq+0x180>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	3301      	adds	r3, #1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80028fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002906:	e002      	b.n	800290e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetSysClockFreq+0x184>)
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800290c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002910:	4618      	mov	r0, r3
 8002912:	3740      	adds	r7, #64	; 0x40
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800
 8002920:	00f42400 	.word	0x00f42400
 8002924:	017d7840 	.word	0x017d7840

08002928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <HAL_RCC_GetHCLKFreq+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	20000000 	.word	0x20000000

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002944:	f7ff fff0 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	0a9b      	lsrs	r3, r3, #10
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40023800 	.word	0x40023800
 8002964:	0800bb88 	.word	0x0800bb88

08002968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800296c:	f7ff ffdc 	bl	8002928 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	0b5b      	lsrs	r3, r3, #13
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4903      	ldr	r1, [pc, #12]	; (800298c <HAL_RCC_GetPCLK2Freq+0x24>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40023800 	.word	0x40023800
 800298c:	0800bb88 	.word	0x0800bb88

08002990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e03f      	b.n	8002a22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7fe fe50 	bl	800165c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2224      	movs	r2, #36	; 0x24
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fe81 	bl	80036dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	695a      	ldr	r2, [r3, #20]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b08a      	sub	sp, #40	; 0x28
 8002a2e:	af02      	add	r7, sp, #8
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d17c      	bne.n	8002b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <HAL_UART_Transmit+0x2c>
 8002a50:	88fb      	ldrh	r3, [r7, #6]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e075      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d101      	bne.n	8002a68 <HAL_UART_Transmit+0x3e>
 8002a64:	2302      	movs	r3, #2
 8002a66:	e06e      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2221      	movs	r2, #33	; 0x21
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe ffb9 	bl	80019f4 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a98:	d108      	bne.n	8002aac <HAL_UART_Transmit+0x82>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e003      	b.n	8002ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002abc:	e02a      	b.n	8002b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2180      	movs	r1, #128	; 0x80
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 fbc1 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e036      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3302      	adds	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e007      	b.n	8002b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1cf      	bne.n	8002abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2140      	movs	r1, #64	; 0x40
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fb91 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e006      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	e000      	b.n	8002b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b44:	2302      	movs	r3, #2
  }
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b08a      	sub	sp, #40	; 0x28
 8002b52:	af02      	add	r7, sp, #8
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	603b      	str	r3, [r7, #0]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 808c 	bne.w	8002c88 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_UART_Receive+0x2e>
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e084      	b.n	8002c8a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Receive+0x40>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e07d      	b.n	8002c8a <HAL_UART_Receive+0x13c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2222      	movs	r2, #34	; 0x22
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002baa:	f7fe ff23 	bl	80019f4 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	88fa      	ldrh	r2, [r7, #6]
 8002bb4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc4:	d108      	bne.n	8002bd8 <HAL_UART_Receive+0x8a>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d104      	bne.n	8002bd8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	e003      	b.n	8002be0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002be8:	e043      	b.n	8002c72 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 fb2b 	bl	8003250 <UART_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e042      	b.n	8002c8a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10c      	bne.n	8002c24 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	3302      	adds	r3, #2
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	e01f      	b.n	8002c64 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d007      	beq.n	8002c3e <HAL_UART_Receive+0xf0>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_UART_Receive+0xfe>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e008      	b.n	8002c5e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	3301      	adds	r3, #1
 8002c62:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1b6      	bne.n	8002bea <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3720      	adds	r7, #32
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d11d      	bne.n	8002ce8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d002      	beq.n	8002cb8 <HAL_UART_Receive_IT+0x26>
 8002cb2:	88fb      	ldrh	r3, [r7, #6]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e016      	b.n	8002cea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_UART_Receive_IT+0x38>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e00f      	b.n	8002cea <HAL_UART_Receive_IT+0x58>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fb24 	bl	800332c <UART_Start_Receive_IT>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	e000      	b.n	8002cea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
  }
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b0ba      	sub	sp, #232	; 0xe8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10f      	bne.n	8002d5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3e:	f003 0320 	and.w	r3, r3, #32
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_UART_IRQHandler+0x66>
 8002d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fc07 	bl	8003566 <UART_Receive_IT>
      return;
 8002d58:	e256      	b.n	8003208 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80de 	beq.w	8002f20 <HAL_UART_IRQHandler+0x22c>
 8002d64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80d1 	beq.w	8002f20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_UART_IRQHandler+0xae>
 8002d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xd2>
 8002dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0202 	orr.w	r2, r3, #2
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_UART_IRQHandler+0xf6>
 8002dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0204 	orr.w	r2, r3, #4
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d011      	beq.n	8002e1a <HAL_UART_IRQHandler+0x126>
 8002df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d105      	bne.n	8002e0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f043 0208 	orr.w	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 81ed 	beq.w	80031fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_UART_IRQHandler+0x14e>
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fb92 	bl	8003566 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4c:	2b40      	cmp	r3, #64	; 0x40
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_UART_IRQHandler+0x17a>
 8002e66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d04f      	beq.n	8002f0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa9a 	bl	80033a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d141      	bne.n	8002f06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3314      	adds	r3, #20
 8002e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e90:	e853 3f00 	ldrex	r3, [r3]
 8002e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002eae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002eba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ebe:	e841 2300 	strex	r3, r2, [r1]
 8002ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ec6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1d9      	bne.n	8002e82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d013      	beq.n	8002efe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	4a7d      	ldr	r2, [pc, #500]	; (80030d0 <HAL_UART_IRQHandler+0x3dc>)
 8002edc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe ff13 	bl	8001d0e <HAL_DMA_Abort_IT>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d016      	beq.n	8002f1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ef8:	4610      	mov	r0, r2
 8002efa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002efc:	e00e      	b.n	8002f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f990 	bl	8003224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f04:	e00a      	b.n	8002f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f98c 	bl	8003224 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0c:	e006      	b.n	8002f1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f988 	bl	8003224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f1a:	e170      	b.n	80031fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f1c:	bf00      	nop
    return;
 8002f1e:	e16e      	b.n	80031fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	f040 814a 	bne.w	80031be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8143 	beq.w	80031be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 813c 	beq.w	80031be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	f040 80b4 	bne.w	80030d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 8140 	beq.w	8003202 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	f080 8139 	bcs.w	8003202 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f96:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa2:	f000 8088 	beq.w	80030b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	330c      	adds	r3, #12
 8002fac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fb4:	e853 3f00 	ldrex	r3, [r3]
 8002fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002fd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fda:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002fde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002fe2:	e841 2300 	strex	r3, r2, [r1]
 8002fe6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1d9      	bne.n	8002fa6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3314      	adds	r3, #20
 8002ff8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3314      	adds	r3, #20
 8003012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003016:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800301a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800301e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e1      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800303e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003044:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003052:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003054:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003058:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e3      	bne.n	800302e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003086:	f023 0310 	bic.w	r3, r3, #16
 800308a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003098:	65ba      	str	r2, [r7, #88]	; 0x58
 800309a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800309e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e3      	bne.n	8003074 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe fdbc 	bl	8001c2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030be:	b29b      	uxth	r3, r3
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4619      	mov	r1, r3
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8b6 	bl	8003238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030cc:	e099      	b.n	8003202 <HAL_UART_IRQHandler+0x50e>
 80030ce:	bf00      	nop
 80030d0:	0800346f 	.word	0x0800346f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030dc:	b29b      	uxth	r3, r3
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 808b 	beq.w	8003206 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80030f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8086 	beq.w	8003206 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	330c      	adds	r3, #12
 8003100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	e853 3f00 	ldrex	r3, [r3]
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800310a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800310c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003110:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800311e:	647a      	str	r2, [r7, #68]	; 0x44
 8003120:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003124:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800312c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e3      	bne.n	80030fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3314      	adds	r3, #20
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	623b      	str	r3, [r7, #32]
   return(result);
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3314      	adds	r3, #20
 8003152:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003156:	633a      	str	r2, [r7, #48]	; 0x30
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800315c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e3      	bne.n	8003132 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	60fb      	str	r3, [r7, #12]
   return(result);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	330c      	adds	r3, #12
 8003198:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800319c:	61fa      	str	r2, [r7, #28]
 800319e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	69b9      	ldr	r1, [r7, #24]
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	617b      	str	r3, [r7, #20]
   return(result);
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e3      	bne.n	8003178 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f83e 	bl	8003238 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031bc:	e023      	b.n	8003206 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <HAL_UART_IRQHandler+0x4ea>
 80031ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f95d 	bl	8003496 <UART_Transmit_IT>
    return;
 80031dc:	e014      	b.n	8003208 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00e      	beq.n	8003208 <HAL_UART_IRQHandler+0x514>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f99d 	bl	8003536 <UART_EndTransmit_IT>
    return;
 80031fc:	e004      	b.n	8003208 <HAL_UART_IRQHandler+0x514>
    return;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <HAL_UART_IRQHandler+0x514>
      return;
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <HAL_UART_IRQHandler+0x514>
      return;
 8003206:	bf00      	nop
  }
}
 8003208:	37e8      	adds	r7, #232	; 0xe8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop

08003210 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b090      	sub	sp, #64	; 0x40
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003260:	e050      	b.n	8003304 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d04c      	beq.n	8003304 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800326a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800326c:	2b00      	cmp	r3, #0
 800326e:	d007      	beq.n	8003280 <UART_WaitOnFlagUntilTimeout+0x30>
 8003270:	f7fe fbc0 	bl	80019f4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800327c:	429a      	cmp	r2, r3
 800327e:	d241      	bcs.n	8003304 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032a0:	637a      	str	r2, [r7, #52]	; 0x34
 80032a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e5      	bne.n	8003280 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	613b      	str	r3, [r7, #16]
   return(result);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3314      	adds	r3, #20
 80032d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032d4:	623a      	str	r2, [r7, #32]
 80032d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	69f9      	ldr	r1, [r7, #28]
 80032da:	6a3a      	ldr	r2, [r7, #32]
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e5      	bne.n	80032b4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e00f      	b.n	8003324 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	68ba      	ldr	r2, [r7, #8]
 8003310:	429a      	cmp	r2, r3
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	429a      	cmp	r2, r3
 8003320:	d09f      	beq.n	8003262 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3740      	adds	r7, #64	; 0x40
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2222      	movs	r2, #34	; 0x22
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003378:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0220 	orr.w	r2, r2, #32
 8003398:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b095      	sub	sp, #84	; 0x54
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	330c      	adds	r3, #12
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ba:	e853 3f00 	ldrex	r3, [r3]
 80033be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033d0:	643a      	str	r2, [r7, #64]	; 0x40
 80033d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033d8:	e841 2300 	strex	r3, r2, [r1]
 80033dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e5      	bne.n	80033b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3314      	adds	r3, #20
 80033ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	e853 3f00 	ldrex	r3, [r3]
 80033f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f023 0301 	bic.w	r3, r3, #1
 80033fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003404:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800340a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e5      	bne.n	80033e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	2b01      	cmp	r3, #1
 800341e:	d119      	bne.n	8003454 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	e853 3f00 	ldrex	r3, [r3]
 800342e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f023 0310 	bic.w	r3, r3, #16
 8003436:	647b      	str	r3, [r7, #68]	; 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003440:	61ba      	str	r2, [r7, #24]
 8003442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	6979      	ldr	r1, [r7, #20]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	e841 2300 	strex	r3, r2, [r1]
 800344c:	613b      	str	r3, [r7, #16]
   return(result);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1e5      	bne.n	8003420 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003462:	bf00      	nop
 8003464:	3754      	adds	r7, #84	; 0x54
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f7ff fecb 	bl	8003224 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b21      	cmp	r3, #33	; 0x21
 80034a8:	d13e      	bne.n	8003528 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b2:	d114      	bne.n	80034de <UART_Transmit_IT+0x48>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d110      	bne.n	80034de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	1c9a      	adds	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	621a      	str	r2, [r3, #32]
 80034dc:	e008      	b.n	80034f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	1c59      	adds	r1, r3, #1
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6211      	str	r1, [r2, #32]
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4619      	mov	r1, r3
 80034fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10f      	bne.n	8003524 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003512:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003522:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b082      	sub	sp, #8
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff fe5a 	bl	8003210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b08c      	sub	sp, #48	; 0x30
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b22      	cmp	r3, #34	; 0x22
 8003578:	f040 80ab 	bne.w	80036d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003584:	d117      	bne.n	80035b6 <UART_Receive_IT+0x50>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d113      	bne.n	80035b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ae:	1c9a      	adds	r2, r3, #2
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	629a      	str	r2, [r3, #40]	; 0x28
 80035b4:	e026      	b.n	8003604 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80035bc:	2300      	movs	r3, #0
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d007      	beq.n	80035da <UART_Receive_IT+0x74>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <UART_Receive_IT+0x82>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e008      	b.n	80035fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	4619      	mov	r1, r3
 8003612:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003614:	2b00      	cmp	r3, #0
 8003616:	d15a      	bne.n	80036ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0220 	bic.w	r2, r2, #32
 8003626:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003636:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	2b01      	cmp	r3, #1
 8003656:	d135      	bne.n	80036c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	613b      	str	r3, [r7, #16]
   return(result);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f023 0310 	bic.w	r3, r3, #16
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	330c      	adds	r3, #12
 800367c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367e:	623a      	str	r2, [r7, #32]
 8003680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	69f9      	ldr	r1, [r7, #28]
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	61bb      	str	r3, [r7, #24]
   return(result);
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e5      	bne.n	800365e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0310 	and.w	r3, r3, #16
 800369c:	2b10      	cmp	r3, #16
 800369e:	d10a      	bne.n	80036b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff fdbb 	bl	8003238 <HAL_UARTEx_RxEventCallback>
 80036c2:	e002      	b.n	80036ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe f84f 	bl	8001768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e002      	b.n	80036d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3730      	adds	r7, #48	; 0x30
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036e0:	b0c0      	sub	sp, #256	; 0x100
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	ea40 0301 	orr.w	r3, r0, r1
 8003704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	431a      	orrs	r2, r3
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	431a      	orrs	r2, r3
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003734:	f021 010c 	bic.w	r1, r1, #12
 8003738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003742:	430b      	orrs	r3, r1
 8003744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	6999      	ldr	r1, [r3, #24]
 8003758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	ea40 0301 	orr.w	r3, r0, r1
 8003762:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b8f      	ldr	r3, [pc, #572]	; (80039a8 <UART_SetConfig+0x2cc>)
 800376c:	429a      	cmp	r2, r3
 800376e:	d005      	beq.n	800377c <UART_SetConfig+0xa0>
 8003770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	4b8d      	ldr	r3, [pc, #564]	; (80039ac <UART_SetConfig+0x2d0>)
 8003778:	429a      	cmp	r2, r3
 800377a:	d104      	bne.n	8003786 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7ff f8f4 	bl	8002968 <HAL_RCC_GetPCLK2Freq>
 8003780:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003784:	e003      	b.n	800378e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003786:	f7ff f8db 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 800378a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003798:	f040 810c 	bne.w	80039b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800379c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a0:	2200      	movs	r2, #0
 80037a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80037ae:	4622      	mov	r2, r4
 80037b0:	462b      	mov	r3, r5
 80037b2:	1891      	adds	r1, r2, r2
 80037b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80037b6:	415b      	adcs	r3, r3
 80037b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80037be:	4621      	mov	r1, r4
 80037c0:	eb12 0801 	adds.w	r8, r2, r1
 80037c4:	4629      	mov	r1, r5
 80037c6:	eb43 0901 	adc.w	r9, r3, r1
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037de:	4690      	mov	r8, r2
 80037e0:	4699      	mov	r9, r3
 80037e2:	4623      	mov	r3, r4
 80037e4:	eb18 0303 	adds.w	r3, r8, r3
 80037e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037ec:	462b      	mov	r3, r5
 80037ee:	eb49 0303 	adc.w	r3, r9, r3
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003802:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800380a:	460b      	mov	r3, r1
 800380c:	18db      	adds	r3, r3, r3
 800380e:	653b      	str	r3, [r7, #80]	; 0x50
 8003810:	4613      	mov	r3, r2
 8003812:	eb42 0303 	adc.w	r3, r2, r3
 8003816:	657b      	str	r3, [r7, #84]	; 0x54
 8003818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800381c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003820:	f7fd fa42 	bl	8000ca8 <__aeabi_uldivmod>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4b61      	ldr	r3, [pc, #388]	; (80039b0 <UART_SetConfig+0x2d4>)
 800382a:	fba3 2302 	umull	r2, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	011c      	lsls	r4, r3, #4
 8003832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003836:	2200      	movs	r2, #0
 8003838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800383c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003840:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003844:	4642      	mov	r2, r8
 8003846:	464b      	mov	r3, r9
 8003848:	1891      	adds	r1, r2, r2
 800384a:	64b9      	str	r1, [r7, #72]	; 0x48
 800384c:	415b      	adcs	r3, r3
 800384e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003850:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003854:	4641      	mov	r1, r8
 8003856:	eb12 0a01 	adds.w	sl, r2, r1
 800385a:	4649      	mov	r1, r9
 800385c:	eb43 0b01 	adc.w	fp, r3, r1
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800386c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003874:	4692      	mov	sl, r2
 8003876:	469b      	mov	fp, r3
 8003878:	4643      	mov	r3, r8
 800387a:	eb1a 0303 	adds.w	r3, sl, r3
 800387e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003882:	464b      	mov	r3, r9
 8003884:	eb4b 0303 	adc.w	r3, fp, r3
 8003888:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800388c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003898:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800389c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038a0:	460b      	mov	r3, r1
 80038a2:	18db      	adds	r3, r3, r3
 80038a4:	643b      	str	r3, [r7, #64]	; 0x40
 80038a6:	4613      	mov	r3, r2
 80038a8:	eb42 0303 	adc.w	r3, r2, r3
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
 80038ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80038b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80038b6:	f7fd f9f7 	bl	8000ca8 <__aeabi_uldivmod>
 80038ba:	4602      	mov	r2, r0
 80038bc:	460b      	mov	r3, r1
 80038be:	4611      	mov	r1, r2
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <UART_SetConfig+0x2d4>)
 80038c2:	fba3 2301 	umull	r2, r3, r3, r1
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2264      	movs	r2, #100	; 0x64
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	1acb      	subs	r3, r1, r3
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80038d6:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <UART_SetConfig+0x2d4>)
 80038d8:	fba3 2302 	umull	r2, r3, r3, r2
 80038dc:	095b      	lsrs	r3, r3, #5
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038e4:	441c      	add	r4, r3
 80038e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ea:	2200      	movs	r2, #0
 80038ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038f8:	4642      	mov	r2, r8
 80038fa:	464b      	mov	r3, r9
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003900:	415b      	adcs	r3, r3
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003908:	4641      	mov	r1, r8
 800390a:	1851      	adds	r1, r2, r1
 800390c:	6339      	str	r1, [r7, #48]	; 0x30
 800390e:	4649      	mov	r1, r9
 8003910:	414b      	adcs	r3, r1
 8003912:	637b      	str	r3, [r7, #52]	; 0x34
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003920:	4659      	mov	r1, fp
 8003922:	00cb      	lsls	r3, r1, #3
 8003924:	4651      	mov	r1, sl
 8003926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800392a:	4651      	mov	r1, sl
 800392c:	00ca      	lsls	r2, r1, #3
 800392e:	4610      	mov	r0, r2
 8003930:	4619      	mov	r1, r3
 8003932:	4603      	mov	r3, r0
 8003934:	4642      	mov	r2, r8
 8003936:	189b      	adds	r3, r3, r2
 8003938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800393c:	464b      	mov	r3, r9
 800393e:	460a      	mov	r2, r1
 8003940:	eb42 0303 	adc.w	r3, r2, r3
 8003944:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003954:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800395c:	460b      	mov	r3, r1
 800395e:	18db      	adds	r3, r3, r3
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
 8003962:	4613      	mov	r3, r2
 8003964:	eb42 0303 	adc.w	r3, r2, r3
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800396a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800396e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003972:	f7fd f999 	bl	8000ca8 <__aeabi_uldivmod>
 8003976:	4602      	mov	r2, r0
 8003978:	460b      	mov	r3, r1
 800397a:	4b0d      	ldr	r3, [pc, #52]	; (80039b0 <UART_SetConfig+0x2d4>)
 800397c:	fba3 1302 	umull	r1, r3, r3, r2
 8003980:	095b      	lsrs	r3, r3, #5
 8003982:	2164      	movs	r1, #100	; 0x64
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	3332      	adds	r3, #50	; 0x32
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <UART_SetConfig+0x2d4>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	f003 0207 	and.w	r2, r3, #7
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4422      	add	r2, r4
 80039a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039a4:	e105      	b.n	8003bb2 <UART_SetConfig+0x4d6>
 80039a6:	bf00      	nop
 80039a8:	40011000 	.word	0x40011000
 80039ac:	40011400 	.word	0x40011400
 80039b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80039be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80039c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80039c6:	4642      	mov	r2, r8
 80039c8:	464b      	mov	r3, r9
 80039ca:	1891      	adds	r1, r2, r2
 80039cc:	6239      	str	r1, [r7, #32]
 80039ce:	415b      	adcs	r3, r3
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039d6:	4641      	mov	r1, r8
 80039d8:	1854      	adds	r4, r2, r1
 80039da:	4649      	mov	r1, r9
 80039dc:	eb43 0501 	adc.w	r5, r3, r1
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	00eb      	lsls	r3, r5, #3
 80039ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ee:	00e2      	lsls	r2, r4, #3
 80039f0:	4614      	mov	r4, r2
 80039f2:	461d      	mov	r5, r3
 80039f4:	4643      	mov	r3, r8
 80039f6:	18e3      	adds	r3, r4, r3
 80039f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039fc:	464b      	mov	r3, r9
 80039fe:	eb45 0303 	adc.w	r3, r5, r3
 8003a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	f04f 0300 	mov.w	r3, #0
 8003a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a22:	4629      	mov	r1, r5
 8003a24:	008b      	lsls	r3, r1, #2
 8003a26:	4621      	mov	r1, r4
 8003a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a2c:	4621      	mov	r1, r4
 8003a2e:	008a      	lsls	r2, r1, #2
 8003a30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003a34:	f7fd f938 	bl	8000ca8 <__aeabi_uldivmod>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4b60      	ldr	r3, [pc, #384]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a42:	095b      	lsrs	r3, r3, #5
 8003a44:	011c      	lsls	r4, r3, #4
 8003a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a58:	4642      	mov	r2, r8
 8003a5a:	464b      	mov	r3, r9
 8003a5c:	1891      	adds	r1, r2, r2
 8003a5e:	61b9      	str	r1, [r7, #24]
 8003a60:	415b      	adcs	r3, r3
 8003a62:	61fb      	str	r3, [r7, #28]
 8003a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a68:	4641      	mov	r1, r8
 8003a6a:	1851      	adds	r1, r2, r1
 8003a6c:	6139      	str	r1, [r7, #16]
 8003a6e:	4649      	mov	r1, r9
 8003a70:	414b      	adcs	r3, r1
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a80:	4659      	mov	r1, fp
 8003a82:	00cb      	lsls	r3, r1, #3
 8003a84:	4651      	mov	r1, sl
 8003a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a8a:	4651      	mov	r1, sl
 8003a8c:	00ca      	lsls	r2, r1, #3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	4603      	mov	r3, r0
 8003a94:	4642      	mov	r2, r8
 8003a96:	189b      	adds	r3, r3, r2
 8003a98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a9c:	464b      	mov	r3, r9
 8003a9e:	460a      	mov	r2, r1
 8003aa0:	eb42 0303 	adc.w	r3, r2, r3
 8003aa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ac0:	4649      	mov	r1, r9
 8003ac2:	008b      	lsls	r3, r1, #2
 8003ac4:	4641      	mov	r1, r8
 8003ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aca:	4641      	mov	r1, r8
 8003acc:	008a      	lsls	r2, r1, #2
 8003ace:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003ad2:	f7fd f8e9 	bl	8000ca8 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003adc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	2164      	movs	r1, #100	; 0x64
 8003ae4:	fb01 f303 	mul.w	r3, r1, r3
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	3332      	adds	r3, #50	; 0x32
 8003aee:	4a34      	ldr	r2, [pc, #208]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afa:	441c      	add	r4, r3
 8003afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b00:	2200      	movs	r2, #0
 8003b02:	673b      	str	r3, [r7, #112]	; 0x70
 8003b04:	677a      	str	r2, [r7, #116]	; 0x74
 8003b06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003b0a:	4642      	mov	r2, r8
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	415b      	adcs	r3, r3
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b1a:	4641      	mov	r1, r8
 8003b1c:	1851      	adds	r1, r2, r1
 8003b1e:	6039      	str	r1, [r7, #0]
 8003b20:	4649      	mov	r1, r9
 8003b22:	414b      	adcs	r3, r1
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b32:	4659      	mov	r1, fp
 8003b34:	00cb      	lsls	r3, r1, #3
 8003b36:	4651      	mov	r1, sl
 8003b38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b3c:	4651      	mov	r1, sl
 8003b3e:	00ca      	lsls	r2, r1, #3
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	4603      	mov	r3, r0
 8003b46:	4642      	mov	r2, r8
 8003b48:	189b      	adds	r3, r3, r2
 8003b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	460a      	mov	r2, r1
 8003b50:	eb42 0303 	adc.w	r3, r2, r3
 8003b54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b60:	667a      	str	r2, [r7, #100]	; 0x64
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b6e:	4649      	mov	r1, r9
 8003b70:	008b      	lsls	r3, r1, #2
 8003b72:	4641      	mov	r1, r8
 8003b74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b78:	4641      	mov	r1, r8
 8003b7a:	008a      	lsls	r2, r1, #2
 8003b7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b80:	f7fd f892 	bl	8000ca8 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2164      	movs	r1, #100	; 0x64
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	3332      	adds	r3, #50	; 0x32
 8003b9c:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <UART_SetConfig+0x4e4>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4422      	add	r2, r4
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bbe:	bf00      	nop
 8003bc0:	51eb851f 	.word	0x51eb851f

08003bc4 <__NVIC_SetPriority>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6039      	str	r1, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db0a      	blt.n	8003bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	490c      	ldr	r1, [pc, #48]	; (8003c10 <__NVIC_SetPriority+0x4c>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	440b      	add	r3, r1
 8003be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bec:	e00a      	b.n	8003c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4908      	ldr	r1, [pc, #32]	; (8003c14 <__NVIC_SetPriority+0x50>)
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	440b      	add	r3, r1
 8003c02:	761a      	strb	r2, [r3, #24]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000e100 	.word	0xe000e100
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	f06f 0004 	mvn.w	r0, #4
 8003c22:	f7ff ffcf 	bl	8003bc4 <__NVIC_SetPriority>
#endif
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c32:	f3ef 8305 	mrs	r3, IPSR
 8003c36:	603b      	str	r3, [r7, #0]
  return(result);
 8003c38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c3e:	f06f 0305 	mvn.w	r3, #5
 8003c42:	607b      	str	r3, [r7, #4]
 8003c44:	e00c      	b.n	8003c60 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c46:	4b0a      	ldr	r3, [pc, #40]	; (8003c70 <osKernelInitialize+0x44>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d105      	bne.n	8003c5a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c4e:	4b08      	ldr	r3, [pc, #32]	; (8003c70 <osKernelInitialize+0x44>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	607b      	str	r3, [r7, #4]
 8003c58:	e002      	b.n	8003c60 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c60:	687b      	ldr	r3, [r7, #4]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	2000065c 	.word	0x2000065c

08003c74 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c7a:	f3ef 8305 	mrs	r3, IPSR
 8003c7e:	603b      	str	r3, [r7, #0]
  return(result);
 8003c80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003c86:	f06f 0305 	mvn.w	r3, #5
 8003c8a:	607b      	str	r3, [r7, #4]
 8003c8c:	e010      	b.n	8003cb0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <osKernelStart+0x48>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d109      	bne.n	8003caa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c96:	f7ff ffbf 	bl	8003c18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c9a:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <osKernelStart+0x48>)
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ca0:	f001 fa94 	bl	80051cc <vTaskStartScheduler>
      stat = osOK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	607b      	str	r3, [r7, #4]
 8003ca8:	e002      	b.n	8003cb0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cb0:	687b      	ldr	r3, [r7, #4]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	2000065c 	.word	0x2000065c

08003cc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08e      	sub	sp, #56	; 0x38
 8003cc4:	af04      	add	r7, sp, #16
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cd0:	f3ef 8305 	mrs	r3, IPSR
 8003cd4:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d17e      	bne.n	8003dda <osThreadNew+0x11a>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d07b      	beq.n	8003dda <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003ce2:	2380      	movs	r3, #128	; 0x80
 8003ce4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ce6:	2318      	movs	r3, #24
 8003ce8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d045      	beq.n	8003d86 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <osThreadNew+0x48>
        name = attr->name;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <osThreadNew+0x6e>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b38      	cmp	r3, #56	; 0x38
 8003d20:	d805      	bhi.n	8003d2e <osThreadNew+0x6e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <osThreadNew+0x72>
        return (NULL);
 8003d2e:	2300      	movs	r3, #0
 8003d30:	e054      	b.n	8003ddc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00e      	beq.n	8003d68 <osThreadNew+0xa8>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	2bbb      	cmp	r3, #187	; 0xbb
 8003d50:	d90a      	bls.n	8003d68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d006      	beq.n	8003d68 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <osThreadNew+0xa8>
        mem = 1;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e010      	b.n	8003d8a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10c      	bne.n	8003d8a <osThreadNew+0xca>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <osThreadNew+0xca>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <osThreadNew+0xca>
          mem = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]
 8003d84:	e001      	b.n	8003d8a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d110      	bne.n	8003db2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d98:	9202      	str	r2, [sp, #8]
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	6a3a      	ldr	r2, [r7, #32]
 8003da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f001 f824 	bl	8004df4 <xTaskCreateStatic>
 8003dac:	4603      	mov	r3, r0
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e013      	b.n	8003dda <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d110      	bne.n	8003dda <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	f107 0310 	add.w	r3, r7, #16
 8003dc0:	9301      	str	r3, [sp, #4]
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f001 f86f 	bl	8004eae <xTaskCreate>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <osThreadNew+0x11a>
            hTask = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003dda:	693b      	ldr	r3, [r7, #16]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3728      	adds	r7, #40	; 0x28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dec:	f3ef 8305 	mrs	r3, IPSR
 8003df0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003df2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <osDelay+0x1c>
    stat = osErrorISR;
 8003df8:	f06f 0305 	mvn.w	r3, #5
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	e007      	b.n	8003e10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f001 f9aa 	bl	8005164 <vTaskDelay>
    }
  }

  return (stat);
 8003e10:	68fb      	ldr	r3, [r7, #12]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b088      	sub	sp, #32
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e26:	f3ef 8305 	mrs	r3, IPSR
 8003e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e2c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d174      	bne.n	8003f1c <osMutexNew+0x102>
    if (attr != NULL) {
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	e001      	b.n	8003e44 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <osMutexNew+0x3a>
      rmtx = 1U;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e001      	b.n	8003e58 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f003 0308 	and.w	r3, r3, #8
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d15c      	bne.n	8003f1c <osMutexNew+0x102>
      mem = -1;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d006      	beq.n	8003e84 <osMutexNew+0x6a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b4f      	cmp	r3, #79	; 0x4f
 8003e7c:	d902      	bls.n	8003e84 <osMutexNew+0x6a>
          mem = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	e00c      	b.n	8003e9e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d108      	bne.n	8003e9e <osMutexNew+0x84>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d104      	bne.n	8003e9e <osMutexNew+0x84>
            mem = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	e001      	b.n	8003e9e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d112      	bne.n	8003eca <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	2004      	movs	r0, #4
 8003eb2:	f000 fa90 	bl	80043d6 <xQueueCreateMutexStatic>
 8003eb6:	61f8      	str	r0, [r7, #28]
 8003eb8:	e016      	b.n	8003ee8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f000 fa88 	bl	80043d6 <xQueueCreateMutexStatic>
 8003ec6:	61f8      	str	r0, [r7, #28]
 8003ec8:	e00e      	b.n	8003ee8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003ed6:	2004      	movs	r0, #4
 8003ed8:	f000 fa65 	bl	80043a6 <xQueueCreateMutex>
 8003edc:	61f8      	str	r0, [r7, #28]
 8003ede:	e003      	b.n	8003ee8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003ee0:	2001      	movs	r0, #1
 8003ee2:	f000 fa60 	bl	80043a6 <xQueueCreateMutex>
 8003ee6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <osMutexNew+0xee>
        if (attr != NULL) {
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <osMutexNew+0xe2>
          name = attr->name;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	e001      	b.n	8003f00 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	69f8      	ldr	r0, [r7, #28]
 8003f04:	f000 ff18 	bl	8004d38 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d006      	beq.n	8003f1c <osMutexNew+0x102>
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	f043 0301 	orr.w	r3, r3, #1
 8003f1a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003f1c:	69fb      	ldr	r3, [r7, #28]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3720      	adds	r7, #32
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4a06      	ldr	r2, [pc, #24]	; (8003f58 <vApplicationGetIdleTaskMemory+0x30>)
 8003f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	601a      	str	r2, [r3, #0]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000660 	.word	0x20000660
 8003f58:	2000071c 	.word	0x2000071c

08003f5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a07      	ldr	r2, [pc, #28]	; (8003f88 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4a06      	ldr	r2, [pc, #24]	; (8003f8c <vApplicationGetTimerTaskMemory+0x30>)
 8003f72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	2000091c 	.word	0x2000091c
 8003f8c:	200009d8 	.word	0x200009d8

08003f90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f103 0208 	add.w	r2, r3, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f103 0208 	add.w	r2, r3, #8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f103 0208 	add.w	r2, r3, #8
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	601a      	str	r2, [r3, #0]
}
 8004026:	bf00      	nop
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004032:	b480      	push	{r7}
 8004034:	b085      	sub	sp, #20
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004048:	d103      	bne.n	8004052 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e00c      	b.n	800406c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3308      	adds	r3, #8
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	e002      	b.n	8004060 <vListInsert+0x2e>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	d2f6      	bcs.n	800405a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	601a      	str	r2, [r3, #0]
}
 8004098:	bf00      	nop
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6892      	ldr	r2, [r2, #8]
 80040ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6852      	ldr	r2, [r2, #4]
 80040c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d103      	bne.n	80040d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	1e5a      	subs	r2, r3, #1
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800411e:	bf00      	nop
 8004120:	e7fe      	b.n	8004120 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004122:	f002 fa07 	bl	8006534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	68f9      	ldr	r1, [r7, #12]
 8004130:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004132:	fb01 f303 	mul.w	r3, r1, r3
 8004136:	441a      	add	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	3b01      	subs	r3, #1
 8004154:	68f9      	ldr	r1, [r7, #12]
 8004156:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	441a      	add	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	22ff      	movs	r2, #255	; 0xff
 8004166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d114      	bne.n	80041a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01a      	beq.n	80041b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3310      	adds	r3, #16
 8004184:	4618      	mov	r0, r3
 8004186:	f001 fabb 	bl	8005700 <xTaskRemoveFromEventList>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d012      	beq.n	80041b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <xQueueGenericReset+0xcc>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	e009      	b.n	80041b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3310      	adds	r3, #16
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fef2 	bl	8003f90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3324      	adds	r3, #36	; 0x24
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff feed 	bl	8003f90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041b6:	f002 f9ed 	bl	8006594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041ba:	2301      	movs	r3, #1
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	e000ed04 	.word	0xe000ed04

080041c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08e      	sub	sp, #56	; 0x38
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <xQueueGenericCreateStatic+0x52>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <xQueueGenericCreateStatic+0x56>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <xQueueGenericCreateStatic+0x58>
 800421e:	2300      	movs	r3, #0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10a      	bne.n	800423a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	623b      	str	r3, [r7, #32]
}
 8004236:	bf00      	nop
 8004238:	e7fe      	b.n	8004238 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d102      	bne.n	8004246 <xQueueGenericCreateStatic+0x7e>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <xQueueGenericCreateStatic+0x82>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <xQueueGenericCreateStatic+0x84>
 800424a:	2300      	movs	r3, #0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004254:	f383 8811 	msr	BASEPRI, r3
 8004258:	f3bf 8f6f 	isb	sy
 800425c:	f3bf 8f4f 	dsb	sy
 8004260:	61fb      	str	r3, [r7, #28]
}
 8004262:	bf00      	nop
 8004264:	e7fe      	b.n	8004264 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004266:	2350      	movs	r3, #80	; 0x50
 8004268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b50      	cmp	r3, #80	; 0x50
 800426e:	d00a      	beq.n	8004286 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	61bb      	str	r3, [r7, #24]
}
 8004282:	bf00      	nop
 8004284:	e7fe      	b.n	8004284 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004286:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800429a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	4613      	mov	r3, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f83f 	bl	800432c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3730      	adds	r7, #48	; 0x30
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08a      	sub	sp, #40	; 0x28
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	613b      	str	r3, [r7, #16]
}
 80042de:	bf00      	nop
 80042e0:	e7fe      	b.n	80042e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	3350      	adds	r3, #80	; 0x50
 80042f0:	4618      	mov	r0, r3
 80042f2:	f002 fa41 	bl	8006778 <pvPortMalloc>
 80042f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d011      	beq.n	8004322 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3350      	adds	r3, #80	; 0x50
 8004306:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004310:	79fa      	ldrb	r2, [r7, #7]
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4613      	mov	r3, r2
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	68b9      	ldr	r1, [r7, #8]
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f805 	bl	800432c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004322:	69bb      	ldr	r3, [r7, #24]
	}
 8004324:	4618      	mov	r0, r3
 8004326:	3720      	adds	r7, #32
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d103      	bne.n	8004348 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e002      	b.n	800434e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800435a:	2101      	movs	r1, #1
 800435c:	69b8      	ldr	r0, [r7, #24]
 800435e:	f7ff fecb 	bl	80040f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004372:	b580      	push	{r7, lr}
 8004374:	b082      	sub	sp, #8
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00e      	beq.n	800439e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004392:	2300      	movs	r3, #0
 8004394:	2200      	movs	r2, #0
 8004396:	2100      	movs	r1, #0
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f837 	bl	800440c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043b0:	2301      	movs	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	461a      	mov	r2, r3
 80043bc:	6939      	ldr	r1, [r7, #16]
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	f7ff ff7a 	bl	80042b8 <xQueueGenericCreate>
 80043c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff ffd3 	bl	8004372 <prvInitialiseMutex>

		return xNewQueue;
 80043cc:	68fb      	ldr	r3, [r7, #12]
	}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b088      	sub	sp, #32
 80043da:	af02      	add	r7, sp, #8
 80043dc:	4603      	mov	r3, r0
 80043de:	6039      	str	r1, [r7, #0]
 80043e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80043e2:	2301      	movs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	2200      	movs	r2, #0
 80043f2:	6939      	ldr	r1, [r7, #16]
 80043f4:	6978      	ldr	r0, [r7, #20]
 80043f6:	f7ff fee7 	bl	80041c8 <xQueueGenericCreateStatic>
 80043fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff ffb8 	bl	8004372 <prvInitialiseMutex>

		return xNewQueue;
 8004402:	68fb      	ldr	r3, [r7, #12]
	}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08e      	sub	sp, #56	; 0x38
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800441a:	2300      	movs	r3, #0
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <xQueueGenericSend+0x32>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d103      	bne.n	800444c <xQueueGenericSend+0x40>
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <xQueueGenericSend+0x44>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <xQueueGenericSend+0x46>
 8004450:	2300      	movs	r3, #0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <xQueueGenericSend+0x60>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b02      	cmp	r3, #2
 8004470:	d103      	bne.n	800447a <xQueueGenericSend+0x6e>
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <xQueueGenericSend+0x72>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <xQueueGenericSend+0x74>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xQueueGenericSend+0x8e>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	623b      	str	r3, [r7, #32]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800449a:	f001 faf3 	bl	8005a84 <xTaskGetSchedulerState>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <xQueueGenericSend+0x9e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <xQueueGenericSend+0xa2>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <xQueueGenericSend+0xa4>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xQueueGenericSend+0xbe>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	61fb      	str	r3, [r7, #28]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044ca:	f002 f833 	bl	8006534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d302      	bcc.n	80044e0 <xQueueGenericSend+0xd4>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d129      	bne.n	8004534 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e6:	f000 fb17 	bl	8004b18 <prvCopyDataToQueue>
 80044ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	3324      	adds	r3, #36	; 0x24
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 f901 	bl	8005700 <xTaskRemoveFromEventList>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004504:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <xQueueGenericSend+0x1f8>)
 8004506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	e00a      	b.n	800452c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800451c:	4b39      	ldr	r3, [pc, #228]	; (8004604 <xQueueGenericSend+0x1f8>)
 800451e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	f3bf 8f4f 	dsb	sy
 8004528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800452c:	f002 f832 	bl	8006594 <vPortExitCritical>
				return pdPASS;
 8004530:	2301      	movs	r3, #1
 8004532:	e063      	b.n	80045fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800453a:	f002 f82b 	bl	8006594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800453e:	2300      	movs	r3, #0
 8004540:	e05c      	b.n	80045fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4618      	mov	r0, r3
 800454e:	f001 f93b 	bl	80057c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004552:	2301      	movs	r3, #1
 8004554:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004556:	f002 f81d 	bl	8006594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800455a:	f000 fea7 	bl	80052ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800455e:	f001 ffe9 	bl	8006534 <vPortEnterCritical>
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004568:	b25b      	sxtb	r3, r3
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d103      	bne.n	8004578 <xQueueGenericSend+0x16c>
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457e:	b25b      	sxtb	r3, r3
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d103      	bne.n	800458e <xQueueGenericSend+0x182>
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458e:	f002 f801 	bl	8006594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004592:	1d3a      	adds	r2, r7, #4
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f001 f92a 	bl	80057f4 <xTaskCheckForTimeOut>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d124      	bne.n	80045f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045a8:	f000 fbae 	bl	8004d08 <prvIsQueueFull>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d018      	beq.n	80045e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	3310      	adds	r3, #16
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 f850 	bl	8005660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045c2:	f000 fb39 	bl	8004c38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045c6:	f000 fe7f 	bl	80052c8 <xTaskResumeAll>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f47f af7c 	bne.w	80044ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <xQueueGenericSend+0x1f8>)
 80045d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	e772      	b.n	80044ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045e6:	f000 fb27 	bl	8004c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ea:	f000 fe6d 	bl	80052c8 <xTaskResumeAll>
 80045ee:	e76c      	b.n	80044ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045f2:	f000 fb21 	bl	8004c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045f6:	f000 fe67 	bl	80052c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3738      	adds	r7, #56	; 0x38
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b090      	sub	sp, #64	; 0x40
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d103      	bne.n	8004644 <xQueueGenericSendFromISR+0x3c>
 800463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d101      	bne.n	8004648 <xQueueGenericSendFromISR+0x40>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <xQueueGenericSendFromISR+0x42>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10a      	bne.n	8004664 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d103      	bne.n	8004672 <xQueueGenericSendFromISR+0x6a>
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <xQueueGenericSendFromISR+0x6e>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xQueueGenericSendFromISR+0x70>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10a      	bne.n	8004692 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	623b      	str	r3, [r7, #32]
}
 800468e:	bf00      	nop
 8004690:	e7fe      	b.n	8004690 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004692:	f002 f831 	bl	80066f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004696:	f3ef 8211 	mrs	r2, BASEPRI
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	61fa      	str	r2, [r7, #28]
 80046ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <xQueueGenericSendFromISR+0xbc>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d12f      	bne.n	8004724 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	68b9      	ldr	r1, [r7, #8]
 80046d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046da:	f000 fa1d 	bl	8004b18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80046e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e6:	d112      	bne.n	800470e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d016      	beq.n	800471e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	3324      	adds	r3, #36	; 0x24
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 f803 	bl	8005700 <xTaskRemoveFromEventList>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00e      	beq.n	800471e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e007      	b.n	800471e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800470e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004712:	3301      	adds	r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	b25a      	sxtb	r2, r3
 8004718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800471e:	2301      	movs	r3, #1
 8004720:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004722:	e001      	b.n	8004728 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004724:	2300      	movs	r3, #0
 8004726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004732:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004736:	4618      	mov	r0, r3
 8004738:	3740      	adds	r7, #64	; 0x40
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b08e      	sub	sp, #56	; 0x38
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	623b      	str	r3, [r7, #32]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	61fb      	str	r3, [r7, #28]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <xQueueGiveFromISR+0x58>
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <xQueueGiveFromISR+0x5c>
 8004796:	2301      	movs	r3, #1
 8004798:	e000      	b.n	800479c <xQueueGiveFromISR+0x5e>
 800479a:	2300      	movs	r3, #0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	61bb      	str	r3, [r7, #24]
}
 80047b2:	bf00      	nop
 80047b4:	e7fe      	b.n	80047b4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047b6:	f001 ff9f 	bl	80066f8 <vPortValidateInterruptPriority>
	__asm volatile
 80047ba:	f3ef 8211 	mrs	r2, BASEPRI
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	617a      	str	r2, [r7, #20]
 80047d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80047d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d22b      	bcs.n	800483e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80047f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d112      	bne.n	8004828 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d016      	beq.n	8004838 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	3324      	adds	r3, #36	; 0x24
 800480e:	4618      	mov	r0, r3
 8004810:	f000 ff76 	bl	8005700 <xTaskRemoveFromEventList>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00e      	beq.n	8004838 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	e007      	b.n	8004838 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800482c:	3301      	adds	r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	b25a      	sxtb	r2, r3
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004838:	2301      	movs	r3, #1
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
 800483c:	e001      	b.n	8004842 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004844:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f383 8811 	msr	BASEPRI, r3
}
 800484c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800484e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004850:	4618      	mov	r0, r3
 8004852:	3738      	adds	r7, #56	; 0x38
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004864:	2300      	movs	r3, #0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <xQueueReceive+0x30>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	623b      	str	r3, [r7, #32]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d103      	bne.n	8004896 <xQueueReceive+0x3e>
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <xQueueReceive+0x42>
 8004896:	2301      	movs	r3, #1
 8004898:	e000      	b.n	800489c <xQueueReceive+0x44>
 800489a:	2300      	movs	r3, #0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xQueueReceive+0x5e>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	61fb      	str	r3, [r7, #28]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048b6:	f001 f8e5 	bl	8005a84 <xTaskGetSchedulerState>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d102      	bne.n	80048c6 <xQueueReceive+0x6e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <xQueueReceive+0x72>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueReceive+0x74>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10a      	bne.n	80048e6 <xQueueReceive+0x8e>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	61bb      	str	r3, [r7, #24]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048e6:	f001 fe25 	bl	8006534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01f      	beq.n	8004936 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80048f6:	68b9      	ldr	r1, [r7, #8]
 80048f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048fa:	f000 f977 	bl	8004bec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	1e5a      	subs	r2, r3, #1
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00f      	beq.n	800492e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800490e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004910:	3310      	adds	r3, #16
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fef4 	bl	8005700 <xTaskRemoveFromEventList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800491e:	4b3d      	ldr	r3, [pc, #244]	; (8004a14 <xQueueReceive+0x1bc>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800492e:	f001 fe31 	bl	8006594 <vPortExitCritical>
				return pdPASS;
 8004932:	2301      	movs	r3, #1
 8004934:	e069      	b.n	8004a0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800493c:	f001 fe2a 	bl	8006594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004940:	2300      	movs	r3, #0
 8004942:	e062      	b.n	8004a0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800494a:	f107 0310 	add.w	r3, r7, #16
 800494e:	4618      	mov	r0, r3
 8004950:	f000 ff3a 	bl	80057c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004958:	f001 fe1c 	bl	8006594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800495c:	f000 fca6 	bl	80052ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004960:	f001 fde8 	bl	8006534 <vPortEnterCritical>
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800496a:	b25b      	sxtb	r3, r3
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004970:	d103      	bne.n	800497a <xQueueReceive+0x122>
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004980:	b25b      	sxtb	r3, r3
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d103      	bne.n	8004990 <xQueueReceive+0x138>
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004990:	f001 fe00 	bl	8006594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004994:	1d3a      	adds	r2, r7, #4
 8004996:	f107 0310 	add.w	r3, r7, #16
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 ff29 	bl	80057f4 <xTaskCheckForTimeOut>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d123      	bne.n	80049f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049aa:	f000 f997 	bl	8004cdc <prvIsQueueEmpty>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d017      	beq.n	80049e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	3324      	adds	r3, #36	; 0x24
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fe4f 	bl	8005660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c4:	f000 f938 	bl	8004c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049c8:	f000 fc7e 	bl	80052c8 <xTaskResumeAll>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d189      	bne.n	80048e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <xQueueReceive+0x1bc>)
 80049d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d8:	601a      	str	r2, [r3, #0]
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	e780      	b.n	80048e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80049e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049e6:	f000 f927 	bl	8004c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049ea:	f000 fc6d 	bl	80052c8 <xTaskResumeAll>
 80049ee:	e77a      	b.n	80048e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f000 f921 	bl	8004c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049f6:	f000 fc67 	bl	80052c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fc:	f000 f96e 	bl	8004cdc <prvIsQueueEmpty>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f43f af6f 	beq.w	80048e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3730      	adds	r7, #48	; 0x30
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	; 0x38
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	623b      	str	r3, [r7, #32]
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d103      	bne.n	8004a52 <xQueueReceiveFromISR+0x3a>
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <xQueueReceiveFromISR+0x3e>
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <xQueueReceiveFromISR+0x40>
 8004a56:	2300      	movs	r3, #0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10a      	bne.n	8004a72 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	61fb      	str	r3, [r7, #28]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a72:	f001 fe41 	bl	80066f8 <vPortValidateInterruptPriority>
	__asm volatile
 8004a76:	f3ef 8211 	mrs	r2, BASEPRI
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	61ba      	str	r2, [r7, #24]
 8004a8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d02f      	beq.n	8004afe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aac:	f000 f89e 	bl	8004bec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab2:	1e5a      	subs	r2, r3, #1
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d112      	bne.n	8004ae8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	3310      	adds	r3, #16
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fe16 	bl	8005700 <xTaskRemoveFromEventList>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00e      	beq.n	8004af8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e007      	b.n	8004af8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aec:	3301      	adds	r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	b25a      	sxtb	r2, r3
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004af8:	2301      	movs	r3, #1
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
 8004afc:	e001      	b.n	8004b02 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	f383 8811 	msr	BASEPRI, r3
}
 8004b0c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3738      	adds	r7, #56	; 0x38
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d14d      	bne.n	8004bda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 ffbc 	bl	8005ac0 <xTaskPriorityDisinherit>
 8004b48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e043      	b.n	8004bda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d119      	bne.n	8004b8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6858      	ldr	r0, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	461a      	mov	r2, r3
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	f002 fb31 	bl	80071ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d32b      	bcc.n	8004bda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	e026      	b.n	8004bda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68d8      	ldr	r0, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	461a      	mov	r2, r3
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	f002 fb17 	bl	80071ca <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d207      	bcs.n	8004bc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	425b      	negs	r3, r3
 8004bc2:	441a      	add	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d105      	bne.n	8004bda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004be2:	697b      	ldr	r3, [r7, #20]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d018      	beq.n	8004c30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	441a      	add	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d303      	bcc.n	8004c20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68d9      	ldr	r1, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6838      	ldr	r0, [r7, #0]
 8004c2c:	f002 facd 	bl	80071ca <memcpy>
	}
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c40:	f001 fc78 	bl	8006534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c4c:	e011      	b.n	8004c72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d012      	beq.n	8004c7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3324      	adds	r3, #36	; 0x24
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fd50 	bl	8005700 <xTaskRemoveFromEventList>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c66:	f000 fe27 	bl	80058b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	dce9      	bgt.n	8004c4e <prvUnlockQueue+0x16>
 8004c7a:	e000      	b.n	8004c7e <prvUnlockQueue+0x46>
					break;
 8004c7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	22ff      	movs	r2, #255	; 0xff
 8004c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c86:	f001 fc85 	bl	8006594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c8a:	f001 fc53 	bl	8006534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c96:	e011      	b.n	8004cbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3310      	adds	r3, #16
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fd2b 	bl	8005700 <xTaskRemoveFromEventList>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cb0:	f000 fe02 	bl	80058b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dce9      	bgt.n	8004c98 <prvUnlockQueue+0x60>
 8004cc4:	e000      	b.n	8004cc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	22ff      	movs	r2, #255	; 0xff
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cd0:	f001 fc60 	bl	8006594 <vPortExitCritical>
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ce4:	f001 fc26 	bl	8006534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e001      	b.n	8004cfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cfa:	f001 fc4b 	bl	8006594 <vPortExitCritical>

	return xReturn;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d10:	f001 fc10 	bl	8006534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d102      	bne.n	8004d26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e001      	b.n	8004d2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d2a:	f001 fc33 	bl	8006594 <vPortExitCritical>

	return xReturn;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e014      	b.n	8004d72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d48:	4a0f      	ldr	r2, [pc, #60]	; (8004d88 <vQueueAddToRegistry+0x50>)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d54:	490c      	ldr	r1, [pc, #48]	; (8004d88 <vQueueAddToRegistry+0x50>)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <vQueueAddToRegistry+0x50>)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d6a:	e006      	b.n	8004d7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b07      	cmp	r3, #7
 8004d76:	d9e7      	bls.n	8004d48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000dd8 	.word	0x20000dd8

08004d8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d9c:	f001 fbca 	bl	8006534 <vPortEnterCritical>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004da6:	b25b      	sxtb	r3, r3
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d103      	bne.n	8004db6 <vQueueWaitForMessageRestricted+0x2a>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dbc:	b25b      	sxtb	r3, r3
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d103      	bne.n	8004dcc <vQueueWaitForMessageRestricted+0x40>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dcc:	f001 fbe2 	bl	8006594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d106      	bne.n	8004de6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3324      	adds	r3, #36	; 0x24
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fc61 	bl	80056a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f7ff ff26 	bl	8004c38 <prvUnlockQueue>
	}
 8004dec:	bf00      	nop
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af04      	add	r7, sp, #16
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	623b      	str	r3, [r7, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xTaskCreateStatic+0x46>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61fb      	str	r3, [r7, #28]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e3a:	23bc      	movs	r3, #188	; 0xbc
 8004e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2bbc      	cmp	r3, #188	; 0xbc
 8004e42:	d00a      	beq.n	8004e5a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	61bb      	str	r3, [r7, #24]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01e      	beq.n	8004ea0 <xTaskCreateStatic+0xac>
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	9302      	str	r3, [sp, #8]
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f850 	bl	8004f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e9a:	f000 f8f3 	bl	8005084 <prvAddNewTaskToReadyList>
 8004e9e:	e001      	b.n	8004ea4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ea4:	697b      	ldr	r3, [r7, #20]
	}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3728      	adds	r7, #40	; 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b08c      	sub	sp, #48	; 0x30
 8004eb2:	af04      	add	r7, sp, #16
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f001 fc58 	bl	8006778 <pvPortMalloc>
 8004ec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ed0:	20bc      	movs	r0, #188	; 0xbc
 8004ed2:	f001 fc51 	bl	8006778 <pvPortMalloc>
 8004ed6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ee4:	e005      	b.n	8004ef2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ee6:	6978      	ldr	r0, [r7, #20]
 8004ee8:	f001 fd12 	bl	8006910 <vPortFree>
 8004eec:	e001      	b.n	8004ef2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d017      	beq.n	8004f28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f00:	88fa      	ldrh	r2, [r7, #6]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f80e 	bl	8004f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f1c:	69f8      	ldr	r0, [r7, #28]
 8004f1e:	f000 f8b1 	bl	8005084 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	e002      	b.n	8004f2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	21a5      	movs	r1, #165	; 0xa5
 8004f52:	f002 f948 	bl	80071e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f60:	3b01      	subs	r3, #1
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	617b      	str	r3, [r7, #20]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01f      	beq.n	8004fd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e012      	b.n	8004fc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	7819      	ldrb	r1, [r3, #0]
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	3334      	adds	r3, #52	; 0x34
 8004fac:	460a      	mov	r2, r1
 8004fae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d006      	beq.n	8004fca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b0f      	cmp	r3, #15
 8004fc6:	d9e9      	bls.n	8004f9c <prvInitialiseNewTask+0x64>
 8004fc8:	e000      	b.n	8004fcc <prvInitialiseNewTask+0x94>
			{
				break;
 8004fca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd4:	e003      	b.n	8004fde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b37      	cmp	r3, #55	; 0x37
 8004fe2:	d901      	bls.n	8004fe8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fe4:	2337      	movs	r3, #55	; 0x37
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe ffe6 	bl	8003fd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	3318      	adds	r3, #24
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe ffe1 	bl	8003fd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005012:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005022:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	2200      	movs	r2, #0
 8005030:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	3354      	adds	r3, #84	; 0x54
 8005038:	2260      	movs	r2, #96	; 0x60
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f002 f8d2 	bl	80071e6 <memset>
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	4a0c      	ldr	r2, [pc, #48]	; (8005078 <prvInitialiseNewTask+0x140>)
 8005046:	659a      	str	r2, [r3, #88]	; 0x58
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	4a0c      	ldr	r2, [pc, #48]	; (800507c <prvInitialiseNewTask+0x144>)
 800504c:	65da      	str	r2, [r3, #92]	; 0x5c
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	4a0b      	ldr	r2, [pc, #44]	; (8005080 <prvInitialiseNewTask+0x148>)
 8005052:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	69b8      	ldr	r0, [r7, #24]
 800505a:	f001 f941 	bl	80062e0 <pxPortInitialiseStack>
 800505e:	4602      	mov	r2, r0
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005070:	bf00      	nop
 8005072:	3720      	adds	r7, #32
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	0800bbb0 	.word	0x0800bbb0
 800507c:	0800bbd0 	.word	0x0800bbd0
 8005080:	0800bb90 	.word	0x0800bb90

08005084 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800508c:	f001 fa52 	bl	8006534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005090:	4b2d      	ldr	r3, [pc, #180]	; (8005148 <prvAddNewTaskToReadyList+0xc4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	4a2c      	ldr	r2, [pc, #176]	; (8005148 <prvAddNewTaskToReadyList+0xc4>)
 8005098:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800509a:	4b2c      	ldr	r3, [pc, #176]	; (800514c <prvAddNewTaskToReadyList+0xc8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050a2:	4a2a      	ldr	r2, [pc, #168]	; (800514c <prvAddNewTaskToReadyList+0xc8>)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050a8:	4b27      	ldr	r3, [pc, #156]	; (8005148 <prvAddNewTaskToReadyList+0xc4>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d110      	bne.n	80050d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050b0:	f000 fc26 	bl	8005900 <prvInitialiseTaskLists>
 80050b4:	e00d      	b.n	80050d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050b6:	4b26      	ldr	r3, [pc, #152]	; (8005150 <prvAddNewTaskToReadyList+0xcc>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050be:	4b23      	ldr	r3, [pc, #140]	; (800514c <prvAddNewTaskToReadyList+0xc8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d802      	bhi.n	80050d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <prvAddNewTaskToReadyList+0xc8>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050d2:	4b20      	ldr	r3, [pc, #128]	; (8005154 <prvAddNewTaskToReadyList+0xd0>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3301      	adds	r3, #1
 80050d8:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <prvAddNewTaskToReadyList+0xd0>)
 80050da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050dc:	4b1d      	ldr	r3, [pc, #116]	; (8005154 <prvAddNewTaskToReadyList+0xd0>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <prvAddNewTaskToReadyList+0xd4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d903      	bls.n	80050f8 <prvAddNewTaskToReadyList+0x74>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <prvAddNewTaskToReadyList+0xd4>)
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4a15      	ldr	r2, [pc, #84]	; (800515c <prvAddNewTaskToReadyList+0xd8>)
 8005106:	441a      	add	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f7fe ff6b 	bl	8003fea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005114:	f001 fa3e 	bl	8006594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <prvAddNewTaskToReadyList+0xcc>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00e      	beq.n	800513e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005120:	4b0a      	ldr	r3, [pc, #40]	; (800514c <prvAddNewTaskToReadyList+0xc8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512a:	429a      	cmp	r2, r3
 800512c:	d207      	bcs.n	800513e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800512e:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <prvAddNewTaskToReadyList+0xdc>)
 8005130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200012ec 	.word	0x200012ec
 800514c:	20000e18 	.word	0x20000e18
 8005150:	200012f8 	.word	0x200012f8
 8005154:	20001308 	.word	0x20001308
 8005158:	200012f4 	.word	0x200012f4
 800515c:	20000e1c 	.word	0x20000e1c
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d017      	beq.n	80051a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005176:	4b13      	ldr	r3, [pc, #76]	; (80051c4 <vTaskDelay+0x60>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <vTaskDelay+0x30>
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	60bb      	str	r3, [r7, #8]
}
 8005190:	bf00      	nop
 8005192:	e7fe      	b.n	8005192 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005194:	f000 f88a 	bl	80052ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005198:	2100      	movs	r1, #0
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fcfe 	bl	8005b9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051a0:	f000 f892 	bl	80052c8 <xTaskResumeAll>
 80051a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <vTaskDelay+0x64>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051bc:	bf00      	nop
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	20001314 	.word	0x20001314
 80051c8:	e000ed04 	.word	0xe000ed04

080051cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	; 0x28
 80051d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80051da:	463a      	mov	r2, r7
 80051dc:	1d39      	adds	r1, r7, #4
 80051de:	f107 0308 	add.w	r3, r7, #8
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe fea0 	bl	8003f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80051e8:	6839      	ldr	r1, [r7, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	9202      	str	r2, [sp, #8]
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	2300      	movs	r3, #0
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	2300      	movs	r3, #0
 80051f8:	460a      	mov	r2, r1
 80051fa:	4924      	ldr	r1, [pc, #144]	; (800528c <vTaskStartScheduler+0xc0>)
 80051fc:	4824      	ldr	r0, [pc, #144]	; (8005290 <vTaskStartScheduler+0xc4>)
 80051fe:	f7ff fdf9 	bl	8004df4 <xTaskCreateStatic>
 8005202:	4603      	mov	r3, r0
 8005204:	4a23      	ldr	r2, [pc, #140]	; (8005294 <vTaskStartScheduler+0xc8>)
 8005206:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005208:	4b22      	ldr	r3, [pc, #136]	; (8005294 <vTaskStartScheduler+0xc8>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005210:	2301      	movs	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	e001      	b.n	800521a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d102      	bne.n	8005226 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005220:	f000 fd10 	bl	8005c44 <xTimerCreateTimerTask>
 8005224:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d11b      	bne.n	8005264 <vTaskStartScheduler+0x98>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	613b      	str	r3, [r7, #16]
}
 800523e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005240:	4b15      	ldr	r3, [pc, #84]	; (8005298 <vTaskStartScheduler+0xcc>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3354      	adds	r3, #84	; 0x54
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <vTaskStartScheduler+0xd0>)
 8005248:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <vTaskStartScheduler+0xd4>)
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005252:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <vTaskStartScheduler+0xd8>)
 8005254:	2201      	movs	r2, #1
 8005256:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005258:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <vTaskStartScheduler+0xdc>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800525e:	f001 f8c7 	bl	80063f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005262:	e00e      	b.n	8005282 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d10a      	bne.n	8005282 <vTaskStartScheduler+0xb6>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	e7fe      	b.n	8005280 <vTaskStartScheduler+0xb4>
}
 8005282:	bf00      	nop
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	0800bb2c 	.word	0x0800bb2c
 8005290:	080058d1 	.word	0x080058d1
 8005294:	20001310 	.word	0x20001310
 8005298:	20000e18 	.word	0x20000e18
 800529c:	20000014 	.word	0x20000014
 80052a0:	2000130c 	.word	0x2000130c
 80052a4:	200012f8 	.word	0x200012f8
 80052a8:	200012f0 	.word	0x200012f0

080052ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052b0:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <vTaskSuspendAll+0x18>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	4a03      	ldr	r2, [pc, #12]	; (80052c4 <vTaskSuspendAll+0x18>)
 80052b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052ba:	bf00      	nop
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	20001314 	.word	0x20001314

080052c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052d6:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <xTaskResumeAll+0x118>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	603b      	str	r3, [r7, #0]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052f4:	f001 f91e 	bl	8006534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052f8:	4b39      	ldr	r3, [pc, #228]	; (80053e0 <xTaskResumeAll+0x118>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	4a38      	ldr	r2, [pc, #224]	; (80053e0 <xTaskResumeAll+0x118>)
 8005300:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005302:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <xTaskResumeAll+0x118>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d162      	bne.n	80053d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800530a:	4b36      	ldr	r3, [pc, #216]	; (80053e4 <xTaskResumeAll+0x11c>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d05e      	beq.n	80053d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005312:	e02f      	b.n	8005374 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005314:	4b34      	ldr	r3, [pc, #208]	; (80053e8 <xTaskResumeAll+0x120>)
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3318      	adds	r3, #24
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe febf 	bl	80040a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	3304      	adds	r3, #4
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe feba 	bl	80040a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	4b2d      	ldr	r3, [pc, #180]	; (80053ec <xTaskResumeAll+0x124>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d903      	bls.n	8005344 <xTaskResumeAll+0x7c>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	4a2a      	ldr	r2, [pc, #168]	; (80053ec <xTaskResumeAll+0x124>)
 8005342:	6013      	str	r3, [r2, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4a27      	ldr	r2, [pc, #156]	; (80053f0 <xTaskResumeAll+0x128>)
 8005352:	441a      	add	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f7fe fe45 	bl	8003fea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005364:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <xTaskResumeAll+0x12c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800536e:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <xTaskResumeAll+0x130>)
 8005370:	2201      	movs	r2, #1
 8005372:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005374:	4b1c      	ldr	r3, [pc, #112]	; (80053e8 <xTaskResumeAll+0x120>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1cb      	bne.n	8005314 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005382:	f000 fb5f 	bl	8005a44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <xTaskResumeAll+0x134>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d010      	beq.n	80053b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005392:	f000 f847 	bl	8005424 <xTaskIncrementTick>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800539c:	4b16      	ldr	r3, [pc, #88]	; (80053f8 <xTaskResumeAll+0x130>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1f1      	bne.n	8005392 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <xTaskResumeAll+0x134>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053b4:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <xTaskResumeAll+0x130>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053c0:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <xTaskResumeAll+0x138>)
 80053c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053d0:	f001 f8e0 	bl	8006594 <vPortExitCritical>

	return xAlreadyYielded;
 80053d4:	68bb      	ldr	r3, [r7, #8]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20001314 	.word	0x20001314
 80053e4:	200012ec 	.word	0x200012ec
 80053e8:	200012ac 	.word	0x200012ac
 80053ec:	200012f4 	.word	0x200012f4
 80053f0:	20000e1c 	.word	0x20000e1c
 80053f4:	20000e18 	.word	0x20000e18
 80053f8:	20001300 	.word	0x20001300
 80053fc:	200012fc 	.word	0x200012fc
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <xTaskGetTickCount+0x1c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005410:	687b      	ldr	r3, [r7, #4]
}
 8005412:	4618      	mov	r0, r3
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	200012f0 	.word	0x200012f0

08005424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800542a:	2300      	movs	r3, #0
 800542c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800542e:	4b4f      	ldr	r3, [pc, #316]	; (800556c <xTaskIncrementTick+0x148>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 808f 	bne.w	8005556 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005438:	4b4d      	ldr	r3, [pc, #308]	; (8005570 <xTaskIncrementTick+0x14c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005440:	4a4b      	ldr	r2, [pc, #300]	; (8005570 <xTaskIncrementTick+0x14c>)
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d120      	bne.n	800548e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800544c:	4b49      	ldr	r3, [pc, #292]	; (8005574 <xTaskIncrementTick+0x150>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <xTaskIncrementTick+0x48>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	603b      	str	r3, [r7, #0]
}
 8005468:	bf00      	nop
 800546a:	e7fe      	b.n	800546a <xTaskIncrementTick+0x46>
 800546c:	4b41      	ldr	r3, [pc, #260]	; (8005574 <xTaskIncrementTick+0x150>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	60fb      	str	r3, [r7, #12]
 8005472:	4b41      	ldr	r3, [pc, #260]	; (8005578 <xTaskIncrementTick+0x154>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a3f      	ldr	r2, [pc, #252]	; (8005574 <xTaskIncrementTick+0x150>)
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4a3f      	ldr	r2, [pc, #252]	; (8005578 <xTaskIncrementTick+0x154>)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	4b3e      	ldr	r3, [pc, #248]	; (800557c <xTaskIncrementTick+0x158>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	4a3d      	ldr	r2, [pc, #244]	; (800557c <xTaskIncrementTick+0x158>)
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	f000 fadb 	bl	8005a44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800548e:	4b3c      	ldr	r3, [pc, #240]	; (8005580 <xTaskIncrementTick+0x15c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	429a      	cmp	r2, r3
 8005496:	d349      	bcc.n	800552c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005498:	4b36      	ldr	r3, [pc, #216]	; (8005574 <xTaskIncrementTick+0x150>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a2:	4b37      	ldr	r3, [pc, #220]	; (8005580 <xTaskIncrementTick+0x15c>)
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295
 80054a8:	601a      	str	r2, [r3, #0]
					break;
 80054aa:	e03f      	b.n	800552c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ac:	4b31      	ldr	r3, [pc, #196]	; (8005574 <xTaskIncrementTick+0x150>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d203      	bcs.n	80054cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80054c4:	4a2e      	ldr	r2, [pc, #184]	; (8005580 <xTaskIncrementTick+0x15c>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80054ca:	e02f      	b.n	800552c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fe fde7 	bl	80040a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d004      	beq.n	80054e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	3318      	adds	r3, #24
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fe fdde 	bl	80040a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	4b25      	ldr	r3, [pc, #148]	; (8005584 <xTaskIncrementTick+0x160>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d903      	bls.n	80054fc <xTaskIncrementTick+0xd8>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	4a22      	ldr	r2, [pc, #136]	; (8005584 <xTaskIncrementTick+0x160>)
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <xTaskIncrementTick+0x164>)
 800550a:	441a      	add	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f7fe fd69 	bl	8003fea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <xTaskIncrementTick+0x168>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	429a      	cmp	r2, r3
 8005524:	d3b8      	bcc.n	8005498 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005526:	2301      	movs	r3, #1
 8005528:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800552a:	e7b5      	b.n	8005498 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800552c:	4b17      	ldr	r3, [pc, #92]	; (800558c <xTaskIncrementTick+0x168>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005532:	4915      	ldr	r1, [pc, #84]	; (8005588 <xTaskIncrementTick+0x164>)
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d901      	bls.n	8005548 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005544:	2301      	movs	r3, #1
 8005546:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005548:	4b11      	ldr	r3, [pc, #68]	; (8005590 <xTaskIncrementTick+0x16c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d007      	beq.n	8005560 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005550:	2301      	movs	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	e004      	b.n	8005560 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <xTaskIncrementTick+0x170>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <xTaskIncrementTick+0x170>)
 800555e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005560:	697b      	ldr	r3, [r7, #20]
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20001314 	.word	0x20001314
 8005570:	200012f0 	.word	0x200012f0
 8005574:	200012a4 	.word	0x200012a4
 8005578:	200012a8 	.word	0x200012a8
 800557c:	20001304 	.word	0x20001304
 8005580:	2000130c 	.word	0x2000130c
 8005584:	200012f4 	.word	0x200012f4
 8005588:	20000e1c 	.word	0x20000e1c
 800558c:	20000e18 	.word	0x20000e18
 8005590:	20001300 	.word	0x20001300
 8005594:	200012fc 	.word	0x200012fc

08005598 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <vTaskSwitchContext+0xb0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055a6:	4b29      	ldr	r3, [pc, #164]	; (800564c <vTaskSwitchContext+0xb4>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055ac:	e046      	b.n	800563c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80055ae:	4b27      	ldr	r3, [pc, #156]	; (800564c <vTaskSwitchContext+0xb4>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055b4:	4b26      	ldr	r3, [pc, #152]	; (8005650 <vTaskSwitchContext+0xb8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e010      	b.n	80055de <vTaskSwitchContext+0x46>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	607b      	str	r3, [r7, #4]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <vTaskSwitchContext+0x3e>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	3b01      	subs	r3, #1
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	491d      	ldr	r1, [pc, #116]	; (8005654 <vTaskSwitchContext+0xbc>)
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0e4      	beq.n	80055bc <vTaskSwitchContext+0x24>
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4a15      	ldr	r2, [pc, #84]	; (8005654 <vTaskSwitchContext+0xbc>)
 80055fe:	4413      	add	r3, r2
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	685a      	ldr	r2, [r3, #4]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	605a      	str	r2, [r3, #4]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	3308      	adds	r3, #8
 8005614:	429a      	cmp	r2, r3
 8005616:	d104      	bne.n	8005622 <vTaskSwitchContext+0x8a>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	605a      	str	r2, [r3, #4]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4a0b      	ldr	r2, [pc, #44]	; (8005658 <vTaskSwitchContext+0xc0>)
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	4a08      	ldr	r2, [pc, #32]	; (8005650 <vTaskSwitchContext+0xb8>)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005632:	4b09      	ldr	r3, [pc, #36]	; (8005658 <vTaskSwitchContext+0xc0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3354      	adds	r3, #84	; 0x54
 8005638:	4a08      	ldr	r2, [pc, #32]	; (800565c <vTaskSwitchContext+0xc4>)
 800563a:	6013      	str	r3, [r2, #0]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	20001314 	.word	0x20001314
 800564c:	20001300 	.word	0x20001300
 8005650:	200012f4 	.word	0x200012f4
 8005654:	20000e1c 	.word	0x20000e1c
 8005658:	20000e18 	.word	0x20000e18
 800565c:	20000014 	.word	0x20000014

08005660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <vTaskPlaceOnEventList+0x44>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3318      	adds	r3, #24
 800568c:	4619      	mov	r1, r3
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f7fe fccf 	bl	8004032 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005694:	2101      	movs	r1, #1
 8005696:	6838      	ldr	r0, [r7, #0]
 8005698:	f000 fa80 	bl	8005b9c <prvAddCurrentTaskToDelayedList>
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000e18 	.word	0x20000e18

080056a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	617b      	str	r3, [r7, #20]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056d0:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <vTaskPlaceOnEventListRestricted+0x54>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3318      	adds	r3, #24
 80056d6:	4619      	mov	r1, r3
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7fe fc86 	bl	8003fea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80056e4:	f04f 33ff 	mov.w	r3, #4294967295
 80056e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	68b8      	ldr	r0, [r7, #8]
 80056ee:	f000 fa55 	bl	8005b9c <prvAddCurrentTaskToDelayedList>
	}
 80056f2:	bf00      	nop
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000e18 	.word	0x20000e18

08005700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	60fb      	str	r3, [r7, #12]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	3318      	adds	r3, #24
 8005730:	4618      	mov	r0, r3
 8005732:	f7fe fcb7 	bl	80040a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005736:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <xTaskRemoveFromEventList+0xb0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d11d      	bne.n	800577a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	3304      	adds	r3, #4
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fcae 	bl	80040a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <xTaskRemoveFromEventList+0xb4>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d903      	bls.n	800575c <xTaskRemoveFromEventList+0x5c>
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005758:	4a16      	ldr	r2, [pc, #88]	; (80057b4 <xTaskRemoveFromEventList+0xb4>)
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4a13      	ldr	r2, [pc, #76]	; (80057b8 <xTaskRemoveFromEventList+0xb8>)
 800576a:	441a      	add	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7fe fc39 	bl	8003fea <vListInsertEnd>
 8005778:	e005      	b.n	8005786 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3318      	adds	r3, #24
 800577e:	4619      	mov	r1, r3
 8005780:	480e      	ldr	r0, [pc, #56]	; (80057bc <xTaskRemoveFromEventList+0xbc>)
 8005782:	f7fe fc32 	bl	8003fea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578a:	4b0d      	ldr	r3, [pc, #52]	; (80057c0 <xTaskRemoveFromEventList+0xc0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	429a      	cmp	r2, r3
 8005792:	d905      	bls.n	80057a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005794:	2301      	movs	r3, #1
 8005796:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005798:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <xTaskRemoveFromEventList+0xc4>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e001      	b.n	80057a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057a4:	697b      	ldr	r3, [r7, #20]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20001314 	.word	0x20001314
 80057b4:	200012f4 	.word	0x200012f4
 80057b8:	20000e1c 	.word	0x20000e1c
 80057bc:	200012ac 	.word	0x200012ac
 80057c0:	20000e18 	.word	0x20000e18
 80057c4:	20001300 	.word	0x20001300

080057c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <vTaskInternalSetTimeOutState+0x24>)
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <vTaskInternalSetTimeOutState+0x28>)
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	605a      	str	r2, [r3, #4]
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	20001304 	.word	0x20001304
 80057f0:	200012f0 	.word	0x200012f0

080057f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10a      	bne.n	800581a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	613b      	str	r3, [r7, #16]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60fb      	str	r3, [r7, #12]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005836:	f000 fe7d 	bl	8006534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800583a:	4b1d      	ldr	r3, [pc, #116]	; (80058b0 <xTaskCheckForTimeOut+0xbc>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d102      	bne.n	800585a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005854:	2300      	movs	r3, #0
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	e023      	b.n	80058a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <xTaskCheckForTimeOut+0xc0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	429a      	cmp	r2, r3
 8005864:	d007      	beq.n	8005876 <xTaskCheckForTimeOut+0x82>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	429a      	cmp	r2, r3
 800586e:	d302      	bcc.n	8005876 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	e015      	b.n	80058a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	429a      	cmp	r2, r3
 800587e:	d20b      	bcs.n	8005898 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ff9b 	bl	80057c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	61fb      	str	r3, [r7, #28]
 8005896:	e004      	b.n	80058a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800589e:	2301      	movs	r3, #1
 80058a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058a2:	f000 fe77 	bl	8006594 <vPortExitCritical>

	return xReturn;
 80058a6:	69fb      	ldr	r3, [r7, #28]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3720      	adds	r7, #32
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200012f0 	.word	0x200012f0
 80058b4:	20001304 	.word	0x20001304

080058b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058bc:	4b03      	ldr	r3, [pc, #12]	; (80058cc <vTaskMissedYield+0x14>)
 80058be:	2201      	movs	r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
}
 80058c2:	bf00      	nop
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	20001300 	.word	0x20001300

080058d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058d8:	f000 f852 	bl	8005980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058dc:	4b06      	ldr	r3, [pc, #24]	; (80058f8 <prvIdleTask+0x28>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d9f9      	bls.n	80058d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <prvIdleTask+0x2c>)
 80058e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058f4:	e7f0      	b.n	80058d8 <prvIdleTask+0x8>
 80058f6:	bf00      	nop
 80058f8:	20000e1c 	.word	0x20000e1c
 80058fc:	e000ed04 	.word	0xe000ed04

08005900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	e00c      	b.n	8005926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4a12      	ldr	r2, [pc, #72]	; (8005960 <prvInitialiseTaskLists+0x60>)
 8005918:	4413      	add	r3, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fb38 	bl	8003f90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3301      	adds	r3, #1
 8005924:	607b      	str	r3, [r7, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b37      	cmp	r3, #55	; 0x37
 800592a:	d9ef      	bls.n	800590c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800592c:	480d      	ldr	r0, [pc, #52]	; (8005964 <prvInitialiseTaskLists+0x64>)
 800592e:	f7fe fb2f 	bl	8003f90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005932:	480d      	ldr	r0, [pc, #52]	; (8005968 <prvInitialiseTaskLists+0x68>)
 8005934:	f7fe fb2c 	bl	8003f90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005938:	480c      	ldr	r0, [pc, #48]	; (800596c <prvInitialiseTaskLists+0x6c>)
 800593a:	f7fe fb29 	bl	8003f90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800593e:	480c      	ldr	r0, [pc, #48]	; (8005970 <prvInitialiseTaskLists+0x70>)
 8005940:	f7fe fb26 	bl	8003f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005944:	480b      	ldr	r0, [pc, #44]	; (8005974 <prvInitialiseTaskLists+0x74>)
 8005946:	f7fe fb23 	bl	8003f90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <prvInitialiseTaskLists+0x78>)
 800594c:	4a05      	ldr	r2, [pc, #20]	; (8005964 <prvInitialiseTaskLists+0x64>)
 800594e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005950:	4b0a      	ldr	r3, [pc, #40]	; (800597c <prvInitialiseTaskLists+0x7c>)
 8005952:	4a05      	ldr	r2, [pc, #20]	; (8005968 <prvInitialiseTaskLists+0x68>)
 8005954:	601a      	str	r2, [r3, #0]
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20000e1c 	.word	0x20000e1c
 8005964:	2000127c 	.word	0x2000127c
 8005968:	20001290 	.word	0x20001290
 800596c:	200012ac 	.word	0x200012ac
 8005970:	200012c0 	.word	0x200012c0
 8005974:	200012d8 	.word	0x200012d8
 8005978:	200012a4 	.word	0x200012a4
 800597c:	200012a8 	.word	0x200012a8

08005980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005986:	e019      	b.n	80059bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005988:	f000 fdd4 	bl	8006534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598c:	4b10      	ldr	r3, [pc, #64]	; (80059d0 <prvCheckTasksWaitingTermination+0x50>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fb83 	bl	80040a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800599e:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <prvCheckTasksWaitingTermination+0x54>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	4a0b      	ldr	r2, [pc, #44]	; (80059d4 <prvCheckTasksWaitingTermination+0x54>)
 80059a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <prvCheckTasksWaitingTermination+0x58>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	4a0a      	ldr	r2, [pc, #40]	; (80059d8 <prvCheckTasksWaitingTermination+0x58>)
 80059b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059b2:	f000 fdef 	bl	8006594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f810 	bl	80059dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059bc:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <prvCheckTasksWaitingTermination+0x58>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e1      	bne.n	8005988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200012c0 	.word	0x200012c0
 80059d4:	200012ec 	.word	0x200012ec
 80059d8:	200012d4 	.word	0x200012d4

080059dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3354      	adds	r3, #84	; 0x54
 80059e8:	4618      	mov	r0, r3
 80059ea:	f002 fbaf 	bl	800814c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d108      	bne.n	8005a0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 ff87 	bl	8006910 <vPortFree>
				vPortFree( pxTCB );
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 ff84 	bl	8006910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a08:	e018      	b.n	8005a3c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d103      	bne.n	8005a1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 ff7b 	bl	8006910 <vPortFree>
	}
 8005a1a:	e00f      	b.n	8005a3c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d00a      	beq.n	8005a3c <prvDeleteTCB+0x60>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60fb      	str	r3, [r7, #12]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <prvDeleteTCB+0x5e>
	}
 8005a3c:	bf00      	nop
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <prvResetNextTaskUnblockTime+0x38>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d104      	bne.n	8005a5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a54:	4b0a      	ldr	r3, [pc, #40]	; (8005a80 <prvResetNextTaskUnblockTime+0x3c>)
 8005a56:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a5c:	e008      	b.n	8005a70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a5e:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <prvResetNextTaskUnblockTime+0x38>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <prvResetNextTaskUnblockTime+0x3c>)
 8005a6e:	6013      	str	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	200012a4 	.word	0x200012a4
 8005a80:	2000130c 	.word	0x2000130c

08005a84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <xTaskGetSchedulerState+0x34>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d102      	bne.n	8005a98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a92:	2301      	movs	r3, #1
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	e008      	b.n	8005aaa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a98:	4b08      	ldr	r3, [pc, #32]	; (8005abc <xTaskGetSchedulerState+0x38>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d102      	bne.n	8005aa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	607b      	str	r3, [r7, #4]
 8005aa4:	e001      	b.n	8005aaa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005aaa:	687b      	ldr	r3, [r7, #4]
	}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	200012f8 	.word	0x200012f8
 8005abc:	20001314 	.word	0x20001314

08005ac0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d056      	beq.n	8005b84 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ad6:	4b2e      	ldr	r3, [pc, #184]	; (8005b90 <xTaskPriorityDisinherit+0xd0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d00a      	beq.n	8005af6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	60bb      	str	r3, [r7, #8]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b18:	1e5a      	subs	r2, r3, #1
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d02c      	beq.n	8005b84 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d128      	bne.n	8005b84 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fab4 	bl	80040a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <xTaskPriorityDisinherit+0xd4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d903      	bls.n	8005b64 <xTaskPriorityDisinherit+0xa4>
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b60:	4a0c      	ldr	r2, [pc, #48]	; (8005b94 <xTaskPriorityDisinherit+0xd4>)
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <xTaskPriorityDisinherit+0xd8>)
 8005b72:	441a      	add	r2, r3
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4619      	mov	r1, r3
 8005b7a:	4610      	mov	r0, r2
 8005b7c:	f7fe fa35 	bl	8003fea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b80:	2301      	movs	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b84:	697b      	ldr	r3, [r7, #20]
	}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000e18 	.word	0x20000e18
 8005b94:	200012f4 	.word	0x200012f4
 8005b98:	20000e1c 	.word	0x20000e1c

08005b9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ba6:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <prvAddCurrentTaskToDelayedList+0x90>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bac:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fa76 	bl	80040a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbe:	d10a      	bne.n	8005bd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3304      	adds	r3, #4
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4819      	ldr	r0, [pc, #100]	; (8005c34 <prvAddCurrentTaskToDelayedList+0x98>)
 8005bd0:	f7fe fa0b 	bl	8003fea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bd4:	e026      	b.n	8005c24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005bde:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d209      	bcs.n	8005c02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	f7fe fa19 	bl	8004032 <vListInsert>
}
 8005c00:	e010      	b.n	8005c24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c02:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f7fe fa0f 	bl	8004032 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c14:	4b0a      	ldr	r3, [pc, #40]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d202      	bcs.n	8005c24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c1e:	4a08      	ldr	r2, [pc, #32]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6013      	str	r3, [r2, #0]
}
 8005c24:	bf00      	nop
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	200012f0 	.word	0x200012f0
 8005c30:	20000e18 	.word	0x20000e18
 8005c34:	200012d8 	.word	0x200012d8
 8005c38:	200012a8 	.word	0x200012a8
 8005c3c:	200012a4 	.word	0x200012a4
 8005c40:	2000130c 	.word	0x2000130c

08005c44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c4e:	f000 fb07 	bl	8006260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c52:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <xTimerCreateTimerTask+0x80>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d021      	beq.n	8005c9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c62:	1d3a      	adds	r2, r7, #4
 8005c64:	f107 0108 	add.w	r1, r7, #8
 8005c68:	f107 030c 	add.w	r3, r7, #12
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe f975 	bl	8003f5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005c72:	6879      	ldr	r1, [r7, #4]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	9202      	str	r2, [sp, #8]
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	2300      	movs	r3, #0
 8005c82:	460a      	mov	r2, r1
 8005c84:	4910      	ldr	r1, [pc, #64]	; (8005cc8 <xTimerCreateTimerTask+0x84>)
 8005c86:	4811      	ldr	r0, [pc, #68]	; (8005ccc <xTimerCreateTimerTask+0x88>)
 8005c88:	f7ff f8b4 	bl	8004df4 <xTaskCreateStatic>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <xTimerCreateTimerTask+0x8c>)
 8005c90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c92:	4b0f      	ldr	r3, [pc, #60]	; (8005cd0 <xTimerCreateTimerTask+0x8c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	613b      	str	r3, [r7, #16]
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cba:	697b      	ldr	r3, [r7, #20]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	20001348 	.word	0x20001348
 8005cc8:	0800bb34 	.word	0x0800bb34
 8005ccc:	08005e09 	.word	0x08005e09
 8005cd0:	2000134c 	.word	0x2000134c

08005cd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b08a      	sub	sp, #40	; 0x28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	623b      	str	r3, [r7, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d02:	4b1a      	ldr	r3, [pc, #104]	; (8005d6c <xTimerGenericCommand+0x98>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d02a      	beq.n	8005d60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b05      	cmp	r3, #5
 8005d1a:	dc18      	bgt.n	8005d4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d1c:	f7ff feb2 	bl	8005a84 <xTaskGetSchedulerState>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d109      	bne.n	8005d3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d26:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <xTimerGenericCommand+0x98>)
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	f107 0110 	add.w	r1, r7, #16
 8005d2e:	2300      	movs	r3, #0
 8005d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d32:	f7fe fb6b 	bl	800440c <xQueueGenericSend>
 8005d36:	6278      	str	r0, [r7, #36]	; 0x24
 8005d38:	e012      	b.n	8005d60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <xTimerGenericCommand+0x98>)
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f107 0110 	add.w	r1, r7, #16
 8005d42:	2300      	movs	r3, #0
 8005d44:	2200      	movs	r2, #0
 8005d46:	f7fe fb61 	bl	800440c <xQueueGenericSend>
 8005d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8005d4c:	e008      	b.n	8005d60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d4e:	4b07      	ldr	r3, [pc, #28]	; (8005d6c <xTimerGenericCommand+0x98>)
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	f107 0110 	add.w	r1, r7, #16
 8005d56:	2300      	movs	r3, #0
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	f7fe fc55 	bl	8004608 <xQueueGenericSendFromISR>
 8005d5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3728      	adds	r7, #40	; 0x28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20001348 	.word	0x20001348

08005d70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af02      	add	r7, sp, #8
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7a:	4b22      	ldr	r3, [pc, #136]	; (8005e04 <prvProcessExpiredTimer+0x94>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fe f98b 	bl	80040a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d022      	beq.n	8005de2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	699a      	ldr	r2, [r3, #24]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	18d1      	adds	r1, r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	6978      	ldr	r0, [r7, #20]
 8005daa:	f000 f8d1 	bl	8005f50 <prvInsertTimerInActiveList>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01f      	beq.n	8005df4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005db4:	2300      	movs	r3, #0
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2300      	movs	r3, #0
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	6978      	ldr	r0, [r7, #20]
 8005dc0:	f7ff ff88 	bl	8005cd4 <xTimerGenericCommand>
 8005dc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d113      	bne.n	8005df4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	60fb      	str	r3, [r7, #12]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de8:	f023 0301 	bic.w	r3, r3, #1
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	6978      	ldr	r0, [r7, #20]
 8005dfa:	4798      	blx	r3
}
 8005dfc:	bf00      	nop
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20001340 	.word	0x20001340

08005e08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e10:	f107 0308 	add.w	r3, r7, #8
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 f857 	bl	8005ec8 <prvGetNextExpireTime>
 8005e1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4619      	mov	r1, r3
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f000 f803 	bl	8005e2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e26:	f000 f8d5 	bl	8005fd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e2a:	e7f1      	b.n	8005e10 <prvTimerTask+0x8>

08005e2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e36:	f7ff fa39 	bl	80052ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e3a:	f107 0308 	add.w	r3, r7, #8
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 f866 	bl	8005f10 <prvSampleTimeNow>
 8005e44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d130      	bne.n	8005eae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <prvProcessTimerOrBlockTask+0x3c>
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d806      	bhi.n	8005e68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e5a:	f7ff fa35 	bl	80052c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e5e:	68f9      	ldr	r1, [r7, #12]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff ff85 	bl	8005d70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005e66:	e024      	b.n	8005eb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <prvProcessTimerOrBlockTask+0x90>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <prvProcessTimerOrBlockTask+0x50>
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <prvProcessTimerOrBlockTask+0x52>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005e80:	4b0f      	ldr	r3, [pc, #60]	; (8005ec0 <prvProcessTimerOrBlockTask+0x94>)
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	f7fe ff7d 	bl	8004d8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005e92:	f7ff fa19 	bl	80052c8 <xTaskResumeAll>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <prvProcessTimerOrBlockTask+0x98>)
 8005e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	f3bf 8f6f 	isb	sy
}
 8005eac:	e001      	b.n	8005eb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005eae:	f7ff fa0b 	bl	80052c8 <xTaskResumeAll>
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20001344 	.word	0x20001344
 8005ec0:	20001348 	.word	0x20001348
 8005ec4:	e000ed04 	.word	0xe000ed04

08005ec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	; (8005f0c <prvGetNextExpireTime+0x44>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <prvGetNextExpireTime+0x16>
 8005eda:	2201      	movs	r2, #1
 8005edc:	e000      	b.n	8005ee0 <prvGetNextExpireTime+0x18>
 8005ede:	2200      	movs	r2, #0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d105      	bne.n	8005ef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005eec:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <prvGetNextExpireTime+0x44>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60fb      	str	r3, [r7, #12]
 8005ef6:	e001      	b.n	8005efc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005efc:	68fb      	ldr	r3, [r7, #12]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20001340 	.word	0x20001340

08005f10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f18:	f7ff fa74 	bl	8005404 <xTaskGetTickCount>
 8005f1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <prvSampleTimeNow+0x3c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d205      	bcs.n	8005f34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f28:	f000 f936 	bl	8006198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f3a:	4a04      	ldr	r2, [pc, #16]	; (8005f4c <prvSampleTimeNow+0x3c>)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f40:	68fb      	ldr	r3, [r7, #12]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20001350 	.word	0x20001350

08005f50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d812      	bhi.n	8005f9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	1ad2      	subs	r2, r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	699b      	ldr	r3, [r3, #24]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d302      	bcc.n	8005f8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005f84:	2301      	movs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	e01b      	b.n	8005fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005f8a:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <prvInsertTimerInActiveList+0x7c>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3304      	adds	r3, #4
 8005f92:	4619      	mov	r1, r3
 8005f94:	4610      	mov	r0, r2
 8005f96:	f7fe f84c 	bl	8004032 <vListInsert>
 8005f9a:	e012      	b.n	8005fc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d206      	bcs.n	8005fb2 <prvInsertTimerInActiveList+0x62>
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d302      	bcc.n	8005fb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fac:	2301      	movs	r3, #1
 8005fae:	617b      	str	r3, [r7, #20]
 8005fb0:	e007      	b.n	8005fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005fb2:	4b07      	ldr	r3, [pc, #28]	; (8005fd0 <prvInsertTimerInActiveList+0x80>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3304      	adds	r3, #4
 8005fba:	4619      	mov	r1, r3
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	f7fe f838 	bl	8004032 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005fc2:	697b      	ldr	r3, [r7, #20]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	20001344 	.word	0x20001344
 8005fd0:	20001340 	.word	0x20001340

08005fd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08e      	sub	sp, #56	; 0x38
 8005fd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fda:	e0ca      	b.n	8006172 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da18      	bge.n	8006014 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005fe2:	1d3b      	adds	r3, r7, #4
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	61fb      	str	r3, [r7, #28]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800600a:	6850      	ldr	r0, [r2, #4]
 800600c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800600e:	6892      	ldr	r2, [r2, #8]
 8006010:	4611      	mov	r1, r2
 8006012:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f2c0 80aa 	blt.w	8006170 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d004      	beq.n	8006032 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602a:	3304      	adds	r3, #4
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe f839 	bl	80040a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006032:	463b      	mov	r3, r7
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff ff6b 	bl	8005f10 <prvSampleTimeNow>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b09      	cmp	r3, #9
 8006040:	f200 8097 	bhi.w	8006172 <prvProcessReceivedCommands+0x19e>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <prvProcessReceivedCommands+0x78>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006075 	.word	0x08006075
 8006050:	08006075 	.word	0x08006075
 8006054:	08006075 	.word	0x08006075
 8006058:	080060e9 	.word	0x080060e9
 800605c:	080060fd 	.word	0x080060fd
 8006060:	08006147 	.word	0x08006147
 8006064:	08006075 	.word	0x08006075
 8006068:	08006075 	.word	0x08006075
 800606c:	080060e9 	.word	0x080060e9
 8006070:	080060fd 	.word	0x080060fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	b2da      	uxtb	r2, r3
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	18d1      	adds	r1, r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006094:	f7ff ff5c 	bl	8005f50 <prvInsertTimerInActiveList>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d069      	beq.n	8006172 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d05e      	beq.n	8006172 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	441a      	add	r2, r3
 80060bc:	2300      	movs	r3, #0
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	2300      	movs	r3, #0
 80060c2:	2100      	movs	r1, #0
 80060c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060c6:	f7ff fe05 	bl	8005cd4 <xTimerGenericCommand>
 80060ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d14f      	bne.n	8006172 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	61bb      	str	r3, [r7, #24]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ee:	f023 0301 	bic.w	r3, r3, #1
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80060fa:	e03a      	b.n	8006172 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	b2da      	uxtb	r2, r3
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	617b      	str	r3, [r7, #20]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	18d1      	adds	r1, r2, r3
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006140:	f7ff ff06 	bl	8005f50 <prvInsertTimerInActiveList>
					break;
 8006144:	e015      	b.n	8006172 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d103      	bne.n	800615c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006156:	f000 fbdb 	bl	8006910 <vPortFree>
 800615a:	e00a      	b.n	8006172 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800616e:	e000      	b.n	8006172 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006172:	4b08      	ldr	r3, [pc, #32]	; (8006194 <prvProcessReceivedCommands+0x1c0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	1d39      	adds	r1, r7, #4
 8006178:	2200      	movs	r2, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f7fe fb6c 	bl	8004858 <xQueueReceive>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	f47f af2a 	bne.w	8005fdc <prvProcessReceivedCommands+0x8>
	}
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	3730      	adds	r7, #48	; 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20001348 	.word	0x20001348

08006198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800619e:	e048      	b.n	8006232 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061a0:	4b2d      	ldr	r3, [pc, #180]	; (8006258 <prvSwitchTimerLists+0xc0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061aa:	4b2b      	ldr	r3, [pc, #172]	; (8006258 <prvSwitchTimerLists+0xc0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3304      	adds	r3, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fd ff73 	bl	80040a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1b      	ldr	r3, [r3, #32]
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02e      	beq.n	8006232 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d90e      	bls.n	8006204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061f2:	4b19      	ldr	r3, [pc, #100]	; (8006258 <prvSwitchTimerLists+0xc0>)
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fd ff18 	bl	8004032 <vListInsert>
 8006202:	e016      	b.n	8006232 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006204:	2300      	movs	r3, #0
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	2300      	movs	r3, #0
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	2100      	movs	r1, #0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff fd60 	bl	8005cd4 <xTimerGenericCommand>
 8006214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	f383 8811 	msr	BASEPRI, r3
 8006224:	f3bf 8f6f 	isb	sy
 8006228:	f3bf 8f4f 	dsb	sy
 800622c:	603b      	str	r3, [r7, #0]
}
 800622e:	bf00      	nop
 8006230:	e7fe      	b.n	8006230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006232:	4b09      	ldr	r3, [pc, #36]	; (8006258 <prvSwitchTimerLists+0xc0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1b1      	bne.n	80061a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <prvSwitchTimerLists+0xc0>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006242:	4b06      	ldr	r3, [pc, #24]	; (800625c <prvSwitchTimerLists+0xc4>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a04      	ldr	r2, [pc, #16]	; (8006258 <prvSwitchTimerLists+0xc0>)
 8006248:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800624a:	4a04      	ldr	r2, [pc, #16]	; (800625c <prvSwitchTimerLists+0xc4>)
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	6013      	str	r3, [r2, #0]
}
 8006250:	bf00      	nop
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20001340 	.word	0x20001340
 800625c:	20001344 	.word	0x20001344

08006260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006266:	f000 f965 	bl	8006534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800626a:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <prvCheckForValidListAndQueue+0x60>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d120      	bne.n	80062b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006272:	4814      	ldr	r0, [pc, #80]	; (80062c4 <prvCheckForValidListAndQueue+0x64>)
 8006274:	f7fd fe8c 	bl	8003f90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006278:	4813      	ldr	r0, [pc, #76]	; (80062c8 <prvCheckForValidListAndQueue+0x68>)
 800627a:	f7fd fe89 	bl	8003f90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800627e:	4b13      	ldr	r3, [pc, #76]	; (80062cc <prvCheckForValidListAndQueue+0x6c>)
 8006280:	4a10      	ldr	r2, [pc, #64]	; (80062c4 <prvCheckForValidListAndQueue+0x64>)
 8006282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006284:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <prvCheckForValidListAndQueue+0x70>)
 8006286:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <prvCheckForValidListAndQueue+0x68>)
 8006288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800628a:	2300      	movs	r3, #0
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <prvCheckForValidListAndQueue+0x74>)
 8006290:	4a11      	ldr	r2, [pc, #68]	; (80062d8 <prvCheckForValidListAndQueue+0x78>)
 8006292:	2110      	movs	r1, #16
 8006294:	200a      	movs	r0, #10
 8006296:	f7fd ff97 	bl	80041c8 <xQueueGenericCreateStatic>
 800629a:	4603      	mov	r3, r0
 800629c:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <prvCheckForValidListAndQueue+0x60>)
 800629e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <prvCheckForValidListAndQueue+0x60>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <prvCheckForValidListAndQueue+0x60>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	490b      	ldr	r1, [pc, #44]	; (80062dc <prvCheckForValidListAndQueue+0x7c>)
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fd42 	bl	8004d38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062b4:	f000 f96e 	bl	8006594 <vPortExitCritical>
}
 80062b8:	bf00      	nop
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20001348 	.word	0x20001348
 80062c4:	20001318 	.word	0x20001318
 80062c8:	2000132c 	.word	0x2000132c
 80062cc:	20001340 	.word	0x20001340
 80062d0:	20001344 	.word	0x20001344
 80062d4:	200013f4 	.word	0x200013f4
 80062d8:	20001354 	.word	0x20001354
 80062dc:	0800bb3c 	.word	0x0800bb3c

080062e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3b04      	subs	r3, #4
 80062f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3b04      	subs	r3, #4
 80062fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f023 0201 	bic.w	r2, r3, #1
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3b04      	subs	r3, #4
 800630e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006310:	4a0c      	ldr	r2, [pc, #48]	; (8006344 <pxPortInitialiseStack+0x64>)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3b14      	subs	r3, #20
 800631a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3b04      	subs	r3, #4
 8006326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f06f 0202 	mvn.w	r2, #2
 800632e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3b20      	subs	r3, #32
 8006334:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006336:	68fb      	ldr	r3, [r7, #12]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	08006349 	.word	0x08006349

08006348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <prvTaskExitError+0x54>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635a:	d00a      	beq.n	8006372 <prvTaskExitError+0x2a>
	__asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	60fb      	str	r3, [r7, #12]
}
 800636e:	bf00      	nop
 8006370:	e7fe      	b.n	8006370 <prvTaskExitError+0x28>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60bb      	str	r3, [r7, #8]
}
 8006384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006386:	bf00      	nop
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0fc      	beq.n	8006388 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	2000000c 	.word	0x2000000c

080063a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063a0:	4b07      	ldr	r3, [pc, #28]	; (80063c0 <pxCurrentTCBConst2>)
 80063a2:	6819      	ldr	r1, [r3, #0]
 80063a4:	6808      	ldr	r0, [r1, #0]
 80063a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	f380 8809 	msr	PSP, r0
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f04f 0000 	mov.w	r0, #0
 80063b6:	f380 8811 	msr	BASEPRI, r0
 80063ba:	4770      	bx	lr
 80063bc:	f3af 8000 	nop.w

080063c0 <pxCurrentTCBConst2>:
 80063c0:	20000e18 	.word	0x20000e18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop

080063c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063c8:	4808      	ldr	r0, [pc, #32]	; (80063ec <prvPortStartFirstTask+0x24>)
 80063ca:	6800      	ldr	r0, [r0, #0]
 80063cc:	6800      	ldr	r0, [r0, #0]
 80063ce:	f380 8808 	msr	MSP, r0
 80063d2:	f04f 0000 	mov.w	r0, #0
 80063d6:	f380 8814 	msr	CONTROL, r0
 80063da:	b662      	cpsie	i
 80063dc:	b661      	cpsie	f
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	df00      	svc	0
 80063e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063ea:	bf00      	nop
 80063ec:	e000ed08 	.word	0xe000ed08

080063f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063f6:	4b46      	ldr	r3, [pc, #280]	; (8006510 <xPortStartScheduler+0x120>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a46      	ldr	r2, [pc, #280]	; (8006514 <xPortStartScheduler+0x124>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d10a      	bne.n	8006416 <xPortStartScheduler+0x26>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	613b      	str	r3, [r7, #16]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006416:	4b3e      	ldr	r3, [pc, #248]	; (8006510 <xPortStartScheduler+0x120>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a3f      	ldr	r2, [pc, #252]	; (8006518 <xPortStartScheduler+0x128>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d10a      	bne.n	8006436 <xPortStartScheduler+0x46>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	60fb      	str	r3, [r7, #12]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006436:	4b39      	ldr	r3, [pc, #228]	; (800651c <xPortStartScheduler+0x12c>)
 8006438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	22ff      	movs	r2, #255	; 0xff
 8006446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006458:	b2da      	uxtb	r2, r3
 800645a:	4b31      	ldr	r3, [pc, #196]	; (8006520 <xPortStartScheduler+0x130>)
 800645c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800645e:	4b31      	ldr	r3, [pc, #196]	; (8006524 <xPortStartScheduler+0x134>)
 8006460:	2207      	movs	r2, #7
 8006462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006464:	e009      	b.n	800647a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006466:	4b2f      	ldr	r3, [pc, #188]	; (8006524 <xPortStartScheduler+0x134>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3b01      	subs	r3, #1
 800646c:	4a2d      	ldr	r2, [pc, #180]	; (8006524 <xPortStartScheduler+0x134>)
 800646e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	b2db      	uxtb	r3, r3
 8006478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006482:	2b80      	cmp	r3, #128	; 0x80
 8006484:	d0ef      	beq.n	8006466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006486:	4b27      	ldr	r3, [pc, #156]	; (8006524 <xPortStartScheduler+0x134>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f1c3 0307 	rsb	r3, r3, #7
 800648e:	2b04      	cmp	r3, #4
 8006490:	d00a      	beq.n	80064a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	60bb      	str	r3, [r7, #8]
}
 80064a4:	bf00      	nop
 80064a6:	e7fe      	b.n	80064a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064a8:	4b1e      	ldr	r3, [pc, #120]	; (8006524 <xPortStartScheduler+0x134>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	4a1d      	ldr	r2, [pc, #116]	; (8006524 <xPortStartScheduler+0x134>)
 80064b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064b2:	4b1c      	ldr	r3, [pc, #112]	; (8006524 <xPortStartScheduler+0x134>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064ba:	4a1a      	ldr	r2, [pc, #104]	; (8006524 <xPortStartScheduler+0x134>)
 80064bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064c6:	4b18      	ldr	r3, [pc, #96]	; (8006528 <xPortStartScheduler+0x138>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a17      	ldr	r2, [pc, #92]	; (8006528 <xPortStartScheduler+0x138>)
 80064cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064d2:	4b15      	ldr	r3, [pc, #84]	; (8006528 <xPortStartScheduler+0x138>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a14      	ldr	r2, [pc, #80]	; (8006528 <xPortStartScheduler+0x138>)
 80064d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064de:	f000 f8dd 	bl	800669c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <xPortStartScheduler+0x13c>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064e8:	f000 f8fc 	bl	80066e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064ec:	4b10      	ldr	r3, [pc, #64]	; (8006530 <xPortStartScheduler+0x140>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a0f      	ldr	r2, [pc, #60]	; (8006530 <xPortStartScheduler+0x140>)
 80064f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064f8:	f7ff ff66 	bl	80063c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064fc:	f7ff f84c 	bl	8005598 <vTaskSwitchContext>
	prvTaskExitError();
 8006500:	f7ff ff22 	bl	8006348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	e000ed00 	.word	0xe000ed00
 8006514:	410fc271 	.word	0x410fc271
 8006518:	410fc270 	.word	0x410fc270
 800651c:	e000e400 	.word	0xe000e400
 8006520:	20001444 	.word	0x20001444
 8006524:	20001448 	.word	0x20001448
 8006528:	e000ed20 	.word	0xe000ed20
 800652c:	2000000c 	.word	0x2000000c
 8006530:	e000ef34 	.word	0xe000ef34

08006534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	607b      	str	r3, [r7, #4]
}
 800654c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800654e:	4b0f      	ldr	r3, [pc, #60]	; (800658c <vPortEnterCritical+0x58>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3301      	adds	r3, #1
 8006554:	4a0d      	ldr	r2, [pc, #52]	; (800658c <vPortEnterCritical+0x58>)
 8006556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006558:	4b0c      	ldr	r3, [pc, #48]	; (800658c <vPortEnterCritical+0x58>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d10f      	bne.n	8006580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006560:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <vPortEnterCritical+0x5c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <vPortEnterCritical+0x4c>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	603b      	str	r3, [r7, #0]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <vPortEnterCritical+0x4a>
	}
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	2000000c 	.word	0x2000000c
 8006590:	e000ed04 	.word	0xe000ed04

08006594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800659a:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <vPortExitCritical+0x50>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d10a      	bne.n	80065b8 <vPortExitCritical+0x24>
	__asm volatile
 80065a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a6:	f383 8811 	msr	BASEPRI, r3
 80065aa:	f3bf 8f6f 	isb	sy
 80065ae:	f3bf 8f4f 	dsb	sy
 80065b2:	607b      	str	r3, [r7, #4]
}
 80065b4:	bf00      	nop
 80065b6:	e7fe      	b.n	80065b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065b8:	4b0a      	ldr	r3, [pc, #40]	; (80065e4 <vPortExitCritical+0x50>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3b01      	subs	r3, #1
 80065be:	4a09      	ldr	r2, [pc, #36]	; (80065e4 <vPortExitCritical+0x50>)
 80065c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065c2:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <vPortExitCritical+0x50>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d105      	bne.n	80065d6 <vPortExitCritical+0x42>
 80065ca:	2300      	movs	r3, #0
 80065cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	f383 8811 	msr	BASEPRI, r3
}
 80065d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	2000000c 	.word	0x2000000c
	...

080065f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065f0:	f3ef 8009 	mrs	r0, PSP
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	4b15      	ldr	r3, [pc, #84]	; (8006650 <pxCurrentTCBConst>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	f01e 0f10 	tst.w	lr, #16
 8006600:	bf08      	it	eq
 8006602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660a:	6010      	str	r0, [r2, #0]
 800660c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006614:	f380 8811 	msr	BASEPRI, r0
 8006618:	f3bf 8f4f 	dsb	sy
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f7fe ffba 	bl	8005598 <vTaskSwitchContext>
 8006624:	f04f 0000 	mov.w	r0, #0
 8006628:	f380 8811 	msr	BASEPRI, r0
 800662c:	bc09      	pop	{r0, r3}
 800662e:	6819      	ldr	r1, [r3, #0]
 8006630:	6808      	ldr	r0, [r1, #0]
 8006632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006636:	f01e 0f10 	tst.w	lr, #16
 800663a:	bf08      	it	eq
 800663c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006640:	f380 8809 	msr	PSP, r0
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	f3af 8000 	nop.w

08006650 <pxCurrentTCBConst>:
 8006650:	20000e18 	.word	0x20000e18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop

08006658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	607b      	str	r3, [r7, #4]
}
 8006670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006672:	f7fe fed7 	bl	8005424 <xTaskIncrementTick>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <xPortSysTickHandler+0x40>)
 800667e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	2300      	movs	r3, #0
 8006686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f383 8811 	msr	BASEPRI, r3
}
 800668e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80066a0:	4b0b      	ldr	r3, [pc, #44]	; (80066d0 <vPortSetupTimerInterrupt+0x34>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80066a6:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <vPortSetupTimerInterrupt+0x38>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <vPortSetupTimerInterrupt+0x3c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <vPortSetupTimerInterrupt+0x40>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	099b      	lsrs	r3, r3, #6
 80066b8:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <vPortSetupTimerInterrupt+0x44>)
 80066ba:	3b01      	subs	r3, #1
 80066bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80066be:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <vPortSetupTimerInterrupt+0x34>)
 80066c0:	2207      	movs	r2, #7
 80066c2:	601a      	str	r2, [r3, #0]
}
 80066c4:	bf00      	nop
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000e010 	.word	0xe000e010
 80066d4:	e000e018 	.word	0xe000e018
 80066d8:	20000000 	.word	0x20000000
 80066dc:	10624dd3 	.word	0x10624dd3
 80066e0:	e000e014 	.word	0xe000e014

080066e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066f4 <vPortEnableVFP+0x10>
 80066e8:	6801      	ldr	r1, [r0, #0]
 80066ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066ee:	6001      	str	r1, [r0, #0]
 80066f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066f2:	bf00      	nop
 80066f4:	e000ed88 	.word	0xe000ed88

080066f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066fe:	f3ef 8305 	mrs	r3, IPSR
 8006702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b0f      	cmp	r3, #15
 8006708:	d914      	bls.n	8006734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800670a:	4a17      	ldr	r2, [pc, #92]	; (8006768 <vPortValidateInterruptPriority+0x70>)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006714:	4b15      	ldr	r3, [pc, #84]	; (800676c <vPortValidateInterruptPriority+0x74>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	7afa      	ldrb	r2, [r7, #11]
 800671a:	429a      	cmp	r2, r3
 800671c:	d20a      	bcs.n	8006734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006734:	4b0e      	ldr	r3, [pc, #56]	; (8006770 <vPortValidateInterruptPriority+0x78>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800673c:	4b0d      	ldr	r3, [pc, #52]	; (8006774 <vPortValidateInterruptPriority+0x7c>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	429a      	cmp	r2, r3
 8006742:	d90a      	bls.n	800675a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006748:	f383 8811 	msr	BASEPRI, r3
 800674c:	f3bf 8f6f 	isb	sy
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	603b      	str	r3, [r7, #0]
}
 8006756:	bf00      	nop
 8006758:	e7fe      	b.n	8006758 <vPortValidateInterruptPriority+0x60>
	}
 800675a:	bf00      	nop
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	e000e3f0 	.word	0xe000e3f0
 800676c:	20001444 	.word	0x20001444
 8006770:	e000ed0c 	.word	0xe000ed0c
 8006774:	20001448 	.word	0x20001448

08006778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b08a      	sub	sp, #40	; 0x28
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006784:	f7fe fd92 	bl	80052ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006788:	4b5b      	ldr	r3, [pc, #364]	; (80068f8 <pvPortMalloc+0x180>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006790:	f000 f920 	bl	80069d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006794:	4b59      	ldr	r3, [pc, #356]	; (80068fc <pvPortMalloc+0x184>)
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4013      	ands	r3, r2
 800679c:	2b00      	cmp	r3, #0
 800679e:	f040 8093 	bne.w	80068c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01d      	beq.n	80067e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80067a8:	2208      	movs	r2, #8
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d014      	beq.n	80067e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f023 0307 	bic.w	r3, r3, #7
 80067c0:	3308      	adds	r3, #8
 80067c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <pvPortMalloc+0x6c>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	617b      	str	r3, [r7, #20]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d06e      	beq.n	80068c8 <pvPortMalloc+0x150>
 80067ea:	4b45      	ldr	r3, [pc, #276]	; (8006900 <pvPortMalloc+0x188>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d869      	bhi.n	80068c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067f4:	4b43      	ldr	r3, [pc, #268]	; (8006904 <pvPortMalloc+0x18c>)
 80067f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067f8:	4b42      	ldr	r3, [pc, #264]	; (8006904 <pvPortMalloc+0x18c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067fe:	e004      	b.n	800680a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d903      	bls.n	800681c <pvPortMalloc+0xa4>
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f1      	bne.n	8006800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800681c:	4b36      	ldr	r3, [pc, #216]	; (80068f8 <pvPortMalloc+0x180>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006822:	429a      	cmp	r2, r3
 8006824:	d050      	beq.n	80068c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2208      	movs	r2, #8
 800682c:	4413      	add	r3, r2
 800682e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	1ad2      	subs	r2, r2, r3
 8006840:	2308      	movs	r3, #8
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	429a      	cmp	r2, r3
 8006846:	d91f      	bls.n	8006888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <pvPortMalloc+0xf8>
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	613b      	str	r3, [r7, #16]
}
 800686c:	bf00      	nop
 800686e:	e7fe      	b.n	800686e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	1ad2      	subs	r2, r2, r3
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006882:	69b8      	ldr	r0, [r7, #24]
 8006884:	f000 f908 	bl	8006a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006888:	4b1d      	ldr	r3, [pc, #116]	; (8006900 <pvPortMalloc+0x188>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	4a1b      	ldr	r2, [pc, #108]	; (8006900 <pvPortMalloc+0x188>)
 8006894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006896:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <pvPortMalloc+0x188>)
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b1b      	ldr	r3, [pc, #108]	; (8006908 <pvPortMalloc+0x190>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d203      	bcs.n	80068aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80068a2:	4b17      	ldr	r3, [pc, #92]	; (8006900 <pvPortMalloc+0x188>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a18      	ldr	r2, [pc, #96]	; (8006908 <pvPortMalloc+0x190>)
 80068a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	4b13      	ldr	r3, [pc, #76]	; (80068fc <pvPortMalloc+0x184>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <pvPortMalloc+0x194>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3301      	adds	r3, #1
 80068c4:	4a11      	ldr	r2, [pc, #68]	; (800690c <pvPortMalloc+0x194>)
 80068c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068c8:	f7fe fcfe 	bl	80052c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <pvPortMalloc+0x174>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60fb      	str	r3, [r7, #12]
}
 80068e8:	bf00      	nop
 80068ea:	e7fe      	b.n	80068ea <pvPortMalloc+0x172>
	return pvReturn;
 80068ec:	69fb      	ldr	r3, [r7, #28]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3728      	adds	r7, #40	; 0x28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20005054 	.word	0x20005054
 80068fc:	20005068 	.word	0x20005068
 8006900:	20005058 	.word	0x20005058
 8006904:	2000504c 	.word	0x2000504c
 8006908:	2000505c 	.word	0x2000505c
 800690c:	20005060 	.word	0x20005060

08006910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d04d      	beq.n	80069be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006922:	2308      	movs	r3, #8
 8006924:	425b      	negs	r3, r3
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	4413      	add	r3, r2
 800692a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <vPortFree+0xb8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4013      	ands	r3, r2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <vPortFree+0x44>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60fb      	str	r3, [r7, #12]
}
 8006950:	bf00      	nop
 8006952:	e7fe      	b.n	8006952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <vPortFree+0x62>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	60bb      	str	r3, [r7, #8]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	4b14      	ldr	r3, [pc, #80]	; (80069c8 <vPortFree+0xb8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4013      	ands	r3, r2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01e      	beq.n	80069be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d11a      	bne.n	80069be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	685a      	ldr	r2, [r3, #4]
 800698c:	4b0e      	ldr	r3, [pc, #56]	; (80069c8 <vPortFree+0xb8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	43db      	mvns	r3, r3
 8006992:	401a      	ands	r2, r3
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006998:	f7fe fc88 	bl	80052ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	4b0a      	ldr	r3, [pc, #40]	; (80069cc <vPortFree+0xbc>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4413      	add	r3, r2
 80069a6:	4a09      	ldr	r2, [pc, #36]	; (80069cc <vPortFree+0xbc>)
 80069a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069aa:	6938      	ldr	r0, [r7, #16]
 80069ac:	f000 f874 	bl	8006a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <vPortFree+0xc0>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	4a06      	ldr	r2, [pc, #24]	; (80069d0 <vPortFree+0xc0>)
 80069b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80069ba:	f7fe fc85 	bl	80052c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20005068 	.word	0x20005068
 80069cc:	20005058 	.word	0x20005058
 80069d0:	20005064 	.word	0x20005064

080069d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069e0:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <prvHeapInit+0xac>)
 80069e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00c      	beq.n	8006a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	3307      	adds	r3, #7
 80069f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f023 0307 	bic.w	r3, r3, #7
 80069fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	4a1f      	ldr	r2, [pc, #124]	; (8006a80 <prvHeapInit+0xac>)
 8006a04:	4413      	add	r3, r2
 8006a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a0c:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <prvHeapInit+0xb0>)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a12:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <prvHeapInit+0xb0>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006a20:	2208      	movs	r2, #8
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f023 0307 	bic.w	r3, r3, #7
 8006a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4a15      	ldr	r2, [pc, #84]	; (8006a88 <prvHeapInit+0xb4>)
 8006a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <prvHeapInit+0xb4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a3e:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <prvHeapInit+0xb4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <prvHeapInit+0xb4>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	4a0a      	ldr	r2, [pc, #40]	; (8006a8c <prvHeapInit+0xb8>)
 8006a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <prvHeapInit+0xbc>)
 8006a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a6c:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <prvHeapInit+0xc0>)
 8006a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a72:	601a      	str	r2, [r3, #0]
}
 8006a74:	bf00      	nop
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	2000144c 	.word	0x2000144c
 8006a84:	2000504c 	.word	0x2000504c
 8006a88:	20005054 	.word	0x20005054
 8006a8c:	2000505c 	.word	0x2000505c
 8006a90:	20005058 	.word	0x20005058
 8006a94:	20005068 	.word	0x20005068

08006a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006aa0:	4b28      	ldr	r3, [pc, #160]	; (8006b44 <prvInsertBlockIntoFreeList+0xac>)
 8006aa2:	60fb      	str	r3, [r7, #12]
 8006aa4:	e002      	b.n	8006aac <prvInsertBlockIntoFreeList+0x14>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d8f7      	bhi.n	8006aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d108      	bne.n	8006ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	441a      	add	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	441a      	add	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d118      	bne.n	8006b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4b15      	ldr	r3, [pc, #84]	; (8006b48 <prvInsertBlockIntoFreeList+0xb0>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d00d      	beq.n	8006b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	441a      	add	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	e008      	b.n	8006b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b16:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvInsertBlockIntoFreeList+0xb0>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	e003      	b.n	8006b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d002      	beq.n	8006b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b36:	bf00      	nop
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	2000504c 	.word	0x2000504c
 8006b48:	20005054 	.word	0x20005054

08006b4c <GNSS_PARSER_Init>:
#endif /* USE_FREE_RTOS */

/* Exported functions --------------------------------------------------------*/

GNSSParser_Status_t GNSS_PARSER_Init(GNSSParser_Data_t *pGNSSParser_Data)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  if (pGNSSParser_Data == NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d101      	bne.n	8006b5e <GNSS_PARSER_Init+0x12>
  {
    return GNSS_PARSER_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e083      	b.n	8006c66 <GNSS_PARSER_Init+0x11a>
  }

  pGNSSParser_Data->debug = DEBUG_ON;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	701a      	strb	r2, [r3, #0]
  (void)memset((void *)(&pGNSSParser_Data->gpgga_data), 0, sizeof(GPGGA_Info_t));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3308      	adds	r3, #8
 8006b68:	2250      	movs	r2, #80	; 0x50
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fb3a 	bl	80071e6 <memset>
  pGNSSParser_Data->gpgga_data.xyz.ew = (uint8_t)' ';
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  pGNSSParser_Data->gpgga_data.xyz.ns = (uint8_t)' ';
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  pGNSSParser_Data->gpgga_data.xyz.mis = (uint8_t)' ';
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  (void)memset((void *)(&pGNSSParser_Data->gns_data), 0, sizeof(GNS_Info_t));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3358      	adds	r3, #88	; 0x58
 8006b8e:	2268      	movs	r2, #104	; 0x68
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 fb27 	bl	80071e6 <memset>
  pGNSSParser_Data->gns_data.xyz.ew = (uint8_t)' ';
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  pGNSSParser_Data->gns_data.xyz.ns = (uint8_t)' ';
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  (void)memset((void *)(&pGNSSParser_Data->gpgst_data), 0, sizeof(GPGST_Info_t));
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	33c0      	adds	r3, #192	; 0xc0
 8006bac:	2230      	movs	r2, #48	; 0x30
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fb18 	bl	80071e6 <memset>

  (void)memset((void *)(&pGNSSParser_Data->gprmc_data), 0, sizeof(GPRMC_Info_t));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	33f0      	adds	r3, #240	; 0xf0
 8006bba:	2250      	movs	r2, #80	; 0x50
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fb11 	bl	80071e6 <memset>
  pGNSSParser_Data->gprmc_data.xyz.ew = (uint8_t)' ';
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  pGNSSParser_Data->gprmc_data.xyz.ns = (uint8_t)' ';
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120

  (void)memset((void *)(&pGNSSParser_Data->gsa_data), 0, sizeof(GSA_Info_t));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006bda:	2268      	movs	r2, #104	; 0x68
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fb01 	bl	80071e6 <memset>
  (void)memset((void *)(&pGNSSParser_Data->gsv_data), 0, sizeof(GSV_Info_t));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8006bea:	22f4      	movs	r2, #244	; 0xf4
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 faf9 	bl	80071e6 <memset>
  (void)memset((void *)(&pGNSSParser_Data->pstmver_data), 0, sizeof(PSTMVER_Info_t));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 faf1 	bl	80071e6 <memset>
  (void)memset((void *)(&pGNSSParser_Data->pstmpass_data), 0, sizeof(PSTMPASSRTN_Info_t));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8006c0a:	2261      	movs	r2, #97	; 0x61
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fae9 	bl	80071e6 <memset>
  (void)memset((void *)(&pGNSSParser_Data->pstmagps_data), 0, sizeof(PSTMAGPS_Info_t));
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f503 7348 	add.w	r3, r3, #800	; 0x320
 8006c1a:	220c      	movs	r2, #12
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fae1 	bl	80071e6 <memset>
  (void)memset((void *)(&pGNSSParser_Data->geofence_data), 0, sizeof(Geofence_Info_t));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8006c2a:	2270      	movs	r2, #112	; 0x70
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fad9 	bl	80071e6 <memset>
  (void)memset((void *)(&pGNSSParser_Data->odo_data), 0, sizeof(Odometer_Info_t));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fad1 	bl	80071e6 <memset>
  (void)memset((void *)(&pGNSSParser_Data->datalog_data), 0, sizeof(Datalog_Info_t));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 fac9 	bl	80071e6 <memset>
  (void)memset((void *)(&pGNSSParser_Data->result), 0, sizeof(OpResult_t));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fac1 	bl	80071e6 <memset>

  return GNSS_PARSER_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <semaphore_lock_irq>:

/*
 * Wrapper for Semaphore lock from interrupt context.
 */
static inline BaseType_t semaphore_lock_irq(SemaphoreHandle_t sem)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  return xSemaphoreTakeFromISR(sem,  &b);
 8006c78:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <semaphore_lock_irq+0x1c>)
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7fd fecb 	bl	8004a18 <xQueueReceiveFromISR>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20000010 	.word	0x20000010

08006c90 <semaphore_free_irq>:

/*
 * Wrapper for Semaphore release from interrupt context.
 */
static inline void semaphore_free_irq(SemaphoreHandle_t sem)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  (void)xSemaphoreGiveFromISR(sem, &b);
 8006c98:	4903      	ldr	r1, [pc, #12]	; (8006ca8 <semaphore_free_irq+0x18>)
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fd fd4f 	bl	800473e <xQueueGiveFromISR>
}
 8006ca0:	bf00      	nop
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20000010 	.word	0x20000010

08006cac <Teseo_Queue_static_alloc>:

/*
 * Returns the static instance of a Queue object.
 */
static Teseo_QueueTypeDef *Teseo_Queue_static_alloc(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0
  static Teseo_QueueTypeDef Teseo_Queue_Instance;
  return &Teseo_Queue_Instance;
 8006cb0:	4b02      	ldr	r3, [pc, #8]	; (8006cbc <Teseo_Queue_static_alloc+0x10>)
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	2000506c 	.word	0x2000506c

08006cc0 <__find_msg_idx>:

/*
 * Returns the index of a message in the queue.
 */
static int32_t __find_msg_idx(const Teseo_QueueTypeDef *pTeseoQueue, const GNSS_MsgTypeDef *pMsg)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  int32_t i;
  
  for (i = 0; i < MAX_MSG_QUEUE; ++i)
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e00c      	b.n	8006cea <__find_msg_idx+0x2a>
  {
    if (&pTeseoQueue->nmea_queue[i] == pMsg)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4413      	add	r3, r2
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d101      	bne.n	8006ce4 <__find_msg_idx+0x24>
    {
      return i;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	e007      	b.n	8006cf4 <__find_msg_idx+0x34>
  for (i = 0; i < MAX_MSG_QUEUE; ++i)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b07      	cmp	r3, #7
 8006cee:	ddef      	ble.n	8006cd0 <__find_msg_idx+0x10>
    }
  }
  
  return -1;
 8006cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <__check_unreleased_buffer>:

/*
 * Checks for buffers not yet released.
 */
static void __check_unreleased_buffer(Teseo_QueueTypeDef *pTeseoQueue)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
#ifdef USE_FREE_RTOS
  if (pTeseoQueue->bitmap_unreleased_buffer_irq == 0UL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00a      	beq.n	8006d26 <__check_unreleased_buffer+0x26>
  {
    return;
  }
  
  Console_Debug("R\n\r");
  pTeseoQueue->bitmap_buffer_readable |= pTeseoQueue->bitmap_unreleased_buffer_irq;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	60da      	str	r2, [r3, #12]
  pTeseoQueue->bitmap_unreleased_buffer_irq = 0;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	605a      	str	r2, [r3, #4]
 8006d24:	e000      	b.n	8006d28 <__check_unreleased_buffer+0x28>
    return;
 8006d26:	bf00      	nop
#endif /* USE_FREE_RTOS */
}
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
	...

08006d34 <check_longer_msg>:

/*
 * Checks for messages longer than MAX_MSG_BUF.
 */
static void check_longer_msg(Teseo_QueueTypeDef *pTeseoQueue, const GNSS_MsgTypeDef *pMsg, uint32_t idx, int8_t wr_or_rd)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b089      	sub	sp, #36	; 0x24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	70fb      	strb	r3, [r7, #3]
  if (pMsg->len <= (uint32_t)MAX_MSG_BUF)
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	2b50      	cmp	r3, #80	; 0x50
 8006d48:	d944      	bls.n	8006dd4 <check_longer_msg+0xa0>
  {
    return;
  }
  
  uint32_t j;
  uint32_t extra_bufs = (pMsg->len / (uint32_t)MAX_MSG_BUF) + (((pMsg->len % (uint32_t)MAX_MSG_BUF) != 0U) ? 1U : 0U);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	4a24      	ldr	r2, [pc, #144]	; (8006de0 <check_longer_msg+0xac>)
 8006d50:	fba2 2303 	umull	r2, r3, r2, r3
 8006d54:	0998      	lsrs	r0, r3, #6
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6859      	ldr	r1, [r3, #4]
 8006d5a:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <check_longer_msg+0xac>)
 8006d5c:	fba3 2301 	umull	r2, r3, r3, r1
 8006d60:	099a      	lsrs	r2, r3, #6
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	011b      	lsls	r3, r3, #4
 8006d6a:	1aca      	subs	r2, r1, r3
 8006d6c:	2a00      	cmp	r2, #0
 8006d6e:	d001      	beq.n	8006d74 <check_longer_msg+0x40>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <check_longer_msg+0x42>
 8006d74:	2300      	movs	r3, #0
 8006d76:	4403      	add	r3, r0
 8006d78:	61bb      	str	r3, [r7, #24]
  
  for (j = 0; j < extra_bufs; j++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61fb      	str	r3, [r7, #28]
 8006d7e:	e024      	b.n	8006dca <check_longer_msg+0x96>
  {
    uint32_t rhs = (idx + j);
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	617b      	str	r3, [r7, #20]

    if (wr_or_rd == 1)
 8006d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10d      	bne.n	8006dac <check_longer_msg+0x78>
    {
      if(rhs < 32U)
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2b1f      	cmp	r3, #31
 8006d94:	d816      	bhi.n	8006dc4 <check_longer_msg+0x90>
      {
        pTeseoQueue->bitmap_buffer_writable &= ~(1UL << rhs);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006da2:	43db      	mvns	r3, r3
 8006da4:	401a      	ands	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	609a      	str	r2, [r3, #8]
 8006daa:	e00b      	b.n	8006dc4 <check_longer_msg+0x90>
      }
    }
    else
    {
      if(rhs < 32U)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b1f      	cmp	r3, #31
 8006db0:	d808      	bhi.n	8006dc4 <check_longer_msg+0x90>
      {
        pTeseoQueue->bitmap_buffer_writable |= (1UL << rhs);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689a      	ldr	r2, [r3, #8]
 8006db6:	2101      	movs	r1, #1
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	609a      	str	r2, [r3, #8]
  for (j = 0; j < extra_bufs; j++)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d3d6      	bcc.n	8006d80 <check_longer_msg+0x4c>
 8006dd2:	e000      	b.n	8006dd6 <check_longer_msg+0xa2>
    return;
 8006dd4:	bf00      	nop
      }
    }
  }
}
 8006dd6:	3724      	adds	r7, #36	; 0x24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	cccccccd 	.word	0xcccccccd

08006de4 <teseo_queue_init>:

/* Exported functions --------------------------------------------------------*/
Teseo_QueueTypeDef *teseo_queue_init(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
  Teseo_QueueTypeDef *pTeseoQueue = Teseo_Queue_static_alloc();
 8006dea:	f7ff ff5f 	bl	8006cac <Teseo_Queue_static_alloc>
 8006dee:	60b8      	str	r0, [r7, #8]
  int8_t i;
  GNSS_MsgTypeDef *GNSS_Msg_p;
  
  Console_Debug("teseo_queue_init...\n\r" );
  pTeseoQueue->bitmap_buffer_writable = 0;
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	609a      	str	r2, [r3, #8]
  for (i = 0;  i < MAX_MSG_QUEUE; ++i)
 8006df6:	2300      	movs	r3, #0
 8006df8:	73fb      	strb	r3, [r7, #15]
 8006dfa:	e021      	b.n	8006e40 <teseo_queue_init+0x5c>
  {
    GNSS_Msg_p = &pTeseoQueue->nmea_queue[i];
 8006dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e00:	3302      	adds	r3, #2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	4413      	add	r3, r2
 8006e08:	607b      	str	r3, [r7, #4]

    GNSS_Msg_p->buf = &pTeseoQueue->single_message_buffer[i * MAX_MSG_BUF];
 8006e0a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	3350      	adds	r3, #80	; 0x50
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	441a      	add	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	601a      	str	r2, [r3, #0]
    GNSS_Msg_p->len = 0;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	605a      	str	r2, [r3, #4]
    pTeseoQueue->bitmap_buffer_writable |=  (1UL << (uint8_t)i);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	2301      	movs	r3, #1
 8006e30:	408b      	lsls	r3, r1
 8006e32:	431a      	orrs	r2, r3
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	609a      	str	r2, [r3, #8]
  for (i = 0;  i < MAX_MSG_QUEUE; ++i)
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	73fb      	strb	r3, [r7, #15]
 8006e40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e44:	2b07      	cmp	r3, #7
 8006e46:	ddd9      	ble.n	8006dfc <teseo_queue_init+0x18>
  }
  pTeseoQueue->bitmap_buffer_readable = 0;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	60da      	str	r2, [r3, #12]

#ifdef USE_FREE_RTOS
  pTeseoQueue->bitmap_unreleased_buffer_irq = 0;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2200      	movs	r2, #0
 8006e52:	605a      	str	r2, [r3, #4]
  pTeseoQueue->semaphore = xSemaphoreCreateMutex();
 8006e54:	2001      	movs	r0, #1
 8006e56:	f7fd faa6 	bl	80043a6 <xQueueCreateMutex>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	601a      	str	r2, [r3, #0]
#endif /* USE_FREE_RTOS */

  Console_Debug("teseo_queue_init: Done\n\r");
  
  return pTeseoQueue;
 8006e60:	68bb      	ldr	r3, [r7, #8]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <teseo_queue_claim_wr_buffer>:

GNSS_MsgTypeDef *teseo_queue_claim_wr_buffer(Teseo_QueueTypeDef *pTeseoQueue)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  GNSS_MsgTypeDef *pMsg;

#ifdef USE_FREE_RTOS
  BaseType_t ret;
  
  ret = semaphore_lock_irq(pTeseoQueue->semaphore);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff fefa 	bl	8006c70 <semaphore_lock_irq>
 8006e7c:	6178      	str	r0, [r7, #20]
  
  /* semaphore already taken.... */
  if (ret == pdFAIL) {
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <teseo_queue_claim_wr_buffer+0x1e>
    return NULL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	e02e      	b.n	8006ee6 <teseo_queue_claim_wr_buffer+0x7c>
  }
#endif /* USE_FREE_RTOS */

  /* first available buffer writable */
  i = ffs(pTeseoQueue->bitmap_buffer_writable);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 f875 	bl	8006f7c <ffs>
 8006e92:	6138      	str	r0, [r7, #16]
  
  if (i == 0) {
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d106      	bne.n	8006ea8 <teseo_queue_claim_wr_buffer+0x3e>
#ifdef USE_FREE_RTOS
    /* release the semaphore */
    semaphore_free_irq(pTeseoQueue->semaphore);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff fef6 	bl	8006c90 <semaphore_free_irq>
#endif /* USE_FREE_RTOS */

    Console_Debug("-\n\r");
    return NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	e01e      	b.n	8006ee6 <teseo_queue_claim_wr_buffer+0x7c>
  }
  
  i--; /* first available buffer writable */
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	613b      	str	r3, [r7, #16]
  
  /* buffer no more writable */
  pTeseoQueue->bitmap_buffer_writable &= ~(1U << (uint32_t)i);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	401a      	ands	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	609a      	str	r2, [r3, #8]
  
  __check_unreleased_buffer(pTeseoQueue);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff ff1c 	bl	8006d00 <__check_unreleased_buffer>

#ifdef USE_FREE_RTOS
  semaphore_free_irq(pTeseoQueue->semaphore);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fedf 	bl	8006c90 <semaphore_free_irq>
#endif /* USE_FREE_RTOS */

  pMsg = &pTeseoQueue->nmea_queue[i];
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	3302      	adds	r3, #2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]
  pMsg->len = 0;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	605a      	str	r2, [r3, #4]
  
  return pMsg;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3718      	adds	r7, #24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <teseo_queue_release_wr_buffer>:

void teseo_queue_release_wr_buffer(Teseo_QueueTypeDef *pTeseoQueue, GNSS_MsgTypeDef *pMsg)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  int32_t i;
#ifdef USE_FREE_RTOS
  BaseType_t ret;
#endif /* USE_FREE_RTOS */
  
  if (pMsg == NULL) {
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d032      	beq.n	8006f64 <teseo_queue_release_wr_buffer+0x76>
    return;
  }
  
  i = __find_msg_idx(pTeseoQueue, pMsg);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff fedd 	bl	8006cc0 <__find_msg_idx>
 8006f06:	60f8      	str	r0, [r7, #12]
  if (i < 0) {
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	db2c      	blt.n	8006f68 <teseo_queue_release_wr_buffer+0x7a>
    /* this should NEVER happen... this means an external buffer was provided */
    return;
  }
  
#ifdef USE_FREE_RTOS 
  ret = semaphore_lock_irq(pTeseoQueue->semaphore);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff feac 	bl	8006c70 <semaphore_lock_irq>
 8006f18:	60b8      	str	r0, [r7, #8]
  
  /* semaphore already taken.... */
  if (ret == pdFAIL) {
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <teseo_queue_release_wr_buffer+0x46>
    Console_Debug("+\n\r" );
    /* mark the buffer as 'un-released'... and go-ahead... */
    pTeseoQueue->bitmap_unreleased_buffer_irq |= (1UL << (uint32_t)i);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2101      	movs	r1, #1
 8006f28:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	605a      	str	r2, [r3, #4]
    return;
 8006f32:	e01a      	b.n	8006f6a <teseo_queue_release_wr_buffer+0x7c>
  }
#endif /* USE_FREE_RTOS */
  
  /* mark the buffer as readable */
  pTeseoQueue->bitmap_buffer_readable |= (1UL << (uint32_t)i);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f40:	431a      	orrs	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60da      	str	r2, [r3, #12]

  /* check for longer message */
  check_longer_msg(pTeseoQueue, pMsg, (uint32_t)i, 1);
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	2301      	movs	r3, #1
 8006f4a:	6839      	ldr	r1, [r7, #0]
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7ff fef1 	bl	8006d34 <check_longer_msg>

#ifdef USE_FREE_RTOS
  __check_unreleased_buffer(pTeseoQueue);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fed4 	bl	8006d00 <__check_unreleased_buffer>
  semaphore_free_irq(pTeseoQueue->semaphore);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fe97 	bl	8006c90 <semaphore_free_irq>
 8006f62:	e002      	b.n	8006f6a <teseo_queue_release_wr_buffer+0x7c>
    return;
 8006f64:	bf00      	nop
 8006f66:	e000      	b.n	8006f6a <teseo_queue_release_wr_buffer+0x7c>
    return;
 8006f68:	bf00      	nop
#endif /* USE_FREE_RTOS */
}
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <__errno>:
 8006f70:	4b01      	ldr	r3, [pc, #4]	; (8006f78 <__errno+0x8>)
 8006f72:	6818      	ldr	r0, [r3, #0]
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	20000014 	.word	0x20000014

08006f7c <ffs>:
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	fa90 f3a0 	rbit	r3, r0
 8006f82:	fab3 f383 	clz	r3, r3
 8006f86:	bf08      	it	eq
 8006f88:	f04f 33ff 	moveq.w	r3, #4294967295
 8006f8c:	1c58      	adds	r0, r3, #1
 8006f8e:	4770      	bx	lr

08006f90 <std>:
 8006f90:	2300      	movs	r3, #0
 8006f92:	b510      	push	{r4, lr}
 8006f94:	4604      	mov	r4, r0
 8006f96:	e9c0 3300 	strd	r3, r3, [r0]
 8006f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f9e:	6083      	str	r3, [r0, #8]
 8006fa0:	8181      	strh	r1, [r0, #12]
 8006fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fa4:	81c2      	strh	r2, [r0, #14]
 8006fa6:	6183      	str	r3, [r0, #24]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	2208      	movs	r2, #8
 8006fac:	305c      	adds	r0, #92	; 0x5c
 8006fae:	f000 f91a 	bl	80071e6 <memset>
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <std+0x38>)
 8006fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <std+0x3c>)
 8006fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <std+0x40>)
 8006fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fbe:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <std+0x44>)
 8006fc0:	6224      	str	r4, [r4, #32]
 8006fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	bf00      	nop
 8006fc8:	08008271 	.word	0x08008271
 8006fcc:	08008293 	.word	0x08008293
 8006fd0:	080082cb 	.word	0x080082cb
 8006fd4:	080082ef 	.word	0x080082ef

08006fd8 <_cleanup_r>:
 8006fd8:	4901      	ldr	r1, [pc, #4]	; (8006fe0 <_cleanup_r+0x8>)
 8006fda:	f000 b8af 	b.w	800713c <_fwalk_reent>
 8006fde:	bf00      	nop
 8006fe0:	0800a019 	.word	0x0800a019

08006fe4 <__sfmoreglue>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	2268      	movs	r2, #104	; 0x68
 8006fe8:	1e4d      	subs	r5, r1, #1
 8006fea:	4355      	muls	r5, r2
 8006fec:	460e      	mov	r6, r1
 8006fee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ff2:	f000 f921 	bl	8007238 <_malloc_r>
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	b140      	cbz	r0, 800700c <__sfmoreglue+0x28>
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	e9c0 1600 	strd	r1, r6, [r0]
 8007000:	300c      	adds	r0, #12
 8007002:	60a0      	str	r0, [r4, #8]
 8007004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007008:	f000 f8ed 	bl	80071e6 <memset>
 800700c:	4620      	mov	r0, r4
 800700e:	bd70      	pop	{r4, r5, r6, pc}

08007010 <__sfp_lock_acquire>:
 8007010:	4801      	ldr	r0, [pc, #4]	; (8007018 <__sfp_lock_acquire+0x8>)
 8007012:	f000 b8d8 	b.w	80071c6 <__retarget_lock_acquire_recursive>
 8007016:	bf00      	nop
 8007018:	2000533d 	.word	0x2000533d

0800701c <__sfp_lock_release>:
 800701c:	4801      	ldr	r0, [pc, #4]	; (8007024 <__sfp_lock_release+0x8>)
 800701e:	f000 b8d3 	b.w	80071c8 <__retarget_lock_release_recursive>
 8007022:	bf00      	nop
 8007024:	2000533d 	.word	0x2000533d

08007028 <__sinit_lock_acquire>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__sinit_lock_acquire+0x8>)
 800702a:	f000 b8cc 	b.w	80071c6 <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	2000533e 	.word	0x2000533e

08007034 <__sinit_lock_release>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__sinit_lock_release+0x8>)
 8007036:	f000 b8c7 	b.w	80071c8 <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	2000533e 	.word	0x2000533e

08007040 <__sinit>:
 8007040:	b510      	push	{r4, lr}
 8007042:	4604      	mov	r4, r0
 8007044:	f7ff fff0 	bl	8007028 <__sinit_lock_acquire>
 8007048:	69a3      	ldr	r3, [r4, #24]
 800704a:	b11b      	cbz	r3, 8007054 <__sinit+0x14>
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f7ff bff0 	b.w	8007034 <__sinit_lock_release>
 8007054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007058:	6523      	str	r3, [r4, #80]	; 0x50
 800705a:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <__sinit+0x68>)
 800705c:	4a13      	ldr	r2, [pc, #76]	; (80070ac <__sinit+0x6c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	62a2      	str	r2, [r4, #40]	; 0x28
 8007062:	42a3      	cmp	r3, r4
 8007064:	bf04      	itt	eq
 8007066:	2301      	moveq	r3, #1
 8007068:	61a3      	streq	r3, [r4, #24]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f820 	bl	80070b0 <__sfp>
 8007070:	6060      	str	r0, [r4, #4]
 8007072:	4620      	mov	r0, r4
 8007074:	f000 f81c 	bl	80070b0 <__sfp>
 8007078:	60a0      	str	r0, [r4, #8]
 800707a:	4620      	mov	r0, r4
 800707c:	f000 f818 	bl	80070b0 <__sfp>
 8007080:	2200      	movs	r2, #0
 8007082:	60e0      	str	r0, [r4, #12]
 8007084:	2104      	movs	r1, #4
 8007086:	6860      	ldr	r0, [r4, #4]
 8007088:	f7ff ff82 	bl	8006f90 <std>
 800708c:	68a0      	ldr	r0, [r4, #8]
 800708e:	2201      	movs	r2, #1
 8007090:	2109      	movs	r1, #9
 8007092:	f7ff ff7d 	bl	8006f90 <std>
 8007096:	68e0      	ldr	r0, [r4, #12]
 8007098:	2202      	movs	r2, #2
 800709a:	2112      	movs	r1, #18
 800709c:	f7ff ff78 	bl	8006f90 <std>
 80070a0:	2301      	movs	r3, #1
 80070a2:	61a3      	str	r3, [r4, #24]
 80070a4:	e7d2      	b.n	800704c <__sinit+0xc>
 80070a6:	bf00      	nop
 80070a8:	0800bbf0 	.word	0x0800bbf0
 80070ac:	08006fd9 	.word	0x08006fd9

080070b0 <__sfp>:
 80070b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b2:	4607      	mov	r7, r0
 80070b4:	f7ff ffac 	bl	8007010 <__sfp_lock_acquire>
 80070b8:	4b1e      	ldr	r3, [pc, #120]	; (8007134 <__sfp+0x84>)
 80070ba:	681e      	ldr	r6, [r3, #0]
 80070bc:	69b3      	ldr	r3, [r6, #24]
 80070be:	b913      	cbnz	r3, 80070c6 <__sfp+0x16>
 80070c0:	4630      	mov	r0, r6
 80070c2:	f7ff ffbd 	bl	8007040 <__sinit>
 80070c6:	3648      	adds	r6, #72	; 0x48
 80070c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070cc:	3b01      	subs	r3, #1
 80070ce:	d503      	bpl.n	80070d8 <__sfp+0x28>
 80070d0:	6833      	ldr	r3, [r6, #0]
 80070d2:	b30b      	cbz	r3, 8007118 <__sfp+0x68>
 80070d4:	6836      	ldr	r6, [r6, #0]
 80070d6:	e7f7      	b.n	80070c8 <__sfp+0x18>
 80070d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070dc:	b9d5      	cbnz	r5, 8007114 <__sfp+0x64>
 80070de:	4b16      	ldr	r3, [pc, #88]	; (8007138 <__sfp+0x88>)
 80070e0:	60e3      	str	r3, [r4, #12]
 80070e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070e6:	6665      	str	r5, [r4, #100]	; 0x64
 80070e8:	f000 f86c 	bl	80071c4 <__retarget_lock_init_recursive>
 80070ec:	f7ff ff96 	bl	800701c <__sfp_lock_release>
 80070f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070f8:	6025      	str	r5, [r4, #0]
 80070fa:	61a5      	str	r5, [r4, #24]
 80070fc:	2208      	movs	r2, #8
 80070fe:	4629      	mov	r1, r5
 8007100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007104:	f000 f86f 	bl	80071e6 <memset>
 8007108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800710c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007110:	4620      	mov	r0, r4
 8007112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007114:	3468      	adds	r4, #104	; 0x68
 8007116:	e7d9      	b.n	80070cc <__sfp+0x1c>
 8007118:	2104      	movs	r1, #4
 800711a:	4638      	mov	r0, r7
 800711c:	f7ff ff62 	bl	8006fe4 <__sfmoreglue>
 8007120:	4604      	mov	r4, r0
 8007122:	6030      	str	r0, [r6, #0]
 8007124:	2800      	cmp	r0, #0
 8007126:	d1d5      	bne.n	80070d4 <__sfp+0x24>
 8007128:	f7ff ff78 	bl	800701c <__sfp_lock_release>
 800712c:	230c      	movs	r3, #12
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	e7ee      	b.n	8007110 <__sfp+0x60>
 8007132:	bf00      	nop
 8007134:	0800bbf0 	.word	0x0800bbf0
 8007138:	ffff0001 	.word	0xffff0001

0800713c <_fwalk_reent>:
 800713c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007140:	4606      	mov	r6, r0
 8007142:	4688      	mov	r8, r1
 8007144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007148:	2700      	movs	r7, #0
 800714a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800714e:	f1b9 0901 	subs.w	r9, r9, #1
 8007152:	d505      	bpl.n	8007160 <_fwalk_reent+0x24>
 8007154:	6824      	ldr	r4, [r4, #0]
 8007156:	2c00      	cmp	r4, #0
 8007158:	d1f7      	bne.n	800714a <_fwalk_reent+0xe>
 800715a:	4638      	mov	r0, r7
 800715c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007160:	89ab      	ldrh	r3, [r5, #12]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d907      	bls.n	8007176 <_fwalk_reent+0x3a>
 8007166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800716a:	3301      	adds	r3, #1
 800716c:	d003      	beq.n	8007176 <_fwalk_reent+0x3a>
 800716e:	4629      	mov	r1, r5
 8007170:	4630      	mov	r0, r6
 8007172:	47c0      	blx	r8
 8007174:	4307      	orrs	r7, r0
 8007176:	3568      	adds	r5, #104	; 0x68
 8007178:	e7e9      	b.n	800714e <_fwalk_reent+0x12>
	...

0800717c <__libc_init_array>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	4d0d      	ldr	r5, [pc, #52]	; (80071b4 <__libc_init_array+0x38>)
 8007180:	4c0d      	ldr	r4, [pc, #52]	; (80071b8 <__libc_init_array+0x3c>)
 8007182:	1b64      	subs	r4, r4, r5
 8007184:	10a4      	asrs	r4, r4, #2
 8007186:	2600      	movs	r6, #0
 8007188:	42a6      	cmp	r6, r4
 800718a:	d109      	bne.n	80071a0 <__libc_init_array+0x24>
 800718c:	4d0b      	ldr	r5, [pc, #44]	; (80071bc <__libc_init_array+0x40>)
 800718e:	4c0c      	ldr	r4, [pc, #48]	; (80071c0 <__libc_init_array+0x44>)
 8007190:	f004 fc96 	bl	800bac0 <_init>
 8007194:	1b64      	subs	r4, r4, r5
 8007196:	10a4      	asrs	r4, r4, #2
 8007198:	2600      	movs	r6, #0
 800719a:	42a6      	cmp	r6, r4
 800719c:	d105      	bne.n	80071aa <__libc_init_array+0x2e>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a4:	4798      	blx	r3
 80071a6:	3601      	adds	r6, #1
 80071a8:	e7ee      	b.n	8007188 <__libc_init_array+0xc>
 80071aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ae:	4798      	blx	r3
 80071b0:	3601      	adds	r6, #1
 80071b2:	e7f2      	b.n	800719a <__libc_init_array+0x1e>
 80071b4:	0800c03c 	.word	0x0800c03c
 80071b8:	0800c03c 	.word	0x0800c03c
 80071bc:	0800c03c 	.word	0x0800c03c
 80071c0:	0800c040 	.word	0x0800c040

080071c4 <__retarget_lock_init_recursive>:
 80071c4:	4770      	bx	lr

080071c6 <__retarget_lock_acquire_recursive>:
 80071c6:	4770      	bx	lr

080071c8 <__retarget_lock_release_recursive>:
 80071c8:	4770      	bx	lr

080071ca <memcpy>:
 80071ca:	440a      	add	r2, r1
 80071cc:	4291      	cmp	r1, r2
 80071ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d2:	d100      	bne.n	80071d6 <memcpy+0xc>
 80071d4:	4770      	bx	lr
 80071d6:	b510      	push	{r4, lr}
 80071d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e0:	4291      	cmp	r1, r2
 80071e2:	d1f9      	bne.n	80071d8 <memcpy+0xe>
 80071e4:	bd10      	pop	{r4, pc}

080071e6 <memset>:
 80071e6:	4402      	add	r2, r0
 80071e8:	4603      	mov	r3, r0
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d100      	bne.n	80071f0 <memset+0xa>
 80071ee:	4770      	bx	lr
 80071f0:	f803 1b01 	strb.w	r1, [r3], #1
 80071f4:	e7f9      	b.n	80071ea <memset+0x4>
	...

080071f8 <sbrk_aligned>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4e0e      	ldr	r6, [pc, #56]	; (8007234 <sbrk_aligned+0x3c>)
 80071fc:	460c      	mov	r4, r1
 80071fe:	6831      	ldr	r1, [r6, #0]
 8007200:	4605      	mov	r5, r0
 8007202:	b911      	cbnz	r1, 800720a <sbrk_aligned+0x12>
 8007204:	f000 fffe 	bl	8008204 <_sbrk_r>
 8007208:	6030      	str	r0, [r6, #0]
 800720a:	4621      	mov	r1, r4
 800720c:	4628      	mov	r0, r5
 800720e:	f000 fff9 	bl	8008204 <_sbrk_r>
 8007212:	1c43      	adds	r3, r0, #1
 8007214:	d00a      	beq.n	800722c <sbrk_aligned+0x34>
 8007216:	1cc4      	adds	r4, r0, #3
 8007218:	f024 0403 	bic.w	r4, r4, #3
 800721c:	42a0      	cmp	r0, r4
 800721e:	d007      	beq.n	8007230 <sbrk_aligned+0x38>
 8007220:	1a21      	subs	r1, r4, r0
 8007222:	4628      	mov	r0, r5
 8007224:	f000 ffee 	bl	8008204 <_sbrk_r>
 8007228:	3001      	adds	r0, #1
 800722a:	d101      	bne.n	8007230 <sbrk_aligned+0x38>
 800722c:	f04f 34ff 	mov.w	r4, #4294967295
 8007230:	4620      	mov	r0, r4
 8007232:	bd70      	pop	{r4, r5, r6, pc}
 8007234:	20005344 	.word	0x20005344

08007238 <_malloc_r>:
 8007238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723c:	1ccd      	adds	r5, r1, #3
 800723e:	f025 0503 	bic.w	r5, r5, #3
 8007242:	3508      	adds	r5, #8
 8007244:	2d0c      	cmp	r5, #12
 8007246:	bf38      	it	cc
 8007248:	250c      	movcc	r5, #12
 800724a:	2d00      	cmp	r5, #0
 800724c:	4607      	mov	r7, r0
 800724e:	db01      	blt.n	8007254 <_malloc_r+0x1c>
 8007250:	42a9      	cmp	r1, r5
 8007252:	d905      	bls.n	8007260 <_malloc_r+0x28>
 8007254:	230c      	movs	r3, #12
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	2600      	movs	r6, #0
 800725a:	4630      	mov	r0, r6
 800725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007260:	4e2e      	ldr	r6, [pc, #184]	; (800731c <_malloc_r+0xe4>)
 8007262:	f003 fb1b 	bl	800a89c <__malloc_lock>
 8007266:	6833      	ldr	r3, [r6, #0]
 8007268:	461c      	mov	r4, r3
 800726a:	bb34      	cbnz	r4, 80072ba <_malloc_r+0x82>
 800726c:	4629      	mov	r1, r5
 800726e:	4638      	mov	r0, r7
 8007270:	f7ff ffc2 	bl	80071f8 <sbrk_aligned>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	4604      	mov	r4, r0
 8007278:	d14d      	bne.n	8007316 <_malloc_r+0xde>
 800727a:	6834      	ldr	r4, [r6, #0]
 800727c:	4626      	mov	r6, r4
 800727e:	2e00      	cmp	r6, #0
 8007280:	d140      	bne.n	8007304 <_malloc_r+0xcc>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	4631      	mov	r1, r6
 8007286:	4638      	mov	r0, r7
 8007288:	eb04 0803 	add.w	r8, r4, r3
 800728c:	f000 ffba 	bl	8008204 <_sbrk_r>
 8007290:	4580      	cmp	r8, r0
 8007292:	d13a      	bne.n	800730a <_malloc_r+0xd2>
 8007294:	6821      	ldr	r1, [r4, #0]
 8007296:	3503      	adds	r5, #3
 8007298:	1a6d      	subs	r5, r5, r1
 800729a:	f025 0503 	bic.w	r5, r5, #3
 800729e:	3508      	adds	r5, #8
 80072a0:	2d0c      	cmp	r5, #12
 80072a2:	bf38      	it	cc
 80072a4:	250c      	movcc	r5, #12
 80072a6:	4629      	mov	r1, r5
 80072a8:	4638      	mov	r0, r7
 80072aa:	f7ff ffa5 	bl	80071f8 <sbrk_aligned>
 80072ae:	3001      	adds	r0, #1
 80072b0:	d02b      	beq.n	800730a <_malloc_r+0xd2>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	442b      	add	r3, r5
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	e00e      	b.n	80072d8 <_malloc_r+0xa0>
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	1b52      	subs	r2, r2, r5
 80072be:	d41e      	bmi.n	80072fe <_malloc_r+0xc6>
 80072c0:	2a0b      	cmp	r2, #11
 80072c2:	d916      	bls.n	80072f2 <_malloc_r+0xba>
 80072c4:	1961      	adds	r1, r4, r5
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	6025      	str	r5, [r4, #0]
 80072ca:	bf18      	it	ne
 80072cc:	6059      	strne	r1, [r3, #4]
 80072ce:	6863      	ldr	r3, [r4, #4]
 80072d0:	bf08      	it	eq
 80072d2:	6031      	streq	r1, [r6, #0]
 80072d4:	5162      	str	r2, [r4, r5]
 80072d6:	604b      	str	r3, [r1, #4]
 80072d8:	4638      	mov	r0, r7
 80072da:	f104 060b 	add.w	r6, r4, #11
 80072de:	f003 fae3 	bl	800a8a8 <__malloc_unlock>
 80072e2:	f026 0607 	bic.w	r6, r6, #7
 80072e6:	1d23      	adds	r3, r4, #4
 80072e8:	1af2      	subs	r2, r6, r3
 80072ea:	d0b6      	beq.n	800725a <_malloc_r+0x22>
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	50a3      	str	r3, [r4, r2]
 80072f0:	e7b3      	b.n	800725a <_malloc_r+0x22>
 80072f2:	6862      	ldr	r2, [r4, #4]
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	bf0c      	ite	eq
 80072f8:	6032      	streq	r2, [r6, #0]
 80072fa:	605a      	strne	r2, [r3, #4]
 80072fc:	e7ec      	b.n	80072d8 <_malloc_r+0xa0>
 80072fe:	4623      	mov	r3, r4
 8007300:	6864      	ldr	r4, [r4, #4]
 8007302:	e7b2      	b.n	800726a <_malloc_r+0x32>
 8007304:	4634      	mov	r4, r6
 8007306:	6876      	ldr	r6, [r6, #4]
 8007308:	e7b9      	b.n	800727e <_malloc_r+0x46>
 800730a:	230c      	movs	r3, #12
 800730c:	603b      	str	r3, [r7, #0]
 800730e:	4638      	mov	r0, r7
 8007310:	f003 faca 	bl	800a8a8 <__malloc_unlock>
 8007314:	e7a1      	b.n	800725a <_malloc_r+0x22>
 8007316:	6025      	str	r5, [r4, #0]
 8007318:	e7de      	b.n	80072d8 <_malloc_r+0xa0>
 800731a:	bf00      	nop
 800731c:	20005340 	.word	0x20005340

08007320 <__cvt>:
 8007320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	ec55 4b10 	vmov	r4, r5, d0
 8007328:	2d00      	cmp	r5, #0
 800732a:	460e      	mov	r6, r1
 800732c:	4619      	mov	r1, r3
 800732e:	462b      	mov	r3, r5
 8007330:	bfbb      	ittet	lt
 8007332:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007336:	461d      	movlt	r5, r3
 8007338:	2300      	movge	r3, #0
 800733a:	232d      	movlt	r3, #45	; 0x2d
 800733c:	700b      	strb	r3, [r1, #0]
 800733e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007340:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007344:	4691      	mov	r9, r2
 8007346:	f023 0820 	bic.w	r8, r3, #32
 800734a:	bfbc      	itt	lt
 800734c:	4622      	movlt	r2, r4
 800734e:	4614      	movlt	r4, r2
 8007350:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007354:	d005      	beq.n	8007362 <__cvt+0x42>
 8007356:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800735a:	d100      	bne.n	800735e <__cvt+0x3e>
 800735c:	3601      	adds	r6, #1
 800735e:	2102      	movs	r1, #2
 8007360:	e000      	b.n	8007364 <__cvt+0x44>
 8007362:	2103      	movs	r1, #3
 8007364:	ab03      	add	r3, sp, #12
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	ab02      	add	r3, sp, #8
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	ec45 4b10 	vmov	d0, r4, r5
 8007370:	4653      	mov	r3, sl
 8007372:	4632      	mov	r2, r6
 8007374:	f001 ffdc 	bl	8009330 <_dtoa_r>
 8007378:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800737c:	4607      	mov	r7, r0
 800737e:	d102      	bne.n	8007386 <__cvt+0x66>
 8007380:	f019 0f01 	tst.w	r9, #1
 8007384:	d022      	beq.n	80073cc <__cvt+0xac>
 8007386:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800738a:	eb07 0906 	add.w	r9, r7, r6
 800738e:	d110      	bne.n	80073b2 <__cvt+0x92>
 8007390:	783b      	ldrb	r3, [r7, #0]
 8007392:	2b30      	cmp	r3, #48	; 0x30
 8007394:	d10a      	bne.n	80073ac <__cvt+0x8c>
 8007396:	2200      	movs	r2, #0
 8007398:	2300      	movs	r3, #0
 800739a:	4620      	mov	r0, r4
 800739c:	4629      	mov	r1, r5
 800739e:	f7f9 fba3 	bl	8000ae8 <__aeabi_dcmpeq>
 80073a2:	b918      	cbnz	r0, 80073ac <__cvt+0x8c>
 80073a4:	f1c6 0601 	rsb	r6, r6, #1
 80073a8:	f8ca 6000 	str.w	r6, [sl]
 80073ac:	f8da 3000 	ldr.w	r3, [sl]
 80073b0:	4499      	add	r9, r3
 80073b2:	2200      	movs	r2, #0
 80073b4:	2300      	movs	r3, #0
 80073b6:	4620      	mov	r0, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7f9 fb95 	bl	8000ae8 <__aeabi_dcmpeq>
 80073be:	b108      	cbz	r0, 80073c4 <__cvt+0xa4>
 80073c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80073c4:	2230      	movs	r2, #48	; 0x30
 80073c6:	9b03      	ldr	r3, [sp, #12]
 80073c8:	454b      	cmp	r3, r9
 80073ca:	d307      	bcc.n	80073dc <__cvt+0xbc>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d0:	1bdb      	subs	r3, r3, r7
 80073d2:	4638      	mov	r0, r7
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	b004      	add	sp, #16
 80073d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073dc:	1c59      	adds	r1, r3, #1
 80073de:	9103      	str	r1, [sp, #12]
 80073e0:	701a      	strb	r2, [r3, #0]
 80073e2:	e7f0      	b.n	80073c6 <__cvt+0xa6>

080073e4 <__exponent>:
 80073e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e6:	4603      	mov	r3, r0
 80073e8:	2900      	cmp	r1, #0
 80073ea:	bfb8      	it	lt
 80073ec:	4249      	neglt	r1, r1
 80073ee:	f803 2b02 	strb.w	r2, [r3], #2
 80073f2:	bfb4      	ite	lt
 80073f4:	222d      	movlt	r2, #45	; 0x2d
 80073f6:	222b      	movge	r2, #43	; 0x2b
 80073f8:	2909      	cmp	r1, #9
 80073fa:	7042      	strb	r2, [r0, #1]
 80073fc:	dd2a      	ble.n	8007454 <__exponent+0x70>
 80073fe:	f10d 0407 	add.w	r4, sp, #7
 8007402:	46a4      	mov	ip, r4
 8007404:	270a      	movs	r7, #10
 8007406:	46a6      	mov	lr, r4
 8007408:	460a      	mov	r2, r1
 800740a:	fb91 f6f7 	sdiv	r6, r1, r7
 800740e:	fb07 1516 	mls	r5, r7, r6, r1
 8007412:	3530      	adds	r5, #48	; 0x30
 8007414:	2a63      	cmp	r2, #99	; 0x63
 8007416:	f104 34ff 	add.w	r4, r4, #4294967295
 800741a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800741e:	4631      	mov	r1, r6
 8007420:	dcf1      	bgt.n	8007406 <__exponent+0x22>
 8007422:	3130      	adds	r1, #48	; 0x30
 8007424:	f1ae 0502 	sub.w	r5, lr, #2
 8007428:	f804 1c01 	strb.w	r1, [r4, #-1]
 800742c:	1c44      	adds	r4, r0, #1
 800742e:	4629      	mov	r1, r5
 8007430:	4561      	cmp	r1, ip
 8007432:	d30a      	bcc.n	800744a <__exponent+0x66>
 8007434:	f10d 0209 	add.w	r2, sp, #9
 8007438:	eba2 020e 	sub.w	r2, r2, lr
 800743c:	4565      	cmp	r5, ip
 800743e:	bf88      	it	hi
 8007440:	2200      	movhi	r2, #0
 8007442:	4413      	add	r3, r2
 8007444:	1a18      	subs	r0, r3, r0
 8007446:	b003      	add	sp, #12
 8007448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800744e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007452:	e7ed      	b.n	8007430 <__exponent+0x4c>
 8007454:	2330      	movs	r3, #48	; 0x30
 8007456:	3130      	adds	r1, #48	; 0x30
 8007458:	7083      	strb	r3, [r0, #2]
 800745a:	70c1      	strb	r1, [r0, #3]
 800745c:	1d03      	adds	r3, r0, #4
 800745e:	e7f1      	b.n	8007444 <__exponent+0x60>

08007460 <_printf_float>:
 8007460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	ed2d 8b02 	vpush	{d8}
 8007468:	b08d      	sub	sp, #52	; 0x34
 800746a:	460c      	mov	r4, r1
 800746c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007470:	4616      	mov	r6, r2
 8007472:	461f      	mov	r7, r3
 8007474:	4605      	mov	r5, r0
 8007476:	f003 f97b 	bl	800a770 <_localeconv_r>
 800747a:	f8d0 a000 	ldr.w	sl, [r0]
 800747e:	4650      	mov	r0, sl
 8007480:	f7f8 feb6 	bl	80001f0 <strlen>
 8007484:	2300      	movs	r3, #0
 8007486:	930a      	str	r3, [sp, #40]	; 0x28
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	9305      	str	r3, [sp, #20]
 800748c:	f8d8 3000 	ldr.w	r3, [r8]
 8007490:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007494:	3307      	adds	r3, #7
 8007496:	f023 0307 	bic.w	r3, r3, #7
 800749a:	f103 0208 	add.w	r2, r3, #8
 800749e:	f8c8 2000 	str.w	r2, [r8]
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80074ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80074b2:	9307      	str	r3, [sp, #28]
 80074b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80074b8:	ee08 0a10 	vmov	s16, r0
 80074bc:	4b9f      	ldr	r3, [pc, #636]	; (800773c <_printf_float+0x2dc>)
 80074be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074c2:	f04f 32ff 	mov.w	r2, #4294967295
 80074c6:	f7f9 fb41 	bl	8000b4c <__aeabi_dcmpun>
 80074ca:	bb88      	cbnz	r0, 8007530 <_printf_float+0xd0>
 80074cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074d0:	4b9a      	ldr	r3, [pc, #616]	; (800773c <_printf_float+0x2dc>)
 80074d2:	f04f 32ff 	mov.w	r2, #4294967295
 80074d6:	f7f9 fb1b 	bl	8000b10 <__aeabi_dcmple>
 80074da:	bb48      	cbnz	r0, 8007530 <_printf_float+0xd0>
 80074dc:	2200      	movs	r2, #0
 80074de:	2300      	movs	r3, #0
 80074e0:	4640      	mov	r0, r8
 80074e2:	4649      	mov	r1, r9
 80074e4:	f7f9 fb0a 	bl	8000afc <__aeabi_dcmplt>
 80074e8:	b110      	cbz	r0, 80074f0 <_printf_float+0x90>
 80074ea:	232d      	movs	r3, #45	; 0x2d
 80074ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f0:	4b93      	ldr	r3, [pc, #588]	; (8007740 <_printf_float+0x2e0>)
 80074f2:	4894      	ldr	r0, [pc, #592]	; (8007744 <_printf_float+0x2e4>)
 80074f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80074f8:	bf94      	ite	ls
 80074fa:	4698      	movls	r8, r3
 80074fc:	4680      	movhi	r8, r0
 80074fe:	2303      	movs	r3, #3
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	9b05      	ldr	r3, [sp, #20]
 8007504:	f023 0204 	bic.w	r2, r3, #4
 8007508:	6022      	str	r2, [r4, #0]
 800750a:	f04f 0900 	mov.w	r9, #0
 800750e:	9700      	str	r7, [sp, #0]
 8007510:	4633      	mov	r3, r6
 8007512:	aa0b      	add	r2, sp, #44	; 0x2c
 8007514:	4621      	mov	r1, r4
 8007516:	4628      	mov	r0, r5
 8007518:	f000 f9d8 	bl	80078cc <_printf_common>
 800751c:	3001      	adds	r0, #1
 800751e:	f040 8090 	bne.w	8007642 <_printf_float+0x1e2>
 8007522:	f04f 30ff 	mov.w	r0, #4294967295
 8007526:	b00d      	add	sp, #52	; 0x34
 8007528:	ecbd 8b02 	vpop	{d8}
 800752c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007530:	4642      	mov	r2, r8
 8007532:	464b      	mov	r3, r9
 8007534:	4640      	mov	r0, r8
 8007536:	4649      	mov	r1, r9
 8007538:	f7f9 fb08 	bl	8000b4c <__aeabi_dcmpun>
 800753c:	b140      	cbz	r0, 8007550 <_printf_float+0xf0>
 800753e:	464b      	mov	r3, r9
 8007540:	2b00      	cmp	r3, #0
 8007542:	bfbc      	itt	lt
 8007544:	232d      	movlt	r3, #45	; 0x2d
 8007546:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800754a:	487f      	ldr	r0, [pc, #508]	; (8007748 <_printf_float+0x2e8>)
 800754c:	4b7f      	ldr	r3, [pc, #508]	; (800774c <_printf_float+0x2ec>)
 800754e:	e7d1      	b.n	80074f4 <_printf_float+0x94>
 8007550:	6863      	ldr	r3, [r4, #4]
 8007552:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007556:	9206      	str	r2, [sp, #24]
 8007558:	1c5a      	adds	r2, r3, #1
 800755a:	d13f      	bne.n	80075dc <_printf_float+0x17c>
 800755c:	2306      	movs	r3, #6
 800755e:	6063      	str	r3, [r4, #4]
 8007560:	9b05      	ldr	r3, [sp, #20]
 8007562:	6861      	ldr	r1, [r4, #4]
 8007564:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007568:	2300      	movs	r3, #0
 800756a:	9303      	str	r3, [sp, #12]
 800756c:	ab0a      	add	r3, sp, #40	; 0x28
 800756e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007572:	ab09      	add	r3, sp, #36	; 0x24
 8007574:	ec49 8b10 	vmov	d0, r8, r9
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	6022      	str	r2, [r4, #0]
 800757c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007580:	4628      	mov	r0, r5
 8007582:	f7ff fecd 	bl	8007320 <__cvt>
 8007586:	9b06      	ldr	r3, [sp, #24]
 8007588:	9909      	ldr	r1, [sp, #36]	; 0x24
 800758a:	2b47      	cmp	r3, #71	; 0x47
 800758c:	4680      	mov	r8, r0
 800758e:	d108      	bne.n	80075a2 <_printf_float+0x142>
 8007590:	1cc8      	adds	r0, r1, #3
 8007592:	db02      	blt.n	800759a <_printf_float+0x13a>
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	4299      	cmp	r1, r3
 8007598:	dd41      	ble.n	800761e <_printf_float+0x1be>
 800759a:	f1ab 0b02 	sub.w	fp, fp, #2
 800759e:	fa5f fb8b 	uxtb.w	fp, fp
 80075a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075a6:	d820      	bhi.n	80075ea <_printf_float+0x18a>
 80075a8:	3901      	subs	r1, #1
 80075aa:	465a      	mov	r2, fp
 80075ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075b0:	9109      	str	r1, [sp, #36]	; 0x24
 80075b2:	f7ff ff17 	bl	80073e4 <__exponent>
 80075b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b8:	1813      	adds	r3, r2, r0
 80075ba:	2a01      	cmp	r2, #1
 80075bc:	4681      	mov	r9, r0
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	dc02      	bgt.n	80075c8 <_printf_float+0x168>
 80075c2:	6822      	ldr	r2, [r4, #0]
 80075c4:	07d2      	lsls	r2, r2, #31
 80075c6:	d501      	bpl.n	80075cc <_printf_float+0x16c>
 80075c8:	3301      	adds	r3, #1
 80075ca:	6123      	str	r3, [r4, #16]
 80075cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d09c      	beq.n	800750e <_printf_float+0xae>
 80075d4:	232d      	movs	r3, #45	; 0x2d
 80075d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075da:	e798      	b.n	800750e <_printf_float+0xae>
 80075dc:	9a06      	ldr	r2, [sp, #24]
 80075de:	2a47      	cmp	r2, #71	; 0x47
 80075e0:	d1be      	bne.n	8007560 <_printf_float+0x100>
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1bc      	bne.n	8007560 <_printf_float+0x100>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e7b9      	b.n	800755e <_printf_float+0xfe>
 80075ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80075ee:	d118      	bne.n	8007622 <_printf_float+0x1c2>
 80075f0:	2900      	cmp	r1, #0
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	dd0b      	ble.n	800760e <_printf_float+0x1ae>
 80075f6:	6121      	str	r1, [r4, #16]
 80075f8:	b913      	cbnz	r3, 8007600 <_printf_float+0x1a0>
 80075fa:	6822      	ldr	r2, [r4, #0]
 80075fc:	07d0      	lsls	r0, r2, #31
 80075fe:	d502      	bpl.n	8007606 <_printf_float+0x1a6>
 8007600:	3301      	adds	r3, #1
 8007602:	440b      	add	r3, r1
 8007604:	6123      	str	r3, [r4, #16]
 8007606:	65a1      	str	r1, [r4, #88]	; 0x58
 8007608:	f04f 0900 	mov.w	r9, #0
 800760c:	e7de      	b.n	80075cc <_printf_float+0x16c>
 800760e:	b913      	cbnz	r3, 8007616 <_printf_float+0x1b6>
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	07d2      	lsls	r2, r2, #31
 8007614:	d501      	bpl.n	800761a <_printf_float+0x1ba>
 8007616:	3302      	adds	r3, #2
 8007618:	e7f4      	b.n	8007604 <_printf_float+0x1a4>
 800761a:	2301      	movs	r3, #1
 800761c:	e7f2      	b.n	8007604 <_printf_float+0x1a4>
 800761e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007624:	4299      	cmp	r1, r3
 8007626:	db05      	blt.n	8007634 <_printf_float+0x1d4>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	6121      	str	r1, [r4, #16]
 800762c:	07d8      	lsls	r0, r3, #31
 800762e:	d5ea      	bpl.n	8007606 <_printf_float+0x1a6>
 8007630:	1c4b      	adds	r3, r1, #1
 8007632:	e7e7      	b.n	8007604 <_printf_float+0x1a4>
 8007634:	2900      	cmp	r1, #0
 8007636:	bfd4      	ite	le
 8007638:	f1c1 0202 	rsble	r2, r1, #2
 800763c:	2201      	movgt	r2, #1
 800763e:	4413      	add	r3, r2
 8007640:	e7e0      	b.n	8007604 <_printf_float+0x1a4>
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	055a      	lsls	r2, r3, #21
 8007646:	d407      	bmi.n	8007658 <_printf_float+0x1f8>
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	4642      	mov	r2, r8
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	47b8      	blx	r7
 8007652:	3001      	adds	r0, #1
 8007654:	d12c      	bne.n	80076b0 <_printf_float+0x250>
 8007656:	e764      	b.n	8007522 <_printf_float+0xc2>
 8007658:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800765c:	f240 80e0 	bls.w	8007820 <_printf_float+0x3c0>
 8007660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007664:	2200      	movs	r2, #0
 8007666:	2300      	movs	r3, #0
 8007668:	f7f9 fa3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800766c:	2800      	cmp	r0, #0
 800766e:	d034      	beq.n	80076da <_printf_float+0x27a>
 8007670:	4a37      	ldr	r2, [pc, #220]	; (8007750 <_printf_float+0x2f0>)
 8007672:	2301      	movs	r3, #1
 8007674:	4631      	mov	r1, r6
 8007676:	4628      	mov	r0, r5
 8007678:	47b8      	blx	r7
 800767a:	3001      	adds	r0, #1
 800767c:	f43f af51 	beq.w	8007522 <_printf_float+0xc2>
 8007680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007684:	429a      	cmp	r2, r3
 8007686:	db02      	blt.n	800768e <_printf_float+0x22e>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	07d8      	lsls	r0, r3, #31
 800768c:	d510      	bpl.n	80076b0 <_printf_float+0x250>
 800768e:	ee18 3a10 	vmov	r3, s16
 8007692:	4652      	mov	r2, sl
 8007694:	4631      	mov	r1, r6
 8007696:	4628      	mov	r0, r5
 8007698:	47b8      	blx	r7
 800769a:	3001      	adds	r0, #1
 800769c:	f43f af41 	beq.w	8007522 <_printf_float+0xc2>
 80076a0:	f04f 0800 	mov.w	r8, #0
 80076a4:	f104 091a 	add.w	r9, r4, #26
 80076a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076aa:	3b01      	subs	r3, #1
 80076ac:	4543      	cmp	r3, r8
 80076ae:	dc09      	bgt.n	80076c4 <_printf_float+0x264>
 80076b0:	6823      	ldr	r3, [r4, #0]
 80076b2:	079b      	lsls	r3, r3, #30
 80076b4:	f100 8105 	bmi.w	80078c2 <_printf_float+0x462>
 80076b8:	68e0      	ldr	r0, [r4, #12]
 80076ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076bc:	4298      	cmp	r0, r3
 80076be:	bfb8      	it	lt
 80076c0:	4618      	movlt	r0, r3
 80076c2:	e730      	b.n	8007526 <_printf_float+0xc6>
 80076c4:	2301      	movs	r3, #1
 80076c6:	464a      	mov	r2, r9
 80076c8:	4631      	mov	r1, r6
 80076ca:	4628      	mov	r0, r5
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	f43f af27 	beq.w	8007522 <_printf_float+0xc2>
 80076d4:	f108 0801 	add.w	r8, r8, #1
 80076d8:	e7e6      	b.n	80076a8 <_printf_float+0x248>
 80076da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dc39      	bgt.n	8007754 <_printf_float+0x2f4>
 80076e0:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <_printf_float+0x2f0>)
 80076e2:	2301      	movs	r3, #1
 80076e4:	4631      	mov	r1, r6
 80076e6:	4628      	mov	r0, r5
 80076e8:	47b8      	blx	r7
 80076ea:	3001      	adds	r0, #1
 80076ec:	f43f af19 	beq.w	8007522 <_printf_float+0xc2>
 80076f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076f4:	4313      	orrs	r3, r2
 80076f6:	d102      	bne.n	80076fe <_printf_float+0x29e>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	07d9      	lsls	r1, r3, #31
 80076fc:	d5d8      	bpl.n	80076b0 <_printf_float+0x250>
 80076fe:	ee18 3a10 	vmov	r3, s16
 8007702:	4652      	mov	r2, sl
 8007704:	4631      	mov	r1, r6
 8007706:	4628      	mov	r0, r5
 8007708:	47b8      	blx	r7
 800770a:	3001      	adds	r0, #1
 800770c:	f43f af09 	beq.w	8007522 <_printf_float+0xc2>
 8007710:	f04f 0900 	mov.w	r9, #0
 8007714:	f104 0a1a 	add.w	sl, r4, #26
 8007718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800771a:	425b      	negs	r3, r3
 800771c:	454b      	cmp	r3, r9
 800771e:	dc01      	bgt.n	8007724 <_printf_float+0x2c4>
 8007720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007722:	e792      	b.n	800764a <_printf_float+0x1ea>
 8007724:	2301      	movs	r3, #1
 8007726:	4652      	mov	r2, sl
 8007728:	4631      	mov	r1, r6
 800772a:	4628      	mov	r0, r5
 800772c:	47b8      	blx	r7
 800772e:	3001      	adds	r0, #1
 8007730:	f43f aef7 	beq.w	8007522 <_printf_float+0xc2>
 8007734:	f109 0901 	add.w	r9, r9, #1
 8007738:	e7ee      	b.n	8007718 <_printf_float+0x2b8>
 800773a:	bf00      	nop
 800773c:	7fefffff 	.word	0x7fefffff
 8007740:	0800bbf4 	.word	0x0800bbf4
 8007744:	0800bbf8 	.word	0x0800bbf8
 8007748:	0800bc00 	.word	0x0800bc00
 800774c:	0800bbfc 	.word	0x0800bbfc
 8007750:	0800bc04 	.word	0x0800bc04
 8007754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007756:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007758:	429a      	cmp	r2, r3
 800775a:	bfa8      	it	ge
 800775c:	461a      	movge	r2, r3
 800775e:	2a00      	cmp	r2, #0
 8007760:	4691      	mov	r9, r2
 8007762:	dc37      	bgt.n	80077d4 <_printf_float+0x374>
 8007764:	f04f 0b00 	mov.w	fp, #0
 8007768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800776c:	f104 021a 	add.w	r2, r4, #26
 8007770:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007772:	9305      	str	r3, [sp, #20]
 8007774:	eba3 0309 	sub.w	r3, r3, r9
 8007778:	455b      	cmp	r3, fp
 800777a:	dc33      	bgt.n	80077e4 <_printf_float+0x384>
 800777c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007780:	429a      	cmp	r2, r3
 8007782:	db3b      	blt.n	80077fc <_printf_float+0x39c>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	07da      	lsls	r2, r3, #31
 8007788:	d438      	bmi.n	80077fc <_printf_float+0x39c>
 800778a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778c:	9a05      	ldr	r2, [sp, #20]
 800778e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007790:	1a9a      	subs	r2, r3, r2
 8007792:	eba3 0901 	sub.w	r9, r3, r1
 8007796:	4591      	cmp	r9, r2
 8007798:	bfa8      	it	ge
 800779a:	4691      	movge	r9, r2
 800779c:	f1b9 0f00 	cmp.w	r9, #0
 80077a0:	dc35      	bgt.n	800780e <_printf_float+0x3ae>
 80077a2:	f04f 0800 	mov.w	r8, #0
 80077a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077aa:	f104 0a1a 	add.w	sl, r4, #26
 80077ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	eba3 0309 	sub.w	r3, r3, r9
 80077b8:	4543      	cmp	r3, r8
 80077ba:	f77f af79 	ble.w	80076b0 <_printf_float+0x250>
 80077be:	2301      	movs	r3, #1
 80077c0:	4652      	mov	r2, sl
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f aeaa 	beq.w	8007522 <_printf_float+0xc2>
 80077ce:	f108 0801 	add.w	r8, r8, #1
 80077d2:	e7ec      	b.n	80077ae <_printf_float+0x34e>
 80077d4:	4613      	mov	r3, r2
 80077d6:	4631      	mov	r1, r6
 80077d8:	4642      	mov	r2, r8
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	d1c0      	bne.n	8007764 <_printf_float+0x304>
 80077e2:	e69e      	b.n	8007522 <_printf_float+0xc2>
 80077e4:	2301      	movs	r3, #1
 80077e6:	4631      	mov	r1, r6
 80077e8:	4628      	mov	r0, r5
 80077ea:	9205      	str	r2, [sp, #20]
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f ae97 	beq.w	8007522 <_printf_float+0xc2>
 80077f4:	9a05      	ldr	r2, [sp, #20]
 80077f6:	f10b 0b01 	add.w	fp, fp, #1
 80077fa:	e7b9      	b.n	8007770 <_printf_float+0x310>
 80077fc:	ee18 3a10 	vmov	r3, s16
 8007800:	4652      	mov	r2, sl
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	d1be      	bne.n	800778a <_printf_float+0x32a>
 800780c:	e689      	b.n	8007522 <_printf_float+0xc2>
 800780e:	9a05      	ldr	r2, [sp, #20]
 8007810:	464b      	mov	r3, r9
 8007812:	4442      	add	r2, r8
 8007814:	4631      	mov	r1, r6
 8007816:	4628      	mov	r0, r5
 8007818:	47b8      	blx	r7
 800781a:	3001      	adds	r0, #1
 800781c:	d1c1      	bne.n	80077a2 <_printf_float+0x342>
 800781e:	e680      	b.n	8007522 <_printf_float+0xc2>
 8007820:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007822:	2a01      	cmp	r2, #1
 8007824:	dc01      	bgt.n	800782a <_printf_float+0x3ca>
 8007826:	07db      	lsls	r3, r3, #31
 8007828:	d538      	bpl.n	800789c <_printf_float+0x43c>
 800782a:	2301      	movs	r3, #1
 800782c:	4642      	mov	r2, r8
 800782e:	4631      	mov	r1, r6
 8007830:	4628      	mov	r0, r5
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f ae74 	beq.w	8007522 <_printf_float+0xc2>
 800783a:	ee18 3a10 	vmov	r3, s16
 800783e:	4652      	mov	r2, sl
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f ae6b 	beq.w	8007522 <_printf_float+0xc2>
 800784c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007850:	2200      	movs	r2, #0
 8007852:	2300      	movs	r3, #0
 8007854:	f7f9 f948 	bl	8000ae8 <__aeabi_dcmpeq>
 8007858:	b9d8      	cbnz	r0, 8007892 <_printf_float+0x432>
 800785a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785c:	f108 0201 	add.w	r2, r8, #1
 8007860:	3b01      	subs	r3, #1
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	d10e      	bne.n	800788a <_printf_float+0x42a>
 800786c:	e659      	b.n	8007522 <_printf_float+0xc2>
 800786e:	2301      	movs	r3, #1
 8007870:	4652      	mov	r2, sl
 8007872:	4631      	mov	r1, r6
 8007874:	4628      	mov	r0, r5
 8007876:	47b8      	blx	r7
 8007878:	3001      	adds	r0, #1
 800787a:	f43f ae52 	beq.w	8007522 <_printf_float+0xc2>
 800787e:	f108 0801 	add.w	r8, r8, #1
 8007882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007884:	3b01      	subs	r3, #1
 8007886:	4543      	cmp	r3, r8
 8007888:	dcf1      	bgt.n	800786e <_printf_float+0x40e>
 800788a:	464b      	mov	r3, r9
 800788c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007890:	e6dc      	b.n	800764c <_printf_float+0x1ec>
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	f104 0a1a 	add.w	sl, r4, #26
 800789a:	e7f2      	b.n	8007882 <_printf_float+0x422>
 800789c:	2301      	movs	r3, #1
 800789e:	4642      	mov	r2, r8
 80078a0:	e7df      	b.n	8007862 <_printf_float+0x402>
 80078a2:	2301      	movs	r3, #1
 80078a4:	464a      	mov	r2, r9
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	f43f ae38 	beq.w	8007522 <_printf_float+0xc2>
 80078b2:	f108 0801 	add.w	r8, r8, #1
 80078b6:	68e3      	ldr	r3, [r4, #12]
 80078b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078ba:	1a5b      	subs	r3, r3, r1
 80078bc:	4543      	cmp	r3, r8
 80078be:	dcf0      	bgt.n	80078a2 <_printf_float+0x442>
 80078c0:	e6fa      	b.n	80076b8 <_printf_float+0x258>
 80078c2:	f04f 0800 	mov.w	r8, #0
 80078c6:	f104 0919 	add.w	r9, r4, #25
 80078ca:	e7f4      	b.n	80078b6 <_printf_float+0x456>

080078cc <_printf_common>:
 80078cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d0:	4616      	mov	r6, r2
 80078d2:	4699      	mov	r9, r3
 80078d4:	688a      	ldr	r2, [r1, #8]
 80078d6:	690b      	ldr	r3, [r1, #16]
 80078d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078dc:	4293      	cmp	r3, r2
 80078de:	bfb8      	it	lt
 80078e0:	4613      	movlt	r3, r2
 80078e2:	6033      	str	r3, [r6, #0]
 80078e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078e8:	4607      	mov	r7, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	b10a      	cbz	r2, 80078f2 <_printf_common+0x26>
 80078ee:	3301      	adds	r3, #1
 80078f0:	6033      	str	r3, [r6, #0]
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	0699      	lsls	r1, r3, #26
 80078f6:	bf42      	ittt	mi
 80078f8:	6833      	ldrmi	r3, [r6, #0]
 80078fa:	3302      	addmi	r3, #2
 80078fc:	6033      	strmi	r3, [r6, #0]
 80078fe:	6825      	ldr	r5, [r4, #0]
 8007900:	f015 0506 	ands.w	r5, r5, #6
 8007904:	d106      	bne.n	8007914 <_printf_common+0x48>
 8007906:	f104 0a19 	add.w	sl, r4, #25
 800790a:	68e3      	ldr	r3, [r4, #12]
 800790c:	6832      	ldr	r2, [r6, #0]
 800790e:	1a9b      	subs	r3, r3, r2
 8007910:	42ab      	cmp	r3, r5
 8007912:	dc26      	bgt.n	8007962 <_printf_common+0x96>
 8007914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007918:	1e13      	subs	r3, r2, #0
 800791a:	6822      	ldr	r2, [r4, #0]
 800791c:	bf18      	it	ne
 800791e:	2301      	movne	r3, #1
 8007920:	0692      	lsls	r2, r2, #26
 8007922:	d42b      	bmi.n	800797c <_printf_common+0xb0>
 8007924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007928:	4649      	mov	r1, r9
 800792a:	4638      	mov	r0, r7
 800792c:	47c0      	blx	r8
 800792e:	3001      	adds	r0, #1
 8007930:	d01e      	beq.n	8007970 <_printf_common+0xa4>
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	68e5      	ldr	r5, [r4, #12]
 8007936:	6832      	ldr	r2, [r6, #0]
 8007938:	f003 0306 	and.w	r3, r3, #6
 800793c:	2b04      	cmp	r3, #4
 800793e:	bf08      	it	eq
 8007940:	1aad      	subeq	r5, r5, r2
 8007942:	68a3      	ldr	r3, [r4, #8]
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	bf0c      	ite	eq
 8007948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800794c:	2500      	movne	r5, #0
 800794e:	4293      	cmp	r3, r2
 8007950:	bfc4      	itt	gt
 8007952:	1a9b      	subgt	r3, r3, r2
 8007954:	18ed      	addgt	r5, r5, r3
 8007956:	2600      	movs	r6, #0
 8007958:	341a      	adds	r4, #26
 800795a:	42b5      	cmp	r5, r6
 800795c:	d11a      	bne.n	8007994 <_printf_common+0xc8>
 800795e:	2000      	movs	r0, #0
 8007960:	e008      	b.n	8007974 <_printf_common+0xa8>
 8007962:	2301      	movs	r3, #1
 8007964:	4652      	mov	r2, sl
 8007966:	4649      	mov	r1, r9
 8007968:	4638      	mov	r0, r7
 800796a:	47c0      	blx	r8
 800796c:	3001      	adds	r0, #1
 800796e:	d103      	bne.n	8007978 <_printf_common+0xac>
 8007970:	f04f 30ff 	mov.w	r0, #4294967295
 8007974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007978:	3501      	adds	r5, #1
 800797a:	e7c6      	b.n	800790a <_printf_common+0x3e>
 800797c:	18e1      	adds	r1, r4, r3
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	2030      	movs	r0, #48	; 0x30
 8007982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007986:	4422      	add	r2, r4
 8007988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800798c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007990:	3302      	adds	r3, #2
 8007992:	e7c7      	b.n	8007924 <_printf_common+0x58>
 8007994:	2301      	movs	r3, #1
 8007996:	4622      	mov	r2, r4
 8007998:	4649      	mov	r1, r9
 800799a:	4638      	mov	r0, r7
 800799c:	47c0      	blx	r8
 800799e:	3001      	adds	r0, #1
 80079a0:	d0e6      	beq.n	8007970 <_printf_common+0xa4>
 80079a2:	3601      	adds	r6, #1
 80079a4:	e7d9      	b.n	800795a <_printf_common+0x8e>
	...

080079a8 <_printf_i>:
 80079a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079ac:	7e0f      	ldrb	r7, [r1, #24]
 80079ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079b0:	2f78      	cmp	r7, #120	; 0x78
 80079b2:	4691      	mov	r9, r2
 80079b4:	4680      	mov	r8, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	469a      	mov	sl, r3
 80079ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079be:	d807      	bhi.n	80079d0 <_printf_i+0x28>
 80079c0:	2f62      	cmp	r7, #98	; 0x62
 80079c2:	d80a      	bhi.n	80079da <_printf_i+0x32>
 80079c4:	2f00      	cmp	r7, #0
 80079c6:	f000 80d8 	beq.w	8007b7a <_printf_i+0x1d2>
 80079ca:	2f58      	cmp	r7, #88	; 0x58
 80079cc:	f000 80a3 	beq.w	8007b16 <_printf_i+0x16e>
 80079d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079d8:	e03a      	b.n	8007a50 <_printf_i+0xa8>
 80079da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079de:	2b15      	cmp	r3, #21
 80079e0:	d8f6      	bhi.n	80079d0 <_printf_i+0x28>
 80079e2:	a101      	add	r1, pc, #4	; (adr r1, 80079e8 <_printf_i+0x40>)
 80079e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079e8:	08007a41 	.word	0x08007a41
 80079ec:	08007a55 	.word	0x08007a55
 80079f0:	080079d1 	.word	0x080079d1
 80079f4:	080079d1 	.word	0x080079d1
 80079f8:	080079d1 	.word	0x080079d1
 80079fc:	080079d1 	.word	0x080079d1
 8007a00:	08007a55 	.word	0x08007a55
 8007a04:	080079d1 	.word	0x080079d1
 8007a08:	080079d1 	.word	0x080079d1
 8007a0c:	080079d1 	.word	0x080079d1
 8007a10:	080079d1 	.word	0x080079d1
 8007a14:	08007b61 	.word	0x08007b61
 8007a18:	08007a85 	.word	0x08007a85
 8007a1c:	08007b43 	.word	0x08007b43
 8007a20:	080079d1 	.word	0x080079d1
 8007a24:	080079d1 	.word	0x080079d1
 8007a28:	08007b83 	.word	0x08007b83
 8007a2c:	080079d1 	.word	0x080079d1
 8007a30:	08007a85 	.word	0x08007a85
 8007a34:	080079d1 	.word	0x080079d1
 8007a38:	080079d1 	.word	0x080079d1
 8007a3c:	08007b4b 	.word	0x08007b4b
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	1d1a      	adds	r2, r3, #4
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	602a      	str	r2, [r5, #0]
 8007a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a50:	2301      	movs	r3, #1
 8007a52:	e0a3      	b.n	8007b9c <_printf_i+0x1f4>
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	6829      	ldr	r1, [r5, #0]
 8007a58:	0606      	lsls	r6, r0, #24
 8007a5a:	f101 0304 	add.w	r3, r1, #4
 8007a5e:	d50a      	bpl.n	8007a76 <_printf_i+0xce>
 8007a60:	680e      	ldr	r6, [r1, #0]
 8007a62:	602b      	str	r3, [r5, #0]
 8007a64:	2e00      	cmp	r6, #0
 8007a66:	da03      	bge.n	8007a70 <_printf_i+0xc8>
 8007a68:	232d      	movs	r3, #45	; 0x2d
 8007a6a:	4276      	negs	r6, r6
 8007a6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a70:	485e      	ldr	r0, [pc, #376]	; (8007bec <_printf_i+0x244>)
 8007a72:	230a      	movs	r3, #10
 8007a74:	e019      	b.n	8007aaa <_printf_i+0x102>
 8007a76:	680e      	ldr	r6, [r1, #0]
 8007a78:	602b      	str	r3, [r5, #0]
 8007a7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a7e:	bf18      	it	ne
 8007a80:	b236      	sxthne	r6, r6
 8007a82:	e7ef      	b.n	8007a64 <_printf_i+0xbc>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	6820      	ldr	r0, [r4, #0]
 8007a88:	1d19      	adds	r1, r3, #4
 8007a8a:	6029      	str	r1, [r5, #0]
 8007a8c:	0601      	lsls	r1, r0, #24
 8007a8e:	d501      	bpl.n	8007a94 <_printf_i+0xec>
 8007a90:	681e      	ldr	r6, [r3, #0]
 8007a92:	e002      	b.n	8007a9a <_printf_i+0xf2>
 8007a94:	0646      	lsls	r6, r0, #25
 8007a96:	d5fb      	bpl.n	8007a90 <_printf_i+0xe8>
 8007a98:	881e      	ldrh	r6, [r3, #0]
 8007a9a:	4854      	ldr	r0, [pc, #336]	; (8007bec <_printf_i+0x244>)
 8007a9c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a9e:	bf0c      	ite	eq
 8007aa0:	2308      	moveq	r3, #8
 8007aa2:	230a      	movne	r3, #10
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aaa:	6865      	ldr	r5, [r4, #4]
 8007aac:	60a5      	str	r5, [r4, #8]
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	bfa2      	ittt	ge
 8007ab2:	6821      	ldrge	r1, [r4, #0]
 8007ab4:	f021 0104 	bicge.w	r1, r1, #4
 8007ab8:	6021      	strge	r1, [r4, #0]
 8007aba:	b90e      	cbnz	r6, 8007ac0 <_printf_i+0x118>
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	d04d      	beq.n	8007b5c <_printf_i+0x1b4>
 8007ac0:	4615      	mov	r5, r2
 8007ac2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ac6:	fb03 6711 	mls	r7, r3, r1, r6
 8007aca:	5dc7      	ldrb	r7, [r0, r7]
 8007acc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ad0:	4637      	mov	r7, r6
 8007ad2:	42bb      	cmp	r3, r7
 8007ad4:	460e      	mov	r6, r1
 8007ad6:	d9f4      	bls.n	8007ac2 <_printf_i+0x11a>
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d10b      	bne.n	8007af4 <_printf_i+0x14c>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	07de      	lsls	r6, r3, #31
 8007ae0:	d508      	bpl.n	8007af4 <_printf_i+0x14c>
 8007ae2:	6923      	ldr	r3, [r4, #16]
 8007ae4:	6861      	ldr	r1, [r4, #4]
 8007ae6:	4299      	cmp	r1, r3
 8007ae8:	bfde      	ittt	le
 8007aea:	2330      	movle	r3, #48	; 0x30
 8007aec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007af0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007af4:	1b52      	subs	r2, r2, r5
 8007af6:	6122      	str	r2, [r4, #16]
 8007af8:	f8cd a000 	str.w	sl, [sp]
 8007afc:	464b      	mov	r3, r9
 8007afe:	aa03      	add	r2, sp, #12
 8007b00:	4621      	mov	r1, r4
 8007b02:	4640      	mov	r0, r8
 8007b04:	f7ff fee2 	bl	80078cc <_printf_common>
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d14c      	bne.n	8007ba6 <_printf_i+0x1fe>
 8007b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b10:	b004      	add	sp, #16
 8007b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b16:	4835      	ldr	r0, [pc, #212]	; (8007bec <_printf_i+0x244>)
 8007b18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b1c:	6829      	ldr	r1, [r5, #0]
 8007b1e:	6823      	ldr	r3, [r4, #0]
 8007b20:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b24:	6029      	str	r1, [r5, #0]
 8007b26:	061d      	lsls	r5, r3, #24
 8007b28:	d514      	bpl.n	8007b54 <_printf_i+0x1ac>
 8007b2a:	07df      	lsls	r7, r3, #31
 8007b2c:	bf44      	itt	mi
 8007b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b32:	6023      	strmi	r3, [r4, #0]
 8007b34:	b91e      	cbnz	r6, 8007b3e <_printf_i+0x196>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	f023 0320 	bic.w	r3, r3, #32
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	2310      	movs	r3, #16
 8007b40:	e7b0      	b.n	8007aa4 <_printf_i+0xfc>
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	f043 0320 	orr.w	r3, r3, #32
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	2378      	movs	r3, #120	; 0x78
 8007b4c:	4828      	ldr	r0, [pc, #160]	; (8007bf0 <_printf_i+0x248>)
 8007b4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b52:	e7e3      	b.n	8007b1c <_printf_i+0x174>
 8007b54:	0659      	lsls	r1, r3, #25
 8007b56:	bf48      	it	mi
 8007b58:	b2b6      	uxthmi	r6, r6
 8007b5a:	e7e6      	b.n	8007b2a <_printf_i+0x182>
 8007b5c:	4615      	mov	r5, r2
 8007b5e:	e7bb      	b.n	8007ad8 <_printf_i+0x130>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	6826      	ldr	r6, [r4, #0]
 8007b64:	6961      	ldr	r1, [r4, #20]
 8007b66:	1d18      	adds	r0, r3, #4
 8007b68:	6028      	str	r0, [r5, #0]
 8007b6a:	0635      	lsls	r5, r6, #24
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	d501      	bpl.n	8007b74 <_printf_i+0x1cc>
 8007b70:	6019      	str	r1, [r3, #0]
 8007b72:	e002      	b.n	8007b7a <_printf_i+0x1d2>
 8007b74:	0670      	lsls	r0, r6, #25
 8007b76:	d5fb      	bpl.n	8007b70 <_printf_i+0x1c8>
 8007b78:	8019      	strh	r1, [r3, #0]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	6123      	str	r3, [r4, #16]
 8007b7e:	4615      	mov	r5, r2
 8007b80:	e7ba      	b.n	8007af8 <_printf_i+0x150>
 8007b82:	682b      	ldr	r3, [r5, #0]
 8007b84:	1d1a      	adds	r2, r3, #4
 8007b86:	602a      	str	r2, [r5, #0]
 8007b88:	681d      	ldr	r5, [r3, #0]
 8007b8a:	6862      	ldr	r2, [r4, #4]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4628      	mov	r0, r5
 8007b90:	f7f8 fb36 	bl	8000200 <memchr>
 8007b94:	b108      	cbz	r0, 8007b9a <_printf_i+0x1f2>
 8007b96:	1b40      	subs	r0, r0, r5
 8007b98:	6060      	str	r0, [r4, #4]
 8007b9a:	6863      	ldr	r3, [r4, #4]
 8007b9c:	6123      	str	r3, [r4, #16]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ba4:	e7a8      	b.n	8007af8 <_printf_i+0x150>
 8007ba6:	6923      	ldr	r3, [r4, #16]
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4649      	mov	r1, r9
 8007bac:	4640      	mov	r0, r8
 8007bae:	47d0      	blx	sl
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d0ab      	beq.n	8007b0c <_printf_i+0x164>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	079b      	lsls	r3, r3, #30
 8007bb8:	d413      	bmi.n	8007be2 <_printf_i+0x23a>
 8007bba:	68e0      	ldr	r0, [r4, #12]
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	4298      	cmp	r0, r3
 8007bc0:	bfb8      	it	lt
 8007bc2:	4618      	movlt	r0, r3
 8007bc4:	e7a4      	b.n	8007b10 <_printf_i+0x168>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4632      	mov	r2, r6
 8007bca:	4649      	mov	r1, r9
 8007bcc:	4640      	mov	r0, r8
 8007bce:	47d0      	blx	sl
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d09b      	beq.n	8007b0c <_printf_i+0x164>
 8007bd4:	3501      	adds	r5, #1
 8007bd6:	68e3      	ldr	r3, [r4, #12]
 8007bd8:	9903      	ldr	r1, [sp, #12]
 8007bda:	1a5b      	subs	r3, r3, r1
 8007bdc:	42ab      	cmp	r3, r5
 8007bde:	dcf2      	bgt.n	8007bc6 <_printf_i+0x21e>
 8007be0:	e7eb      	b.n	8007bba <_printf_i+0x212>
 8007be2:	2500      	movs	r5, #0
 8007be4:	f104 0619 	add.w	r6, r4, #25
 8007be8:	e7f5      	b.n	8007bd6 <_printf_i+0x22e>
 8007bea:	bf00      	nop
 8007bec:	0800bc06 	.word	0x0800bc06
 8007bf0:	0800bc17 	.word	0x0800bc17

08007bf4 <_scanf_float>:
 8007bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf8:	b087      	sub	sp, #28
 8007bfa:	4617      	mov	r7, r2
 8007bfc:	9303      	str	r3, [sp, #12]
 8007bfe:	688b      	ldr	r3, [r1, #8]
 8007c00:	1e5a      	subs	r2, r3, #1
 8007c02:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007c06:	bf83      	ittte	hi
 8007c08:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007c0c:	195b      	addhi	r3, r3, r5
 8007c0e:	9302      	strhi	r3, [sp, #8]
 8007c10:	2300      	movls	r3, #0
 8007c12:	bf86      	itte	hi
 8007c14:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c18:	608b      	strhi	r3, [r1, #8]
 8007c1a:	9302      	strls	r3, [sp, #8]
 8007c1c:	680b      	ldr	r3, [r1, #0]
 8007c1e:	468b      	mov	fp, r1
 8007c20:	2500      	movs	r5, #0
 8007c22:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007c26:	f84b 3b1c 	str.w	r3, [fp], #28
 8007c2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c2e:	4680      	mov	r8, r0
 8007c30:	460c      	mov	r4, r1
 8007c32:	465e      	mov	r6, fp
 8007c34:	46aa      	mov	sl, r5
 8007c36:	46a9      	mov	r9, r5
 8007c38:	9501      	str	r5, [sp, #4]
 8007c3a:	68a2      	ldr	r2, [r4, #8]
 8007c3c:	b152      	cbz	r2, 8007c54 <_scanf_float+0x60>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	2b4e      	cmp	r3, #78	; 0x4e
 8007c44:	d864      	bhi.n	8007d10 <_scanf_float+0x11c>
 8007c46:	2b40      	cmp	r3, #64	; 0x40
 8007c48:	d83c      	bhi.n	8007cc4 <_scanf_float+0xd0>
 8007c4a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007c4e:	b2c8      	uxtb	r0, r1
 8007c50:	280e      	cmp	r0, #14
 8007c52:	d93a      	bls.n	8007cca <_scanf_float+0xd6>
 8007c54:	f1b9 0f00 	cmp.w	r9, #0
 8007c58:	d003      	beq.n	8007c62 <_scanf_float+0x6e>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c66:	f1ba 0f01 	cmp.w	sl, #1
 8007c6a:	f200 8113 	bhi.w	8007e94 <_scanf_float+0x2a0>
 8007c6e:	455e      	cmp	r6, fp
 8007c70:	f200 8105 	bhi.w	8007e7e <_scanf_float+0x28a>
 8007c74:	2501      	movs	r5, #1
 8007c76:	4628      	mov	r0, r5
 8007c78:	b007      	add	sp, #28
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c82:	2a0d      	cmp	r2, #13
 8007c84:	d8e6      	bhi.n	8007c54 <_scanf_float+0x60>
 8007c86:	a101      	add	r1, pc, #4	; (adr r1, 8007c8c <_scanf_float+0x98>)
 8007c88:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c8c:	08007dcb 	.word	0x08007dcb
 8007c90:	08007c55 	.word	0x08007c55
 8007c94:	08007c55 	.word	0x08007c55
 8007c98:	08007c55 	.word	0x08007c55
 8007c9c:	08007e2b 	.word	0x08007e2b
 8007ca0:	08007e03 	.word	0x08007e03
 8007ca4:	08007c55 	.word	0x08007c55
 8007ca8:	08007c55 	.word	0x08007c55
 8007cac:	08007dd9 	.word	0x08007dd9
 8007cb0:	08007c55 	.word	0x08007c55
 8007cb4:	08007c55 	.word	0x08007c55
 8007cb8:	08007c55 	.word	0x08007c55
 8007cbc:	08007c55 	.word	0x08007c55
 8007cc0:	08007d91 	.word	0x08007d91
 8007cc4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007cc8:	e7db      	b.n	8007c82 <_scanf_float+0x8e>
 8007cca:	290e      	cmp	r1, #14
 8007ccc:	d8c2      	bhi.n	8007c54 <_scanf_float+0x60>
 8007cce:	a001      	add	r0, pc, #4	; (adr r0, 8007cd4 <_scanf_float+0xe0>)
 8007cd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007cd4:	08007d83 	.word	0x08007d83
 8007cd8:	08007c55 	.word	0x08007c55
 8007cdc:	08007d83 	.word	0x08007d83
 8007ce0:	08007e17 	.word	0x08007e17
 8007ce4:	08007c55 	.word	0x08007c55
 8007ce8:	08007d31 	.word	0x08007d31
 8007cec:	08007d6d 	.word	0x08007d6d
 8007cf0:	08007d6d 	.word	0x08007d6d
 8007cf4:	08007d6d 	.word	0x08007d6d
 8007cf8:	08007d6d 	.word	0x08007d6d
 8007cfc:	08007d6d 	.word	0x08007d6d
 8007d00:	08007d6d 	.word	0x08007d6d
 8007d04:	08007d6d 	.word	0x08007d6d
 8007d08:	08007d6d 	.word	0x08007d6d
 8007d0c:	08007d6d 	.word	0x08007d6d
 8007d10:	2b6e      	cmp	r3, #110	; 0x6e
 8007d12:	d809      	bhi.n	8007d28 <_scanf_float+0x134>
 8007d14:	2b60      	cmp	r3, #96	; 0x60
 8007d16:	d8b2      	bhi.n	8007c7e <_scanf_float+0x8a>
 8007d18:	2b54      	cmp	r3, #84	; 0x54
 8007d1a:	d077      	beq.n	8007e0c <_scanf_float+0x218>
 8007d1c:	2b59      	cmp	r3, #89	; 0x59
 8007d1e:	d199      	bne.n	8007c54 <_scanf_float+0x60>
 8007d20:	2d07      	cmp	r5, #7
 8007d22:	d197      	bne.n	8007c54 <_scanf_float+0x60>
 8007d24:	2508      	movs	r5, #8
 8007d26:	e029      	b.n	8007d7c <_scanf_float+0x188>
 8007d28:	2b74      	cmp	r3, #116	; 0x74
 8007d2a:	d06f      	beq.n	8007e0c <_scanf_float+0x218>
 8007d2c:	2b79      	cmp	r3, #121	; 0x79
 8007d2e:	e7f6      	b.n	8007d1e <_scanf_float+0x12a>
 8007d30:	6821      	ldr	r1, [r4, #0]
 8007d32:	05c8      	lsls	r0, r1, #23
 8007d34:	d51a      	bpl.n	8007d6c <_scanf_float+0x178>
 8007d36:	9b02      	ldr	r3, [sp, #8]
 8007d38:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007d3c:	6021      	str	r1, [r4, #0]
 8007d3e:	f109 0901 	add.w	r9, r9, #1
 8007d42:	b11b      	cbz	r3, 8007d4c <_scanf_float+0x158>
 8007d44:	3b01      	subs	r3, #1
 8007d46:	3201      	adds	r2, #1
 8007d48:	9302      	str	r3, [sp, #8]
 8007d4a:	60a2      	str	r2, [r4, #8]
 8007d4c:	68a3      	ldr	r3, [r4, #8]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	60a3      	str	r3, [r4, #8]
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	3301      	adds	r3, #1
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	607b      	str	r3, [r7, #4]
 8007d60:	f340 8084 	ble.w	8007e6c <_scanf_float+0x278>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	3301      	adds	r3, #1
 8007d68:	603b      	str	r3, [r7, #0]
 8007d6a:	e766      	b.n	8007c3a <_scanf_float+0x46>
 8007d6c:	eb1a 0f05 	cmn.w	sl, r5
 8007d70:	f47f af70 	bne.w	8007c54 <_scanf_float+0x60>
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d7a:	6022      	str	r2, [r4, #0]
 8007d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d80:	e7e4      	b.n	8007d4c <_scanf_float+0x158>
 8007d82:	6822      	ldr	r2, [r4, #0]
 8007d84:	0610      	lsls	r0, r2, #24
 8007d86:	f57f af65 	bpl.w	8007c54 <_scanf_float+0x60>
 8007d8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d8e:	e7f4      	b.n	8007d7a <_scanf_float+0x186>
 8007d90:	f1ba 0f00 	cmp.w	sl, #0
 8007d94:	d10e      	bne.n	8007db4 <_scanf_float+0x1c0>
 8007d96:	f1b9 0f00 	cmp.w	r9, #0
 8007d9a:	d10e      	bne.n	8007dba <_scanf_float+0x1c6>
 8007d9c:	6822      	ldr	r2, [r4, #0]
 8007d9e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007da2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007da6:	d108      	bne.n	8007dba <_scanf_float+0x1c6>
 8007da8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007dac:	6022      	str	r2, [r4, #0]
 8007dae:	f04f 0a01 	mov.w	sl, #1
 8007db2:	e7e3      	b.n	8007d7c <_scanf_float+0x188>
 8007db4:	f1ba 0f02 	cmp.w	sl, #2
 8007db8:	d055      	beq.n	8007e66 <_scanf_float+0x272>
 8007dba:	2d01      	cmp	r5, #1
 8007dbc:	d002      	beq.n	8007dc4 <_scanf_float+0x1d0>
 8007dbe:	2d04      	cmp	r5, #4
 8007dc0:	f47f af48 	bne.w	8007c54 <_scanf_float+0x60>
 8007dc4:	3501      	adds	r5, #1
 8007dc6:	b2ed      	uxtb	r5, r5
 8007dc8:	e7d8      	b.n	8007d7c <_scanf_float+0x188>
 8007dca:	f1ba 0f01 	cmp.w	sl, #1
 8007dce:	f47f af41 	bne.w	8007c54 <_scanf_float+0x60>
 8007dd2:	f04f 0a02 	mov.w	sl, #2
 8007dd6:	e7d1      	b.n	8007d7c <_scanf_float+0x188>
 8007dd8:	b97d      	cbnz	r5, 8007dfa <_scanf_float+0x206>
 8007dda:	f1b9 0f00 	cmp.w	r9, #0
 8007dde:	f47f af3c 	bne.w	8007c5a <_scanf_float+0x66>
 8007de2:	6822      	ldr	r2, [r4, #0]
 8007de4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007de8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007dec:	f47f af39 	bne.w	8007c62 <_scanf_float+0x6e>
 8007df0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007df4:	6022      	str	r2, [r4, #0]
 8007df6:	2501      	movs	r5, #1
 8007df8:	e7c0      	b.n	8007d7c <_scanf_float+0x188>
 8007dfa:	2d03      	cmp	r5, #3
 8007dfc:	d0e2      	beq.n	8007dc4 <_scanf_float+0x1d0>
 8007dfe:	2d05      	cmp	r5, #5
 8007e00:	e7de      	b.n	8007dc0 <_scanf_float+0x1cc>
 8007e02:	2d02      	cmp	r5, #2
 8007e04:	f47f af26 	bne.w	8007c54 <_scanf_float+0x60>
 8007e08:	2503      	movs	r5, #3
 8007e0a:	e7b7      	b.n	8007d7c <_scanf_float+0x188>
 8007e0c:	2d06      	cmp	r5, #6
 8007e0e:	f47f af21 	bne.w	8007c54 <_scanf_float+0x60>
 8007e12:	2507      	movs	r5, #7
 8007e14:	e7b2      	b.n	8007d7c <_scanf_float+0x188>
 8007e16:	6822      	ldr	r2, [r4, #0]
 8007e18:	0591      	lsls	r1, r2, #22
 8007e1a:	f57f af1b 	bpl.w	8007c54 <_scanf_float+0x60>
 8007e1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007e22:	6022      	str	r2, [r4, #0]
 8007e24:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e28:	e7a8      	b.n	8007d7c <_scanf_float+0x188>
 8007e2a:	6822      	ldr	r2, [r4, #0]
 8007e2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007e30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007e34:	d006      	beq.n	8007e44 <_scanf_float+0x250>
 8007e36:	0550      	lsls	r0, r2, #21
 8007e38:	f57f af0c 	bpl.w	8007c54 <_scanf_float+0x60>
 8007e3c:	f1b9 0f00 	cmp.w	r9, #0
 8007e40:	f43f af0f 	beq.w	8007c62 <_scanf_float+0x6e>
 8007e44:	0591      	lsls	r1, r2, #22
 8007e46:	bf58      	it	pl
 8007e48:	9901      	ldrpl	r1, [sp, #4]
 8007e4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e4e:	bf58      	it	pl
 8007e50:	eba9 0101 	subpl.w	r1, r9, r1
 8007e54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007e58:	bf58      	it	pl
 8007e5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	f04f 0900 	mov.w	r9, #0
 8007e64:	e78a      	b.n	8007d7c <_scanf_float+0x188>
 8007e66:	f04f 0a03 	mov.w	sl, #3
 8007e6a:	e787      	b.n	8007d7c <_scanf_float+0x188>
 8007e6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e70:	4639      	mov	r1, r7
 8007e72:	4640      	mov	r0, r8
 8007e74:	4798      	blx	r3
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f43f aedf 	beq.w	8007c3a <_scanf_float+0x46>
 8007e7c:	e6ea      	b.n	8007c54 <_scanf_float+0x60>
 8007e7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e86:	463a      	mov	r2, r7
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4798      	blx	r3
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	6123      	str	r3, [r4, #16]
 8007e92:	e6ec      	b.n	8007c6e <_scanf_float+0x7a>
 8007e94:	1e6b      	subs	r3, r5, #1
 8007e96:	2b06      	cmp	r3, #6
 8007e98:	d825      	bhi.n	8007ee6 <_scanf_float+0x2f2>
 8007e9a:	2d02      	cmp	r5, #2
 8007e9c:	d836      	bhi.n	8007f0c <_scanf_float+0x318>
 8007e9e:	455e      	cmp	r6, fp
 8007ea0:	f67f aee8 	bls.w	8007c74 <_scanf_float+0x80>
 8007ea4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ea8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007eac:	463a      	mov	r2, r7
 8007eae:	4640      	mov	r0, r8
 8007eb0:	4798      	blx	r3
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	e7f1      	b.n	8007e9e <_scanf_float+0x2aa>
 8007eba:	9802      	ldr	r0, [sp, #8]
 8007ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ec0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007ec4:	9002      	str	r0, [sp, #8]
 8007ec6:	463a      	mov	r2, r7
 8007ec8:	4640      	mov	r0, r8
 8007eca:	4798      	blx	r3
 8007ecc:	6923      	ldr	r3, [r4, #16]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ed6:	fa5f fa8a 	uxtb.w	sl, sl
 8007eda:	f1ba 0f02 	cmp.w	sl, #2
 8007ede:	d1ec      	bne.n	8007eba <_scanf_float+0x2c6>
 8007ee0:	3d03      	subs	r5, #3
 8007ee2:	b2ed      	uxtb	r5, r5
 8007ee4:	1b76      	subs	r6, r6, r5
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	05da      	lsls	r2, r3, #23
 8007eea:	d52f      	bpl.n	8007f4c <_scanf_float+0x358>
 8007eec:	055b      	lsls	r3, r3, #21
 8007eee:	d510      	bpl.n	8007f12 <_scanf_float+0x31e>
 8007ef0:	455e      	cmp	r6, fp
 8007ef2:	f67f aebf 	bls.w	8007c74 <_scanf_float+0x80>
 8007ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007efa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007efe:	463a      	mov	r2, r7
 8007f00:	4640      	mov	r0, r8
 8007f02:	4798      	blx	r3
 8007f04:	6923      	ldr	r3, [r4, #16]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	6123      	str	r3, [r4, #16]
 8007f0a:	e7f1      	b.n	8007ef0 <_scanf_float+0x2fc>
 8007f0c:	46aa      	mov	sl, r5
 8007f0e:	9602      	str	r6, [sp, #8]
 8007f10:	e7df      	b.n	8007ed2 <_scanf_float+0x2de>
 8007f12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	2965      	cmp	r1, #101	; 0x65
 8007f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f22:	6123      	str	r3, [r4, #16]
 8007f24:	d00c      	beq.n	8007f40 <_scanf_float+0x34c>
 8007f26:	2945      	cmp	r1, #69	; 0x45
 8007f28:	d00a      	beq.n	8007f40 <_scanf_float+0x34c>
 8007f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f2e:	463a      	mov	r2, r7
 8007f30:	4640      	mov	r0, r8
 8007f32:	4798      	blx	r3
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	1eb5      	subs	r5, r6, #2
 8007f3e:	6123      	str	r3, [r4, #16]
 8007f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f44:	463a      	mov	r2, r7
 8007f46:	4640      	mov	r0, r8
 8007f48:	4798      	blx	r3
 8007f4a:	462e      	mov	r6, r5
 8007f4c:	6825      	ldr	r5, [r4, #0]
 8007f4e:	f015 0510 	ands.w	r5, r5, #16
 8007f52:	d159      	bne.n	8008008 <_scanf_float+0x414>
 8007f54:	7035      	strb	r5, [r6, #0]
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f60:	d11b      	bne.n	8007f9a <_scanf_float+0x3a6>
 8007f62:	9b01      	ldr	r3, [sp, #4]
 8007f64:	454b      	cmp	r3, r9
 8007f66:	eba3 0209 	sub.w	r2, r3, r9
 8007f6a:	d123      	bne.n	8007fb4 <_scanf_float+0x3c0>
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	4659      	mov	r1, fp
 8007f70:	4640      	mov	r0, r8
 8007f72:	f000 ffe3 	bl	8008f3c <_strtod_r>
 8007f76:	6822      	ldr	r2, [r4, #0]
 8007f78:	9b03      	ldr	r3, [sp, #12]
 8007f7a:	f012 0f02 	tst.w	r2, #2
 8007f7e:	ec57 6b10 	vmov	r6, r7, d0
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	d021      	beq.n	8007fca <_scanf_float+0x3d6>
 8007f86:	9903      	ldr	r1, [sp, #12]
 8007f88:	1d1a      	adds	r2, r3, #4
 8007f8a:	600a      	str	r2, [r1, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	e9c3 6700 	strd	r6, r7, [r3]
 8007f92:	68e3      	ldr	r3, [r4, #12]
 8007f94:	3301      	adds	r3, #1
 8007f96:	60e3      	str	r3, [r4, #12]
 8007f98:	e66d      	b.n	8007c76 <_scanf_float+0x82>
 8007f9a:	9b04      	ldr	r3, [sp, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0e5      	beq.n	8007f6c <_scanf_float+0x378>
 8007fa0:	9905      	ldr	r1, [sp, #20]
 8007fa2:	230a      	movs	r3, #10
 8007fa4:	462a      	mov	r2, r5
 8007fa6:	3101      	adds	r1, #1
 8007fa8:	4640      	mov	r0, r8
 8007faa:	f001 f84f 	bl	800904c <_strtol_r>
 8007fae:	9b04      	ldr	r3, [sp, #16]
 8007fb0:	9e05      	ldr	r6, [sp, #20]
 8007fb2:	1ac2      	subs	r2, r0, r3
 8007fb4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007fb8:	429e      	cmp	r6, r3
 8007fba:	bf28      	it	cs
 8007fbc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007fc0:	4912      	ldr	r1, [pc, #72]	; (800800c <_scanf_float+0x418>)
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f000 f934 	bl	8008230 <siprintf>
 8007fc8:	e7d0      	b.n	8007f6c <_scanf_float+0x378>
 8007fca:	9903      	ldr	r1, [sp, #12]
 8007fcc:	f012 0f04 	tst.w	r2, #4
 8007fd0:	f103 0204 	add.w	r2, r3, #4
 8007fd4:	600a      	str	r2, [r1, #0]
 8007fd6:	d1d9      	bne.n	8007f8c <_scanf_float+0x398>
 8007fd8:	f8d3 8000 	ldr.w	r8, [r3]
 8007fdc:	ee10 2a10 	vmov	r2, s0
 8007fe0:	ee10 0a10 	vmov	r0, s0
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 fdb0 	bl	8000b4c <__aeabi_dcmpun>
 8007fec:	b128      	cbz	r0, 8007ffa <_scanf_float+0x406>
 8007fee:	4808      	ldr	r0, [pc, #32]	; (8008010 <_scanf_float+0x41c>)
 8007ff0:	f000 f918 	bl	8008224 <nanf>
 8007ff4:	ed88 0a00 	vstr	s0, [r8]
 8007ff8:	e7cb      	b.n	8007f92 <_scanf_float+0x39e>
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	4639      	mov	r1, r7
 8007ffe:	f7f8 fe03 	bl	8000c08 <__aeabi_d2f>
 8008002:	f8c8 0000 	str.w	r0, [r8]
 8008006:	e7c4      	b.n	8007f92 <_scanf_float+0x39e>
 8008008:	2500      	movs	r5, #0
 800800a:	e634      	b.n	8007c76 <_scanf_float+0x82>
 800800c:	0800bc28 	.word	0x0800bc28
 8008010:	0800c030 	.word	0x0800c030

08008014 <iprintf>:
 8008014:	b40f      	push	{r0, r1, r2, r3}
 8008016:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <iprintf+0x2c>)
 8008018:	b513      	push	{r0, r1, r4, lr}
 800801a:	681c      	ldr	r4, [r3, #0]
 800801c:	b124      	cbz	r4, 8008028 <iprintf+0x14>
 800801e:	69a3      	ldr	r3, [r4, #24]
 8008020:	b913      	cbnz	r3, 8008028 <iprintf+0x14>
 8008022:	4620      	mov	r0, r4
 8008024:	f7ff f80c 	bl	8007040 <__sinit>
 8008028:	ab05      	add	r3, sp, #20
 800802a:	9a04      	ldr	r2, [sp, #16]
 800802c:	68a1      	ldr	r1, [r4, #8]
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	4620      	mov	r0, r4
 8008032:	f003 fae9 	bl	800b608 <_vfiprintf_r>
 8008036:	b002      	add	sp, #8
 8008038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800803c:	b004      	add	sp, #16
 800803e:	4770      	bx	lr
 8008040:	20000014 	.word	0x20000014

08008044 <_puts_r>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	460e      	mov	r6, r1
 8008048:	4605      	mov	r5, r0
 800804a:	b118      	cbz	r0, 8008054 <_puts_r+0x10>
 800804c:	6983      	ldr	r3, [r0, #24]
 800804e:	b90b      	cbnz	r3, 8008054 <_puts_r+0x10>
 8008050:	f7fe fff6 	bl	8007040 <__sinit>
 8008054:	69ab      	ldr	r3, [r5, #24]
 8008056:	68ac      	ldr	r4, [r5, #8]
 8008058:	b913      	cbnz	r3, 8008060 <_puts_r+0x1c>
 800805a:	4628      	mov	r0, r5
 800805c:	f7fe fff0 	bl	8007040 <__sinit>
 8008060:	4b2c      	ldr	r3, [pc, #176]	; (8008114 <_puts_r+0xd0>)
 8008062:	429c      	cmp	r4, r3
 8008064:	d120      	bne.n	80080a8 <_puts_r+0x64>
 8008066:	686c      	ldr	r4, [r5, #4]
 8008068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800806a:	07db      	lsls	r3, r3, #31
 800806c:	d405      	bmi.n	800807a <_puts_r+0x36>
 800806e:	89a3      	ldrh	r3, [r4, #12]
 8008070:	0598      	lsls	r0, r3, #22
 8008072:	d402      	bmi.n	800807a <_puts_r+0x36>
 8008074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008076:	f7ff f8a6 	bl	80071c6 <__retarget_lock_acquire_recursive>
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	0719      	lsls	r1, r3, #28
 800807e:	d51d      	bpl.n	80080bc <_puts_r+0x78>
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	b1db      	cbz	r3, 80080bc <_puts_r+0x78>
 8008084:	3e01      	subs	r6, #1
 8008086:	68a3      	ldr	r3, [r4, #8]
 8008088:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800808c:	3b01      	subs	r3, #1
 800808e:	60a3      	str	r3, [r4, #8]
 8008090:	bb39      	cbnz	r1, 80080e2 <_puts_r+0x9e>
 8008092:	2b00      	cmp	r3, #0
 8008094:	da38      	bge.n	8008108 <_puts_r+0xc4>
 8008096:	4622      	mov	r2, r4
 8008098:	210a      	movs	r1, #10
 800809a:	4628      	mov	r0, r5
 800809c:	f000 ffd8 	bl	8009050 <__swbuf_r>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d011      	beq.n	80080c8 <_puts_r+0x84>
 80080a4:	250a      	movs	r5, #10
 80080a6:	e011      	b.n	80080cc <_puts_r+0x88>
 80080a8:	4b1b      	ldr	r3, [pc, #108]	; (8008118 <_puts_r+0xd4>)
 80080aa:	429c      	cmp	r4, r3
 80080ac:	d101      	bne.n	80080b2 <_puts_r+0x6e>
 80080ae:	68ac      	ldr	r4, [r5, #8]
 80080b0:	e7da      	b.n	8008068 <_puts_r+0x24>
 80080b2:	4b1a      	ldr	r3, [pc, #104]	; (800811c <_puts_r+0xd8>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	bf08      	it	eq
 80080b8:	68ec      	ldreq	r4, [r5, #12]
 80080ba:	e7d5      	b.n	8008068 <_puts_r+0x24>
 80080bc:	4621      	mov	r1, r4
 80080be:	4628      	mov	r0, r5
 80080c0:	f001 f82a 	bl	8009118 <__swsetup_r>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d0dd      	beq.n	8008084 <_puts_r+0x40>
 80080c8:	f04f 35ff 	mov.w	r5, #4294967295
 80080cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080ce:	07da      	lsls	r2, r3, #31
 80080d0:	d405      	bmi.n	80080de <_puts_r+0x9a>
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	059b      	lsls	r3, r3, #22
 80080d6:	d402      	bmi.n	80080de <_puts_r+0x9a>
 80080d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080da:	f7ff f875 	bl	80071c8 <__retarget_lock_release_recursive>
 80080de:	4628      	mov	r0, r5
 80080e0:	bd70      	pop	{r4, r5, r6, pc}
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	da04      	bge.n	80080f0 <_puts_r+0xac>
 80080e6:	69a2      	ldr	r2, [r4, #24]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	dc06      	bgt.n	80080fa <_puts_r+0xb6>
 80080ec:	290a      	cmp	r1, #10
 80080ee:	d004      	beq.n	80080fa <_puts_r+0xb6>
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	6022      	str	r2, [r4, #0]
 80080f6:	7019      	strb	r1, [r3, #0]
 80080f8:	e7c5      	b.n	8008086 <_puts_r+0x42>
 80080fa:	4622      	mov	r2, r4
 80080fc:	4628      	mov	r0, r5
 80080fe:	f000 ffa7 	bl	8009050 <__swbuf_r>
 8008102:	3001      	adds	r0, #1
 8008104:	d1bf      	bne.n	8008086 <_puts_r+0x42>
 8008106:	e7df      	b.n	80080c8 <_puts_r+0x84>
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	250a      	movs	r5, #10
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	6022      	str	r2, [r4, #0]
 8008110:	701d      	strb	r5, [r3, #0]
 8008112:	e7db      	b.n	80080cc <_puts_r+0x88>
 8008114:	0800bbb0 	.word	0x0800bbb0
 8008118:	0800bbd0 	.word	0x0800bbd0
 800811c:	0800bb90 	.word	0x0800bb90

08008120 <puts>:
 8008120:	4b02      	ldr	r3, [pc, #8]	; (800812c <puts+0xc>)
 8008122:	4601      	mov	r1, r0
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	f7ff bf8d 	b.w	8008044 <_puts_r>
 800812a:	bf00      	nop
 800812c:	20000014 	.word	0x20000014

08008130 <cleanup_glue>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	460c      	mov	r4, r1
 8008134:	6809      	ldr	r1, [r1, #0]
 8008136:	4605      	mov	r5, r0
 8008138:	b109      	cbz	r1, 800813e <cleanup_glue+0xe>
 800813a:	f7ff fff9 	bl	8008130 <cleanup_glue>
 800813e:	4621      	mov	r1, r4
 8008140:	4628      	mov	r0, r5
 8008142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008146:	f003 b88d 	b.w	800b264 <_free_r>
	...

0800814c <_reclaim_reent>:
 800814c:	4b2c      	ldr	r3, [pc, #176]	; (8008200 <_reclaim_reent+0xb4>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4283      	cmp	r3, r0
 8008152:	b570      	push	{r4, r5, r6, lr}
 8008154:	4604      	mov	r4, r0
 8008156:	d051      	beq.n	80081fc <_reclaim_reent+0xb0>
 8008158:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800815a:	b143      	cbz	r3, 800816e <_reclaim_reent+0x22>
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d14a      	bne.n	80081f8 <_reclaim_reent+0xac>
 8008162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008164:	6819      	ldr	r1, [r3, #0]
 8008166:	b111      	cbz	r1, 800816e <_reclaim_reent+0x22>
 8008168:	4620      	mov	r0, r4
 800816a:	f003 f87b 	bl	800b264 <_free_r>
 800816e:	6961      	ldr	r1, [r4, #20]
 8008170:	b111      	cbz	r1, 8008178 <_reclaim_reent+0x2c>
 8008172:	4620      	mov	r0, r4
 8008174:	f003 f876 	bl	800b264 <_free_r>
 8008178:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800817a:	b111      	cbz	r1, 8008182 <_reclaim_reent+0x36>
 800817c:	4620      	mov	r0, r4
 800817e:	f003 f871 	bl	800b264 <_free_r>
 8008182:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008184:	b111      	cbz	r1, 800818c <_reclaim_reent+0x40>
 8008186:	4620      	mov	r0, r4
 8008188:	f003 f86c 	bl	800b264 <_free_r>
 800818c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800818e:	b111      	cbz	r1, 8008196 <_reclaim_reent+0x4a>
 8008190:	4620      	mov	r0, r4
 8008192:	f003 f867 	bl	800b264 <_free_r>
 8008196:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008198:	b111      	cbz	r1, 80081a0 <_reclaim_reent+0x54>
 800819a:	4620      	mov	r0, r4
 800819c:	f003 f862 	bl	800b264 <_free_r>
 80081a0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80081a2:	b111      	cbz	r1, 80081aa <_reclaim_reent+0x5e>
 80081a4:	4620      	mov	r0, r4
 80081a6:	f003 f85d 	bl	800b264 <_free_r>
 80081aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80081ac:	b111      	cbz	r1, 80081b4 <_reclaim_reent+0x68>
 80081ae:	4620      	mov	r0, r4
 80081b0:	f003 f858 	bl	800b264 <_free_r>
 80081b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081b6:	b111      	cbz	r1, 80081be <_reclaim_reent+0x72>
 80081b8:	4620      	mov	r0, r4
 80081ba:	f003 f853 	bl	800b264 <_free_r>
 80081be:	69a3      	ldr	r3, [r4, #24]
 80081c0:	b1e3      	cbz	r3, 80081fc <_reclaim_reent+0xb0>
 80081c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80081c4:	4620      	mov	r0, r4
 80081c6:	4798      	blx	r3
 80081c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80081ca:	b1b9      	cbz	r1, 80081fc <_reclaim_reent+0xb0>
 80081cc:	4620      	mov	r0, r4
 80081ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80081d2:	f7ff bfad 	b.w	8008130 <cleanup_glue>
 80081d6:	5949      	ldr	r1, [r1, r5]
 80081d8:	b941      	cbnz	r1, 80081ec <_reclaim_reent+0xa0>
 80081da:	3504      	adds	r5, #4
 80081dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081de:	2d80      	cmp	r5, #128	; 0x80
 80081e0:	68d9      	ldr	r1, [r3, #12]
 80081e2:	d1f8      	bne.n	80081d6 <_reclaim_reent+0x8a>
 80081e4:	4620      	mov	r0, r4
 80081e6:	f003 f83d 	bl	800b264 <_free_r>
 80081ea:	e7ba      	b.n	8008162 <_reclaim_reent+0x16>
 80081ec:	680e      	ldr	r6, [r1, #0]
 80081ee:	4620      	mov	r0, r4
 80081f0:	f003 f838 	bl	800b264 <_free_r>
 80081f4:	4631      	mov	r1, r6
 80081f6:	e7ef      	b.n	80081d8 <_reclaim_reent+0x8c>
 80081f8:	2500      	movs	r5, #0
 80081fa:	e7ef      	b.n	80081dc <_reclaim_reent+0x90>
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
 80081fe:	bf00      	nop
 8008200:	20000014 	.word	0x20000014

08008204 <_sbrk_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d06      	ldr	r5, [pc, #24]	; (8008220 <_sbrk_r+0x1c>)
 8008208:	2300      	movs	r3, #0
 800820a:	4604      	mov	r4, r0
 800820c:	4608      	mov	r0, r1
 800820e:	602b      	str	r3, [r5, #0]
 8008210:	f7f9 f988 	bl	8001524 <_sbrk>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d102      	bne.n	800821e <_sbrk_r+0x1a>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	b103      	cbz	r3, 800821e <_sbrk_r+0x1a>
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	20005348 	.word	0x20005348

08008224 <nanf>:
 8008224:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800822c <nanf+0x8>
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	7fc00000 	.word	0x7fc00000

08008230 <siprintf>:
 8008230:	b40e      	push	{r1, r2, r3}
 8008232:	b500      	push	{lr}
 8008234:	b09c      	sub	sp, #112	; 0x70
 8008236:	ab1d      	add	r3, sp, #116	; 0x74
 8008238:	9002      	str	r0, [sp, #8]
 800823a:	9006      	str	r0, [sp, #24]
 800823c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008240:	4809      	ldr	r0, [pc, #36]	; (8008268 <siprintf+0x38>)
 8008242:	9107      	str	r1, [sp, #28]
 8008244:	9104      	str	r1, [sp, #16]
 8008246:	4909      	ldr	r1, [pc, #36]	; (800826c <siprintf+0x3c>)
 8008248:	f853 2b04 	ldr.w	r2, [r3], #4
 800824c:	9105      	str	r1, [sp, #20]
 800824e:	6800      	ldr	r0, [r0, #0]
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	a902      	add	r1, sp, #8
 8008254:	f003 f8ae 	bl	800b3b4 <_svfiprintf_r>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	b01c      	add	sp, #112	; 0x70
 8008260:	f85d eb04 	ldr.w	lr, [sp], #4
 8008264:	b003      	add	sp, #12
 8008266:	4770      	bx	lr
 8008268:	20000014 	.word	0x20000014
 800826c:	ffff0208 	.word	0xffff0208

08008270 <__sread>:
 8008270:	b510      	push	{r4, lr}
 8008272:	460c      	mov	r4, r1
 8008274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008278:	f003 faf6 	bl	800b868 <_read_r>
 800827c:	2800      	cmp	r0, #0
 800827e:	bfab      	itete	ge
 8008280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008282:	89a3      	ldrhlt	r3, [r4, #12]
 8008284:	181b      	addge	r3, r3, r0
 8008286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800828a:	bfac      	ite	ge
 800828c:	6563      	strge	r3, [r4, #84]	; 0x54
 800828e:	81a3      	strhlt	r3, [r4, #12]
 8008290:	bd10      	pop	{r4, pc}

08008292 <__swrite>:
 8008292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	461f      	mov	r7, r3
 8008298:	898b      	ldrh	r3, [r1, #12]
 800829a:	05db      	lsls	r3, r3, #23
 800829c:	4605      	mov	r5, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	4616      	mov	r6, r2
 80082a2:	d505      	bpl.n	80082b0 <__swrite+0x1e>
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	2302      	movs	r3, #2
 80082aa:	2200      	movs	r2, #0
 80082ac:	f002 fa64 	bl	800a778 <_lseek_r>
 80082b0:	89a3      	ldrh	r3, [r4, #12]
 80082b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ba:	81a3      	strh	r3, [r4, #12]
 80082bc:	4632      	mov	r2, r6
 80082be:	463b      	mov	r3, r7
 80082c0:	4628      	mov	r0, r5
 80082c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	f000 bf15 	b.w	80090f4 <_write_r>

080082ca <__sseek>:
 80082ca:	b510      	push	{r4, lr}
 80082cc:	460c      	mov	r4, r1
 80082ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d2:	f002 fa51 	bl	800a778 <_lseek_r>
 80082d6:	1c43      	adds	r3, r0, #1
 80082d8:	89a3      	ldrh	r3, [r4, #12]
 80082da:	bf15      	itete	ne
 80082dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80082de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082e6:	81a3      	strheq	r3, [r4, #12]
 80082e8:	bf18      	it	ne
 80082ea:	81a3      	strhne	r3, [r4, #12]
 80082ec:	bd10      	pop	{r4, pc}

080082ee <__sclose>:
 80082ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f2:	f000 bf7f 	b.w	80091f4 <_close_r>

080082f6 <sulp>:
 80082f6:	b570      	push	{r4, r5, r6, lr}
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	ec45 4b10 	vmov	d0, r4, r5
 8008300:	4616      	mov	r6, r2
 8008302:	f002 fe49 	bl	800af98 <__ulp>
 8008306:	ec51 0b10 	vmov	r0, r1, d0
 800830a:	b17e      	cbz	r6, 800832c <sulp+0x36>
 800830c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008310:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008314:	2b00      	cmp	r3, #0
 8008316:	dd09      	ble.n	800832c <sulp+0x36>
 8008318:	051b      	lsls	r3, r3, #20
 800831a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800831e:	2400      	movs	r4, #0
 8008320:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008324:	4622      	mov	r2, r4
 8008326:	462b      	mov	r3, r5
 8008328:	f7f8 f976 	bl	8000618 <__aeabi_dmul>
 800832c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008330 <_strtod_l>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	ed2d 8b02 	vpush	{d8}
 8008338:	b09d      	sub	sp, #116	; 0x74
 800833a:	461f      	mov	r7, r3
 800833c:	2300      	movs	r3, #0
 800833e:	9318      	str	r3, [sp, #96]	; 0x60
 8008340:	4ba2      	ldr	r3, [pc, #648]	; (80085cc <_strtod_l+0x29c>)
 8008342:	9213      	str	r2, [sp, #76]	; 0x4c
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	4604      	mov	r4, r0
 800834a:	4618      	mov	r0, r3
 800834c:	4688      	mov	r8, r1
 800834e:	f7f7 ff4f 	bl	80001f0 <strlen>
 8008352:	f04f 0a00 	mov.w	sl, #0
 8008356:	4605      	mov	r5, r0
 8008358:	f04f 0b00 	mov.w	fp, #0
 800835c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008360:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008362:	781a      	ldrb	r2, [r3, #0]
 8008364:	2a2b      	cmp	r2, #43	; 0x2b
 8008366:	d04e      	beq.n	8008406 <_strtod_l+0xd6>
 8008368:	d83b      	bhi.n	80083e2 <_strtod_l+0xb2>
 800836a:	2a0d      	cmp	r2, #13
 800836c:	d834      	bhi.n	80083d8 <_strtod_l+0xa8>
 800836e:	2a08      	cmp	r2, #8
 8008370:	d834      	bhi.n	80083dc <_strtod_l+0xac>
 8008372:	2a00      	cmp	r2, #0
 8008374:	d03e      	beq.n	80083f4 <_strtod_l+0xc4>
 8008376:	2300      	movs	r3, #0
 8008378:	930a      	str	r3, [sp, #40]	; 0x28
 800837a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800837c:	7833      	ldrb	r3, [r6, #0]
 800837e:	2b30      	cmp	r3, #48	; 0x30
 8008380:	f040 80b0 	bne.w	80084e4 <_strtod_l+0x1b4>
 8008384:	7873      	ldrb	r3, [r6, #1]
 8008386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800838a:	2b58      	cmp	r3, #88	; 0x58
 800838c:	d168      	bne.n	8008460 <_strtod_l+0x130>
 800838e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008390:	9301      	str	r3, [sp, #4]
 8008392:	ab18      	add	r3, sp, #96	; 0x60
 8008394:	9702      	str	r7, [sp, #8]
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	4a8d      	ldr	r2, [pc, #564]	; (80085d0 <_strtod_l+0x2a0>)
 800839a:	ab19      	add	r3, sp, #100	; 0x64
 800839c:	a917      	add	r1, sp, #92	; 0x5c
 800839e:	4620      	mov	r0, r4
 80083a0:	f001 fede 	bl	800a160 <__gethex>
 80083a4:	f010 0707 	ands.w	r7, r0, #7
 80083a8:	4605      	mov	r5, r0
 80083aa:	d005      	beq.n	80083b8 <_strtod_l+0x88>
 80083ac:	2f06      	cmp	r7, #6
 80083ae:	d12c      	bne.n	800840a <_strtod_l+0xda>
 80083b0:	3601      	adds	r6, #1
 80083b2:	2300      	movs	r3, #0
 80083b4:	9617      	str	r6, [sp, #92]	; 0x5c
 80083b6:	930a      	str	r3, [sp, #40]	; 0x28
 80083b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 8590 	bne.w	8008ee0 <_strtod_l+0xbb0>
 80083c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083c2:	b1eb      	cbz	r3, 8008400 <_strtod_l+0xd0>
 80083c4:	4652      	mov	r2, sl
 80083c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083ca:	ec43 2b10 	vmov	d0, r2, r3
 80083ce:	b01d      	add	sp, #116	; 0x74
 80083d0:	ecbd 8b02 	vpop	{d8}
 80083d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d8:	2a20      	cmp	r2, #32
 80083da:	d1cc      	bne.n	8008376 <_strtod_l+0x46>
 80083dc:	3301      	adds	r3, #1
 80083de:	9317      	str	r3, [sp, #92]	; 0x5c
 80083e0:	e7be      	b.n	8008360 <_strtod_l+0x30>
 80083e2:	2a2d      	cmp	r2, #45	; 0x2d
 80083e4:	d1c7      	bne.n	8008376 <_strtod_l+0x46>
 80083e6:	2201      	movs	r2, #1
 80083e8:	920a      	str	r2, [sp, #40]	; 0x28
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80083ee:	785b      	ldrb	r3, [r3, #1]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1c2      	bne.n	800837a <_strtod_l+0x4a>
 80083f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f040 856e 	bne.w	8008edc <_strtod_l+0xbac>
 8008400:	4652      	mov	r2, sl
 8008402:	465b      	mov	r3, fp
 8008404:	e7e1      	b.n	80083ca <_strtod_l+0x9a>
 8008406:	2200      	movs	r2, #0
 8008408:	e7ee      	b.n	80083e8 <_strtod_l+0xb8>
 800840a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800840c:	b13a      	cbz	r2, 800841e <_strtod_l+0xee>
 800840e:	2135      	movs	r1, #53	; 0x35
 8008410:	a81a      	add	r0, sp, #104	; 0x68
 8008412:	f002 fecc 	bl	800b1ae <__copybits>
 8008416:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008418:	4620      	mov	r0, r4
 800841a:	f002 fa8b 	bl	800a934 <_Bfree>
 800841e:	3f01      	subs	r7, #1
 8008420:	2f04      	cmp	r7, #4
 8008422:	d806      	bhi.n	8008432 <_strtod_l+0x102>
 8008424:	e8df f007 	tbb	[pc, r7]
 8008428:	1714030a 	.word	0x1714030a
 800842c:	0a          	.byte	0x0a
 800842d:	00          	.byte	0x00
 800842e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008432:	0728      	lsls	r0, r5, #28
 8008434:	d5c0      	bpl.n	80083b8 <_strtod_l+0x88>
 8008436:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800843a:	e7bd      	b.n	80083b8 <_strtod_l+0x88>
 800843c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008440:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008446:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800844a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800844e:	e7f0      	b.n	8008432 <_strtod_l+0x102>
 8008450:	f8df b180 	ldr.w	fp, [pc, #384]	; 80085d4 <_strtod_l+0x2a4>
 8008454:	e7ed      	b.n	8008432 <_strtod_l+0x102>
 8008456:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800845a:	f04f 3aff 	mov.w	sl, #4294967295
 800845e:	e7e8      	b.n	8008432 <_strtod_l+0x102>
 8008460:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	9217      	str	r2, [sp, #92]	; 0x5c
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b30      	cmp	r3, #48	; 0x30
 800846a:	d0f9      	beq.n	8008460 <_strtod_l+0x130>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d0a3      	beq.n	80083b8 <_strtod_l+0x88>
 8008470:	2301      	movs	r3, #1
 8008472:	f04f 0900 	mov.w	r9, #0
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800847a:	9308      	str	r3, [sp, #32]
 800847c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008480:	464f      	mov	r7, r9
 8008482:	220a      	movs	r2, #10
 8008484:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008486:	7806      	ldrb	r6, [r0, #0]
 8008488:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800848c:	b2d9      	uxtb	r1, r3
 800848e:	2909      	cmp	r1, #9
 8008490:	d92a      	bls.n	80084e8 <_strtod_l+0x1b8>
 8008492:	9905      	ldr	r1, [sp, #20]
 8008494:	462a      	mov	r2, r5
 8008496:	f003 fa03 	bl	800b8a0 <strncmp>
 800849a:	b398      	cbz	r0, 8008504 <_strtod_l+0x1d4>
 800849c:	2000      	movs	r0, #0
 800849e:	4632      	mov	r2, r6
 80084a0:	463d      	mov	r5, r7
 80084a2:	9005      	str	r0, [sp, #20]
 80084a4:	4603      	mov	r3, r0
 80084a6:	2a65      	cmp	r2, #101	; 0x65
 80084a8:	d001      	beq.n	80084ae <_strtod_l+0x17e>
 80084aa:	2a45      	cmp	r2, #69	; 0x45
 80084ac:	d118      	bne.n	80084e0 <_strtod_l+0x1b0>
 80084ae:	b91d      	cbnz	r5, 80084b8 <_strtod_l+0x188>
 80084b0:	9a04      	ldr	r2, [sp, #16]
 80084b2:	4302      	orrs	r2, r0
 80084b4:	d09e      	beq.n	80083f4 <_strtod_l+0xc4>
 80084b6:	2500      	movs	r5, #0
 80084b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80084bc:	f108 0201 	add.w	r2, r8, #1
 80084c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80084c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80084c6:	2a2b      	cmp	r2, #43	; 0x2b
 80084c8:	d075      	beq.n	80085b6 <_strtod_l+0x286>
 80084ca:	2a2d      	cmp	r2, #45	; 0x2d
 80084cc:	d07b      	beq.n	80085c6 <_strtod_l+0x296>
 80084ce:	f04f 0c00 	mov.w	ip, #0
 80084d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80084d6:	2909      	cmp	r1, #9
 80084d8:	f240 8082 	bls.w	80085e0 <_strtod_l+0x2b0>
 80084dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80084e0:	2600      	movs	r6, #0
 80084e2:	e09d      	b.n	8008620 <_strtod_l+0x2f0>
 80084e4:	2300      	movs	r3, #0
 80084e6:	e7c4      	b.n	8008472 <_strtod_l+0x142>
 80084e8:	2f08      	cmp	r7, #8
 80084ea:	bfd8      	it	le
 80084ec:	9907      	ldrle	r1, [sp, #28]
 80084ee:	f100 0001 	add.w	r0, r0, #1
 80084f2:	bfda      	itte	le
 80084f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80084f8:	9307      	strle	r3, [sp, #28]
 80084fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 80084fe:	3701      	adds	r7, #1
 8008500:	9017      	str	r0, [sp, #92]	; 0x5c
 8008502:	e7bf      	b.n	8008484 <_strtod_l+0x154>
 8008504:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008506:	195a      	adds	r2, r3, r5
 8008508:	9217      	str	r2, [sp, #92]	; 0x5c
 800850a:	5d5a      	ldrb	r2, [r3, r5]
 800850c:	2f00      	cmp	r7, #0
 800850e:	d037      	beq.n	8008580 <_strtod_l+0x250>
 8008510:	9005      	str	r0, [sp, #20]
 8008512:	463d      	mov	r5, r7
 8008514:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008518:	2b09      	cmp	r3, #9
 800851a:	d912      	bls.n	8008542 <_strtod_l+0x212>
 800851c:	2301      	movs	r3, #1
 800851e:	e7c2      	b.n	80084a6 <_strtod_l+0x176>
 8008520:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	9217      	str	r2, [sp, #92]	; 0x5c
 8008526:	785a      	ldrb	r2, [r3, #1]
 8008528:	3001      	adds	r0, #1
 800852a:	2a30      	cmp	r2, #48	; 0x30
 800852c:	d0f8      	beq.n	8008520 <_strtod_l+0x1f0>
 800852e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008532:	2b08      	cmp	r3, #8
 8008534:	f200 84d9 	bhi.w	8008eea <_strtod_l+0xbba>
 8008538:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800853a:	9005      	str	r0, [sp, #20]
 800853c:	2000      	movs	r0, #0
 800853e:	9308      	str	r3, [sp, #32]
 8008540:	4605      	mov	r5, r0
 8008542:	3a30      	subs	r2, #48	; 0x30
 8008544:	f100 0301 	add.w	r3, r0, #1
 8008548:	d014      	beq.n	8008574 <_strtod_l+0x244>
 800854a:	9905      	ldr	r1, [sp, #20]
 800854c:	4419      	add	r1, r3
 800854e:	9105      	str	r1, [sp, #20]
 8008550:	462b      	mov	r3, r5
 8008552:	eb00 0e05 	add.w	lr, r0, r5
 8008556:	210a      	movs	r1, #10
 8008558:	4573      	cmp	r3, lr
 800855a:	d113      	bne.n	8008584 <_strtod_l+0x254>
 800855c:	182b      	adds	r3, r5, r0
 800855e:	2b08      	cmp	r3, #8
 8008560:	f105 0501 	add.w	r5, r5, #1
 8008564:	4405      	add	r5, r0
 8008566:	dc1c      	bgt.n	80085a2 <_strtod_l+0x272>
 8008568:	9907      	ldr	r1, [sp, #28]
 800856a:	230a      	movs	r3, #10
 800856c:	fb03 2301 	mla	r3, r3, r1, r2
 8008570:	9307      	str	r3, [sp, #28]
 8008572:	2300      	movs	r3, #0
 8008574:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008576:	1c51      	adds	r1, r2, #1
 8008578:	9117      	str	r1, [sp, #92]	; 0x5c
 800857a:	7852      	ldrb	r2, [r2, #1]
 800857c:	4618      	mov	r0, r3
 800857e:	e7c9      	b.n	8008514 <_strtod_l+0x1e4>
 8008580:	4638      	mov	r0, r7
 8008582:	e7d2      	b.n	800852a <_strtod_l+0x1fa>
 8008584:	2b08      	cmp	r3, #8
 8008586:	dc04      	bgt.n	8008592 <_strtod_l+0x262>
 8008588:	9e07      	ldr	r6, [sp, #28]
 800858a:	434e      	muls	r6, r1
 800858c:	9607      	str	r6, [sp, #28]
 800858e:	3301      	adds	r3, #1
 8008590:	e7e2      	b.n	8008558 <_strtod_l+0x228>
 8008592:	f103 0c01 	add.w	ip, r3, #1
 8008596:	f1bc 0f10 	cmp.w	ip, #16
 800859a:	bfd8      	it	le
 800859c:	fb01 f909 	mulle.w	r9, r1, r9
 80085a0:	e7f5      	b.n	800858e <_strtod_l+0x25e>
 80085a2:	2d10      	cmp	r5, #16
 80085a4:	bfdc      	itt	le
 80085a6:	230a      	movle	r3, #10
 80085a8:	fb03 2909 	mlale	r9, r3, r9, r2
 80085ac:	e7e1      	b.n	8008572 <_strtod_l+0x242>
 80085ae:	2300      	movs	r3, #0
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	2301      	movs	r3, #1
 80085b4:	e77c      	b.n	80084b0 <_strtod_l+0x180>
 80085b6:	f04f 0c00 	mov.w	ip, #0
 80085ba:	f108 0202 	add.w	r2, r8, #2
 80085be:	9217      	str	r2, [sp, #92]	; 0x5c
 80085c0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80085c4:	e785      	b.n	80084d2 <_strtod_l+0x1a2>
 80085c6:	f04f 0c01 	mov.w	ip, #1
 80085ca:	e7f6      	b.n	80085ba <_strtod_l+0x28a>
 80085cc:	0800be78 	.word	0x0800be78
 80085d0:	0800bc30 	.word	0x0800bc30
 80085d4:	7ff00000 	.word	0x7ff00000
 80085d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085da:	1c51      	adds	r1, r2, #1
 80085dc:	9117      	str	r1, [sp, #92]	; 0x5c
 80085de:	7852      	ldrb	r2, [r2, #1]
 80085e0:	2a30      	cmp	r2, #48	; 0x30
 80085e2:	d0f9      	beq.n	80085d8 <_strtod_l+0x2a8>
 80085e4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80085e8:	2908      	cmp	r1, #8
 80085ea:	f63f af79 	bhi.w	80084e0 <_strtod_l+0x1b0>
 80085ee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80085f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085f4:	9206      	str	r2, [sp, #24]
 80085f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085f8:	1c51      	adds	r1, r2, #1
 80085fa:	9117      	str	r1, [sp, #92]	; 0x5c
 80085fc:	7852      	ldrb	r2, [r2, #1]
 80085fe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008602:	2e09      	cmp	r6, #9
 8008604:	d937      	bls.n	8008676 <_strtod_l+0x346>
 8008606:	9e06      	ldr	r6, [sp, #24]
 8008608:	1b89      	subs	r1, r1, r6
 800860a:	2908      	cmp	r1, #8
 800860c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008610:	dc02      	bgt.n	8008618 <_strtod_l+0x2e8>
 8008612:	4576      	cmp	r6, lr
 8008614:	bfa8      	it	ge
 8008616:	4676      	movge	r6, lr
 8008618:	f1bc 0f00 	cmp.w	ip, #0
 800861c:	d000      	beq.n	8008620 <_strtod_l+0x2f0>
 800861e:	4276      	negs	r6, r6
 8008620:	2d00      	cmp	r5, #0
 8008622:	d14d      	bne.n	80086c0 <_strtod_l+0x390>
 8008624:	9904      	ldr	r1, [sp, #16]
 8008626:	4301      	orrs	r1, r0
 8008628:	f47f aec6 	bne.w	80083b8 <_strtod_l+0x88>
 800862c:	2b00      	cmp	r3, #0
 800862e:	f47f aee1 	bne.w	80083f4 <_strtod_l+0xc4>
 8008632:	2a69      	cmp	r2, #105	; 0x69
 8008634:	d027      	beq.n	8008686 <_strtod_l+0x356>
 8008636:	dc24      	bgt.n	8008682 <_strtod_l+0x352>
 8008638:	2a49      	cmp	r2, #73	; 0x49
 800863a:	d024      	beq.n	8008686 <_strtod_l+0x356>
 800863c:	2a4e      	cmp	r2, #78	; 0x4e
 800863e:	f47f aed9 	bne.w	80083f4 <_strtod_l+0xc4>
 8008642:	499f      	ldr	r1, [pc, #636]	; (80088c0 <_strtod_l+0x590>)
 8008644:	a817      	add	r0, sp, #92	; 0x5c
 8008646:	f001 ffe3 	bl	800a610 <__match>
 800864a:	2800      	cmp	r0, #0
 800864c:	f43f aed2 	beq.w	80083f4 <_strtod_l+0xc4>
 8008650:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	2b28      	cmp	r3, #40	; 0x28
 8008656:	d12d      	bne.n	80086b4 <_strtod_l+0x384>
 8008658:	499a      	ldr	r1, [pc, #616]	; (80088c4 <_strtod_l+0x594>)
 800865a:	aa1a      	add	r2, sp, #104	; 0x68
 800865c:	a817      	add	r0, sp, #92	; 0x5c
 800865e:	f001 ffeb 	bl	800a638 <__hexnan>
 8008662:	2805      	cmp	r0, #5
 8008664:	d126      	bne.n	80086b4 <_strtod_l+0x384>
 8008666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008668:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800866c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008670:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008674:	e6a0      	b.n	80083b8 <_strtod_l+0x88>
 8008676:	210a      	movs	r1, #10
 8008678:	fb01 2e0e 	mla	lr, r1, lr, r2
 800867c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008680:	e7b9      	b.n	80085f6 <_strtod_l+0x2c6>
 8008682:	2a6e      	cmp	r2, #110	; 0x6e
 8008684:	e7db      	b.n	800863e <_strtod_l+0x30e>
 8008686:	4990      	ldr	r1, [pc, #576]	; (80088c8 <_strtod_l+0x598>)
 8008688:	a817      	add	r0, sp, #92	; 0x5c
 800868a:	f001 ffc1 	bl	800a610 <__match>
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f aeb0 	beq.w	80083f4 <_strtod_l+0xc4>
 8008694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008696:	498d      	ldr	r1, [pc, #564]	; (80088cc <_strtod_l+0x59c>)
 8008698:	3b01      	subs	r3, #1
 800869a:	a817      	add	r0, sp, #92	; 0x5c
 800869c:	9317      	str	r3, [sp, #92]	; 0x5c
 800869e:	f001 ffb7 	bl	800a610 <__match>
 80086a2:	b910      	cbnz	r0, 80086aa <_strtod_l+0x37a>
 80086a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086a6:	3301      	adds	r3, #1
 80086a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80086aa:	f8df b230 	ldr.w	fp, [pc, #560]	; 80088dc <_strtod_l+0x5ac>
 80086ae:	f04f 0a00 	mov.w	sl, #0
 80086b2:	e681      	b.n	80083b8 <_strtod_l+0x88>
 80086b4:	4886      	ldr	r0, [pc, #536]	; (80088d0 <_strtod_l+0x5a0>)
 80086b6:	f003 f8eb 	bl	800b890 <nan>
 80086ba:	ec5b ab10 	vmov	sl, fp, d0
 80086be:	e67b      	b.n	80083b8 <_strtod_l+0x88>
 80086c0:	9b05      	ldr	r3, [sp, #20]
 80086c2:	9807      	ldr	r0, [sp, #28]
 80086c4:	1af3      	subs	r3, r6, r3
 80086c6:	2f00      	cmp	r7, #0
 80086c8:	bf08      	it	eq
 80086ca:	462f      	moveq	r7, r5
 80086cc:	2d10      	cmp	r5, #16
 80086ce:	9306      	str	r3, [sp, #24]
 80086d0:	46a8      	mov	r8, r5
 80086d2:	bfa8      	it	ge
 80086d4:	f04f 0810 	movge.w	r8, #16
 80086d8:	f7f7 ff24 	bl	8000524 <__aeabi_ui2d>
 80086dc:	2d09      	cmp	r5, #9
 80086de:	4682      	mov	sl, r0
 80086e0:	468b      	mov	fp, r1
 80086e2:	dd13      	ble.n	800870c <_strtod_l+0x3dc>
 80086e4:	4b7b      	ldr	r3, [pc, #492]	; (80088d4 <_strtod_l+0x5a4>)
 80086e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80086ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80086ee:	f7f7 ff93 	bl	8000618 <__aeabi_dmul>
 80086f2:	4682      	mov	sl, r0
 80086f4:	4648      	mov	r0, r9
 80086f6:	468b      	mov	fp, r1
 80086f8:	f7f7 ff14 	bl	8000524 <__aeabi_ui2d>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4650      	mov	r0, sl
 8008702:	4659      	mov	r1, fp
 8008704:	f7f7 fdd2 	bl	80002ac <__adddf3>
 8008708:	4682      	mov	sl, r0
 800870a:	468b      	mov	fp, r1
 800870c:	2d0f      	cmp	r5, #15
 800870e:	dc38      	bgt.n	8008782 <_strtod_l+0x452>
 8008710:	9b06      	ldr	r3, [sp, #24]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f43f ae50 	beq.w	80083b8 <_strtod_l+0x88>
 8008718:	dd24      	ble.n	8008764 <_strtod_l+0x434>
 800871a:	2b16      	cmp	r3, #22
 800871c:	dc0b      	bgt.n	8008736 <_strtod_l+0x406>
 800871e:	496d      	ldr	r1, [pc, #436]	; (80088d4 <_strtod_l+0x5a4>)
 8008720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008728:	4652      	mov	r2, sl
 800872a:	465b      	mov	r3, fp
 800872c:	f7f7 ff74 	bl	8000618 <__aeabi_dmul>
 8008730:	4682      	mov	sl, r0
 8008732:	468b      	mov	fp, r1
 8008734:	e640      	b.n	80083b8 <_strtod_l+0x88>
 8008736:	9a06      	ldr	r2, [sp, #24]
 8008738:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800873c:	4293      	cmp	r3, r2
 800873e:	db20      	blt.n	8008782 <_strtod_l+0x452>
 8008740:	4c64      	ldr	r4, [pc, #400]	; (80088d4 <_strtod_l+0x5a4>)
 8008742:	f1c5 050f 	rsb	r5, r5, #15
 8008746:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800874a:	4652      	mov	r2, sl
 800874c:	465b      	mov	r3, fp
 800874e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008752:	f7f7 ff61 	bl	8000618 <__aeabi_dmul>
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	1b5d      	subs	r5, r3, r5
 800875a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800875e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008762:	e7e3      	b.n	800872c <_strtod_l+0x3fc>
 8008764:	9b06      	ldr	r3, [sp, #24]
 8008766:	3316      	adds	r3, #22
 8008768:	db0b      	blt.n	8008782 <_strtod_l+0x452>
 800876a:	9b05      	ldr	r3, [sp, #20]
 800876c:	1b9e      	subs	r6, r3, r6
 800876e:	4b59      	ldr	r3, [pc, #356]	; (80088d4 <_strtod_l+0x5a4>)
 8008770:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008774:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008778:	4650      	mov	r0, sl
 800877a:	4659      	mov	r1, fp
 800877c:	f7f8 f876 	bl	800086c <__aeabi_ddiv>
 8008780:	e7d6      	b.n	8008730 <_strtod_l+0x400>
 8008782:	9b06      	ldr	r3, [sp, #24]
 8008784:	eba5 0808 	sub.w	r8, r5, r8
 8008788:	4498      	add	r8, r3
 800878a:	f1b8 0f00 	cmp.w	r8, #0
 800878e:	dd74      	ble.n	800887a <_strtod_l+0x54a>
 8008790:	f018 030f 	ands.w	r3, r8, #15
 8008794:	d00a      	beq.n	80087ac <_strtod_l+0x47c>
 8008796:	494f      	ldr	r1, [pc, #316]	; (80088d4 <_strtod_l+0x5a4>)
 8008798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800879c:	4652      	mov	r2, sl
 800879e:	465b      	mov	r3, fp
 80087a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087a4:	f7f7 ff38 	bl	8000618 <__aeabi_dmul>
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	f038 080f 	bics.w	r8, r8, #15
 80087b0:	d04f      	beq.n	8008852 <_strtod_l+0x522>
 80087b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80087b6:	dd22      	ble.n	80087fe <_strtod_l+0x4ce>
 80087b8:	2500      	movs	r5, #0
 80087ba:	462e      	mov	r6, r5
 80087bc:	9507      	str	r5, [sp, #28]
 80087be:	9505      	str	r5, [sp, #20]
 80087c0:	2322      	movs	r3, #34	; 0x22
 80087c2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80088dc <_strtod_l+0x5ac>
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	f04f 0a00 	mov.w	sl, #0
 80087cc:	9b07      	ldr	r3, [sp, #28]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f43f adf2 	beq.w	80083b8 <_strtod_l+0x88>
 80087d4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80087d6:	4620      	mov	r0, r4
 80087d8:	f002 f8ac 	bl	800a934 <_Bfree>
 80087dc:	9905      	ldr	r1, [sp, #20]
 80087de:	4620      	mov	r0, r4
 80087e0:	f002 f8a8 	bl	800a934 <_Bfree>
 80087e4:	4631      	mov	r1, r6
 80087e6:	4620      	mov	r0, r4
 80087e8:	f002 f8a4 	bl	800a934 <_Bfree>
 80087ec:	9907      	ldr	r1, [sp, #28]
 80087ee:	4620      	mov	r0, r4
 80087f0:	f002 f8a0 	bl	800a934 <_Bfree>
 80087f4:	4629      	mov	r1, r5
 80087f6:	4620      	mov	r0, r4
 80087f8:	f002 f89c 	bl	800a934 <_Bfree>
 80087fc:	e5dc      	b.n	80083b8 <_strtod_l+0x88>
 80087fe:	4b36      	ldr	r3, [pc, #216]	; (80088d8 <_strtod_l+0x5a8>)
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	2300      	movs	r3, #0
 8008804:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008808:	4650      	mov	r0, sl
 800880a:	4659      	mov	r1, fp
 800880c:	4699      	mov	r9, r3
 800880e:	f1b8 0f01 	cmp.w	r8, #1
 8008812:	dc21      	bgt.n	8008858 <_strtod_l+0x528>
 8008814:	b10b      	cbz	r3, 800881a <_strtod_l+0x4ea>
 8008816:	4682      	mov	sl, r0
 8008818:	468b      	mov	fp, r1
 800881a:	4b2f      	ldr	r3, [pc, #188]	; (80088d8 <_strtod_l+0x5a8>)
 800881c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008820:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008824:	4652      	mov	r2, sl
 8008826:	465b      	mov	r3, fp
 8008828:	e9d9 0100 	ldrd	r0, r1, [r9]
 800882c:	f7f7 fef4 	bl	8000618 <__aeabi_dmul>
 8008830:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <_strtod_l+0x5ac>)
 8008832:	460a      	mov	r2, r1
 8008834:	400b      	ands	r3, r1
 8008836:	492a      	ldr	r1, [pc, #168]	; (80088e0 <_strtod_l+0x5b0>)
 8008838:	428b      	cmp	r3, r1
 800883a:	4682      	mov	sl, r0
 800883c:	d8bc      	bhi.n	80087b8 <_strtod_l+0x488>
 800883e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008842:	428b      	cmp	r3, r1
 8008844:	bf86      	itte	hi
 8008846:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80088e4 <_strtod_l+0x5b4>
 800884a:	f04f 3aff 	movhi.w	sl, #4294967295
 800884e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008852:	2300      	movs	r3, #0
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	e084      	b.n	8008962 <_strtod_l+0x632>
 8008858:	f018 0f01 	tst.w	r8, #1
 800885c:	d005      	beq.n	800886a <_strtod_l+0x53a>
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	f7f7 fed8 	bl	8000618 <__aeabi_dmul>
 8008868:	2301      	movs	r3, #1
 800886a:	9a04      	ldr	r2, [sp, #16]
 800886c:	3208      	adds	r2, #8
 800886e:	f109 0901 	add.w	r9, r9, #1
 8008872:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008876:	9204      	str	r2, [sp, #16]
 8008878:	e7c9      	b.n	800880e <_strtod_l+0x4de>
 800887a:	d0ea      	beq.n	8008852 <_strtod_l+0x522>
 800887c:	f1c8 0800 	rsb	r8, r8, #0
 8008880:	f018 020f 	ands.w	r2, r8, #15
 8008884:	d00a      	beq.n	800889c <_strtod_l+0x56c>
 8008886:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <_strtod_l+0x5a4>)
 8008888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800888c:	4650      	mov	r0, sl
 800888e:	4659      	mov	r1, fp
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f7f7 ffea 	bl	800086c <__aeabi_ddiv>
 8008898:	4682      	mov	sl, r0
 800889a:	468b      	mov	fp, r1
 800889c:	ea5f 1828 	movs.w	r8, r8, asr #4
 80088a0:	d0d7      	beq.n	8008852 <_strtod_l+0x522>
 80088a2:	f1b8 0f1f 	cmp.w	r8, #31
 80088a6:	dd1f      	ble.n	80088e8 <_strtod_l+0x5b8>
 80088a8:	2500      	movs	r5, #0
 80088aa:	462e      	mov	r6, r5
 80088ac:	9507      	str	r5, [sp, #28]
 80088ae:	9505      	str	r5, [sp, #20]
 80088b0:	2322      	movs	r3, #34	; 0x22
 80088b2:	f04f 0a00 	mov.w	sl, #0
 80088b6:	f04f 0b00 	mov.w	fp, #0
 80088ba:	6023      	str	r3, [r4, #0]
 80088bc:	e786      	b.n	80087cc <_strtod_l+0x49c>
 80088be:	bf00      	nop
 80088c0:	0800bc01 	.word	0x0800bc01
 80088c4:	0800bc44 	.word	0x0800bc44
 80088c8:	0800bbf9 	.word	0x0800bbf9
 80088cc:	0800bd84 	.word	0x0800bd84
 80088d0:	0800c030 	.word	0x0800c030
 80088d4:	0800bf10 	.word	0x0800bf10
 80088d8:	0800bee8 	.word	0x0800bee8
 80088dc:	7ff00000 	.word	0x7ff00000
 80088e0:	7ca00000 	.word	0x7ca00000
 80088e4:	7fefffff 	.word	0x7fefffff
 80088e8:	f018 0310 	ands.w	r3, r8, #16
 80088ec:	bf18      	it	ne
 80088ee:	236a      	movne	r3, #106	; 0x6a
 80088f0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008ca0 <_strtod_l+0x970>
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	4650      	mov	r0, sl
 80088f8:	4659      	mov	r1, fp
 80088fa:	2300      	movs	r3, #0
 80088fc:	f018 0f01 	tst.w	r8, #1
 8008900:	d004      	beq.n	800890c <_strtod_l+0x5dc>
 8008902:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008906:	f7f7 fe87 	bl	8000618 <__aeabi_dmul>
 800890a:	2301      	movs	r3, #1
 800890c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008910:	f109 0908 	add.w	r9, r9, #8
 8008914:	d1f2      	bne.n	80088fc <_strtod_l+0x5cc>
 8008916:	b10b      	cbz	r3, 800891c <_strtod_l+0x5ec>
 8008918:	4682      	mov	sl, r0
 800891a:	468b      	mov	fp, r1
 800891c:	9b04      	ldr	r3, [sp, #16]
 800891e:	b1c3      	cbz	r3, 8008952 <_strtod_l+0x622>
 8008920:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008924:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008928:	2b00      	cmp	r3, #0
 800892a:	4659      	mov	r1, fp
 800892c:	dd11      	ble.n	8008952 <_strtod_l+0x622>
 800892e:	2b1f      	cmp	r3, #31
 8008930:	f340 8124 	ble.w	8008b7c <_strtod_l+0x84c>
 8008934:	2b34      	cmp	r3, #52	; 0x34
 8008936:	bfde      	ittt	le
 8008938:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800893c:	f04f 33ff 	movle.w	r3, #4294967295
 8008940:	fa03 f202 	lslle.w	r2, r3, r2
 8008944:	f04f 0a00 	mov.w	sl, #0
 8008948:	bfcc      	ite	gt
 800894a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800894e:	ea02 0b01 	andle.w	fp, r2, r1
 8008952:	2200      	movs	r2, #0
 8008954:	2300      	movs	r3, #0
 8008956:	4650      	mov	r0, sl
 8008958:	4659      	mov	r1, fp
 800895a:	f7f8 f8c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800895e:	2800      	cmp	r0, #0
 8008960:	d1a2      	bne.n	80088a8 <_strtod_l+0x578>
 8008962:	9b07      	ldr	r3, [sp, #28]
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	9908      	ldr	r1, [sp, #32]
 8008968:	462b      	mov	r3, r5
 800896a:	463a      	mov	r2, r7
 800896c:	4620      	mov	r0, r4
 800896e:	f002 f849 	bl	800aa04 <__s2b>
 8008972:	9007      	str	r0, [sp, #28]
 8008974:	2800      	cmp	r0, #0
 8008976:	f43f af1f 	beq.w	80087b8 <_strtod_l+0x488>
 800897a:	9b05      	ldr	r3, [sp, #20]
 800897c:	1b9e      	subs	r6, r3, r6
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	2b00      	cmp	r3, #0
 8008982:	bfb4      	ite	lt
 8008984:	4633      	movlt	r3, r6
 8008986:	2300      	movge	r3, #0
 8008988:	930c      	str	r3, [sp, #48]	; 0x30
 800898a:	9b06      	ldr	r3, [sp, #24]
 800898c:	2500      	movs	r5, #0
 800898e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008992:	9312      	str	r3, [sp, #72]	; 0x48
 8008994:	462e      	mov	r6, r5
 8008996:	9b07      	ldr	r3, [sp, #28]
 8008998:	4620      	mov	r0, r4
 800899a:	6859      	ldr	r1, [r3, #4]
 800899c:	f001 ff8a 	bl	800a8b4 <_Balloc>
 80089a0:	9005      	str	r0, [sp, #20]
 80089a2:	2800      	cmp	r0, #0
 80089a4:	f43f af0c 	beq.w	80087c0 <_strtod_l+0x490>
 80089a8:	9b07      	ldr	r3, [sp, #28]
 80089aa:	691a      	ldr	r2, [r3, #16]
 80089ac:	3202      	adds	r2, #2
 80089ae:	f103 010c 	add.w	r1, r3, #12
 80089b2:	0092      	lsls	r2, r2, #2
 80089b4:	300c      	adds	r0, #12
 80089b6:	f7fe fc08 	bl	80071ca <memcpy>
 80089ba:	ec4b ab10 	vmov	d0, sl, fp
 80089be:	aa1a      	add	r2, sp, #104	; 0x68
 80089c0:	a919      	add	r1, sp, #100	; 0x64
 80089c2:	4620      	mov	r0, r4
 80089c4:	f002 fb64 	bl	800b090 <__d2b>
 80089c8:	ec4b ab18 	vmov	d8, sl, fp
 80089cc:	9018      	str	r0, [sp, #96]	; 0x60
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f43f aef6 	beq.w	80087c0 <_strtod_l+0x490>
 80089d4:	2101      	movs	r1, #1
 80089d6:	4620      	mov	r0, r4
 80089d8:	f002 f8ae 	bl	800ab38 <__i2b>
 80089dc:	4606      	mov	r6, r0
 80089de:	2800      	cmp	r0, #0
 80089e0:	f43f aeee 	beq.w	80087c0 <_strtod_l+0x490>
 80089e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089e6:	9904      	ldr	r1, [sp, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bfab      	itete	ge
 80089ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80089ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80089f0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80089f2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80089f6:	bfac      	ite	ge
 80089f8:	eb03 0902 	addge.w	r9, r3, r2
 80089fc:	1ad7      	sublt	r7, r2, r3
 80089fe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008a00:	eba3 0801 	sub.w	r8, r3, r1
 8008a04:	4490      	add	r8, r2
 8008a06:	4ba1      	ldr	r3, [pc, #644]	; (8008c8c <_strtod_l+0x95c>)
 8008a08:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a0c:	4598      	cmp	r8, r3
 8008a0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a12:	f280 80c7 	bge.w	8008ba4 <_strtod_l+0x874>
 8008a16:	eba3 0308 	sub.w	r3, r3, r8
 8008a1a:	2b1f      	cmp	r3, #31
 8008a1c:	eba2 0203 	sub.w	r2, r2, r3
 8008a20:	f04f 0101 	mov.w	r1, #1
 8008a24:	f300 80b1 	bgt.w	8008b8a <_strtod_l+0x85a>
 8008a28:	fa01 f303 	lsl.w	r3, r1, r3
 8008a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8008a2e:	2300      	movs	r3, #0
 8008a30:	9308      	str	r3, [sp, #32]
 8008a32:	eb09 0802 	add.w	r8, r9, r2
 8008a36:	9b04      	ldr	r3, [sp, #16]
 8008a38:	45c1      	cmp	r9, r8
 8008a3a:	4417      	add	r7, r2
 8008a3c:	441f      	add	r7, r3
 8008a3e:	464b      	mov	r3, r9
 8008a40:	bfa8      	it	ge
 8008a42:	4643      	movge	r3, r8
 8008a44:	42bb      	cmp	r3, r7
 8008a46:	bfa8      	it	ge
 8008a48:	463b      	movge	r3, r7
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	bfc2      	ittt	gt
 8008a4e:	eba8 0803 	subgt.w	r8, r8, r3
 8008a52:	1aff      	subgt	r7, r7, r3
 8008a54:	eba9 0903 	subgt.w	r9, r9, r3
 8008a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dd17      	ble.n	8008a8e <_strtod_l+0x75e>
 8008a5e:	4631      	mov	r1, r6
 8008a60:	461a      	mov	r2, r3
 8008a62:	4620      	mov	r0, r4
 8008a64:	f002 f928 	bl	800acb8 <__pow5mult>
 8008a68:	4606      	mov	r6, r0
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	f43f aea8 	beq.w	80087c0 <_strtod_l+0x490>
 8008a70:	4601      	mov	r1, r0
 8008a72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a74:	4620      	mov	r0, r4
 8008a76:	f002 f875 	bl	800ab64 <__multiply>
 8008a7a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f43f ae9f 	beq.w	80087c0 <_strtod_l+0x490>
 8008a82:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a84:	4620      	mov	r0, r4
 8008a86:	f001 ff55 	bl	800a934 <_Bfree>
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8c:	9318      	str	r3, [sp, #96]	; 0x60
 8008a8e:	f1b8 0f00 	cmp.w	r8, #0
 8008a92:	f300 808c 	bgt.w	8008bae <_strtod_l+0x87e>
 8008a96:	9b06      	ldr	r3, [sp, #24]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dd08      	ble.n	8008aae <_strtod_l+0x77e>
 8008a9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a9e:	9905      	ldr	r1, [sp, #20]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f002 f909 	bl	800acb8 <__pow5mult>
 8008aa6:	9005      	str	r0, [sp, #20]
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f43f ae89 	beq.w	80087c0 <_strtod_l+0x490>
 8008aae:	2f00      	cmp	r7, #0
 8008ab0:	dd08      	ble.n	8008ac4 <_strtod_l+0x794>
 8008ab2:	9905      	ldr	r1, [sp, #20]
 8008ab4:	463a      	mov	r2, r7
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f002 f958 	bl	800ad6c <__lshift>
 8008abc:	9005      	str	r0, [sp, #20]
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f ae7e 	beq.w	80087c0 <_strtod_l+0x490>
 8008ac4:	f1b9 0f00 	cmp.w	r9, #0
 8008ac8:	dd08      	ble.n	8008adc <_strtod_l+0x7ac>
 8008aca:	4631      	mov	r1, r6
 8008acc:	464a      	mov	r2, r9
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f002 f94c 	bl	800ad6c <__lshift>
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f43f ae72 	beq.w	80087c0 <_strtod_l+0x490>
 8008adc:	9a05      	ldr	r2, [sp, #20]
 8008ade:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f002 f9cf 	bl	800ae84 <__mdiff>
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f43f ae69 	beq.w	80087c0 <_strtod_l+0x490>
 8008aee:	68c3      	ldr	r3, [r0, #12]
 8008af0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008af2:	2300      	movs	r3, #0
 8008af4:	60c3      	str	r3, [r0, #12]
 8008af6:	4631      	mov	r1, r6
 8008af8:	f002 f9a8 	bl	800ae4c <__mcmp>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	da60      	bge.n	8008bc2 <_strtod_l+0x892>
 8008b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b02:	ea53 030a 	orrs.w	r3, r3, sl
 8008b06:	f040 8082 	bne.w	8008c0e <_strtod_l+0x8de>
 8008b0a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d17d      	bne.n	8008c0e <_strtod_l+0x8de>
 8008b12:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b16:	0d1b      	lsrs	r3, r3, #20
 8008b18:	051b      	lsls	r3, r3, #20
 8008b1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b1e:	d976      	bls.n	8008c0e <_strtod_l+0x8de>
 8008b20:	696b      	ldr	r3, [r5, #20]
 8008b22:	b913      	cbnz	r3, 8008b2a <_strtod_l+0x7fa>
 8008b24:	692b      	ldr	r3, [r5, #16]
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	dd71      	ble.n	8008c0e <_strtod_l+0x8de>
 8008b2a:	4629      	mov	r1, r5
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f002 f91c 	bl	800ad6c <__lshift>
 8008b34:	4631      	mov	r1, r6
 8008b36:	4605      	mov	r5, r0
 8008b38:	f002 f988 	bl	800ae4c <__mcmp>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	dd66      	ble.n	8008c0e <_strtod_l+0x8de>
 8008b40:	9904      	ldr	r1, [sp, #16]
 8008b42:	4a53      	ldr	r2, [pc, #332]	; (8008c90 <_strtod_l+0x960>)
 8008b44:	465b      	mov	r3, fp
 8008b46:	2900      	cmp	r1, #0
 8008b48:	f000 8081 	beq.w	8008c4e <_strtod_l+0x91e>
 8008b4c:	ea02 010b 	and.w	r1, r2, fp
 8008b50:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008b54:	dc7b      	bgt.n	8008c4e <_strtod_l+0x91e>
 8008b56:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008b5a:	f77f aea9 	ble.w	80088b0 <_strtod_l+0x580>
 8008b5e:	4b4d      	ldr	r3, [pc, #308]	; (8008c94 <_strtod_l+0x964>)
 8008b60:	4650      	mov	r0, sl
 8008b62:	4659      	mov	r1, fp
 8008b64:	2200      	movs	r2, #0
 8008b66:	f7f7 fd57 	bl	8000618 <__aeabi_dmul>
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4303      	orrs	r3, r0
 8008b6e:	bf08      	it	eq
 8008b70:	2322      	moveq	r3, #34	; 0x22
 8008b72:	4682      	mov	sl, r0
 8008b74:	468b      	mov	fp, r1
 8008b76:	bf08      	it	eq
 8008b78:	6023      	streq	r3, [r4, #0]
 8008b7a:	e62b      	b.n	80087d4 <_strtod_l+0x4a4>
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	ea03 0a0a 	and.w	sl, r3, sl
 8008b88:	e6e3      	b.n	8008952 <_strtod_l+0x622>
 8008b8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008b8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008b92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008b96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008b9a:	fa01 f308 	lsl.w	r3, r1, r8
 8008b9e:	9308      	str	r3, [sp, #32]
 8008ba0:	910d      	str	r1, [sp, #52]	; 0x34
 8008ba2:	e746      	b.n	8008a32 <_strtod_l+0x702>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9308      	str	r3, [sp, #32]
 8008ba8:	2301      	movs	r3, #1
 8008baa:	930d      	str	r3, [sp, #52]	; 0x34
 8008bac:	e741      	b.n	8008a32 <_strtod_l+0x702>
 8008bae:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f002 f8da 	bl	800ad6c <__lshift>
 8008bb8:	9018      	str	r0, [sp, #96]	; 0x60
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	f47f af6b 	bne.w	8008a96 <_strtod_l+0x766>
 8008bc0:	e5fe      	b.n	80087c0 <_strtod_l+0x490>
 8008bc2:	465f      	mov	r7, fp
 8008bc4:	d16e      	bne.n	8008ca4 <_strtod_l+0x974>
 8008bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bcc:	b342      	cbz	r2, 8008c20 <_strtod_l+0x8f0>
 8008bce:	4a32      	ldr	r2, [pc, #200]	; (8008c98 <_strtod_l+0x968>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d128      	bne.n	8008c26 <_strtod_l+0x8f6>
 8008bd4:	9b04      	ldr	r3, [sp, #16]
 8008bd6:	4651      	mov	r1, sl
 8008bd8:	b1eb      	cbz	r3, 8008c16 <_strtod_l+0x8e6>
 8008bda:	4b2d      	ldr	r3, [pc, #180]	; (8008c90 <_strtod_l+0x960>)
 8008bdc:	403b      	ands	r3, r7
 8008bde:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008be2:	f04f 32ff 	mov.w	r2, #4294967295
 8008be6:	d819      	bhi.n	8008c1c <_strtod_l+0x8ec>
 8008be8:	0d1b      	lsrs	r3, r3, #20
 8008bea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	4299      	cmp	r1, r3
 8008bf4:	d117      	bne.n	8008c26 <_strtod_l+0x8f6>
 8008bf6:	4b29      	ldr	r3, [pc, #164]	; (8008c9c <_strtod_l+0x96c>)
 8008bf8:	429f      	cmp	r7, r3
 8008bfa:	d102      	bne.n	8008c02 <_strtod_l+0x8d2>
 8008bfc:	3101      	adds	r1, #1
 8008bfe:	f43f addf 	beq.w	80087c0 <_strtod_l+0x490>
 8008c02:	4b23      	ldr	r3, [pc, #140]	; (8008c90 <_strtod_l+0x960>)
 8008c04:	403b      	ands	r3, r7
 8008c06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008c0a:	f04f 0a00 	mov.w	sl, #0
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1a4      	bne.n	8008b5e <_strtod_l+0x82e>
 8008c14:	e5de      	b.n	80087d4 <_strtod_l+0x4a4>
 8008c16:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1a:	e7ea      	b.n	8008bf2 <_strtod_l+0x8c2>
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	e7e8      	b.n	8008bf2 <_strtod_l+0x8c2>
 8008c20:	ea53 030a 	orrs.w	r3, r3, sl
 8008c24:	d08c      	beq.n	8008b40 <_strtod_l+0x810>
 8008c26:	9b08      	ldr	r3, [sp, #32]
 8008c28:	b1db      	cbz	r3, 8008c62 <_strtod_l+0x932>
 8008c2a:	423b      	tst	r3, r7
 8008c2c:	d0ef      	beq.n	8008c0e <_strtod_l+0x8de>
 8008c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c30:	9a04      	ldr	r2, [sp, #16]
 8008c32:	4650      	mov	r0, sl
 8008c34:	4659      	mov	r1, fp
 8008c36:	b1c3      	cbz	r3, 8008c6a <_strtod_l+0x93a>
 8008c38:	f7ff fb5d 	bl	80082f6 <sulp>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	ec51 0b18 	vmov	r0, r1, d8
 8008c44:	f7f7 fb32 	bl	80002ac <__adddf3>
 8008c48:	4682      	mov	sl, r0
 8008c4a:	468b      	mov	fp, r1
 8008c4c:	e7df      	b.n	8008c0e <_strtod_l+0x8de>
 8008c4e:	4013      	ands	r3, r2
 8008c50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008c58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008c5c:	f04f 3aff 	mov.w	sl, #4294967295
 8008c60:	e7d5      	b.n	8008c0e <_strtod_l+0x8de>
 8008c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c64:	ea13 0f0a 	tst.w	r3, sl
 8008c68:	e7e0      	b.n	8008c2c <_strtod_l+0x8fc>
 8008c6a:	f7ff fb44 	bl	80082f6 <sulp>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	ec51 0b18 	vmov	r0, r1, d8
 8008c76:	f7f7 fb17 	bl	80002a8 <__aeabi_dsub>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4682      	mov	sl, r0
 8008c80:	468b      	mov	fp, r1
 8008c82:	f7f7 ff31 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d0c1      	beq.n	8008c0e <_strtod_l+0x8de>
 8008c8a:	e611      	b.n	80088b0 <_strtod_l+0x580>
 8008c8c:	fffffc02 	.word	0xfffffc02
 8008c90:	7ff00000 	.word	0x7ff00000
 8008c94:	39500000 	.word	0x39500000
 8008c98:	000fffff 	.word	0x000fffff
 8008c9c:	7fefffff 	.word	0x7fefffff
 8008ca0:	0800bc58 	.word	0x0800bc58
 8008ca4:	4631      	mov	r1, r6
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f002 fa4e 	bl	800b148 <__ratio>
 8008cac:	ec59 8b10 	vmov	r8, r9, d0
 8008cb0:	ee10 0a10 	vmov	r0, s0
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008cba:	4649      	mov	r1, r9
 8008cbc:	f7f7 ff28 	bl	8000b10 <__aeabi_dcmple>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	d07a      	beq.n	8008dba <_strtod_l+0xa8a>
 8008cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d04a      	beq.n	8008d60 <_strtod_l+0xa30>
 8008cca:	4b95      	ldr	r3, [pc, #596]	; (8008f20 <_strtod_l+0xbf0>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008cd2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008f20 <_strtod_l+0xbf0>
 8008cd6:	f04f 0800 	mov.w	r8, #0
 8008cda:	4b92      	ldr	r3, [pc, #584]	; (8008f24 <_strtod_l+0xbf4>)
 8008cdc:	403b      	ands	r3, r7
 8008cde:	930d      	str	r3, [sp, #52]	; 0x34
 8008ce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ce2:	4b91      	ldr	r3, [pc, #580]	; (8008f28 <_strtod_l+0xbf8>)
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	f040 80b0 	bne.w	8008e4a <_strtod_l+0xb1a>
 8008cea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008cf2:	ec4b ab10 	vmov	d0, sl, fp
 8008cf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008cfa:	f002 f94d 	bl	800af98 <__ulp>
 8008cfe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d02:	ec53 2b10 	vmov	r2, r3, d0
 8008d06:	f7f7 fc87 	bl	8000618 <__aeabi_dmul>
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	465b      	mov	r3, fp
 8008d0e:	f7f7 facd 	bl	80002ac <__adddf3>
 8008d12:	460b      	mov	r3, r1
 8008d14:	4983      	ldr	r1, [pc, #524]	; (8008f24 <_strtod_l+0xbf4>)
 8008d16:	4a85      	ldr	r2, [pc, #532]	; (8008f2c <_strtod_l+0xbfc>)
 8008d18:	4019      	ands	r1, r3
 8008d1a:	4291      	cmp	r1, r2
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	d960      	bls.n	8008de2 <_strtod_l+0xab2>
 8008d20:	ee18 3a90 	vmov	r3, s17
 8008d24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d104      	bne.n	8008d36 <_strtod_l+0xa06>
 8008d2c:	ee18 3a10 	vmov	r3, s16
 8008d30:	3301      	adds	r3, #1
 8008d32:	f43f ad45 	beq.w	80087c0 <_strtod_l+0x490>
 8008d36:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008f38 <_strtod_l+0xc08>
 8008d3a:	f04f 3aff 	mov.w	sl, #4294967295
 8008d3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008d40:	4620      	mov	r0, r4
 8008d42:	f001 fdf7 	bl	800a934 <_Bfree>
 8008d46:	9905      	ldr	r1, [sp, #20]
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f001 fdf3 	bl	800a934 <_Bfree>
 8008d4e:	4631      	mov	r1, r6
 8008d50:	4620      	mov	r0, r4
 8008d52:	f001 fdef 	bl	800a934 <_Bfree>
 8008d56:	4629      	mov	r1, r5
 8008d58:	4620      	mov	r0, r4
 8008d5a:	f001 fdeb 	bl	800a934 <_Bfree>
 8008d5e:	e61a      	b.n	8008996 <_strtod_l+0x666>
 8008d60:	f1ba 0f00 	cmp.w	sl, #0
 8008d64:	d11b      	bne.n	8008d9e <_strtod_l+0xa6e>
 8008d66:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d6a:	b9f3      	cbnz	r3, 8008daa <_strtod_l+0xa7a>
 8008d6c:	4b6c      	ldr	r3, [pc, #432]	; (8008f20 <_strtod_l+0xbf0>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4640      	mov	r0, r8
 8008d72:	4649      	mov	r1, r9
 8008d74:	f7f7 fec2 	bl	8000afc <__aeabi_dcmplt>
 8008d78:	b9d0      	cbnz	r0, 8008db0 <_strtod_l+0xa80>
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	4b6c      	ldr	r3, [pc, #432]	; (8008f30 <_strtod_l+0xc00>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	f7f7 fc49 	bl	8000618 <__aeabi_dmul>
 8008d86:	4680      	mov	r8, r0
 8008d88:	4689      	mov	r9, r1
 8008d8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d8e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008d92:	9315      	str	r3, [sp, #84]	; 0x54
 8008d94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008d98:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d9c:	e79d      	b.n	8008cda <_strtod_l+0x9aa>
 8008d9e:	f1ba 0f01 	cmp.w	sl, #1
 8008da2:	d102      	bne.n	8008daa <_strtod_l+0xa7a>
 8008da4:	2f00      	cmp	r7, #0
 8008da6:	f43f ad83 	beq.w	80088b0 <_strtod_l+0x580>
 8008daa:	4b62      	ldr	r3, [pc, #392]	; (8008f34 <_strtod_l+0xc04>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	e78e      	b.n	8008cce <_strtod_l+0x99e>
 8008db0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008f30 <_strtod_l+0xc00>
 8008db4:	f04f 0800 	mov.w	r8, #0
 8008db8:	e7e7      	b.n	8008d8a <_strtod_l+0xa5a>
 8008dba:	4b5d      	ldr	r3, [pc, #372]	; (8008f30 <_strtod_l+0xc00>)
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f7f7 fc29 	bl	8000618 <__aeabi_dmul>
 8008dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dc8:	4680      	mov	r8, r0
 8008dca:	4689      	mov	r9, r1
 8008dcc:	b933      	cbnz	r3, 8008ddc <_strtod_l+0xaac>
 8008dce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008dd2:	900e      	str	r0, [sp, #56]	; 0x38
 8008dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008dda:	e7dd      	b.n	8008d98 <_strtod_l+0xa68>
 8008ddc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008de0:	e7f9      	b.n	8008dd6 <_strtod_l+0xaa6>
 8008de2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008de6:	9b04      	ldr	r3, [sp, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1a8      	bne.n	8008d3e <_strtod_l+0xa0e>
 8008dec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008df2:	0d1b      	lsrs	r3, r3, #20
 8008df4:	051b      	lsls	r3, r3, #20
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d1a1      	bne.n	8008d3e <_strtod_l+0xa0e>
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4649      	mov	r1, r9
 8008dfe:	f7f7 ff6b 	bl	8000cd8 <__aeabi_d2lz>
 8008e02:	f7f7 fbdb 	bl	80005bc <__aeabi_l2d>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 fa4b 	bl	80002a8 <__aeabi_dsub>
 8008e12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e18:	ea43 030a 	orr.w	r3, r3, sl
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	4680      	mov	r8, r0
 8008e20:	4689      	mov	r9, r1
 8008e22:	d055      	beq.n	8008ed0 <_strtod_l+0xba0>
 8008e24:	a336      	add	r3, pc, #216	; (adr r3, 8008f00 <_strtod_l+0xbd0>)
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f7f7 fe67 	bl	8000afc <__aeabi_dcmplt>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	f47f acd0 	bne.w	80087d4 <_strtod_l+0x4a4>
 8008e34:	a334      	add	r3, pc, #208	; (adr r3, 8008f08 <_strtod_l+0xbd8>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	4649      	mov	r1, r9
 8008e3e:	f7f7 fe7b 	bl	8000b38 <__aeabi_dcmpgt>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	f43f af7b 	beq.w	8008d3e <_strtod_l+0xa0e>
 8008e48:	e4c4      	b.n	80087d4 <_strtod_l+0x4a4>
 8008e4a:	9b04      	ldr	r3, [sp, #16]
 8008e4c:	b333      	cbz	r3, 8008e9c <_strtod_l+0xb6c>
 8008e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e50:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008e54:	d822      	bhi.n	8008e9c <_strtod_l+0xb6c>
 8008e56:	a32e      	add	r3, pc, #184	; (adr r3, 8008f10 <_strtod_l+0xbe0>)
 8008e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	4649      	mov	r1, r9
 8008e60:	f7f7 fe56 	bl	8000b10 <__aeabi_dcmple>
 8008e64:	b1a0      	cbz	r0, 8008e90 <_strtod_l+0xb60>
 8008e66:	4649      	mov	r1, r9
 8008e68:	4640      	mov	r0, r8
 8008e6a:	f7f7 fead 	bl	8000bc8 <__aeabi_d2uiz>
 8008e6e:	2801      	cmp	r0, #1
 8008e70:	bf38      	it	cc
 8008e72:	2001      	movcc	r0, #1
 8008e74:	f7f7 fb56 	bl	8000524 <__aeabi_ui2d>
 8008e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	4689      	mov	r9, r1
 8008e7e:	bb23      	cbnz	r3, 8008eca <_strtod_l+0xb9a>
 8008e80:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e84:	9010      	str	r0, [sp, #64]	; 0x40
 8008e86:	9311      	str	r3, [sp, #68]	; 0x44
 8008e88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008e8c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e94:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ea4:	eef0 0a68 	vmov.f32	s1, s17
 8008ea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008eac:	f002 f874 	bl	800af98 <__ulp>
 8008eb0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008eb4:	ec53 2b10 	vmov	r2, r3, d0
 8008eb8:	f7f7 fbae 	bl	8000618 <__aeabi_dmul>
 8008ebc:	ec53 2b18 	vmov	r2, r3, d8
 8008ec0:	f7f7 f9f4 	bl	80002ac <__adddf3>
 8008ec4:	4682      	mov	sl, r0
 8008ec6:	468b      	mov	fp, r1
 8008ec8:	e78d      	b.n	8008de6 <_strtod_l+0xab6>
 8008eca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008ece:	e7db      	b.n	8008e88 <_strtod_l+0xb58>
 8008ed0:	a311      	add	r3, pc, #68	; (adr r3, 8008f18 <_strtod_l+0xbe8>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 fe11 	bl	8000afc <__aeabi_dcmplt>
 8008eda:	e7b2      	b.n	8008e42 <_strtod_l+0xb12>
 8008edc:	2300      	movs	r3, #0
 8008ede:	930a      	str	r3, [sp, #40]	; 0x28
 8008ee0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008ee2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	f7ff ba6b 	b.w	80083c0 <_strtod_l+0x90>
 8008eea:	2a65      	cmp	r2, #101	; 0x65
 8008eec:	f43f ab5f 	beq.w	80085ae <_strtod_l+0x27e>
 8008ef0:	2a45      	cmp	r2, #69	; 0x45
 8008ef2:	f43f ab5c 	beq.w	80085ae <_strtod_l+0x27e>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	f7ff bb94 	b.w	8008624 <_strtod_l+0x2f4>
 8008efc:	f3af 8000 	nop.w
 8008f00:	94a03595 	.word	0x94a03595
 8008f04:	3fdfffff 	.word	0x3fdfffff
 8008f08:	35afe535 	.word	0x35afe535
 8008f0c:	3fe00000 	.word	0x3fe00000
 8008f10:	ffc00000 	.word	0xffc00000
 8008f14:	41dfffff 	.word	0x41dfffff
 8008f18:	94a03595 	.word	0x94a03595
 8008f1c:	3fcfffff 	.word	0x3fcfffff
 8008f20:	3ff00000 	.word	0x3ff00000
 8008f24:	7ff00000 	.word	0x7ff00000
 8008f28:	7fe00000 	.word	0x7fe00000
 8008f2c:	7c9fffff 	.word	0x7c9fffff
 8008f30:	3fe00000 	.word	0x3fe00000
 8008f34:	bff00000 	.word	0xbff00000
 8008f38:	7fefffff 	.word	0x7fefffff

08008f3c <_strtod_r>:
 8008f3c:	4b01      	ldr	r3, [pc, #4]	; (8008f44 <_strtod_r+0x8>)
 8008f3e:	f7ff b9f7 	b.w	8008330 <_strtod_l>
 8008f42:	bf00      	nop
 8008f44:	2000007c 	.word	0x2000007c

08008f48 <_strtol_l.constprop.0>:
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4e:	d001      	beq.n	8008f54 <_strtol_l.constprop.0+0xc>
 8008f50:	2b24      	cmp	r3, #36	; 0x24
 8008f52:	d906      	bls.n	8008f62 <_strtol_l.constprop.0+0x1a>
 8008f54:	f7fe f80c 	bl	8006f70 <__errno>
 8008f58:	2316      	movs	r3, #22
 8008f5a:	6003      	str	r3, [r0, #0]
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f62:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009048 <_strtol_l.constprop.0+0x100>
 8008f66:	460d      	mov	r5, r1
 8008f68:	462e      	mov	r6, r5
 8008f6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f6e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008f72:	f017 0708 	ands.w	r7, r7, #8
 8008f76:	d1f7      	bne.n	8008f68 <_strtol_l.constprop.0+0x20>
 8008f78:	2c2d      	cmp	r4, #45	; 0x2d
 8008f7a:	d132      	bne.n	8008fe2 <_strtol_l.constprop.0+0x9a>
 8008f7c:	782c      	ldrb	r4, [r5, #0]
 8008f7e:	2701      	movs	r7, #1
 8008f80:	1cb5      	adds	r5, r6, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d05b      	beq.n	800903e <_strtol_l.constprop.0+0xf6>
 8008f86:	2b10      	cmp	r3, #16
 8008f88:	d109      	bne.n	8008f9e <_strtol_l.constprop.0+0x56>
 8008f8a:	2c30      	cmp	r4, #48	; 0x30
 8008f8c:	d107      	bne.n	8008f9e <_strtol_l.constprop.0+0x56>
 8008f8e:	782c      	ldrb	r4, [r5, #0]
 8008f90:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f94:	2c58      	cmp	r4, #88	; 0x58
 8008f96:	d14d      	bne.n	8009034 <_strtol_l.constprop.0+0xec>
 8008f98:	786c      	ldrb	r4, [r5, #1]
 8008f9a:	2310      	movs	r3, #16
 8008f9c:	3502      	adds	r5, #2
 8008f9e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008fa2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008fa6:	f04f 0c00 	mov.w	ip, #0
 8008faa:	fbb8 f9f3 	udiv	r9, r8, r3
 8008fae:	4666      	mov	r6, ip
 8008fb0:	fb03 8a19 	mls	sl, r3, r9, r8
 8008fb4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008fb8:	f1be 0f09 	cmp.w	lr, #9
 8008fbc:	d816      	bhi.n	8008fec <_strtol_l.constprop.0+0xa4>
 8008fbe:	4674      	mov	r4, lr
 8008fc0:	42a3      	cmp	r3, r4
 8008fc2:	dd24      	ble.n	800900e <_strtol_l.constprop.0+0xc6>
 8008fc4:	f1bc 0f00 	cmp.w	ip, #0
 8008fc8:	db1e      	blt.n	8009008 <_strtol_l.constprop.0+0xc0>
 8008fca:	45b1      	cmp	r9, r6
 8008fcc:	d31c      	bcc.n	8009008 <_strtol_l.constprop.0+0xc0>
 8008fce:	d101      	bne.n	8008fd4 <_strtol_l.constprop.0+0x8c>
 8008fd0:	45a2      	cmp	sl, r4
 8008fd2:	db19      	blt.n	8009008 <_strtol_l.constprop.0+0xc0>
 8008fd4:	fb06 4603 	mla	r6, r6, r3, r4
 8008fd8:	f04f 0c01 	mov.w	ip, #1
 8008fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fe0:	e7e8      	b.n	8008fb4 <_strtol_l.constprop.0+0x6c>
 8008fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8008fe4:	bf04      	itt	eq
 8008fe6:	782c      	ldrbeq	r4, [r5, #0]
 8008fe8:	1cb5      	addeq	r5, r6, #2
 8008fea:	e7ca      	b.n	8008f82 <_strtol_l.constprop.0+0x3a>
 8008fec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008ff0:	f1be 0f19 	cmp.w	lr, #25
 8008ff4:	d801      	bhi.n	8008ffa <_strtol_l.constprop.0+0xb2>
 8008ff6:	3c37      	subs	r4, #55	; 0x37
 8008ff8:	e7e2      	b.n	8008fc0 <_strtol_l.constprop.0+0x78>
 8008ffa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008ffe:	f1be 0f19 	cmp.w	lr, #25
 8009002:	d804      	bhi.n	800900e <_strtol_l.constprop.0+0xc6>
 8009004:	3c57      	subs	r4, #87	; 0x57
 8009006:	e7db      	b.n	8008fc0 <_strtol_l.constprop.0+0x78>
 8009008:	f04f 3cff 	mov.w	ip, #4294967295
 800900c:	e7e6      	b.n	8008fdc <_strtol_l.constprop.0+0x94>
 800900e:	f1bc 0f00 	cmp.w	ip, #0
 8009012:	da05      	bge.n	8009020 <_strtol_l.constprop.0+0xd8>
 8009014:	2322      	movs	r3, #34	; 0x22
 8009016:	6003      	str	r3, [r0, #0]
 8009018:	4646      	mov	r6, r8
 800901a:	b942      	cbnz	r2, 800902e <_strtol_l.constprop.0+0xe6>
 800901c:	4630      	mov	r0, r6
 800901e:	e79e      	b.n	8008f5e <_strtol_l.constprop.0+0x16>
 8009020:	b107      	cbz	r7, 8009024 <_strtol_l.constprop.0+0xdc>
 8009022:	4276      	negs	r6, r6
 8009024:	2a00      	cmp	r2, #0
 8009026:	d0f9      	beq.n	800901c <_strtol_l.constprop.0+0xd4>
 8009028:	f1bc 0f00 	cmp.w	ip, #0
 800902c:	d000      	beq.n	8009030 <_strtol_l.constprop.0+0xe8>
 800902e:	1e69      	subs	r1, r5, #1
 8009030:	6011      	str	r1, [r2, #0]
 8009032:	e7f3      	b.n	800901c <_strtol_l.constprop.0+0xd4>
 8009034:	2430      	movs	r4, #48	; 0x30
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1b1      	bne.n	8008f9e <_strtol_l.constprop.0+0x56>
 800903a:	2308      	movs	r3, #8
 800903c:	e7af      	b.n	8008f9e <_strtol_l.constprop.0+0x56>
 800903e:	2c30      	cmp	r4, #48	; 0x30
 8009040:	d0a5      	beq.n	8008f8e <_strtol_l.constprop.0+0x46>
 8009042:	230a      	movs	r3, #10
 8009044:	e7ab      	b.n	8008f9e <_strtol_l.constprop.0+0x56>
 8009046:	bf00      	nop
 8009048:	0800bc81 	.word	0x0800bc81

0800904c <_strtol_r>:
 800904c:	f7ff bf7c 	b.w	8008f48 <_strtol_l.constprop.0>

08009050 <__swbuf_r>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	460e      	mov	r6, r1
 8009054:	4614      	mov	r4, r2
 8009056:	4605      	mov	r5, r0
 8009058:	b118      	cbz	r0, 8009062 <__swbuf_r+0x12>
 800905a:	6983      	ldr	r3, [r0, #24]
 800905c:	b90b      	cbnz	r3, 8009062 <__swbuf_r+0x12>
 800905e:	f7fd ffef 	bl	8007040 <__sinit>
 8009062:	4b21      	ldr	r3, [pc, #132]	; (80090e8 <__swbuf_r+0x98>)
 8009064:	429c      	cmp	r4, r3
 8009066:	d12b      	bne.n	80090c0 <__swbuf_r+0x70>
 8009068:	686c      	ldr	r4, [r5, #4]
 800906a:	69a3      	ldr	r3, [r4, #24]
 800906c:	60a3      	str	r3, [r4, #8]
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	071a      	lsls	r2, r3, #28
 8009072:	d52f      	bpl.n	80090d4 <__swbuf_r+0x84>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	b36b      	cbz	r3, 80090d4 <__swbuf_r+0x84>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	6820      	ldr	r0, [r4, #0]
 800907c:	1ac0      	subs	r0, r0, r3
 800907e:	6963      	ldr	r3, [r4, #20]
 8009080:	b2f6      	uxtb	r6, r6
 8009082:	4283      	cmp	r3, r0
 8009084:	4637      	mov	r7, r6
 8009086:	dc04      	bgt.n	8009092 <__swbuf_r+0x42>
 8009088:	4621      	mov	r1, r4
 800908a:	4628      	mov	r0, r5
 800908c:	f000 ffc4 	bl	800a018 <_fflush_r>
 8009090:	bb30      	cbnz	r0, 80090e0 <__swbuf_r+0x90>
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	3b01      	subs	r3, #1
 8009096:	60a3      	str	r3, [r4, #8]
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	6022      	str	r2, [r4, #0]
 800909e:	701e      	strb	r6, [r3, #0]
 80090a0:	6963      	ldr	r3, [r4, #20]
 80090a2:	3001      	adds	r0, #1
 80090a4:	4283      	cmp	r3, r0
 80090a6:	d004      	beq.n	80090b2 <__swbuf_r+0x62>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	07db      	lsls	r3, r3, #31
 80090ac:	d506      	bpl.n	80090bc <__swbuf_r+0x6c>
 80090ae:	2e0a      	cmp	r6, #10
 80090b0:	d104      	bne.n	80090bc <__swbuf_r+0x6c>
 80090b2:	4621      	mov	r1, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	f000 ffaf 	bl	800a018 <_fflush_r>
 80090ba:	b988      	cbnz	r0, 80090e0 <__swbuf_r+0x90>
 80090bc:	4638      	mov	r0, r7
 80090be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c0:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <__swbuf_r+0x9c>)
 80090c2:	429c      	cmp	r4, r3
 80090c4:	d101      	bne.n	80090ca <__swbuf_r+0x7a>
 80090c6:	68ac      	ldr	r4, [r5, #8]
 80090c8:	e7cf      	b.n	800906a <__swbuf_r+0x1a>
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <__swbuf_r+0xa0>)
 80090cc:	429c      	cmp	r4, r3
 80090ce:	bf08      	it	eq
 80090d0:	68ec      	ldreq	r4, [r5, #12]
 80090d2:	e7ca      	b.n	800906a <__swbuf_r+0x1a>
 80090d4:	4621      	mov	r1, r4
 80090d6:	4628      	mov	r0, r5
 80090d8:	f000 f81e 	bl	8009118 <__swsetup_r>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d0cb      	beq.n	8009078 <__swbuf_r+0x28>
 80090e0:	f04f 37ff 	mov.w	r7, #4294967295
 80090e4:	e7ea      	b.n	80090bc <__swbuf_r+0x6c>
 80090e6:	bf00      	nop
 80090e8:	0800bbb0 	.word	0x0800bbb0
 80090ec:	0800bbd0 	.word	0x0800bbd0
 80090f0:	0800bb90 	.word	0x0800bb90

080090f4 <_write_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4d07      	ldr	r5, [pc, #28]	; (8009114 <_write_r+0x20>)
 80090f8:	4604      	mov	r4, r0
 80090fa:	4608      	mov	r0, r1
 80090fc:	4611      	mov	r1, r2
 80090fe:	2200      	movs	r2, #0
 8009100:	602a      	str	r2, [r5, #0]
 8009102:	461a      	mov	r2, r3
 8009104:	f7f8 f9bd 	bl	8001482 <_write>
 8009108:	1c43      	adds	r3, r0, #1
 800910a:	d102      	bne.n	8009112 <_write_r+0x1e>
 800910c:	682b      	ldr	r3, [r5, #0]
 800910e:	b103      	cbz	r3, 8009112 <_write_r+0x1e>
 8009110:	6023      	str	r3, [r4, #0]
 8009112:	bd38      	pop	{r3, r4, r5, pc}
 8009114:	20005348 	.word	0x20005348

08009118 <__swsetup_r>:
 8009118:	4b32      	ldr	r3, [pc, #200]	; (80091e4 <__swsetup_r+0xcc>)
 800911a:	b570      	push	{r4, r5, r6, lr}
 800911c:	681d      	ldr	r5, [r3, #0]
 800911e:	4606      	mov	r6, r0
 8009120:	460c      	mov	r4, r1
 8009122:	b125      	cbz	r5, 800912e <__swsetup_r+0x16>
 8009124:	69ab      	ldr	r3, [r5, #24]
 8009126:	b913      	cbnz	r3, 800912e <__swsetup_r+0x16>
 8009128:	4628      	mov	r0, r5
 800912a:	f7fd ff89 	bl	8007040 <__sinit>
 800912e:	4b2e      	ldr	r3, [pc, #184]	; (80091e8 <__swsetup_r+0xd0>)
 8009130:	429c      	cmp	r4, r3
 8009132:	d10f      	bne.n	8009154 <__swsetup_r+0x3c>
 8009134:	686c      	ldr	r4, [r5, #4]
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800913c:	0719      	lsls	r1, r3, #28
 800913e:	d42c      	bmi.n	800919a <__swsetup_r+0x82>
 8009140:	06dd      	lsls	r5, r3, #27
 8009142:	d411      	bmi.n	8009168 <__swsetup_r+0x50>
 8009144:	2309      	movs	r3, #9
 8009146:	6033      	str	r3, [r6, #0]
 8009148:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	f04f 30ff 	mov.w	r0, #4294967295
 8009152:	e03e      	b.n	80091d2 <__swsetup_r+0xba>
 8009154:	4b25      	ldr	r3, [pc, #148]	; (80091ec <__swsetup_r+0xd4>)
 8009156:	429c      	cmp	r4, r3
 8009158:	d101      	bne.n	800915e <__swsetup_r+0x46>
 800915a:	68ac      	ldr	r4, [r5, #8]
 800915c:	e7eb      	b.n	8009136 <__swsetup_r+0x1e>
 800915e:	4b24      	ldr	r3, [pc, #144]	; (80091f0 <__swsetup_r+0xd8>)
 8009160:	429c      	cmp	r4, r3
 8009162:	bf08      	it	eq
 8009164:	68ec      	ldreq	r4, [r5, #12]
 8009166:	e7e6      	b.n	8009136 <__swsetup_r+0x1e>
 8009168:	0758      	lsls	r0, r3, #29
 800916a:	d512      	bpl.n	8009192 <__swsetup_r+0x7a>
 800916c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800916e:	b141      	cbz	r1, 8009182 <__swsetup_r+0x6a>
 8009170:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009174:	4299      	cmp	r1, r3
 8009176:	d002      	beq.n	800917e <__swsetup_r+0x66>
 8009178:	4630      	mov	r0, r6
 800917a:	f002 f873 	bl	800b264 <_free_r>
 800917e:	2300      	movs	r3, #0
 8009180:	6363      	str	r3, [r4, #52]	; 0x34
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	2300      	movs	r3, #0
 800918c:	6063      	str	r3, [r4, #4]
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f043 0308 	orr.w	r3, r3, #8
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	6923      	ldr	r3, [r4, #16]
 800919c:	b94b      	cbnz	r3, 80091b2 <__swsetup_r+0x9a>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091a8:	d003      	beq.n	80091b2 <__swsetup_r+0x9a>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4630      	mov	r0, r6
 80091ae:	f001 fb1b 	bl	800a7e8 <__smakebuf_r>
 80091b2:	89a0      	ldrh	r0, [r4, #12]
 80091b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091b8:	f010 0301 	ands.w	r3, r0, #1
 80091bc:	d00a      	beq.n	80091d4 <__swsetup_r+0xbc>
 80091be:	2300      	movs	r3, #0
 80091c0:	60a3      	str	r3, [r4, #8]
 80091c2:	6963      	ldr	r3, [r4, #20]
 80091c4:	425b      	negs	r3, r3
 80091c6:	61a3      	str	r3, [r4, #24]
 80091c8:	6923      	ldr	r3, [r4, #16]
 80091ca:	b943      	cbnz	r3, 80091de <__swsetup_r+0xc6>
 80091cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091d0:	d1ba      	bne.n	8009148 <__swsetup_r+0x30>
 80091d2:	bd70      	pop	{r4, r5, r6, pc}
 80091d4:	0781      	lsls	r1, r0, #30
 80091d6:	bf58      	it	pl
 80091d8:	6963      	ldrpl	r3, [r4, #20]
 80091da:	60a3      	str	r3, [r4, #8]
 80091dc:	e7f4      	b.n	80091c8 <__swsetup_r+0xb0>
 80091de:	2000      	movs	r0, #0
 80091e0:	e7f7      	b.n	80091d2 <__swsetup_r+0xba>
 80091e2:	bf00      	nop
 80091e4:	20000014 	.word	0x20000014
 80091e8:	0800bbb0 	.word	0x0800bbb0
 80091ec:	0800bbd0 	.word	0x0800bbd0
 80091f0:	0800bb90 	.word	0x0800bb90

080091f4 <_close_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d06      	ldr	r5, [pc, #24]	; (8009210 <_close_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7f8 f95b 	bl	80014ba <_close>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_close_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_close_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20005348 	.word	0x20005348

08009214 <quorem>:
 8009214:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	6903      	ldr	r3, [r0, #16]
 800921a:	690c      	ldr	r4, [r1, #16]
 800921c:	42a3      	cmp	r3, r4
 800921e:	4607      	mov	r7, r0
 8009220:	f2c0 8081 	blt.w	8009326 <quorem+0x112>
 8009224:	3c01      	subs	r4, #1
 8009226:	f101 0814 	add.w	r8, r1, #20
 800922a:	f100 0514 	add.w	r5, r0, #20
 800922e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009238:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800923c:	3301      	adds	r3, #1
 800923e:	429a      	cmp	r2, r3
 8009240:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009248:	fbb2 f6f3 	udiv	r6, r2, r3
 800924c:	d331      	bcc.n	80092b2 <quorem+0x9e>
 800924e:	f04f 0e00 	mov.w	lr, #0
 8009252:	4640      	mov	r0, r8
 8009254:	46ac      	mov	ip, r5
 8009256:	46f2      	mov	sl, lr
 8009258:	f850 2b04 	ldr.w	r2, [r0], #4
 800925c:	b293      	uxth	r3, r2
 800925e:	fb06 e303 	mla	r3, r6, r3, lr
 8009262:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009266:	b29b      	uxth	r3, r3
 8009268:	ebaa 0303 	sub.w	r3, sl, r3
 800926c:	f8dc a000 	ldr.w	sl, [ip]
 8009270:	0c12      	lsrs	r2, r2, #16
 8009272:	fa13 f38a 	uxtah	r3, r3, sl
 8009276:	fb06 e202 	mla	r2, r6, r2, lr
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	9b00      	ldr	r3, [sp, #0]
 800927e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009282:	b292      	uxth	r2, r2
 8009284:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800928c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009290:	4581      	cmp	r9, r0
 8009292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009296:	f84c 3b04 	str.w	r3, [ip], #4
 800929a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800929e:	d2db      	bcs.n	8009258 <quorem+0x44>
 80092a0:	f855 300b 	ldr.w	r3, [r5, fp]
 80092a4:	b92b      	cbnz	r3, 80092b2 <quorem+0x9e>
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	3b04      	subs	r3, #4
 80092aa:	429d      	cmp	r5, r3
 80092ac:	461a      	mov	r2, r3
 80092ae:	d32e      	bcc.n	800930e <quorem+0xfa>
 80092b0:	613c      	str	r4, [r7, #16]
 80092b2:	4638      	mov	r0, r7
 80092b4:	f001 fdca 	bl	800ae4c <__mcmp>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	db24      	blt.n	8009306 <quorem+0xf2>
 80092bc:	3601      	adds	r6, #1
 80092be:	4628      	mov	r0, r5
 80092c0:	f04f 0c00 	mov.w	ip, #0
 80092c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80092c8:	f8d0 e000 	ldr.w	lr, [r0]
 80092cc:	b293      	uxth	r3, r2
 80092ce:	ebac 0303 	sub.w	r3, ip, r3
 80092d2:	0c12      	lsrs	r2, r2, #16
 80092d4:	fa13 f38e 	uxtah	r3, r3, lr
 80092d8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092e6:	45c1      	cmp	r9, r8
 80092e8:	f840 3b04 	str.w	r3, [r0], #4
 80092ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092f0:	d2e8      	bcs.n	80092c4 <quorem+0xb0>
 80092f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092fa:	b922      	cbnz	r2, 8009306 <quorem+0xf2>
 80092fc:	3b04      	subs	r3, #4
 80092fe:	429d      	cmp	r5, r3
 8009300:	461a      	mov	r2, r3
 8009302:	d30a      	bcc.n	800931a <quorem+0x106>
 8009304:	613c      	str	r4, [r7, #16]
 8009306:	4630      	mov	r0, r6
 8009308:	b003      	add	sp, #12
 800930a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930e:	6812      	ldr	r2, [r2, #0]
 8009310:	3b04      	subs	r3, #4
 8009312:	2a00      	cmp	r2, #0
 8009314:	d1cc      	bne.n	80092b0 <quorem+0x9c>
 8009316:	3c01      	subs	r4, #1
 8009318:	e7c7      	b.n	80092aa <quorem+0x96>
 800931a:	6812      	ldr	r2, [r2, #0]
 800931c:	3b04      	subs	r3, #4
 800931e:	2a00      	cmp	r2, #0
 8009320:	d1f0      	bne.n	8009304 <quorem+0xf0>
 8009322:	3c01      	subs	r4, #1
 8009324:	e7eb      	b.n	80092fe <quorem+0xea>
 8009326:	2000      	movs	r0, #0
 8009328:	e7ee      	b.n	8009308 <quorem+0xf4>
 800932a:	0000      	movs	r0, r0
 800932c:	0000      	movs	r0, r0
	...

08009330 <_dtoa_r>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	ed2d 8b04 	vpush	{d8-d9}
 8009338:	ec57 6b10 	vmov	r6, r7, d0
 800933c:	b093      	sub	sp, #76	; 0x4c
 800933e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009340:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009344:	9106      	str	r1, [sp, #24]
 8009346:	ee10 aa10 	vmov	sl, s0
 800934a:	4604      	mov	r4, r0
 800934c:	9209      	str	r2, [sp, #36]	; 0x24
 800934e:	930c      	str	r3, [sp, #48]	; 0x30
 8009350:	46bb      	mov	fp, r7
 8009352:	b975      	cbnz	r5, 8009372 <_dtoa_r+0x42>
 8009354:	2010      	movs	r0, #16
 8009356:	f001 fa87 	bl	800a868 <malloc>
 800935a:	4602      	mov	r2, r0
 800935c:	6260      	str	r0, [r4, #36]	; 0x24
 800935e:	b920      	cbnz	r0, 800936a <_dtoa_r+0x3a>
 8009360:	4ba7      	ldr	r3, [pc, #668]	; (8009600 <_dtoa_r+0x2d0>)
 8009362:	21ea      	movs	r1, #234	; 0xea
 8009364:	48a7      	ldr	r0, [pc, #668]	; (8009604 <_dtoa_r+0x2d4>)
 8009366:	f002 fabd 	bl	800b8e4 <__assert_func>
 800936a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800936e:	6005      	str	r5, [r0, #0]
 8009370:	60c5      	str	r5, [r0, #12]
 8009372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009374:	6819      	ldr	r1, [r3, #0]
 8009376:	b151      	cbz	r1, 800938e <_dtoa_r+0x5e>
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	604a      	str	r2, [r1, #4]
 800937c:	2301      	movs	r3, #1
 800937e:	4093      	lsls	r3, r2
 8009380:	608b      	str	r3, [r1, #8]
 8009382:	4620      	mov	r0, r4
 8009384:	f001 fad6 	bl	800a934 <_Bfree>
 8009388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800938a:	2200      	movs	r2, #0
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	1e3b      	subs	r3, r7, #0
 8009390:	bfaa      	itet	ge
 8009392:	2300      	movge	r3, #0
 8009394:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009398:	f8c8 3000 	strge.w	r3, [r8]
 800939c:	4b9a      	ldr	r3, [pc, #616]	; (8009608 <_dtoa_r+0x2d8>)
 800939e:	bfbc      	itt	lt
 80093a0:	2201      	movlt	r2, #1
 80093a2:	f8c8 2000 	strlt.w	r2, [r8]
 80093a6:	ea33 030b 	bics.w	r3, r3, fp
 80093aa:	d11b      	bne.n	80093e4 <_dtoa_r+0xb4>
 80093ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093b8:	4333      	orrs	r3, r6
 80093ba:	f000 8592 	beq.w	8009ee2 <_dtoa_r+0xbb2>
 80093be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c0:	b963      	cbnz	r3, 80093dc <_dtoa_r+0xac>
 80093c2:	4b92      	ldr	r3, [pc, #584]	; (800960c <_dtoa_r+0x2dc>)
 80093c4:	e022      	b.n	800940c <_dtoa_r+0xdc>
 80093c6:	4b92      	ldr	r3, [pc, #584]	; (8009610 <_dtoa_r+0x2e0>)
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	3308      	adds	r3, #8
 80093cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	9801      	ldr	r0, [sp, #4]
 80093d2:	b013      	add	sp, #76	; 0x4c
 80093d4:	ecbd 8b04 	vpop	{d8-d9}
 80093d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093dc:	4b8b      	ldr	r3, [pc, #556]	; (800960c <_dtoa_r+0x2dc>)
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	3303      	adds	r3, #3
 80093e2:	e7f3      	b.n	80093cc <_dtoa_r+0x9c>
 80093e4:	2200      	movs	r2, #0
 80093e6:	2300      	movs	r3, #0
 80093e8:	4650      	mov	r0, sl
 80093ea:	4659      	mov	r1, fp
 80093ec:	f7f7 fb7c 	bl	8000ae8 <__aeabi_dcmpeq>
 80093f0:	ec4b ab19 	vmov	d9, sl, fp
 80093f4:	4680      	mov	r8, r0
 80093f6:	b158      	cbz	r0, 8009410 <_dtoa_r+0xe0>
 80093f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093fa:	2301      	movs	r3, #1
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 856b 	beq.w	8009edc <_dtoa_r+0xbac>
 8009406:	4883      	ldr	r0, [pc, #524]	; (8009614 <_dtoa_r+0x2e4>)
 8009408:	6018      	str	r0, [r3, #0]
 800940a:	1e43      	subs	r3, r0, #1
 800940c:	9301      	str	r3, [sp, #4]
 800940e:	e7df      	b.n	80093d0 <_dtoa_r+0xa0>
 8009410:	ec4b ab10 	vmov	d0, sl, fp
 8009414:	aa10      	add	r2, sp, #64	; 0x40
 8009416:	a911      	add	r1, sp, #68	; 0x44
 8009418:	4620      	mov	r0, r4
 800941a:	f001 fe39 	bl	800b090 <__d2b>
 800941e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009422:	ee08 0a10 	vmov	s16, r0
 8009426:	2d00      	cmp	r5, #0
 8009428:	f000 8084 	beq.w	8009534 <_dtoa_r+0x204>
 800942c:	ee19 3a90 	vmov	r3, s19
 8009430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009434:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009438:	4656      	mov	r6, sl
 800943a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800943e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009442:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009446:	4b74      	ldr	r3, [pc, #464]	; (8009618 <_dtoa_r+0x2e8>)
 8009448:	2200      	movs	r2, #0
 800944a:	4630      	mov	r0, r6
 800944c:	4639      	mov	r1, r7
 800944e:	f7f6 ff2b 	bl	80002a8 <__aeabi_dsub>
 8009452:	a365      	add	r3, pc, #404	; (adr r3, 80095e8 <_dtoa_r+0x2b8>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	f7f7 f8de 	bl	8000618 <__aeabi_dmul>
 800945c:	a364      	add	r3, pc, #400	; (adr r3, 80095f0 <_dtoa_r+0x2c0>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	f7f6 ff23 	bl	80002ac <__adddf3>
 8009466:	4606      	mov	r6, r0
 8009468:	4628      	mov	r0, r5
 800946a:	460f      	mov	r7, r1
 800946c:	f7f7 f86a 	bl	8000544 <__aeabi_i2d>
 8009470:	a361      	add	r3, pc, #388	; (adr r3, 80095f8 <_dtoa_r+0x2c8>)
 8009472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009476:	f7f7 f8cf 	bl	8000618 <__aeabi_dmul>
 800947a:	4602      	mov	r2, r0
 800947c:	460b      	mov	r3, r1
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f6 ff13 	bl	80002ac <__adddf3>
 8009486:	4606      	mov	r6, r0
 8009488:	460f      	mov	r7, r1
 800948a:	f7f7 fb75 	bl	8000b78 <__aeabi_d2iz>
 800948e:	2200      	movs	r2, #0
 8009490:	9000      	str	r0, [sp, #0]
 8009492:	2300      	movs	r3, #0
 8009494:	4630      	mov	r0, r6
 8009496:	4639      	mov	r1, r7
 8009498:	f7f7 fb30 	bl	8000afc <__aeabi_dcmplt>
 800949c:	b150      	cbz	r0, 80094b4 <_dtoa_r+0x184>
 800949e:	9800      	ldr	r0, [sp, #0]
 80094a0:	f7f7 f850 	bl	8000544 <__aeabi_i2d>
 80094a4:	4632      	mov	r2, r6
 80094a6:	463b      	mov	r3, r7
 80094a8:	f7f7 fb1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80094ac:	b910      	cbnz	r0, 80094b4 <_dtoa_r+0x184>
 80094ae:	9b00      	ldr	r3, [sp, #0]
 80094b0:	3b01      	subs	r3, #1
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	9b00      	ldr	r3, [sp, #0]
 80094b6:	2b16      	cmp	r3, #22
 80094b8:	d85a      	bhi.n	8009570 <_dtoa_r+0x240>
 80094ba:	9a00      	ldr	r2, [sp, #0]
 80094bc:	4b57      	ldr	r3, [pc, #348]	; (800961c <_dtoa_r+0x2ec>)
 80094be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c6:	ec51 0b19 	vmov	r0, r1, d9
 80094ca:	f7f7 fb17 	bl	8000afc <__aeabi_dcmplt>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d050      	beq.n	8009574 <_dtoa_r+0x244>
 80094d2:	9b00      	ldr	r3, [sp, #0]
 80094d4:	3b01      	subs	r3, #1
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	2300      	movs	r3, #0
 80094da:	930b      	str	r3, [sp, #44]	; 0x2c
 80094dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094de:	1b5d      	subs	r5, r3, r5
 80094e0:	1e6b      	subs	r3, r5, #1
 80094e2:	9305      	str	r3, [sp, #20]
 80094e4:	bf45      	ittet	mi
 80094e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80094ea:	9304      	strmi	r3, [sp, #16]
 80094ec:	2300      	movpl	r3, #0
 80094ee:	2300      	movmi	r3, #0
 80094f0:	bf4c      	ite	mi
 80094f2:	9305      	strmi	r3, [sp, #20]
 80094f4:	9304      	strpl	r3, [sp, #16]
 80094f6:	9b00      	ldr	r3, [sp, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	db3d      	blt.n	8009578 <_dtoa_r+0x248>
 80094fc:	9b05      	ldr	r3, [sp, #20]
 80094fe:	9a00      	ldr	r2, [sp, #0]
 8009500:	920a      	str	r2, [sp, #40]	; 0x28
 8009502:	4413      	add	r3, r2
 8009504:	9305      	str	r3, [sp, #20]
 8009506:	2300      	movs	r3, #0
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	9b06      	ldr	r3, [sp, #24]
 800950c:	2b09      	cmp	r3, #9
 800950e:	f200 8089 	bhi.w	8009624 <_dtoa_r+0x2f4>
 8009512:	2b05      	cmp	r3, #5
 8009514:	bfc4      	itt	gt
 8009516:	3b04      	subgt	r3, #4
 8009518:	9306      	strgt	r3, [sp, #24]
 800951a:	9b06      	ldr	r3, [sp, #24]
 800951c:	f1a3 0302 	sub.w	r3, r3, #2
 8009520:	bfcc      	ite	gt
 8009522:	2500      	movgt	r5, #0
 8009524:	2501      	movle	r5, #1
 8009526:	2b03      	cmp	r3, #3
 8009528:	f200 8087 	bhi.w	800963a <_dtoa_r+0x30a>
 800952c:	e8df f003 	tbb	[pc, r3]
 8009530:	59383a2d 	.word	0x59383a2d
 8009534:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009538:	441d      	add	r5, r3
 800953a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800953e:	2b20      	cmp	r3, #32
 8009540:	bfc1      	itttt	gt
 8009542:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009546:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800954a:	fa0b f303 	lslgt.w	r3, fp, r3
 800954e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009552:	bfda      	itte	le
 8009554:	f1c3 0320 	rsble	r3, r3, #32
 8009558:	fa06 f003 	lslle.w	r0, r6, r3
 800955c:	4318      	orrgt	r0, r3
 800955e:	f7f6 ffe1 	bl	8000524 <__aeabi_ui2d>
 8009562:	2301      	movs	r3, #1
 8009564:	4606      	mov	r6, r0
 8009566:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800956a:	3d01      	subs	r5, #1
 800956c:	930e      	str	r3, [sp, #56]	; 0x38
 800956e:	e76a      	b.n	8009446 <_dtoa_r+0x116>
 8009570:	2301      	movs	r3, #1
 8009572:	e7b2      	b.n	80094da <_dtoa_r+0x1aa>
 8009574:	900b      	str	r0, [sp, #44]	; 0x2c
 8009576:	e7b1      	b.n	80094dc <_dtoa_r+0x1ac>
 8009578:	9b04      	ldr	r3, [sp, #16]
 800957a:	9a00      	ldr	r2, [sp, #0]
 800957c:	1a9b      	subs	r3, r3, r2
 800957e:	9304      	str	r3, [sp, #16]
 8009580:	4253      	negs	r3, r2
 8009582:	9307      	str	r3, [sp, #28]
 8009584:	2300      	movs	r3, #0
 8009586:	930a      	str	r3, [sp, #40]	; 0x28
 8009588:	e7bf      	b.n	800950a <_dtoa_r+0x1da>
 800958a:	2300      	movs	r3, #0
 800958c:	9308      	str	r3, [sp, #32]
 800958e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009590:	2b00      	cmp	r3, #0
 8009592:	dc55      	bgt.n	8009640 <_dtoa_r+0x310>
 8009594:	2301      	movs	r3, #1
 8009596:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800959a:	461a      	mov	r2, r3
 800959c:	9209      	str	r2, [sp, #36]	; 0x24
 800959e:	e00c      	b.n	80095ba <_dtoa_r+0x28a>
 80095a0:	2301      	movs	r3, #1
 80095a2:	e7f3      	b.n	800958c <_dtoa_r+0x25c>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095a8:	9308      	str	r3, [sp, #32]
 80095aa:	9b00      	ldr	r3, [sp, #0]
 80095ac:	4413      	add	r3, r2
 80095ae:	9302      	str	r3, [sp, #8]
 80095b0:	3301      	adds	r3, #1
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	bfb8      	it	lt
 80095b8:	2301      	movlt	r3, #1
 80095ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095bc:	2200      	movs	r2, #0
 80095be:	6042      	str	r2, [r0, #4]
 80095c0:	2204      	movs	r2, #4
 80095c2:	f102 0614 	add.w	r6, r2, #20
 80095c6:	429e      	cmp	r6, r3
 80095c8:	6841      	ldr	r1, [r0, #4]
 80095ca:	d93d      	bls.n	8009648 <_dtoa_r+0x318>
 80095cc:	4620      	mov	r0, r4
 80095ce:	f001 f971 	bl	800a8b4 <_Balloc>
 80095d2:	9001      	str	r0, [sp, #4]
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d13b      	bne.n	8009650 <_dtoa_r+0x320>
 80095d8:	4b11      	ldr	r3, [pc, #68]	; (8009620 <_dtoa_r+0x2f0>)
 80095da:	4602      	mov	r2, r0
 80095dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095e0:	e6c0      	b.n	8009364 <_dtoa_r+0x34>
 80095e2:	2301      	movs	r3, #1
 80095e4:	e7df      	b.n	80095a6 <_dtoa_r+0x276>
 80095e6:	bf00      	nop
 80095e8:	636f4361 	.word	0x636f4361
 80095ec:	3fd287a7 	.word	0x3fd287a7
 80095f0:	8b60c8b3 	.word	0x8b60c8b3
 80095f4:	3fc68a28 	.word	0x3fc68a28
 80095f8:	509f79fb 	.word	0x509f79fb
 80095fc:	3fd34413 	.word	0x3fd34413
 8009600:	0800bd8e 	.word	0x0800bd8e
 8009604:	0800bda5 	.word	0x0800bda5
 8009608:	7ff00000 	.word	0x7ff00000
 800960c:	0800bd8a 	.word	0x0800bd8a
 8009610:	0800bd81 	.word	0x0800bd81
 8009614:	0800bc05 	.word	0x0800bc05
 8009618:	3ff80000 	.word	0x3ff80000
 800961c:	0800bf10 	.word	0x0800bf10
 8009620:	0800be00 	.word	0x0800be00
 8009624:	2501      	movs	r5, #1
 8009626:	2300      	movs	r3, #0
 8009628:	9306      	str	r3, [sp, #24]
 800962a:	9508      	str	r5, [sp, #32]
 800962c:	f04f 33ff 	mov.w	r3, #4294967295
 8009630:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009634:	2200      	movs	r2, #0
 8009636:	2312      	movs	r3, #18
 8009638:	e7b0      	b.n	800959c <_dtoa_r+0x26c>
 800963a:	2301      	movs	r3, #1
 800963c:	9308      	str	r3, [sp, #32]
 800963e:	e7f5      	b.n	800962c <_dtoa_r+0x2fc>
 8009640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009642:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009646:	e7b8      	b.n	80095ba <_dtoa_r+0x28a>
 8009648:	3101      	adds	r1, #1
 800964a:	6041      	str	r1, [r0, #4]
 800964c:	0052      	lsls	r2, r2, #1
 800964e:	e7b8      	b.n	80095c2 <_dtoa_r+0x292>
 8009650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009652:	9a01      	ldr	r2, [sp, #4]
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	9b03      	ldr	r3, [sp, #12]
 8009658:	2b0e      	cmp	r3, #14
 800965a:	f200 809d 	bhi.w	8009798 <_dtoa_r+0x468>
 800965e:	2d00      	cmp	r5, #0
 8009660:	f000 809a 	beq.w	8009798 <_dtoa_r+0x468>
 8009664:	9b00      	ldr	r3, [sp, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	dd32      	ble.n	80096d0 <_dtoa_r+0x3a0>
 800966a:	4ab7      	ldr	r2, [pc, #732]	; (8009948 <_dtoa_r+0x618>)
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009674:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009678:	9b00      	ldr	r3, [sp, #0]
 800967a:	05d8      	lsls	r0, r3, #23
 800967c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009680:	d516      	bpl.n	80096b0 <_dtoa_r+0x380>
 8009682:	4bb2      	ldr	r3, [pc, #712]	; (800994c <_dtoa_r+0x61c>)
 8009684:	ec51 0b19 	vmov	r0, r1, d9
 8009688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800968c:	f7f7 f8ee 	bl	800086c <__aeabi_ddiv>
 8009690:	f007 070f 	and.w	r7, r7, #15
 8009694:	4682      	mov	sl, r0
 8009696:	468b      	mov	fp, r1
 8009698:	2503      	movs	r5, #3
 800969a:	4eac      	ldr	r6, [pc, #688]	; (800994c <_dtoa_r+0x61c>)
 800969c:	b957      	cbnz	r7, 80096b4 <_dtoa_r+0x384>
 800969e:	4642      	mov	r2, r8
 80096a0:	464b      	mov	r3, r9
 80096a2:	4650      	mov	r0, sl
 80096a4:	4659      	mov	r1, fp
 80096a6:	f7f7 f8e1 	bl	800086c <__aeabi_ddiv>
 80096aa:	4682      	mov	sl, r0
 80096ac:	468b      	mov	fp, r1
 80096ae:	e028      	b.n	8009702 <_dtoa_r+0x3d2>
 80096b0:	2502      	movs	r5, #2
 80096b2:	e7f2      	b.n	800969a <_dtoa_r+0x36a>
 80096b4:	07f9      	lsls	r1, r7, #31
 80096b6:	d508      	bpl.n	80096ca <_dtoa_r+0x39a>
 80096b8:	4640      	mov	r0, r8
 80096ba:	4649      	mov	r1, r9
 80096bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096c0:	f7f6 ffaa 	bl	8000618 <__aeabi_dmul>
 80096c4:	3501      	adds	r5, #1
 80096c6:	4680      	mov	r8, r0
 80096c8:	4689      	mov	r9, r1
 80096ca:	107f      	asrs	r7, r7, #1
 80096cc:	3608      	adds	r6, #8
 80096ce:	e7e5      	b.n	800969c <_dtoa_r+0x36c>
 80096d0:	f000 809b 	beq.w	800980a <_dtoa_r+0x4da>
 80096d4:	9b00      	ldr	r3, [sp, #0]
 80096d6:	4f9d      	ldr	r7, [pc, #628]	; (800994c <_dtoa_r+0x61c>)
 80096d8:	425e      	negs	r6, r3
 80096da:	4b9b      	ldr	r3, [pc, #620]	; (8009948 <_dtoa_r+0x618>)
 80096dc:	f006 020f 	and.w	r2, r6, #15
 80096e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e8:	ec51 0b19 	vmov	r0, r1, d9
 80096ec:	f7f6 ff94 	bl	8000618 <__aeabi_dmul>
 80096f0:	1136      	asrs	r6, r6, #4
 80096f2:	4682      	mov	sl, r0
 80096f4:	468b      	mov	fp, r1
 80096f6:	2300      	movs	r3, #0
 80096f8:	2502      	movs	r5, #2
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d17a      	bne.n	80097f4 <_dtoa_r+0x4c4>
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1d3      	bne.n	80096aa <_dtoa_r+0x37a>
 8009702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009704:	2b00      	cmp	r3, #0
 8009706:	f000 8082 	beq.w	800980e <_dtoa_r+0x4de>
 800970a:	4b91      	ldr	r3, [pc, #580]	; (8009950 <_dtoa_r+0x620>)
 800970c:	2200      	movs	r2, #0
 800970e:	4650      	mov	r0, sl
 8009710:	4659      	mov	r1, fp
 8009712:	f7f7 f9f3 	bl	8000afc <__aeabi_dcmplt>
 8009716:	2800      	cmp	r0, #0
 8009718:	d079      	beq.n	800980e <_dtoa_r+0x4de>
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d076      	beq.n	800980e <_dtoa_r+0x4de>
 8009720:	9b02      	ldr	r3, [sp, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	dd36      	ble.n	8009794 <_dtoa_r+0x464>
 8009726:	9b00      	ldr	r3, [sp, #0]
 8009728:	4650      	mov	r0, sl
 800972a:	4659      	mov	r1, fp
 800972c:	1e5f      	subs	r7, r3, #1
 800972e:	2200      	movs	r2, #0
 8009730:	4b88      	ldr	r3, [pc, #544]	; (8009954 <_dtoa_r+0x624>)
 8009732:	f7f6 ff71 	bl	8000618 <__aeabi_dmul>
 8009736:	9e02      	ldr	r6, [sp, #8]
 8009738:	4682      	mov	sl, r0
 800973a:	468b      	mov	fp, r1
 800973c:	3501      	adds	r5, #1
 800973e:	4628      	mov	r0, r5
 8009740:	f7f6 ff00 	bl	8000544 <__aeabi_i2d>
 8009744:	4652      	mov	r2, sl
 8009746:	465b      	mov	r3, fp
 8009748:	f7f6 ff66 	bl	8000618 <__aeabi_dmul>
 800974c:	4b82      	ldr	r3, [pc, #520]	; (8009958 <_dtoa_r+0x628>)
 800974e:	2200      	movs	r2, #0
 8009750:	f7f6 fdac 	bl	80002ac <__adddf3>
 8009754:	46d0      	mov	r8, sl
 8009756:	46d9      	mov	r9, fp
 8009758:	4682      	mov	sl, r0
 800975a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800975e:	2e00      	cmp	r6, #0
 8009760:	d158      	bne.n	8009814 <_dtoa_r+0x4e4>
 8009762:	4b7e      	ldr	r3, [pc, #504]	; (800995c <_dtoa_r+0x62c>)
 8009764:	2200      	movs	r2, #0
 8009766:	4640      	mov	r0, r8
 8009768:	4649      	mov	r1, r9
 800976a:	f7f6 fd9d 	bl	80002a8 <__aeabi_dsub>
 800976e:	4652      	mov	r2, sl
 8009770:	465b      	mov	r3, fp
 8009772:	4680      	mov	r8, r0
 8009774:	4689      	mov	r9, r1
 8009776:	f7f7 f9df 	bl	8000b38 <__aeabi_dcmpgt>
 800977a:	2800      	cmp	r0, #0
 800977c:	f040 8295 	bne.w	8009caa <_dtoa_r+0x97a>
 8009780:	4652      	mov	r2, sl
 8009782:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009786:	4640      	mov	r0, r8
 8009788:	4649      	mov	r1, r9
 800978a:	f7f7 f9b7 	bl	8000afc <__aeabi_dcmplt>
 800978e:	2800      	cmp	r0, #0
 8009790:	f040 8289 	bne.w	8009ca6 <_dtoa_r+0x976>
 8009794:	ec5b ab19 	vmov	sl, fp, d9
 8009798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800979a:	2b00      	cmp	r3, #0
 800979c:	f2c0 8148 	blt.w	8009a30 <_dtoa_r+0x700>
 80097a0:	9a00      	ldr	r2, [sp, #0]
 80097a2:	2a0e      	cmp	r2, #14
 80097a4:	f300 8144 	bgt.w	8009a30 <_dtoa_r+0x700>
 80097a8:	4b67      	ldr	r3, [pc, #412]	; (8009948 <_dtoa_r+0x618>)
 80097aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f280 80d5 	bge.w	8009964 <_dtoa_r+0x634>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f300 80d1 	bgt.w	8009964 <_dtoa_r+0x634>
 80097c2:	f040 826f 	bne.w	8009ca4 <_dtoa_r+0x974>
 80097c6:	4b65      	ldr	r3, [pc, #404]	; (800995c <_dtoa_r+0x62c>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	4640      	mov	r0, r8
 80097cc:	4649      	mov	r1, r9
 80097ce:	f7f6 ff23 	bl	8000618 <__aeabi_dmul>
 80097d2:	4652      	mov	r2, sl
 80097d4:	465b      	mov	r3, fp
 80097d6:	f7f7 f9a5 	bl	8000b24 <__aeabi_dcmpge>
 80097da:	9e03      	ldr	r6, [sp, #12]
 80097dc:	4637      	mov	r7, r6
 80097de:	2800      	cmp	r0, #0
 80097e0:	f040 8245 	bne.w	8009c6e <_dtoa_r+0x93e>
 80097e4:	9d01      	ldr	r5, [sp, #4]
 80097e6:	2331      	movs	r3, #49	; 0x31
 80097e8:	f805 3b01 	strb.w	r3, [r5], #1
 80097ec:	9b00      	ldr	r3, [sp, #0]
 80097ee:	3301      	adds	r3, #1
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	e240      	b.n	8009c76 <_dtoa_r+0x946>
 80097f4:	07f2      	lsls	r2, r6, #31
 80097f6:	d505      	bpl.n	8009804 <_dtoa_r+0x4d4>
 80097f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fc:	f7f6 ff0c 	bl	8000618 <__aeabi_dmul>
 8009800:	3501      	adds	r5, #1
 8009802:	2301      	movs	r3, #1
 8009804:	1076      	asrs	r6, r6, #1
 8009806:	3708      	adds	r7, #8
 8009808:	e777      	b.n	80096fa <_dtoa_r+0x3ca>
 800980a:	2502      	movs	r5, #2
 800980c:	e779      	b.n	8009702 <_dtoa_r+0x3d2>
 800980e:	9f00      	ldr	r7, [sp, #0]
 8009810:	9e03      	ldr	r6, [sp, #12]
 8009812:	e794      	b.n	800973e <_dtoa_r+0x40e>
 8009814:	9901      	ldr	r1, [sp, #4]
 8009816:	4b4c      	ldr	r3, [pc, #304]	; (8009948 <_dtoa_r+0x618>)
 8009818:	4431      	add	r1, r6
 800981a:	910d      	str	r1, [sp, #52]	; 0x34
 800981c:	9908      	ldr	r1, [sp, #32]
 800981e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009822:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009826:	2900      	cmp	r1, #0
 8009828:	d043      	beq.n	80098b2 <_dtoa_r+0x582>
 800982a:	494d      	ldr	r1, [pc, #308]	; (8009960 <_dtoa_r+0x630>)
 800982c:	2000      	movs	r0, #0
 800982e:	f7f7 f81d 	bl	800086c <__aeabi_ddiv>
 8009832:	4652      	mov	r2, sl
 8009834:	465b      	mov	r3, fp
 8009836:	f7f6 fd37 	bl	80002a8 <__aeabi_dsub>
 800983a:	9d01      	ldr	r5, [sp, #4]
 800983c:	4682      	mov	sl, r0
 800983e:	468b      	mov	fp, r1
 8009840:	4649      	mov	r1, r9
 8009842:	4640      	mov	r0, r8
 8009844:	f7f7 f998 	bl	8000b78 <__aeabi_d2iz>
 8009848:	4606      	mov	r6, r0
 800984a:	f7f6 fe7b 	bl	8000544 <__aeabi_i2d>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	4640      	mov	r0, r8
 8009854:	4649      	mov	r1, r9
 8009856:	f7f6 fd27 	bl	80002a8 <__aeabi_dsub>
 800985a:	3630      	adds	r6, #48	; 0x30
 800985c:	f805 6b01 	strb.w	r6, [r5], #1
 8009860:	4652      	mov	r2, sl
 8009862:	465b      	mov	r3, fp
 8009864:	4680      	mov	r8, r0
 8009866:	4689      	mov	r9, r1
 8009868:	f7f7 f948 	bl	8000afc <__aeabi_dcmplt>
 800986c:	2800      	cmp	r0, #0
 800986e:	d163      	bne.n	8009938 <_dtoa_r+0x608>
 8009870:	4642      	mov	r2, r8
 8009872:	464b      	mov	r3, r9
 8009874:	4936      	ldr	r1, [pc, #216]	; (8009950 <_dtoa_r+0x620>)
 8009876:	2000      	movs	r0, #0
 8009878:	f7f6 fd16 	bl	80002a8 <__aeabi_dsub>
 800987c:	4652      	mov	r2, sl
 800987e:	465b      	mov	r3, fp
 8009880:	f7f7 f93c 	bl	8000afc <__aeabi_dcmplt>
 8009884:	2800      	cmp	r0, #0
 8009886:	f040 80b5 	bne.w	80099f4 <_dtoa_r+0x6c4>
 800988a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800988c:	429d      	cmp	r5, r3
 800988e:	d081      	beq.n	8009794 <_dtoa_r+0x464>
 8009890:	4b30      	ldr	r3, [pc, #192]	; (8009954 <_dtoa_r+0x624>)
 8009892:	2200      	movs	r2, #0
 8009894:	4650      	mov	r0, sl
 8009896:	4659      	mov	r1, fp
 8009898:	f7f6 febe 	bl	8000618 <__aeabi_dmul>
 800989c:	4b2d      	ldr	r3, [pc, #180]	; (8009954 <_dtoa_r+0x624>)
 800989e:	4682      	mov	sl, r0
 80098a0:	468b      	mov	fp, r1
 80098a2:	4640      	mov	r0, r8
 80098a4:	4649      	mov	r1, r9
 80098a6:	2200      	movs	r2, #0
 80098a8:	f7f6 feb6 	bl	8000618 <__aeabi_dmul>
 80098ac:	4680      	mov	r8, r0
 80098ae:	4689      	mov	r9, r1
 80098b0:	e7c6      	b.n	8009840 <_dtoa_r+0x510>
 80098b2:	4650      	mov	r0, sl
 80098b4:	4659      	mov	r1, fp
 80098b6:	f7f6 feaf 	bl	8000618 <__aeabi_dmul>
 80098ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098bc:	9d01      	ldr	r5, [sp, #4]
 80098be:	930f      	str	r3, [sp, #60]	; 0x3c
 80098c0:	4682      	mov	sl, r0
 80098c2:	468b      	mov	fp, r1
 80098c4:	4649      	mov	r1, r9
 80098c6:	4640      	mov	r0, r8
 80098c8:	f7f7 f956 	bl	8000b78 <__aeabi_d2iz>
 80098cc:	4606      	mov	r6, r0
 80098ce:	f7f6 fe39 	bl	8000544 <__aeabi_i2d>
 80098d2:	3630      	adds	r6, #48	; 0x30
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4640      	mov	r0, r8
 80098da:	4649      	mov	r1, r9
 80098dc:	f7f6 fce4 	bl	80002a8 <__aeabi_dsub>
 80098e0:	f805 6b01 	strb.w	r6, [r5], #1
 80098e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098e6:	429d      	cmp	r5, r3
 80098e8:	4680      	mov	r8, r0
 80098ea:	4689      	mov	r9, r1
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	d124      	bne.n	800993c <_dtoa_r+0x60c>
 80098f2:	4b1b      	ldr	r3, [pc, #108]	; (8009960 <_dtoa_r+0x630>)
 80098f4:	4650      	mov	r0, sl
 80098f6:	4659      	mov	r1, fp
 80098f8:	f7f6 fcd8 	bl	80002ac <__adddf3>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	4640      	mov	r0, r8
 8009902:	4649      	mov	r1, r9
 8009904:	f7f7 f918 	bl	8000b38 <__aeabi_dcmpgt>
 8009908:	2800      	cmp	r0, #0
 800990a:	d173      	bne.n	80099f4 <_dtoa_r+0x6c4>
 800990c:	4652      	mov	r2, sl
 800990e:	465b      	mov	r3, fp
 8009910:	4913      	ldr	r1, [pc, #76]	; (8009960 <_dtoa_r+0x630>)
 8009912:	2000      	movs	r0, #0
 8009914:	f7f6 fcc8 	bl	80002a8 <__aeabi_dsub>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4640      	mov	r0, r8
 800991e:	4649      	mov	r1, r9
 8009920:	f7f7 f8ec 	bl	8000afc <__aeabi_dcmplt>
 8009924:	2800      	cmp	r0, #0
 8009926:	f43f af35 	beq.w	8009794 <_dtoa_r+0x464>
 800992a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800992c:	1e6b      	subs	r3, r5, #1
 800992e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009930:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009934:	2b30      	cmp	r3, #48	; 0x30
 8009936:	d0f8      	beq.n	800992a <_dtoa_r+0x5fa>
 8009938:	9700      	str	r7, [sp, #0]
 800993a:	e049      	b.n	80099d0 <_dtoa_r+0x6a0>
 800993c:	4b05      	ldr	r3, [pc, #20]	; (8009954 <_dtoa_r+0x624>)
 800993e:	f7f6 fe6b 	bl	8000618 <__aeabi_dmul>
 8009942:	4680      	mov	r8, r0
 8009944:	4689      	mov	r9, r1
 8009946:	e7bd      	b.n	80098c4 <_dtoa_r+0x594>
 8009948:	0800bf10 	.word	0x0800bf10
 800994c:	0800bee8 	.word	0x0800bee8
 8009950:	3ff00000 	.word	0x3ff00000
 8009954:	40240000 	.word	0x40240000
 8009958:	401c0000 	.word	0x401c0000
 800995c:	40140000 	.word	0x40140000
 8009960:	3fe00000 	.word	0x3fe00000
 8009964:	9d01      	ldr	r5, [sp, #4]
 8009966:	4656      	mov	r6, sl
 8009968:	465f      	mov	r7, fp
 800996a:	4642      	mov	r2, r8
 800996c:	464b      	mov	r3, r9
 800996e:	4630      	mov	r0, r6
 8009970:	4639      	mov	r1, r7
 8009972:	f7f6 ff7b 	bl	800086c <__aeabi_ddiv>
 8009976:	f7f7 f8ff 	bl	8000b78 <__aeabi_d2iz>
 800997a:	4682      	mov	sl, r0
 800997c:	f7f6 fde2 	bl	8000544 <__aeabi_i2d>
 8009980:	4642      	mov	r2, r8
 8009982:	464b      	mov	r3, r9
 8009984:	f7f6 fe48 	bl	8000618 <__aeabi_dmul>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	4630      	mov	r0, r6
 800998e:	4639      	mov	r1, r7
 8009990:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009994:	f7f6 fc88 	bl	80002a8 <__aeabi_dsub>
 8009998:	f805 6b01 	strb.w	r6, [r5], #1
 800999c:	9e01      	ldr	r6, [sp, #4]
 800999e:	9f03      	ldr	r7, [sp, #12]
 80099a0:	1bae      	subs	r6, r5, r6
 80099a2:	42b7      	cmp	r7, r6
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	d135      	bne.n	8009a16 <_dtoa_r+0x6e6>
 80099aa:	f7f6 fc7f 	bl	80002ac <__adddf3>
 80099ae:	4642      	mov	r2, r8
 80099b0:	464b      	mov	r3, r9
 80099b2:	4606      	mov	r6, r0
 80099b4:	460f      	mov	r7, r1
 80099b6:	f7f7 f8bf 	bl	8000b38 <__aeabi_dcmpgt>
 80099ba:	b9d0      	cbnz	r0, 80099f2 <_dtoa_r+0x6c2>
 80099bc:	4642      	mov	r2, r8
 80099be:	464b      	mov	r3, r9
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f7f7 f890 	bl	8000ae8 <__aeabi_dcmpeq>
 80099c8:	b110      	cbz	r0, 80099d0 <_dtoa_r+0x6a0>
 80099ca:	f01a 0f01 	tst.w	sl, #1
 80099ce:	d110      	bne.n	80099f2 <_dtoa_r+0x6c2>
 80099d0:	4620      	mov	r0, r4
 80099d2:	ee18 1a10 	vmov	r1, s16
 80099d6:	f000 ffad 	bl	800a934 <_Bfree>
 80099da:	2300      	movs	r3, #0
 80099dc:	9800      	ldr	r0, [sp, #0]
 80099de:	702b      	strb	r3, [r5, #0]
 80099e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099e2:	3001      	adds	r0, #1
 80099e4:	6018      	str	r0, [r3, #0]
 80099e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f43f acf1 	beq.w	80093d0 <_dtoa_r+0xa0>
 80099ee:	601d      	str	r5, [r3, #0]
 80099f0:	e4ee      	b.n	80093d0 <_dtoa_r+0xa0>
 80099f2:	9f00      	ldr	r7, [sp, #0]
 80099f4:	462b      	mov	r3, r5
 80099f6:	461d      	mov	r5, r3
 80099f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099fc:	2a39      	cmp	r2, #57	; 0x39
 80099fe:	d106      	bne.n	8009a0e <_dtoa_r+0x6de>
 8009a00:	9a01      	ldr	r2, [sp, #4]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d1f7      	bne.n	80099f6 <_dtoa_r+0x6c6>
 8009a06:	9901      	ldr	r1, [sp, #4]
 8009a08:	2230      	movs	r2, #48	; 0x30
 8009a0a:	3701      	adds	r7, #1
 8009a0c:	700a      	strb	r2, [r1, #0]
 8009a0e:	781a      	ldrb	r2, [r3, #0]
 8009a10:	3201      	adds	r2, #1
 8009a12:	701a      	strb	r2, [r3, #0]
 8009a14:	e790      	b.n	8009938 <_dtoa_r+0x608>
 8009a16:	4ba6      	ldr	r3, [pc, #664]	; (8009cb0 <_dtoa_r+0x980>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f7f6 fdfd 	bl	8000618 <__aeabi_dmul>
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2300      	movs	r3, #0
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	f7f7 f85f 	bl	8000ae8 <__aeabi_dcmpeq>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d09d      	beq.n	800996a <_dtoa_r+0x63a>
 8009a2e:	e7cf      	b.n	80099d0 <_dtoa_r+0x6a0>
 8009a30:	9a08      	ldr	r2, [sp, #32]
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	f000 80d7 	beq.w	8009be6 <_dtoa_r+0x8b6>
 8009a38:	9a06      	ldr	r2, [sp, #24]
 8009a3a:	2a01      	cmp	r2, #1
 8009a3c:	f300 80ba 	bgt.w	8009bb4 <_dtoa_r+0x884>
 8009a40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a42:	2a00      	cmp	r2, #0
 8009a44:	f000 80b2 	beq.w	8009bac <_dtoa_r+0x87c>
 8009a48:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a4c:	9e07      	ldr	r6, [sp, #28]
 8009a4e:	9d04      	ldr	r5, [sp, #16]
 8009a50:	9a04      	ldr	r2, [sp, #16]
 8009a52:	441a      	add	r2, r3
 8009a54:	9204      	str	r2, [sp, #16]
 8009a56:	9a05      	ldr	r2, [sp, #20]
 8009a58:	2101      	movs	r1, #1
 8009a5a:	441a      	add	r2, r3
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	9205      	str	r2, [sp, #20]
 8009a60:	f001 f86a 	bl	800ab38 <__i2b>
 8009a64:	4607      	mov	r7, r0
 8009a66:	2d00      	cmp	r5, #0
 8009a68:	dd0c      	ble.n	8009a84 <_dtoa_r+0x754>
 8009a6a:	9b05      	ldr	r3, [sp, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	dd09      	ble.n	8009a84 <_dtoa_r+0x754>
 8009a70:	42ab      	cmp	r3, r5
 8009a72:	9a04      	ldr	r2, [sp, #16]
 8009a74:	bfa8      	it	ge
 8009a76:	462b      	movge	r3, r5
 8009a78:	1ad2      	subs	r2, r2, r3
 8009a7a:	9204      	str	r2, [sp, #16]
 8009a7c:	9a05      	ldr	r2, [sp, #20]
 8009a7e:	1aed      	subs	r5, r5, r3
 8009a80:	1ad3      	subs	r3, r2, r3
 8009a82:	9305      	str	r3, [sp, #20]
 8009a84:	9b07      	ldr	r3, [sp, #28]
 8009a86:	b31b      	cbz	r3, 8009ad0 <_dtoa_r+0x7a0>
 8009a88:	9b08      	ldr	r3, [sp, #32]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 80af 	beq.w	8009bee <_dtoa_r+0x8be>
 8009a90:	2e00      	cmp	r6, #0
 8009a92:	dd13      	ble.n	8009abc <_dtoa_r+0x78c>
 8009a94:	4639      	mov	r1, r7
 8009a96:	4632      	mov	r2, r6
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f001 f90d 	bl	800acb8 <__pow5mult>
 8009a9e:	ee18 2a10 	vmov	r2, s16
 8009aa2:	4601      	mov	r1, r0
 8009aa4:	4607      	mov	r7, r0
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	f001 f85c 	bl	800ab64 <__multiply>
 8009aac:	ee18 1a10 	vmov	r1, s16
 8009ab0:	4680      	mov	r8, r0
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 ff3e 	bl	800a934 <_Bfree>
 8009ab8:	ee08 8a10 	vmov	s16, r8
 8009abc:	9b07      	ldr	r3, [sp, #28]
 8009abe:	1b9a      	subs	r2, r3, r6
 8009ac0:	d006      	beq.n	8009ad0 <_dtoa_r+0x7a0>
 8009ac2:	ee18 1a10 	vmov	r1, s16
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f001 f8f6 	bl	800acb8 <__pow5mult>
 8009acc:	ee08 0a10 	vmov	s16, r0
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f001 f830 	bl	800ab38 <__i2b>
 8009ad8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	4606      	mov	r6, r0
 8009ade:	f340 8088 	ble.w	8009bf2 <_dtoa_r+0x8c2>
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	4601      	mov	r1, r0
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f001 f8e6 	bl	800acb8 <__pow5mult>
 8009aec:	9b06      	ldr	r3, [sp, #24]
 8009aee:	2b01      	cmp	r3, #1
 8009af0:	4606      	mov	r6, r0
 8009af2:	f340 8081 	ble.w	8009bf8 <_dtoa_r+0x8c8>
 8009af6:	f04f 0800 	mov.w	r8, #0
 8009afa:	6933      	ldr	r3, [r6, #16]
 8009afc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b00:	6918      	ldr	r0, [r3, #16]
 8009b02:	f000 ffc9 	bl	800aa98 <__hi0bits>
 8009b06:	f1c0 0020 	rsb	r0, r0, #32
 8009b0a:	9b05      	ldr	r3, [sp, #20]
 8009b0c:	4418      	add	r0, r3
 8009b0e:	f010 001f 	ands.w	r0, r0, #31
 8009b12:	f000 8092 	beq.w	8009c3a <_dtoa_r+0x90a>
 8009b16:	f1c0 0320 	rsb	r3, r0, #32
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	f340 808a 	ble.w	8009c34 <_dtoa_r+0x904>
 8009b20:	f1c0 001c 	rsb	r0, r0, #28
 8009b24:	9b04      	ldr	r3, [sp, #16]
 8009b26:	4403      	add	r3, r0
 8009b28:	9304      	str	r3, [sp, #16]
 8009b2a:	9b05      	ldr	r3, [sp, #20]
 8009b2c:	4403      	add	r3, r0
 8009b2e:	4405      	add	r5, r0
 8009b30:	9305      	str	r3, [sp, #20]
 8009b32:	9b04      	ldr	r3, [sp, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	dd07      	ble.n	8009b48 <_dtoa_r+0x818>
 8009b38:	ee18 1a10 	vmov	r1, s16
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f001 f914 	bl	800ad6c <__lshift>
 8009b44:	ee08 0a10 	vmov	s16, r0
 8009b48:	9b05      	ldr	r3, [sp, #20]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	dd05      	ble.n	8009b5a <_dtoa_r+0x82a>
 8009b4e:	4631      	mov	r1, r6
 8009b50:	461a      	mov	r2, r3
 8009b52:	4620      	mov	r0, r4
 8009b54:	f001 f90a 	bl	800ad6c <__lshift>
 8009b58:	4606      	mov	r6, r0
 8009b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d06e      	beq.n	8009c3e <_dtoa_r+0x90e>
 8009b60:	ee18 0a10 	vmov	r0, s16
 8009b64:	4631      	mov	r1, r6
 8009b66:	f001 f971 	bl	800ae4c <__mcmp>
 8009b6a:	2800      	cmp	r0, #0
 8009b6c:	da67      	bge.n	8009c3e <_dtoa_r+0x90e>
 8009b6e:	9b00      	ldr	r3, [sp, #0]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	ee18 1a10 	vmov	r1, s16
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	220a      	movs	r2, #10
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fefb 	bl	800a978 <__multadd>
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	ee08 0a10 	vmov	s16, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 81b1 	beq.w	8009ef0 <_dtoa_r+0xbc0>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	4639      	mov	r1, r7
 8009b92:	220a      	movs	r2, #10
 8009b94:	4620      	mov	r0, r4
 8009b96:	f000 feef 	bl	800a978 <__multadd>
 8009b9a:	9b02      	ldr	r3, [sp, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	4607      	mov	r7, r0
 8009ba0:	f300 808e 	bgt.w	8009cc0 <_dtoa_r+0x990>
 8009ba4:	9b06      	ldr	r3, [sp, #24]
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	dc51      	bgt.n	8009c4e <_dtoa_r+0x91e>
 8009baa:	e089      	b.n	8009cc0 <_dtoa_r+0x990>
 8009bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bb2:	e74b      	b.n	8009a4c <_dtoa_r+0x71c>
 8009bb4:	9b03      	ldr	r3, [sp, #12]
 8009bb6:	1e5e      	subs	r6, r3, #1
 8009bb8:	9b07      	ldr	r3, [sp, #28]
 8009bba:	42b3      	cmp	r3, r6
 8009bbc:	bfbf      	itttt	lt
 8009bbe:	9b07      	ldrlt	r3, [sp, #28]
 8009bc0:	9607      	strlt	r6, [sp, #28]
 8009bc2:	1af2      	sublt	r2, r6, r3
 8009bc4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009bc6:	bfb6      	itet	lt
 8009bc8:	189b      	addlt	r3, r3, r2
 8009bca:	1b9e      	subge	r6, r3, r6
 8009bcc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009bce:	9b03      	ldr	r3, [sp, #12]
 8009bd0:	bfb8      	it	lt
 8009bd2:	2600      	movlt	r6, #0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	bfb7      	itett	lt
 8009bd8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009bdc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009be0:	1a9d      	sublt	r5, r3, r2
 8009be2:	2300      	movlt	r3, #0
 8009be4:	e734      	b.n	8009a50 <_dtoa_r+0x720>
 8009be6:	9e07      	ldr	r6, [sp, #28]
 8009be8:	9d04      	ldr	r5, [sp, #16]
 8009bea:	9f08      	ldr	r7, [sp, #32]
 8009bec:	e73b      	b.n	8009a66 <_dtoa_r+0x736>
 8009bee:	9a07      	ldr	r2, [sp, #28]
 8009bf0:	e767      	b.n	8009ac2 <_dtoa_r+0x792>
 8009bf2:	9b06      	ldr	r3, [sp, #24]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	dc18      	bgt.n	8009c2a <_dtoa_r+0x8fa>
 8009bf8:	f1ba 0f00 	cmp.w	sl, #0
 8009bfc:	d115      	bne.n	8009c2a <_dtoa_r+0x8fa>
 8009bfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c02:	b993      	cbnz	r3, 8009c2a <_dtoa_r+0x8fa>
 8009c04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c08:	0d1b      	lsrs	r3, r3, #20
 8009c0a:	051b      	lsls	r3, r3, #20
 8009c0c:	b183      	cbz	r3, 8009c30 <_dtoa_r+0x900>
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	3301      	adds	r3, #1
 8009c12:	9304      	str	r3, [sp, #16]
 8009c14:	9b05      	ldr	r3, [sp, #20]
 8009c16:	3301      	adds	r3, #1
 8009c18:	9305      	str	r3, [sp, #20]
 8009c1a:	f04f 0801 	mov.w	r8, #1
 8009c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f47f af6a 	bne.w	8009afa <_dtoa_r+0x7ca>
 8009c26:	2001      	movs	r0, #1
 8009c28:	e76f      	b.n	8009b0a <_dtoa_r+0x7da>
 8009c2a:	f04f 0800 	mov.w	r8, #0
 8009c2e:	e7f6      	b.n	8009c1e <_dtoa_r+0x8ee>
 8009c30:	4698      	mov	r8, r3
 8009c32:	e7f4      	b.n	8009c1e <_dtoa_r+0x8ee>
 8009c34:	f43f af7d 	beq.w	8009b32 <_dtoa_r+0x802>
 8009c38:	4618      	mov	r0, r3
 8009c3a:	301c      	adds	r0, #28
 8009c3c:	e772      	b.n	8009b24 <_dtoa_r+0x7f4>
 8009c3e:	9b03      	ldr	r3, [sp, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	dc37      	bgt.n	8009cb4 <_dtoa_r+0x984>
 8009c44:	9b06      	ldr	r3, [sp, #24]
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	dd34      	ble.n	8009cb4 <_dtoa_r+0x984>
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	9302      	str	r3, [sp, #8]
 8009c4e:	9b02      	ldr	r3, [sp, #8]
 8009c50:	b96b      	cbnz	r3, 8009c6e <_dtoa_r+0x93e>
 8009c52:	4631      	mov	r1, r6
 8009c54:	2205      	movs	r2, #5
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 fe8e 	bl	800a978 <__multadd>
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	4606      	mov	r6, r0
 8009c60:	ee18 0a10 	vmov	r0, s16
 8009c64:	f001 f8f2 	bl	800ae4c <__mcmp>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	f73f adbb 	bgt.w	80097e4 <_dtoa_r+0x4b4>
 8009c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c70:	9d01      	ldr	r5, [sp, #4]
 8009c72:	43db      	mvns	r3, r3
 8009c74:	9300      	str	r3, [sp, #0]
 8009c76:	f04f 0800 	mov.w	r8, #0
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fe59 	bl	800a934 <_Bfree>
 8009c82:	2f00      	cmp	r7, #0
 8009c84:	f43f aea4 	beq.w	80099d0 <_dtoa_r+0x6a0>
 8009c88:	f1b8 0f00 	cmp.w	r8, #0
 8009c8c:	d005      	beq.n	8009c9a <_dtoa_r+0x96a>
 8009c8e:	45b8      	cmp	r8, r7
 8009c90:	d003      	beq.n	8009c9a <_dtoa_r+0x96a>
 8009c92:	4641      	mov	r1, r8
 8009c94:	4620      	mov	r0, r4
 8009c96:	f000 fe4d 	bl	800a934 <_Bfree>
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 fe49 	bl	800a934 <_Bfree>
 8009ca2:	e695      	b.n	80099d0 <_dtoa_r+0x6a0>
 8009ca4:	2600      	movs	r6, #0
 8009ca6:	4637      	mov	r7, r6
 8009ca8:	e7e1      	b.n	8009c6e <_dtoa_r+0x93e>
 8009caa:	9700      	str	r7, [sp, #0]
 8009cac:	4637      	mov	r7, r6
 8009cae:	e599      	b.n	80097e4 <_dtoa_r+0x4b4>
 8009cb0:	40240000 	.word	0x40240000
 8009cb4:	9b08      	ldr	r3, [sp, #32]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80ca 	beq.w	8009e50 <_dtoa_r+0xb20>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	9302      	str	r3, [sp, #8]
 8009cc0:	2d00      	cmp	r5, #0
 8009cc2:	dd05      	ble.n	8009cd0 <_dtoa_r+0x9a0>
 8009cc4:	4639      	mov	r1, r7
 8009cc6:	462a      	mov	r2, r5
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f001 f84f 	bl	800ad6c <__lshift>
 8009cce:	4607      	mov	r7, r0
 8009cd0:	f1b8 0f00 	cmp.w	r8, #0
 8009cd4:	d05b      	beq.n	8009d8e <_dtoa_r+0xa5e>
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 fdeb 	bl	800a8b4 <_Balloc>
 8009cde:	4605      	mov	r5, r0
 8009ce0:	b928      	cbnz	r0, 8009cee <_dtoa_r+0x9be>
 8009ce2:	4b87      	ldr	r3, [pc, #540]	; (8009f00 <_dtoa_r+0xbd0>)
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009cea:	f7ff bb3b 	b.w	8009364 <_dtoa_r+0x34>
 8009cee:	693a      	ldr	r2, [r7, #16]
 8009cf0:	3202      	adds	r2, #2
 8009cf2:	0092      	lsls	r2, r2, #2
 8009cf4:	f107 010c 	add.w	r1, r7, #12
 8009cf8:	300c      	adds	r0, #12
 8009cfa:	f7fd fa66 	bl	80071ca <memcpy>
 8009cfe:	2201      	movs	r2, #1
 8009d00:	4629      	mov	r1, r5
 8009d02:	4620      	mov	r0, r4
 8009d04:	f001 f832 	bl	800ad6c <__lshift>
 8009d08:	9b01      	ldr	r3, [sp, #4]
 8009d0a:	f103 0901 	add.w	r9, r3, #1
 8009d0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009d12:	4413      	add	r3, r2
 8009d14:	9305      	str	r3, [sp, #20]
 8009d16:	f00a 0301 	and.w	r3, sl, #1
 8009d1a:	46b8      	mov	r8, r7
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	4607      	mov	r7, r0
 8009d20:	4631      	mov	r1, r6
 8009d22:	ee18 0a10 	vmov	r0, s16
 8009d26:	f7ff fa75 	bl	8009214 <quorem>
 8009d2a:	4641      	mov	r1, r8
 8009d2c:	9002      	str	r0, [sp, #8]
 8009d2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009d32:	ee18 0a10 	vmov	r0, s16
 8009d36:	f001 f889 	bl	800ae4c <__mcmp>
 8009d3a:	463a      	mov	r2, r7
 8009d3c:	9003      	str	r0, [sp, #12]
 8009d3e:	4631      	mov	r1, r6
 8009d40:	4620      	mov	r0, r4
 8009d42:	f001 f89f 	bl	800ae84 <__mdiff>
 8009d46:	68c2      	ldr	r2, [r0, #12]
 8009d48:	f109 3bff 	add.w	fp, r9, #4294967295
 8009d4c:	4605      	mov	r5, r0
 8009d4e:	bb02      	cbnz	r2, 8009d92 <_dtoa_r+0xa62>
 8009d50:	4601      	mov	r1, r0
 8009d52:	ee18 0a10 	vmov	r0, s16
 8009d56:	f001 f879 	bl	800ae4c <__mcmp>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4620      	mov	r0, r4
 8009d60:	9207      	str	r2, [sp, #28]
 8009d62:	f000 fde7 	bl	800a934 <_Bfree>
 8009d66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009d6a:	ea43 0102 	orr.w	r1, r3, r2
 8009d6e:	9b04      	ldr	r3, [sp, #16]
 8009d70:	430b      	orrs	r3, r1
 8009d72:	464d      	mov	r5, r9
 8009d74:	d10f      	bne.n	8009d96 <_dtoa_r+0xa66>
 8009d76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d7a:	d02a      	beq.n	8009dd2 <_dtoa_r+0xaa2>
 8009d7c:	9b03      	ldr	r3, [sp, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	dd02      	ble.n	8009d88 <_dtoa_r+0xa58>
 8009d82:	9b02      	ldr	r3, [sp, #8]
 8009d84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009d88:	f88b a000 	strb.w	sl, [fp]
 8009d8c:	e775      	b.n	8009c7a <_dtoa_r+0x94a>
 8009d8e:	4638      	mov	r0, r7
 8009d90:	e7ba      	b.n	8009d08 <_dtoa_r+0x9d8>
 8009d92:	2201      	movs	r2, #1
 8009d94:	e7e2      	b.n	8009d5c <_dtoa_r+0xa2c>
 8009d96:	9b03      	ldr	r3, [sp, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	db04      	blt.n	8009da6 <_dtoa_r+0xa76>
 8009d9c:	9906      	ldr	r1, [sp, #24]
 8009d9e:	430b      	orrs	r3, r1
 8009da0:	9904      	ldr	r1, [sp, #16]
 8009da2:	430b      	orrs	r3, r1
 8009da4:	d122      	bne.n	8009dec <_dtoa_r+0xabc>
 8009da6:	2a00      	cmp	r2, #0
 8009da8:	ddee      	ble.n	8009d88 <_dtoa_r+0xa58>
 8009daa:	ee18 1a10 	vmov	r1, s16
 8009dae:	2201      	movs	r2, #1
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 ffdb 	bl	800ad6c <__lshift>
 8009db6:	4631      	mov	r1, r6
 8009db8:	ee08 0a10 	vmov	s16, r0
 8009dbc:	f001 f846 	bl	800ae4c <__mcmp>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	dc03      	bgt.n	8009dcc <_dtoa_r+0xa9c>
 8009dc4:	d1e0      	bne.n	8009d88 <_dtoa_r+0xa58>
 8009dc6:	f01a 0f01 	tst.w	sl, #1
 8009dca:	d0dd      	beq.n	8009d88 <_dtoa_r+0xa58>
 8009dcc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009dd0:	d1d7      	bne.n	8009d82 <_dtoa_r+0xa52>
 8009dd2:	2339      	movs	r3, #57	; 0x39
 8009dd4:	f88b 3000 	strb.w	r3, [fp]
 8009dd8:	462b      	mov	r3, r5
 8009dda:	461d      	mov	r5, r3
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009de2:	2a39      	cmp	r2, #57	; 0x39
 8009de4:	d071      	beq.n	8009eca <_dtoa_r+0xb9a>
 8009de6:	3201      	adds	r2, #1
 8009de8:	701a      	strb	r2, [r3, #0]
 8009dea:	e746      	b.n	8009c7a <_dtoa_r+0x94a>
 8009dec:	2a00      	cmp	r2, #0
 8009dee:	dd07      	ble.n	8009e00 <_dtoa_r+0xad0>
 8009df0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009df4:	d0ed      	beq.n	8009dd2 <_dtoa_r+0xaa2>
 8009df6:	f10a 0301 	add.w	r3, sl, #1
 8009dfa:	f88b 3000 	strb.w	r3, [fp]
 8009dfe:	e73c      	b.n	8009c7a <_dtoa_r+0x94a>
 8009e00:	9b05      	ldr	r3, [sp, #20]
 8009e02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009e06:	4599      	cmp	r9, r3
 8009e08:	d047      	beq.n	8009e9a <_dtoa_r+0xb6a>
 8009e0a:	ee18 1a10 	vmov	r1, s16
 8009e0e:	2300      	movs	r3, #0
 8009e10:	220a      	movs	r2, #10
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 fdb0 	bl	800a978 <__multadd>
 8009e18:	45b8      	cmp	r8, r7
 8009e1a:	ee08 0a10 	vmov	s16, r0
 8009e1e:	f04f 0300 	mov.w	r3, #0
 8009e22:	f04f 020a 	mov.w	r2, #10
 8009e26:	4641      	mov	r1, r8
 8009e28:	4620      	mov	r0, r4
 8009e2a:	d106      	bne.n	8009e3a <_dtoa_r+0xb0a>
 8009e2c:	f000 fda4 	bl	800a978 <__multadd>
 8009e30:	4680      	mov	r8, r0
 8009e32:	4607      	mov	r7, r0
 8009e34:	f109 0901 	add.w	r9, r9, #1
 8009e38:	e772      	b.n	8009d20 <_dtoa_r+0x9f0>
 8009e3a:	f000 fd9d 	bl	800a978 <__multadd>
 8009e3e:	4639      	mov	r1, r7
 8009e40:	4680      	mov	r8, r0
 8009e42:	2300      	movs	r3, #0
 8009e44:	220a      	movs	r2, #10
 8009e46:	4620      	mov	r0, r4
 8009e48:	f000 fd96 	bl	800a978 <__multadd>
 8009e4c:	4607      	mov	r7, r0
 8009e4e:	e7f1      	b.n	8009e34 <_dtoa_r+0xb04>
 8009e50:	9b03      	ldr	r3, [sp, #12]
 8009e52:	9302      	str	r3, [sp, #8]
 8009e54:	9d01      	ldr	r5, [sp, #4]
 8009e56:	ee18 0a10 	vmov	r0, s16
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	f7ff f9da 	bl	8009214 <quorem>
 8009e60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	f805 ab01 	strb.w	sl, [r5], #1
 8009e6a:	1aea      	subs	r2, r5, r3
 8009e6c:	9b02      	ldr	r3, [sp, #8]
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	dd09      	ble.n	8009e86 <_dtoa_r+0xb56>
 8009e72:	ee18 1a10 	vmov	r1, s16
 8009e76:	2300      	movs	r3, #0
 8009e78:	220a      	movs	r2, #10
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 fd7c 	bl	800a978 <__multadd>
 8009e80:	ee08 0a10 	vmov	s16, r0
 8009e84:	e7e7      	b.n	8009e56 <_dtoa_r+0xb26>
 8009e86:	9b02      	ldr	r3, [sp, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bfc8      	it	gt
 8009e8c:	461d      	movgt	r5, r3
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	bfd8      	it	le
 8009e92:	2501      	movle	r5, #1
 8009e94:	441d      	add	r5, r3
 8009e96:	f04f 0800 	mov.w	r8, #0
 8009e9a:	ee18 1a10 	vmov	r1, s16
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 ff63 	bl	800ad6c <__lshift>
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	ee08 0a10 	vmov	s16, r0
 8009eac:	f000 ffce 	bl	800ae4c <__mcmp>
 8009eb0:	2800      	cmp	r0, #0
 8009eb2:	dc91      	bgt.n	8009dd8 <_dtoa_r+0xaa8>
 8009eb4:	d102      	bne.n	8009ebc <_dtoa_r+0xb8c>
 8009eb6:	f01a 0f01 	tst.w	sl, #1
 8009eba:	d18d      	bne.n	8009dd8 <_dtoa_r+0xaa8>
 8009ebc:	462b      	mov	r3, r5
 8009ebe:	461d      	mov	r5, r3
 8009ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ec4:	2a30      	cmp	r2, #48	; 0x30
 8009ec6:	d0fa      	beq.n	8009ebe <_dtoa_r+0xb8e>
 8009ec8:	e6d7      	b.n	8009c7a <_dtoa_r+0x94a>
 8009eca:	9a01      	ldr	r2, [sp, #4]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d184      	bne.n	8009dda <_dtoa_r+0xaaa>
 8009ed0:	9b00      	ldr	r3, [sp, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	9300      	str	r3, [sp, #0]
 8009ed6:	2331      	movs	r3, #49	; 0x31
 8009ed8:	7013      	strb	r3, [r2, #0]
 8009eda:	e6ce      	b.n	8009c7a <_dtoa_r+0x94a>
 8009edc:	4b09      	ldr	r3, [pc, #36]	; (8009f04 <_dtoa_r+0xbd4>)
 8009ede:	f7ff ba95 	b.w	800940c <_dtoa_r+0xdc>
 8009ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f47f aa6e 	bne.w	80093c6 <_dtoa_r+0x96>
 8009eea:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <_dtoa_r+0xbd8>)
 8009eec:	f7ff ba8e 	b.w	800940c <_dtoa_r+0xdc>
 8009ef0:	9b02      	ldr	r3, [sp, #8]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	dcae      	bgt.n	8009e54 <_dtoa_r+0xb24>
 8009ef6:	9b06      	ldr	r3, [sp, #24]
 8009ef8:	2b02      	cmp	r3, #2
 8009efa:	f73f aea8 	bgt.w	8009c4e <_dtoa_r+0x91e>
 8009efe:	e7a9      	b.n	8009e54 <_dtoa_r+0xb24>
 8009f00:	0800be00 	.word	0x0800be00
 8009f04:	0800bc04 	.word	0x0800bc04
 8009f08:	0800bd81 	.word	0x0800bd81

08009f0c <__sflush_r>:
 8009f0c:	898a      	ldrh	r2, [r1, #12]
 8009f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f12:	4605      	mov	r5, r0
 8009f14:	0710      	lsls	r0, r2, #28
 8009f16:	460c      	mov	r4, r1
 8009f18:	d458      	bmi.n	8009fcc <__sflush_r+0xc0>
 8009f1a:	684b      	ldr	r3, [r1, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	dc05      	bgt.n	8009f2c <__sflush_r+0x20>
 8009f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dc02      	bgt.n	8009f2c <__sflush_r+0x20>
 8009f26:	2000      	movs	r0, #0
 8009f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f2e:	2e00      	cmp	r6, #0
 8009f30:	d0f9      	beq.n	8009f26 <__sflush_r+0x1a>
 8009f32:	2300      	movs	r3, #0
 8009f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f38:	682f      	ldr	r7, [r5, #0]
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	d032      	beq.n	8009fa4 <__sflush_r+0x98>
 8009f3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f40:	89a3      	ldrh	r3, [r4, #12]
 8009f42:	075a      	lsls	r2, r3, #29
 8009f44:	d505      	bpl.n	8009f52 <__sflush_r+0x46>
 8009f46:	6863      	ldr	r3, [r4, #4]
 8009f48:	1ac0      	subs	r0, r0, r3
 8009f4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f4c:	b10b      	cbz	r3, 8009f52 <__sflush_r+0x46>
 8009f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f50:	1ac0      	subs	r0, r0, r3
 8009f52:	2300      	movs	r3, #0
 8009f54:	4602      	mov	r2, r0
 8009f56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f58:	6a21      	ldr	r1, [r4, #32]
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b0      	blx	r6
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	d106      	bne.n	8009f72 <__sflush_r+0x66>
 8009f64:	6829      	ldr	r1, [r5, #0]
 8009f66:	291d      	cmp	r1, #29
 8009f68:	d82c      	bhi.n	8009fc4 <__sflush_r+0xb8>
 8009f6a:	4a2a      	ldr	r2, [pc, #168]	; (800a014 <__sflush_r+0x108>)
 8009f6c:	40ca      	lsrs	r2, r1
 8009f6e:	07d6      	lsls	r6, r2, #31
 8009f70:	d528      	bpl.n	8009fc4 <__sflush_r+0xb8>
 8009f72:	2200      	movs	r2, #0
 8009f74:	6062      	str	r2, [r4, #4]
 8009f76:	04d9      	lsls	r1, r3, #19
 8009f78:	6922      	ldr	r2, [r4, #16]
 8009f7a:	6022      	str	r2, [r4, #0]
 8009f7c:	d504      	bpl.n	8009f88 <__sflush_r+0x7c>
 8009f7e:	1c42      	adds	r2, r0, #1
 8009f80:	d101      	bne.n	8009f86 <__sflush_r+0x7a>
 8009f82:	682b      	ldr	r3, [r5, #0]
 8009f84:	b903      	cbnz	r3, 8009f88 <__sflush_r+0x7c>
 8009f86:	6560      	str	r0, [r4, #84]	; 0x54
 8009f88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f8a:	602f      	str	r7, [r5, #0]
 8009f8c:	2900      	cmp	r1, #0
 8009f8e:	d0ca      	beq.n	8009f26 <__sflush_r+0x1a>
 8009f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f94:	4299      	cmp	r1, r3
 8009f96:	d002      	beq.n	8009f9e <__sflush_r+0x92>
 8009f98:	4628      	mov	r0, r5
 8009f9a:	f001 f963 	bl	800b264 <_free_r>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8009fa2:	e7c1      	b.n	8009f28 <__sflush_r+0x1c>
 8009fa4:	6a21      	ldr	r1, [r4, #32]
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	4628      	mov	r0, r5
 8009faa:	47b0      	blx	r6
 8009fac:	1c41      	adds	r1, r0, #1
 8009fae:	d1c7      	bne.n	8009f40 <__sflush_r+0x34>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d0c4      	beq.n	8009f40 <__sflush_r+0x34>
 8009fb6:	2b1d      	cmp	r3, #29
 8009fb8:	d001      	beq.n	8009fbe <__sflush_r+0xb2>
 8009fba:	2b16      	cmp	r3, #22
 8009fbc:	d101      	bne.n	8009fc2 <__sflush_r+0xb6>
 8009fbe:	602f      	str	r7, [r5, #0]
 8009fc0:	e7b1      	b.n	8009f26 <__sflush_r+0x1a>
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	e7ad      	b.n	8009f28 <__sflush_r+0x1c>
 8009fcc:	690f      	ldr	r7, [r1, #16]
 8009fce:	2f00      	cmp	r7, #0
 8009fd0:	d0a9      	beq.n	8009f26 <__sflush_r+0x1a>
 8009fd2:	0793      	lsls	r3, r2, #30
 8009fd4:	680e      	ldr	r6, [r1, #0]
 8009fd6:	bf08      	it	eq
 8009fd8:	694b      	ldreq	r3, [r1, #20]
 8009fda:	600f      	str	r7, [r1, #0]
 8009fdc:	bf18      	it	ne
 8009fde:	2300      	movne	r3, #0
 8009fe0:	eba6 0807 	sub.w	r8, r6, r7
 8009fe4:	608b      	str	r3, [r1, #8]
 8009fe6:	f1b8 0f00 	cmp.w	r8, #0
 8009fea:	dd9c      	ble.n	8009f26 <__sflush_r+0x1a>
 8009fec:	6a21      	ldr	r1, [r4, #32]
 8009fee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ff0:	4643      	mov	r3, r8
 8009ff2:	463a      	mov	r2, r7
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	47b0      	blx	r6
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	dc06      	bgt.n	800a00a <__sflush_r+0xfe>
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a002:	81a3      	strh	r3, [r4, #12]
 800a004:	f04f 30ff 	mov.w	r0, #4294967295
 800a008:	e78e      	b.n	8009f28 <__sflush_r+0x1c>
 800a00a:	4407      	add	r7, r0
 800a00c:	eba8 0800 	sub.w	r8, r8, r0
 800a010:	e7e9      	b.n	8009fe6 <__sflush_r+0xda>
 800a012:	bf00      	nop
 800a014:	20400001 	.word	0x20400001

0800a018 <_fflush_r>:
 800a018:	b538      	push	{r3, r4, r5, lr}
 800a01a:	690b      	ldr	r3, [r1, #16]
 800a01c:	4605      	mov	r5, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	b913      	cbnz	r3, 800a028 <_fflush_r+0x10>
 800a022:	2500      	movs	r5, #0
 800a024:	4628      	mov	r0, r5
 800a026:	bd38      	pop	{r3, r4, r5, pc}
 800a028:	b118      	cbz	r0, 800a032 <_fflush_r+0x1a>
 800a02a:	6983      	ldr	r3, [r0, #24]
 800a02c:	b90b      	cbnz	r3, 800a032 <_fflush_r+0x1a>
 800a02e:	f7fd f807 	bl	8007040 <__sinit>
 800a032:	4b14      	ldr	r3, [pc, #80]	; (800a084 <_fflush_r+0x6c>)
 800a034:	429c      	cmp	r4, r3
 800a036:	d11b      	bne.n	800a070 <_fflush_r+0x58>
 800a038:	686c      	ldr	r4, [r5, #4]
 800a03a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d0ef      	beq.n	800a022 <_fflush_r+0xa>
 800a042:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a044:	07d0      	lsls	r0, r2, #31
 800a046:	d404      	bmi.n	800a052 <_fflush_r+0x3a>
 800a048:	0599      	lsls	r1, r3, #22
 800a04a:	d402      	bmi.n	800a052 <_fflush_r+0x3a>
 800a04c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a04e:	f7fd f8ba 	bl	80071c6 <__retarget_lock_acquire_recursive>
 800a052:	4628      	mov	r0, r5
 800a054:	4621      	mov	r1, r4
 800a056:	f7ff ff59 	bl	8009f0c <__sflush_r>
 800a05a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a05c:	07da      	lsls	r2, r3, #31
 800a05e:	4605      	mov	r5, r0
 800a060:	d4e0      	bmi.n	800a024 <_fflush_r+0xc>
 800a062:	89a3      	ldrh	r3, [r4, #12]
 800a064:	059b      	lsls	r3, r3, #22
 800a066:	d4dd      	bmi.n	800a024 <_fflush_r+0xc>
 800a068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a06a:	f7fd f8ad 	bl	80071c8 <__retarget_lock_release_recursive>
 800a06e:	e7d9      	b.n	800a024 <_fflush_r+0xc>
 800a070:	4b05      	ldr	r3, [pc, #20]	; (800a088 <_fflush_r+0x70>)
 800a072:	429c      	cmp	r4, r3
 800a074:	d101      	bne.n	800a07a <_fflush_r+0x62>
 800a076:	68ac      	ldr	r4, [r5, #8]
 800a078:	e7df      	b.n	800a03a <_fflush_r+0x22>
 800a07a:	4b04      	ldr	r3, [pc, #16]	; (800a08c <_fflush_r+0x74>)
 800a07c:	429c      	cmp	r4, r3
 800a07e:	bf08      	it	eq
 800a080:	68ec      	ldreq	r4, [r5, #12]
 800a082:	e7da      	b.n	800a03a <_fflush_r+0x22>
 800a084:	0800bbb0 	.word	0x0800bbb0
 800a088:	0800bbd0 	.word	0x0800bbd0
 800a08c:	0800bb90 	.word	0x0800bb90

0800a090 <rshift>:
 800a090:	6903      	ldr	r3, [r0, #16]
 800a092:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a096:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a09a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a09e:	f100 0414 	add.w	r4, r0, #20
 800a0a2:	dd45      	ble.n	800a130 <rshift+0xa0>
 800a0a4:	f011 011f 	ands.w	r1, r1, #31
 800a0a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0b0:	d10c      	bne.n	800a0cc <rshift+0x3c>
 800a0b2:	f100 0710 	add.w	r7, r0, #16
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	42b1      	cmp	r1, r6
 800a0ba:	d334      	bcc.n	800a126 <rshift+0x96>
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	1eea      	subs	r2, r5, #3
 800a0c2:	4296      	cmp	r6, r2
 800a0c4:	bf38      	it	cc
 800a0c6:	2300      	movcc	r3, #0
 800a0c8:	4423      	add	r3, r4
 800a0ca:	e015      	b.n	800a0f8 <rshift+0x68>
 800a0cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0d0:	f1c1 0820 	rsb	r8, r1, #32
 800a0d4:	40cf      	lsrs	r7, r1
 800a0d6:	f105 0e04 	add.w	lr, r5, #4
 800a0da:	46a1      	mov	r9, r4
 800a0dc:	4576      	cmp	r6, lr
 800a0de:	46f4      	mov	ip, lr
 800a0e0:	d815      	bhi.n	800a10e <rshift+0x7e>
 800a0e2:	1a9a      	subs	r2, r3, r2
 800a0e4:	0092      	lsls	r2, r2, #2
 800a0e6:	3a04      	subs	r2, #4
 800a0e8:	3501      	adds	r5, #1
 800a0ea:	42ae      	cmp	r6, r5
 800a0ec:	bf38      	it	cc
 800a0ee:	2200      	movcc	r2, #0
 800a0f0:	18a3      	adds	r3, r4, r2
 800a0f2:	50a7      	str	r7, [r4, r2]
 800a0f4:	b107      	cbz	r7, 800a0f8 <rshift+0x68>
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	1b1a      	subs	r2, r3, r4
 800a0fa:	42a3      	cmp	r3, r4
 800a0fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a100:	bf08      	it	eq
 800a102:	2300      	moveq	r3, #0
 800a104:	6102      	str	r2, [r0, #16]
 800a106:	bf08      	it	eq
 800a108:	6143      	streq	r3, [r0, #20]
 800a10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a10e:	f8dc c000 	ldr.w	ip, [ip]
 800a112:	fa0c fc08 	lsl.w	ip, ip, r8
 800a116:	ea4c 0707 	orr.w	r7, ip, r7
 800a11a:	f849 7b04 	str.w	r7, [r9], #4
 800a11e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a122:	40cf      	lsrs	r7, r1
 800a124:	e7da      	b.n	800a0dc <rshift+0x4c>
 800a126:	f851 cb04 	ldr.w	ip, [r1], #4
 800a12a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a12e:	e7c3      	b.n	800a0b8 <rshift+0x28>
 800a130:	4623      	mov	r3, r4
 800a132:	e7e1      	b.n	800a0f8 <rshift+0x68>

0800a134 <__hexdig_fun>:
 800a134:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a138:	2b09      	cmp	r3, #9
 800a13a:	d802      	bhi.n	800a142 <__hexdig_fun+0xe>
 800a13c:	3820      	subs	r0, #32
 800a13e:	b2c0      	uxtb	r0, r0
 800a140:	4770      	bx	lr
 800a142:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a146:	2b05      	cmp	r3, #5
 800a148:	d801      	bhi.n	800a14e <__hexdig_fun+0x1a>
 800a14a:	3847      	subs	r0, #71	; 0x47
 800a14c:	e7f7      	b.n	800a13e <__hexdig_fun+0xa>
 800a14e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a152:	2b05      	cmp	r3, #5
 800a154:	d801      	bhi.n	800a15a <__hexdig_fun+0x26>
 800a156:	3827      	subs	r0, #39	; 0x27
 800a158:	e7f1      	b.n	800a13e <__hexdig_fun+0xa>
 800a15a:	2000      	movs	r0, #0
 800a15c:	4770      	bx	lr
	...

0800a160 <__gethex>:
 800a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	ed2d 8b02 	vpush	{d8}
 800a168:	b089      	sub	sp, #36	; 0x24
 800a16a:	ee08 0a10 	vmov	s16, r0
 800a16e:	9304      	str	r3, [sp, #16]
 800a170:	4bb4      	ldr	r3, [pc, #720]	; (800a444 <__gethex+0x2e4>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	4618      	mov	r0, r3
 800a178:	468b      	mov	fp, r1
 800a17a:	4690      	mov	r8, r2
 800a17c:	f7f6 f838 	bl	80001f0 <strlen>
 800a180:	9b01      	ldr	r3, [sp, #4]
 800a182:	f8db 2000 	ldr.w	r2, [fp]
 800a186:	4403      	add	r3, r0
 800a188:	4682      	mov	sl, r0
 800a18a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a18e:	9305      	str	r3, [sp, #20]
 800a190:	1c93      	adds	r3, r2, #2
 800a192:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a196:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a19a:	32fe      	adds	r2, #254	; 0xfe
 800a19c:	18d1      	adds	r1, r2, r3
 800a19e:	461f      	mov	r7, r3
 800a1a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1a4:	9100      	str	r1, [sp, #0]
 800a1a6:	2830      	cmp	r0, #48	; 0x30
 800a1a8:	d0f8      	beq.n	800a19c <__gethex+0x3c>
 800a1aa:	f7ff ffc3 	bl	800a134 <__hexdig_fun>
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d13a      	bne.n	800a22a <__gethex+0xca>
 800a1b4:	9901      	ldr	r1, [sp, #4]
 800a1b6:	4652      	mov	r2, sl
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f001 fb71 	bl	800b8a0 <strncmp>
 800a1be:	4605      	mov	r5, r0
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d168      	bne.n	800a296 <__gethex+0x136>
 800a1c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a1c8:	eb07 060a 	add.w	r6, r7, sl
 800a1cc:	f7ff ffb2 	bl	800a134 <__hexdig_fun>
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d062      	beq.n	800a29a <__gethex+0x13a>
 800a1d4:	4633      	mov	r3, r6
 800a1d6:	7818      	ldrb	r0, [r3, #0]
 800a1d8:	2830      	cmp	r0, #48	; 0x30
 800a1da:	461f      	mov	r7, r3
 800a1dc:	f103 0301 	add.w	r3, r3, #1
 800a1e0:	d0f9      	beq.n	800a1d6 <__gethex+0x76>
 800a1e2:	f7ff ffa7 	bl	800a134 <__hexdig_fun>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	fab0 f480 	clz	r4, r0
 800a1ec:	0964      	lsrs	r4, r4, #5
 800a1ee:	4635      	mov	r5, r6
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	463a      	mov	r2, r7
 800a1f4:	4616      	mov	r6, r2
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	7830      	ldrb	r0, [r6, #0]
 800a1fa:	f7ff ff9b 	bl	800a134 <__hexdig_fun>
 800a1fe:	2800      	cmp	r0, #0
 800a200:	d1f8      	bne.n	800a1f4 <__gethex+0x94>
 800a202:	9901      	ldr	r1, [sp, #4]
 800a204:	4652      	mov	r2, sl
 800a206:	4630      	mov	r0, r6
 800a208:	f001 fb4a 	bl	800b8a0 <strncmp>
 800a20c:	b980      	cbnz	r0, 800a230 <__gethex+0xd0>
 800a20e:	b94d      	cbnz	r5, 800a224 <__gethex+0xc4>
 800a210:	eb06 050a 	add.w	r5, r6, sl
 800a214:	462a      	mov	r2, r5
 800a216:	4616      	mov	r6, r2
 800a218:	3201      	adds	r2, #1
 800a21a:	7830      	ldrb	r0, [r6, #0]
 800a21c:	f7ff ff8a 	bl	800a134 <__hexdig_fun>
 800a220:	2800      	cmp	r0, #0
 800a222:	d1f8      	bne.n	800a216 <__gethex+0xb6>
 800a224:	1bad      	subs	r5, r5, r6
 800a226:	00ad      	lsls	r5, r5, #2
 800a228:	e004      	b.n	800a234 <__gethex+0xd4>
 800a22a:	2400      	movs	r4, #0
 800a22c:	4625      	mov	r5, r4
 800a22e:	e7e0      	b.n	800a1f2 <__gethex+0x92>
 800a230:	2d00      	cmp	r5, #0
 800a232:	d1f7      	bne.n	800a224 <__gethex+0xc4>
 800a234:	7833      	ldrb	r3, [r6, #0]
 800a236:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a23a:	2b50      	cmp	r3, #80	; 0x50
 800a23c:	d13b      	bne.n	800a2b6 <__gethex+0x156>
 800a23e:	7873      	ldrb	r3, [r6, #1]
 800a240:	2b2b      	cmp	r3, #43	; 0x2b
 800a242:	d02c      	beq.n	800a29e <__gethex+0x13e>
 800a244:	2b2d      	cmp	r3, #45	; 0x2d
 800a246:	d02e      	beq.n	800a2a6 <__gethex+0x146>
 800a248:	1c71      	adds	r1, r6, #1
 800a24a:	f04f 0900 	mov.w	r9, #0
 800a24e:	7808      	ldrb	r0, [r1, #0]
 800a250:	f7ff ff70 	bl	800a134 <__hexdig_fun>
 800a254:	1e43      	subs	r3, r0, #1
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b18      	cmp	r3, #24
 800a25a:	d82c      	bhi.n	800a2b6 <__gethex+0x156>
 800a25c:	f1a0 0210 	sub.w	r2, r0, #16
 800a260:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a264:	f7ff ff66 	bl	800a134 <__hexdig_fun>
 800a268:	1e43      	subs	r3, r0, #1
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b18      	cmp	r3, #24
 800a26e:	d91d      	bls.n	800a2ac <__gethex+0x14c>
 800a270:	f1b9 0f00 	cmp.w	r9, #0
 800a274:	d000      	beq.n	800a278 <__gethex+0x118>
 800a276:	4252      	negs	r2, r2
 800a278:	4415      	add	r5, r2
 800a27a:	f8cb 1000 	str.w	r1, [fp]
 800a27e:	b1e4      	cbz	r4, 800a2ba <__gethex+0x15a>
 800a280:	9b00      	ldr	r3, [sp, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	bf14      	ite	ne
 800a286:	2700      	movne	r7, #0
 800a288:	2706      	moveq	r7, #6
 800a28a:	4638      	mov	r0, r7
 800a28c:	b009      	add	sp, #36	; 0x24
 800a28e:	ecbd 8b02 	vpop	{d8}
 800a292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a296:	463e      	mov	r6, r7
 800a298:	4625      	mov	r5, r4
 800a29a:	2401      	movs	r4, #1
 800a29c:	e7ca      	b.n	800a234 <__gethex+0xd4>
 800a29e:	f04f 0900 	mov.w	r9, #0
 800a2a2:	1cb1      	adds	r1, r6, #2
 800a2a4:	e7d3      	b.n	800a24e <__gethex+0xee>
 800a2a6:	f04f 0901 	mov.w	r9, #1
 800a2aa:	e7fa      	b.n	800a2a2 <__gethex+0x142>
 800a2ac:	230a      	movs	r3, #10
 800a2ae:	fb03 0202 	mla	r2, r3, r2, r0
 800a2b2:	3a10      	subs	r2, #16
 800a2b4:	e7d4      	b.n	800a260 <__gethex+0x100>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	e7df      	b.n	800a27a <__gethex+0x11a>
 800a2ba:	1bf3      	subs	r3, r6, r7
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4621      	mov	r1, r4
 800a2c0:	2b07      	cmp	r3, #7
 800a2c2:	dc0b      	bgt.n	800a2dc <__gethex+0x17c>
 800a2c4:	ee18 0a10 	vmov	r0, s16
 800a2c8:	f000 faf4 	bl	800a8b4 <_Balloc>
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	b940      	cbnz	r0, 800a2e2 <__gethex+0x182>
 800a2d0:	4b5d      	ldr	r3, [pc, #372]	; (800a448 <__gethex+0x2e8>)
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	21de      	movs	r1, #222	; 0xde
 800a2d6:	485d      	ldr	r0, [pc, #372]	; (800a44c <__gethex+0x2ec>)
 800a2d8:	f001 fb04 	bl	800b8e4 <__assert_func>
 800a2dc:	3101      	adds	r1, #1
 800a2de:	105b      	asrs	r3, r3, #1
 800a2e0:	e7ee      	b.n	800a2c0 <__gethex+0x160>
 800a2e2:	f100 0914 	add.w	r9, r0, #20
 800a2e6:	f04f 0b00 	mov.w	fp, #0
 800a2ea:	f1ca 0301 	rsb	r3, sl, #1
 800a2ee:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2f2:	f8cd b000 	str.w	fp, [sp]
 800a2f6:	9306      	str	r3, [sp, #24]
 800a2f8:	42b7      	cmp	r7, r6
 800a2fa:	d340      	bcc.n	800a37e <__gethex+0x21e>
 800a2fc:	9802      	ldr	r0, [sp, #8]
 800a2fe:	9b00      	ldr	r3, [sp, #0]
 800a300:	f840 3b04 	str.w	r3, [r0], #4
 800a304:	eba0 0009 	sub.w	r0, r0, r9
 800a308:	1080      	asrs	r0, r0, #2
 800a30a:	0146      	lsls	r6, r0, #5
 800a30c:	6120      	str	r0, [r4, #16]
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 fbc2 	bl	800aa98 <__hi0bits>
 800a314:	1a30      	subs	r0, r6, r0
 800a316:	f8d8 6000 	ldr.w	r6, [r8]
 800a31a:	42b0      	cmp	r0, r6
 800a31c:	dd63      	ble.n	800a3e6 <__gethex+0x286>
 800a31e:	1b87      	subs	r7, r0, r6
 800a320:	4639      	mov	r1, r7
 800a322:	4620      	mov	r0, r4
 800a324:	f000 ff66 	bl	800b1f4 <__any_on>
 800a328:	4682      	mov	sl, r0
 800a32a:	b1a8      	cbz	r0, 800a358 <__gethex+0x1f8>
 800a32c:	1e7b      	subs	r3, r7, #1
 800a32e:	1159      	asrs	r1, r3, #5
 800a330:	f003 021f 	and.w	r2, r3, #31
 800a334:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a338:	f04f 0a01 	mov.w	sl, #1
 800a33c:	fa0a f202 	lsl.w	r2, sl, r2
 800a340:	420a      	tst	r2, r1
 800a342:	d009      	beq.n	800a358 <__gethex+0x1f8>
 800a344:	4553      	cmp	r3, sl
 800a346:	dd05      	ble.n	800a354 <__gethex+0x1f4>
 800a348:	1eb9      	subs	r1, r7, #2
 800a34a:	4620      	mov	r0, r4
 800a34c:	f000 ff52 	bl	800b1f4 <__any_on>
 800a350:	2800      	cmp	r0, #0
 800a352:	d145      	bne.n	800a3e0 <__gethex+0x280>
 800a354:	f04f 0a02 	mov.w	sl, #2
 800a358:	4639      	mov	r1, r7
 800a35a:	4620      	mov	r0, r4
 800a35c:	f7ff fe98 	bl	800a090 <rshift>
 800a360:	443d      	add	r5, r7
 800a362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a366:	42ab      	cmp	r3, r5
 800a368:	da4c      	bge.n	800a404 <__gethex+0x2a4>
 800a36a:	ee18 0a10 	vmov	r0, s16
 800a36e:	4621      	mov	r1, r4
 800a370:	f000 fae0 	bl	800a934 <_Bfree>
 800a374:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a376:	2300      	movs	r3, #0
 800a378:	6013      	str	r3, [r2, #0]
 800a37a:	27a3      	movs	r7, #163	; 0xa3
 800a37c:	e785      	b.n	800a28a <__gethex+0x12a>
 800a37e:	1e73      	subs	r3, r6, #1
 800a380:	9a05      	ldr	r2, [sp, #20]
 800a382:	9303      	str	r3, [sp, #12]
 800a384:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a388:	4293      	cmp	r3, r2
 800a38a:	d019      	beq.n	800a3c0 <__gethex+0x260>
 800a38c:	f1bb 0f20 	cmp.w	fp, #32
 800a390:	d107      	bne.n	800a3a2 <__gethex+0x242>
 800a392:	9b02      	ldr	r3, [sp, #8]
 800a394:	9a00      	ldr	r2, [sp, #0]
 800a396:	f843 2b04 	str.w	r2, [r3], #4
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	2300      	movs	r3, #0
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	469b      	mov	fp, r3
 800a3a2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a3a6:	f7ff fec5 	bl	800a134 <__hexdig_fun>
 800a3aa:	9b00      	ldr	r3, [sp, #0]
 800a3ac:	f000 000f 	and.w	r0, r0, #15
 800a3b0:	fa00 f00b 	lsl.w	r0, r0, fp
 800a3b4:	4303      	orrs	r3, r0
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	f10b 0b04 	add.w	fp, fp, #4
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	e00d      	b.n	800a3dc <__gethex+0x27c>
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	9a06      	ldr	r2, [sp, #24]
 800a3c4:	4413      	add	r3, r2
 800a3c6:	42bb      	cmp	r3, r7
 800a3c8:	d3e0      	bcc.n	800a38c <__gethex+0x22c>
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	9901      	ldr	r1, [sp, #4]
 800a3ce:	9307      	str	r3, [sp, #28]
 800a3d0:	4652      	mov	r2, sl
 800a3d2:	f001 fa65 	bl	800b8a0 <strncmp>
 800a3d6:	9b07      	ldr	r3, [sp, #28]
 800a3d8:	2800      	cmp	r0, #0
 800a3da:	d1d7      	bne.n	800a38c <__gethex+0x22c>
 800a3dc:	461e      	mov	r6, r3
 800a3de:	e78b      	b.n	800a2f8 <__gethex+0x198>
 800a3e0:	f04f 0a03 	mov.w	sl, #3
 800a3e4:	e7b8      	b.n	800a358 <__gethex+0x1f8>
 800a3e6:	da0a      	bge.n	800a3fe <__gethex+0x29e>
 800a3e8:	1a37      	subs	r7, r6, r0
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	ee18 0a10 	vmov	r0, s16
 800a3f0:	463a      	mov	r2, r7
 800a3f2:	f000 fcbb 	bl	800ad6c <__lshift>
 800a3f6:	1bed      	subs	r5, r5, r7
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	f100 0914 	add.w	r9, r0, #20
 800a3fe:	f04f 0a00 	mov.w	sl, #0
 800a402:	e7ae      	b.n	800a362 <__gethex+0x202>
 800a404:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a408:	42a8      	cmp	r0, r5
 800a40a:	dd72      	ble.n	800a4f2 <__gethex+0x392>
 800a40c:	1b45      	subs	r5, r0, r5
 800a40e:	42ae      	cmp	r6, r5
 800a410:	dc36      	bgt.n	800a480 <__gethex+0x320>
 800a412:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a416:	2b02      	cmp	r3, #2
 800a418:	d02a      	beq.n	800a470 <__gethex+0x310>
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	d02c      	beq.n	800a478 <__gethex+0x318>
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d11c      	bne.n	800a45c <__gethex+0x2fc>
 800a422:	42ae      	cmp	r6, r5
 800a424:	d11a      	bne.n	800a45c <__gethex+0x2fc>
 800a426:	2e01      	cmp	r6, #1
 800a428:	d112      	bne.n	800a450 <__gethex+0x2f0>
 800a42a:	9a04      	ldr	r2, [sp, #16]
 800a42c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a430:	6013      	str	r3, [r2, #0]
 800a432:	2301      	movs	r3, #1
 800a434:	6123      	str	r3, [r4, #16]
 800a436:	f8c9 3000 	str.w	r3, [r9]
 800a43a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a43c:	2762      	movs	r7, #98	; 0x62
 800a43e:	601c      	str	r4, [r3, #0]
 800a440:	e723      	b.n	800a28a <__gethex+0x12a>
 800a442:	bf00      	nop
 800a444:	0800be78 	.word	0x0800be78
 800a448:	0800be00 	.word	0x0800be00
 800a44c:	0800be11 	.word	0x0800be11
 800a450:	1e71      	subs	r1, r6, #1
 800a452:	4620      	mov	r0, r4
 800a454:	f000 fece 	bl	800b1f4 <__any_on>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d1e6      	bne.n	800a42a <__gethex+0x2ca>
 800a45c:	ee18 0a10 	vmov	r0, s16
 800a460:	4621      	mov	r1, r4
 800a462:	f000 fa67 	bl	800a934 <_Bfree>
 800a466:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a468:	2300      	movs	r3, #0
 800a46a:	6013      	str	r3, [r2, #0]
 800a46c:	2750      	movs	r7, #80	; 0x50
 800a46e:	e70c      	b.n	800a28a <__gethex+0x12a>
 800a470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a472:	2b00      	cmp	r3, #0
 800a474:	d1f2      	bne.n	800a45c <__gethex+0x2fc>
 800a476:	e7d8      	b.n	800a42a <__gethex+0x2ca>
 800a478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d1d5      	bne.n	800a42a <__gethex+0x2ca>
 800a47e:	e7ed      	b.n	800a45c <__gethex+0x2fc>
 800a480:	1e6f      	subs	r7, r5, #1
 800a482:	f1ba 0f00 	cmp.w	sl, #0
 800a486:	d131      	bne.n	800a4ec <__gethex+0x38c>
 800a488:	b127      	cbz	r7, 800a494 <__gethex+0x334>
 800a48a:	4639      	mov	r1, r7
 800a48c:	4620      	mov	r0, r4
 800a48e:	f000 feb1 	bl	800b1f4 <__any_on>
 800a492:	4682      	mov	sl, r0
 800a494:	117b      	asrs	r3, r7, #5
 800a496:	2101      	movs	r1, #1
 800a498:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a49c:	f007 071f 	and.w	r7, r7, #31
 800a4a0:	fa01 f707 	lsl.w	r7, r1, r7
 800a4a4:	421f      	tst	r7, r3
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	bf18      	it	ne
 800a4ac:	f04a 0a02 	orrne.w	sl, sl, #2
 800a4b0:	1b76      	subs	r6, r6, r5
 800a4b2:	f7ff fded 	bl	800a090 <rshift>
 800a4b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4ba:	2702      	movs	r7, #2
 800a4bc:	f1ba 0f00 	cmp.w	sl, #0
 800a4c0:	d048      	beq.n	800a554 <__gethex+0x3f4>
 800a4c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d015      	beq.n	800a4f6 <__gethex+0x396>
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d017      	beq.n	800a4fe <__gethex+0x39e>
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d109      	bne.n	800a4e6 <__gethex+0x386>
 800a4d2:	f01a 0f02 	tst.w	sl, #2
 800a4d6:	d006      	beq.n	800a4e6 <__gethex+0x386>
 800a4d8:	f8d9 0000 	ldr.w	r0, [r9]
 800a4dc:	ea4a 0a00 	orr.w	sl, sl, r0
 800a4e0:	f01a 0f01 	tst.w	sl, #1
 800a4e4:	d10e      	bne.n	800a504 <__gethex+0x3a4>
 800a4e6:	f047 0710 	orr.w	r7, r7, #16
 800a4ea:	e033      	b.n	800a554 <__gethex+0x3f4>
 800a4ec:	f04f 0a01 	mov.w	sl, #1
 800a4f0:	e7d0      	b.n	800a494 <__gethex+0x334>
 800a4f2:	2701      	movs	r7, #1
 800a4f4:	e7e2      	b.n	800a4bc <__gethex+0x35c>
 800a4f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4f8:	f1c3 0301 	rsb	r3, r3, #1
 800a4fc:	9315      	str	r3, [sp, #84]	; 0x54
 800a4fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0f0      	beq.n	800a4e6 <__gethex+0x386>
 800a504:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a508:	f104 0314 	add.w	r3, r4, #20
 800a50c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a510:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a514:	f04f 0c00 	mov.w	ip, #0
 800a518:	4618      	mov	r0, r3
 800a51a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a51e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a522:	d01c      	beq.n	800a55e <__gethex+0x3fe>
 800a524:	3201      	adds	r2, #1
 800a526:	6002      	str	r2, [r0, #0]
 800a528:	2f02      	cmp	r7, #2
 800a52a:	f104 0314 	add.w	r3, r4, #20
 800a52e:	d13f      	bne.n	800a5b0 <__gethex+0x450>
 800a530:	f8d8 2000 	ldr.w	r2, [r8]
 800a534:	3a01      	subs	r2, #1
 800a536:	42b2      	cmp	r2, r6
 800a538:	d10a      	bne.n	800a550 <__gethex+0x3f0>
 800a53a:	1171      	asrs	r1, r6, #5
 800a53c:	2201      	movs	r2, #1
 800a53e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a542:	f006 061f 	and.w	r6, r6, #31
 800a546:	fa02 f606 	lsl.w	r6, r2, r6
 800a54a:	421e      	tst	r6, r3
 800a54c:	bf18      	it	ne
 800a54e:	4617      	movne	r7, r2
 800a550:	f047 0720 	orr.w	r7, r7, #32
 800a554:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a556:	601c      	str	r4, [r3, #0]
 800a558:	9b04      	ldr	r3, [sp, #16]
 800a55a:	601d      	str	r5, [r3, #0]
 800a55c:	e695      	b.n	800a28a <__gethex+0x12a>
 800a55e:	4299      	cmp	r1, r3
 800a560:	f843 cc04 	str.w	ip, [r3, #-4]
 800a564:	d8d8      	bhi.n	800a518 <__gethex+0x3b8>
 800a566:	68a3      	ldr	r3, [r4, #8]
 800a568:	459b      	cmp	fp, r3
 800a56a:	db19      	blt.n	800a5a0 <__gethex+0x440>
 800a56c:	6861      	ldr	r1, [r4, #4]
 800a56e:	ee18 0a10 	vmov	r0, s16
 800a572:	3101      	adds	r1, #1
 800a574:	f000 f99e 	bl	800a8b4 <_Balloc>
 800a578:	4681      	mov	r9, r0
 800a57a:	b918      	cbnz	r0, 800a584 <__gethex+0x424>
 800a57c:	4b1a      	ldr	r3, [pc, #104]	; (800a5e8 <__gethex+0x488>)
 800a57e:	4602      	mov	r2, r0
 800a580:	2184      	movs	r1, #132	; 0x84
 800a582:	e6a8      	b.n	800a2d6 <__gethex+0x176>
 800a584:	6922      	ldr	r2, [r4, #16]
 800a586:	3202      	adds	r2, #2
 800a588:	f104 010c 	add.w	r1, r4, #12
 800a58c:	0092      	lsls	r2, r2, #2
 800a58e:	300c      	adds	r0, #12
 800a590:	f7fc fe1b 	bl	80071ca <memcpy>
 800a594:	4621      	mov	r1, r4
 800a596:	ee18 0a10 	vmov	r0, s16
 800a59a:	f000 f9cb 	bl	800a934 <_Bfree>
 800a59e:	464c      	mov	r4, r9
 800a5a0:	6923      	ldr	r3, [r4, #16]
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5a8:	6122      	str	r2, [r4, #16]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	615a      	str	r2, [r3, #20]
 800a5ae:	e7bb      	b.n	800a528 <__gethex+0x3c8>
 800a5b0:	6922      	ldr	r2, [r4, #16]
 800a5b2:	455a      	cmp	r2, fp
 800a5b4:	dd0b      	ble.n	800a5ce <__gethex+0x46e>
 800a5b6:	2101      	movs	r1, #1
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7ff fd69 	bl	800a090 <rshift>
 800a5be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5c2:	3501      	adds	r5, #1
 800a5c4:	42ab      	cmp	r3, r5
 800a5c6:	f6ff aed0 	blt.w	800a36a <__gethex+0x20a>
 800a5ca:	2701      	movs	r7, #1
 800a5cc:	e7c0      	b.n	800a550 <__gethex+0x3f0>
 800a5ce:	f016 061f 	ands.w	r6, r6, #31
 800a5d2:	d0fa      	beq.n	800a5ca <__gethex+0x46a>
 800a5d4:	4453      	add	r3, sl
 800a5d6:	f1c6 0620 	rsb	r6, r6, #32
 800a5da:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5de:	f000 fa5b 	bl	800aa98 <__hi0bits>
 800a5e2:	42b0      	cmp	r0, r6
 800a5e4:	dbe7      	blt.n	800a5b6 <__gethex+0x456>
 800a5e6:	e7f0      	b.n	800a5ca <__gethex+0x46a>
 800a5e8:	0800be00 	.word	0x0800be00

0800a5ec <L_shift>:
 800a5ec:	f1c2 0208 	rsb	r2, r2, #8
 800a5f0:	0092      	lsls	r2, r2, #2
 800a5f2:	b570      	push	{r4, r5, r6, lr}
 800a5f4:	f1c2 0620 	rsb	r6, r2, #32
 800a5f8:	6843      	ldr	r3, [r0, #4]
 800a5fa:	6804      	ldr	r4, [r0, #0]
 800a5fc:	fa03 f506 	lsl.w	r5, r3, r6
 800a600:	432c      	orrs	r4, r5
 800a602:	40d3      	lsrs	r3, r2
 800a604:	6004      	str	r4, [r0, #0]
 800a606:	f840 3f04 	str.w	r3, [r0, #4]!
 800a60a:	4288      	cmp	r0, r1
 800a60c:	d3f4      	bcc.n	800a5f8 <L_shift+0xc>
 800a60e:	bd70      	pop	{r4, r5, r6, pc}

0800a610 <__match>:
 800a610:	b530      	push	{r4, r5, lr}
 800a612:	6803      	ldr	r3, [r0, #0]
 800a614:	3301      	adds	r3, #1
 800a616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a61a:	b914      	cbnz	r4, 800a622 <__match+0x12>
 800a61c:	6003      	str	r3, [r0, #0]
 800a61e:	2001      	movs	r0, #1
 800a620:	bd30      	pop	{r4, r5, pc}
 800a622:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a626:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a62a:	2d19      	cmp	r5, #25
 800a62c:	bf98      	it	ls
 800a62e:	3220      	addls	r2, #32
 800a630:	42a2      	cmp	r2, r4
 800a632:	d0f0      	beq.n	800a616 <__match+0x6>
 800a634:	2000      	movs	r0, #0
 800a636:	e7f3      	b.n	800a620 <__match+0x10>

0800a638 <__hexnan>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	680b      	ldr	r3, [r1, #0]
 800a63e:	115e      	asrs	r6, r3, #5
 800a640:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a644:	f013 031f 	ands.w	r3, r3, #31
 800a648:	b087      	sub	sp, #28
 800a64a:	bf18      	it	ne
 800a64c:	3604      	addne	r6, #4
 800a64e:	2500      	movs	r5, #0
 800a650:	1f37      	subs	r7, r6, #4
 800a652:	4690      	mov	r8, r2
 800a654:	6802      	ldr	r2, [r0, #0]
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	4682      	mov	sl, r0
 800a65a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a65e:	46b9      	mov	r9, r7
 800a660:	463c      	mov	r4, r7
 800a662:	9502      	str	r5, [sp, #8]
 800a664:	46ab      	mov	fp, r5
 800a666:	7851      	ldrb	r1, [r2, #1]
 800a668:	1c53      	adds	r3, r2, #1
 800a66a:	9303      	str	r3, [sp, #12]
 800a66c:	b341      	cbz	r1, 800a6c0 <__hexnan+0x88>
 800a66e:	4608      	mov	r0, r1
 800a670:	9205      	str	r2, [sp, #20]
 800a672:	9104      	str	r1, [sp, #16]
 800a674:	f7ff fd5e 	bl	800a134 <__hexdig_fun>
 800a678:	2800      	cmp	r0, #0
 800a67a:	d14f      	bne.n	800a71c <__hexnan+0xe4>
 800a67c:	9904      	ldr	r1, [sp, #16]
 800a67e:	9a05      	ldr	r2, [sp, #20]
 800a680:	2920      	cmp	r1, #32
 800a682:	d818      	bhi.n	800a6b6 <__hexnan+0x7e>
 800a684:	9b02      	ldr	r3, [sp, #8]
 800a686:	459b      	cmp	fp, r3
 800a688:	dd13      	ble.n	800a6b2 <__hexnan+0x7a>
 800a68a:	454c      	cmp	r4, r9
 800a68c:	d206      	bcs.n	800a69c <__hexnan+0x64>
 800a68e:	2d07      	cmp	r5, #7
 800a690:	dc04      	bgt.n	800a69c <__hexnan+0x64>
 800a692:	462a      	mov	r2, r5
 800a694:	4649      	mov	r1, r9
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff ffa8 	bl	800a5ec <L_shift>
 800a69c:	4544      	cmp	r4, r8
 800a69e:	d950      	bls.n	800a742 <__hexnan+0x10a>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f1a4 0904 	sub.w	r9, r4, #4
 800a6a6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6aa:	f8cd b008 	str.w	fp, [sp, #8]
 800a6ae:	464c      	mov	r4, r9
 800a6b0:	461d      	mov	r5, r3
 800a6b2:	9a03      	ldr	r2, [sp, #12]
 800a6b4:	e7d7      	b.n	800a666 <__hexnan+0x2e>
 800a6b6:	2929      	cmp	r1, #41	; 0x29
 800a6b8:	d156      	bne.n	800a768 <__hexnan+0x130>
 800a6ba:	3202      	adds	r2, #2
 800a6bc:	f8ca 2000 	str.w	r2, [sl]
 800a6c0:	f1bb 0f00 	cmp.w	fp, #0
 800a6c4:	d050      	beq.n	800a768 <__hexnan+0x130>
 800a6c6:	454c      	cmp	r4, r9
 800a6c8:	d206      	bcs.n	800a6d8 <__hexnan+0xa0>
 800a6ca:	2d07      	cmp	r5, #7
 800a6cc:	dc04      	bgt.n	800a6d8 <__hexnan+0xa0>
 800a6ce:	462a      	mov	r2, r5
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7ff ff8a 	bl	800a5ec <L_shift>
 800a6d8:	4544      	cmp	r4, r8
 800a6da:	d934      	bls.n	800a746 <__hexnan+0x10e>
 800a6dc:	f1a8 0204 	sub.w	r2, r8, #4
 800a6e0:	4623      	mov	r3, r4
 800a6e2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6e6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6ea:	429f      	cmp	r7, r3
 800a6ec:	d2f9      	bcs.n	800a6e2 <__hexnan+0xaa>
 800a6ee:	1b3b      	subs	r3, r7, r4
 800a6f0:	f023 0303 	bic.w	r3, r3, #3
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	3401      	adds	r4, #1
 800a6f8:	3e03      	subs	r6, #3
 800a6fa:	42b4      	cmp	r4, r6
 800a6fc:	bf88      	it	hi
 800a6fe:	2304      	movhi	r3, #4
 800a700:	4443      	add	r3, r8
 800a702:	2200      	movs	r2, #0
 800a704:	f843 2b04 	str.w	r2, [r3], #4
 800a708:	429f      	cmp	r7, r3
 800a70a:	d2fb      	bcs.n	800a704 <__hexnan+0xcc>
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	b91b      	cbnz	r3, 800a718 <__hexnan+0xe0>
 800a710:	4547      	cmp	r7, r8
 800a712:	d127      	bne.n	800a764 <__hexnan+0x12c>
 800a714:	2301      	movs	r3, #1
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	2005      	movs	r0, #5
 800a71a:	e026      	b.n	800a76a <__hexnan+0x132>
 800a71c:	3501      	adds	r5, #1
 800a71e:	2d08      	cmp	r5, #8
 800a720:	f10b 0b01 	add.w	fp, fp, #1
 800a724:	dd06      	ble.n	800a734 <__hexnan+0xfc>
 800a726:	4544      	cmp	r4, r8
 800a728:	d9c3      	bls.n	800a6b2 <__hexnan+0x7a>
 800a72a:	2300      	movs	r3, #0
 800a72c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a730:	2501      	movs	r5, #1
 800a732:	3c04      	subs	r4, #4
 800a734:	6822      	ldr	r2, [r4, #0]
 800a736:	f000 000f 	and.w	r0, r0, #15
 800a73a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a73e:	6022      	str	r2, [r4, #0]
 800a740:	e7b7      	b.n	800a6b2 <__hexnan+0x7a>
 800a742:	2508      	movs	r5, #8
 800a744:	e7b5      	b.n	800a6b2 <__hexnan+0x7a>
 800a746:	9b01      	ldr	r3, [sp, #4]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d0df      	beq.n	800a70c <__hexnan+0xd4>
 800a74c:	f04f 32ff 	mov.w	r2, #4294967295
 800a750:	f1c3 0320 	rsb	r3, r3, #32
 800a754:	fa22 f303 	lsr.w	r3, r2, r3
 800a758:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a75c:	401a      	ands	r2, r3
 800a75e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a762:	e7d3      	b.n	800a70c <__hexnan+0xd4>
 800a764:	3f04      	subs	r7, #4
 800a766:	e7d1      	b.n	800a70c <__hexnan+0xd4>
 800a768:	2004      	movs	r0, #4
 800a76a:	b007      	add	sp, #28
 800a76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a770 <_localeconv_r>:
 800a770:	4800      	ldr	r0, [pc, #0]	; (800a774 <_localeconv_r+0x4>)
 800a772:	4770      	bx	lr
 800a774:	2000016c 	.word	0x2000016c

0800a778 <_lseek_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	; (800a798 <_lseek_r+0x20>)
 800a77c:	4604      	mov	r4, r0
 800a77e:	4608      	mov	r0, r1
 800a780:	4611      	mov	r1, r2
 800a782:	2200      	movs	r2, #0
 800a784:	602a      	str	r2, [r5, #0]
 800a786:	461a      	mov	r2, r3
 800a788:	f7f6 febe 	bl	8001508 <_lseek>
 800a78c:	1c43      	adds	r3, r0, #1
 800a78e:	d102      	bne.n	800a796 <_lseek_r+0x1e>
 800a790:	682b      	ldr	r3, [r5, #0]
 800a792:	b103      	cbz	r3, 800a796 <_lseek_r+0x1e>
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	bd38      	pop	{r3, r4, r5, pc}
 800a798:	20005348 	.word	0x20005348

0800a79c <__swhatbuf_r>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	460e      	mov	r6, r1
 800a7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a4:	2900      	cmp	r1, #0
 800a7a6:	b096      	sub	sp, #88	; 0x58
 800a7a8:	4614      	mov	r4, r2
 800a7aa:	461d      	mov	r5, r3
 800a7ac:	da08      	bge.n	800a7c0 <__swhatbuf_r+0x24>
 800a7ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	602a      	str	r2, [r5, #0]
 800a7b6:	061a      	lsls	r2, r3, #24
 800a7b8:	d410      	bmi.n	800a7dc <__swhatbuf_r+0x40>
 800a7ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7be:	e00e      	b.n	800a7de <__swhatbuf_r+0x42>
 800a7c0:	466a      	mov	r2, sp
 800a7c2:	f001 f8bf 	bl	800b944 <_fstat_r>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	dbf1      	blt.n	800a7ae <__swhatbuf_r+0x12>
 800a7ca:	9a01      	ldr	r2, [sp, #4]
 800a7cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7d4:	425a      	negs	r2, r3
 800a7d6:	415a      	adcs	r2, r3
 800a7d8:	602a      	str	r2, [r5, #0]
 800a7da:	e7ee      	b.n	800a7ba <__swhatbuf_r+0x1e>
 800a7dc:	2340      	movs	r3, #64	; 0x40
 800a7de:	2000      	movs	r0, #0
 800a7e0:	6023      	str	r3, [r4, #0]
 800a7e2:	b016      	add	sp, #88	; 0x58
 800a7e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7e8 <__smakebuf_r>:
 800a7e8:	898b      	ldrh	r3, [r1, #12]
 800a7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7ec:	079d      	lsls	r5, r3, #30
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460c      	mov	r4, r1
 800a7f2:	d507      	bpl.n	800a804 <__smakebuf_r+0x1c>
 800a7f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	6123      	str	r3, [r4, #16]
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	6163      	str	r3, [r4, #20]
 800a800:	b002      	add	sp, #8
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	ab01      	add	r3, sp, #4
 800a806:	466a      	mov	r2, sp
 800a808:	f7ff ffc8 	bl	800a79c <__swhatbuf_r>
 800a80c:	9900      	ldr	r1, [sp, #0]
 800a80e:	4605      	mov	r5, r0
 800a810:	4630      	mov	r0, r6
 800a812:	f7fc fd11 	bl	8007238 <_malloc_r>
 800a816:	b948      	cbnz	r0, 800a82c <__smakebuf_r+0x44>
 800a818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a81c:	059a      	lsls	r2, r3, #22
 800a81e:	d4ef      	bmi.n	800a800 <__smakebuf_r+0x18>
 800a820:	f023 0303 	bic.w	r3, r3, #3
 800a824:	f043 0302 	orr.w	r3, r3, #2
 800a828:	81a3      	strh	r3, [r4, #12]
 800a82a:	e7e3      	b.n	800a7f4 <__smakebuf_r+0xc>
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <__smakebuf_r+0x7c>)
 800a82e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	6020      	str	r0, [r4, #0]
 800a834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a838:	81a3      	strh	r3, [r4, #12]
 800a83a:	9b00      	ldr	r3, [sp, #0]
 800a83c:	6163      	str	r3, [r4, #20]
 800a83e:	9b01      	ldr	r3, [sp, #4]
 800a840:	6120      	str	r0, [r4, #16]
 800a842:	b15b      	cbz	r3, 800a85c <__smakebuf_r+0x74>
 800a844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a848:	4630      	mov	r0, r6
 800a84a:	f001 f88d 	bl	800b968 <_isatty_r>
 800a84e:	b128      	cbz	r0, 800a85c <__smakebuf_r+0x74>
 800a850:	89a3      	ldrh	r3, [r4, #12]
 800a852:	f023 0303 	bic.w	r3, r3, #3
 800a856:	f043 0301 	orr.w	r3, r3, #1
 800a85a:	81a3      	strh	r3, [r4, #12]
 800a85c:	89a0      	ldrh	r0, [r4, #12]
 800a85e:	4305      	orrs	r5, r0
 800a860:	81a5      	strh	r5, [r4, #12]
 800a862:	e7cd      	b.n	800a800 <__smakebuf_r+0x18>
 800a864:	08006fd9 	.word	0x08006fd9

0800a868 <malloc>:
 800a868:	4b02      	ldr	r3, [pc, #8]	; (800a874 <malloc+0xc>)
 800a86a:	4601      	mov	r1, r0
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	f7fc bce3 	b.w	8007238 <_malloc_r>
 800a872:	bf00      	nop
 800a874:	20000014 	.word	0x20000014

0800a878 <__ascii_mbtowc>:
 800a878:	b082      	sub	sp, #8
 800a87a:	b901      	cbnz	r1, 800a87e <__ascii_mbtowc+0x6>
 800a87c:	a901      	add	r1, sp, #4
 800a87e:	b142      	cbz	r2, 800a892 <__ascii_mbtowc+0x1a>
 800a880:	b14b      	cbz	r3, 800a896 <__ascii_mbtowc+0x1e>
 800a882:	7813      	ldrb	r3, [r2, #0]
 800a884:	600b      	str	r3, [r1, #0]
 800a886:	7812      	ldrb	r2, [r2, #0]
 800a888:	1e10      	subs	r0, r2, #0
 800a88a:	bf18      	it	ne
 800a88c:	2001      	movne	r0, #1
 800a88e:	b002      	add	sp, #8
 800a890:	4770      	bx	lr
 800a892:	4610      	mov	r0, r2
 800a894:	e7fb      	b.n	800a88e <__ascii_mbtowc+0x16>
 800a896:	f06f 0001 	mvn.w	r0, #1
 800a89a:	e7f8      	b.n	800a88e <__ascii_mbtowc+0x16>

0800a89c <__malloc_lock>:
 800a89c:	4801      	ldr	r0, [pc, #4]	; (800a8a4 <__malloc_lock+0x8>)
 800a89e:	f7fc bc92 	b.w	80071c6 <__retarget_lock_acquire_recursive>
 800a8a2:	bf00      	nop
 800a8a4:	2000533c 	.word	0x2000533c

0800a8a8 <__malloc_unlock>:
 800a8a8:	4801      	ldr	r0, [pc, #4]	; (800a8b0 <__malloc_unlock+0x8>)
 800a8aa:	f7fc bc8d 	b.w	80071c8 <__retarget_lock_release_recursive>
 800a8ae:	bf00      	nop
 800a8b0:	2000533c 	.word	0x2000533c

0800a8b4 <_Balloc>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	b976      	cbnz	r6, 800a8dc <_Balloc+0x28>
 800a8be:	2010      	movs	r0, #16
 800a8c0:	f7ff ffd2 	bl	800a868 <malloc>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	6260      	str	r0, [r4, #36]	; 0x24
 800a8c8:	b920      	cbnz	r0, 800a8d4 <_Balloc+0x20>
 800a8ca:	4b18      	ldr	r3, [pc, #96]	; (800a92c <_Balloc+0x78>)
 800a8cc:	4818      	ldr	r0, [pc, #96]	; (800a930 <_Balloc+0x7c>)
 800a8ce:	2166      	movs	r1, #102	; 0x66
 800a8d0:	f001 f808 	bl	800b8e4 <__assert_func>
 800a8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8d8:	6006      	str	r6, [r0, #0]
 800a8da:	60c6      	str	r6, [r0, #12]
 800a8dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8de:	68f3      	ldr	r3, [r6, #12]
 800a8e0:	b183      	cbz	r3, 800a904 <_Balloc+0x50>
 800a8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8ea:	b9b8      	cbnz	r0, 800a91c <_Balloc+0x68>
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	fa01 f605 	lsl.w	r6, r1, r5
 800a8f2:	1d72      	adds	r2, r6, #5
 800a8f4:	0092      	lsls	r2, r2, #2
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 fc9d 	bl	800b236 <_calloc_r>
 800a8fc:	b160      	cbz	r0, 800a918 <_Balloc+0x64>
 800a8fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a902:	e00e      	b.n	800a922 <_Balloc+0x6e>
 800a904:	2221      	movs	r2, #33	; 0x21
 800a906:	2104      	movs	r1, #4
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fc94 	bl	800b236 <_calloc_r>
 800a90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a910:	60f0      	str	r0, [r6, #12]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e4      	bne.n	800a8e2 <_Balloc+0x2e>
 800a918:	2000      	movs	r0, #0
 800a91a:	bd70      	pop	{r4, r5, r6, pc}
 800a91c:	6802      	ldr	r2, [r0, #0]
 800a91e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a922:	2300      	movs	r3, #0
 800a924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a928:	e7f7      	b.n	800a91a <_Balloc+0x66>
 800a92a:	bf00      	nop
 800a92c:	0800bd8e 	.word	0x0800bd8e
 800a930:	0800be8c 	.word	0x0800be8c

0800a934 <_Bfree>:
 800a934:	b570      	push	{r4, r5, r6, lr}
 800a936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a938:	4605      	mov	r5, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	b976      	cbnz	r6, 800a95c <_Bfree+0x28>
 800a93e:	2010      	movs	r0, #16
 800a940:	f7ff ff92 	bl	800a868 <malloc>
 800a944:	4602      	mov	r2, r0
 800a946:	6268      	str	r0, [r5, #36]	; 0x24
 800a948:	b920      	cbnz	r0, 800a954 <_Bfree+0x20>
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <_Bfree+0x3c>)
 800a94c:	4809      	ldr	r0, [pc, #36]	; (800a974 <_Bfree+0x40>)
 800a94e:	218a      	movs	r1, #138	; 0x8a
 800a950:	f000 ffc8 	bl	800b8e4 <__assert_func>
 800a954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a958:	6006      	str	r6, [r0, #0]
 800a95a:	60c6      	str	r6, [r0, #12]
 800a95c:	b13c      	cbz	r4, 800a96e <_Bfree+0x3a>
 800a95e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a960:	6862      	ldr	r2, [r4, #4]
 800a962:	68db      	ldr	r3, [r3, #12]
 800a964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a968:	6021      	str	r1, [r4, #0]
 800a96a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a96e:	bd70      	pop	{r4, r5, r6, pc}
 800a970:	0800bd8e 	.word	0x0800bd8e
 800a974:	0800be8c 	.word	0x0800be8c

0800a978 <__multadd>:
 800a978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a97c:	690d      	ldr	r5, [r1, #16]
 800a97e:	4607      	mov	r7, r0
 800a980:	460c      	mov	r4, r1
 800a982:	461e      	mov	r6, r3
 800a984:	f101 0c14 	add.w	ip, r1, #20
 800a988:	2000      	movs	r0, #0
 800a98a:	f8dc 3000 	ldr.w	r3, [ip]
 800a98e:	b299      	uxth	r1, r3
 800a990:	fb02 6101 	mla	r1, r2, r1, r6
 800a994:	0c1e      	lsrs	r6, r3, #16
 800a996:	0c0b      	lsrs	r3, r1, #16
 800a998:	fb02 3306 	mla	r3, r2, r6, r3
 800a99c:	b289      	uxth	r1, r1
 800a99e:	3001      	adds	r0, #1
 800a9a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9a4:	4285      	cmp	r5, r0
 800a9a6:	f84c 1b04 	str.w	r1, [ip], #4
 800a9aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9ae:	dcec      	bgt.n	800a98a <__multadd+0x12>
 800a9b0:	b30e      	cbz	r6, 800a9f6 <__multadd+0x7e>
 800a9b2:	68a3      	ldr	r3, [r4, #8]
 800a9b4:	42ab      	cmp	r3, r5
 800a9b6:	dc19      	bgt.n	800a9ec <__multadd+0x74>
 800a9b8:	6861      	ldr	r1, [r4, #4]
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	3101      	adds	r1, #1
 800a9be:	f7ff ff79 	bl	800a8b4 <_Balloc>
 800a9c2:	4680      	mov	r8, r0
 800a9c4:	b928      	cbnz	r0, 800a9d2 <__multadd+0x5a>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	4b0c      	ldr	r3, [pc, #48]	; (800a9fc <__multadd+0x84>)
 800a9ca:	480d      	ldr	r0, [pc, #52]	; (800aa00 <__multadd+0x88>)
 800a9cc:	21b5      	movs	r1, #181	; 0xb5
 800a9ce:	f000 ff89 	bl	800b8e4 <__assert_func>
 800a9d2:	6922      	ldr	r2, [r4, #16]
 800a9d4:	3202      	adds	r2, #2
 800a9d6:	f104 010c 	add.w	r1, r4, #12
 800a9da:	0092      	lsls	r2, r2, #2
 800a9dc:	300c      	adds	r0, #12
 800a9de:	f7fc fbf4 	bl	80071ca <memcpy>
 800a9e2:	4621      	mov	r1, r4
 800a9e4:	4638      	mov	r0, r7
 800a9e6:	f7ff ffa5 	bl	800a934 <_Bfree>
 800a9ea:	4644      	mov	r4, r8
 800a9ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9f0:	3501      	adds	r5, #1
 800a9f2:	615e      	str	r6, [r3, #20]
 800a9f4:	6125      	str	r5, [r4, #16]
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9fc:	0800be00 	.word	0x0800be00
 800aa00:	0800be8c 	.word	0x0800be8c

0800aa04 <__s2b>:
 800aa04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa08:	460c      	mov	r4, r1
 800aa0a:	4615      	mov	r5, r2
 800aa0c:	461f      	mov	r7, r3
 800aa0e:	2209      	movs	r2, #9
 800aa10:	3308      	adds	r3, #8
 800aa12:	4606      	mov	r6, r0
 800aa14:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa18:	2100      	movs	r1, #0
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	db09      	blt.n	800aa34 <__s2b+0x30>
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7ff ff47 	bl	800a8b4 <_Balloc>
 800aa26:	b940      	cbnz	r0, 800aa3a <__s2b+0x36>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	4b19      	ldr	r3, [pc, #100]	; (800aa90 <__s2b+0x8c>)
 800aa2c:	4819      	ldr	r0, [pc, #100]	; (800aa94 <__s2b+0x90>)
 800aa2e:	21ce      	movs	r1, #206	; 0xce
 800aa30:	f000 ff58 	bl	800b8e4 <__assert_func>
 800aa34:	0052      	lsls	r2, r2, #1
 800aa36:	3101      	adds	r1, #1
 800aa38:	e7f0      	b.n	800aa1c <__s2b+0x18>
 800aa3a:	9b08      	ldr	r3, [sp, #32]
 800aa3c:	6143      	str	r3, [r0, #20]
 800aa3e:	2d09      	cmp	r5, #9
 800aa40:	f04f 0301 	mov.w	r3, #1
 800aa44:	6103      	str	r3, [r0, #16]
 800aa46:	dd16      	ble.n	800aa76 <__s2b+0x72>
 800aa48:	f104 0909 	add.w	r9, r4, #9
 800aa4c:	46c8      	mov	r8, r9
 800aa4e:	442c      	add	r4, r5
 800aa50:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa54:	4601      	mov	r1, r0
 800aa56:	3b30      	subs	r3, #48	; 0x30
 800aa58:	220a      	movs	r2, #10
 800aa5a:	4630      	mov	r0, r6
 800aa5c:	f7ff ff8c 	bl	800a978 <__multadd>
 800aa60:	45a0      	cmp	r8, r4
 800aa62:	d1f5      	bne.n	800aa50 <__s2b+0x4c>
 800aa64:	f1a5 0408 	sub.w	r4, r5, #8
 800aa68:	444c      	add	r4, r9
 800aa6a:	1b2d      	subs	r5, r5, r4
 800aa6c:	1963      	adds	r3, r4, r5
 800aa6e:	42bb      	cmp	r3, r7
 800aa70:	db04      	blt.n	800aa7c <__s2b+0x78>
 800aa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa76:	340a      	adds	r4, #10
 800aa78:	2509      	movs	r5, #9
 800aa7a:	e7f6      	b.n	800aa6a <__s2b+0x66>
 800aa7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa80:	4601      	mov	r1, r0
 800aa82:	3b30      	subs	r3, #48	; 0x30
 800aa84:	220a      	movs	r2, #10
 800aa86:	4630      	mov	r0, r6
 800aa88:	f7ff ff76 	bl	800a978 <__multadd>
 800aa8c:	e7ee      	b.n	800aa6c <__s2b+0x68>
 800aa8e:	bf00      	nop
 800aa90:	0800be00 	.word	0x0800be00
 800aa94:	0800be8c 	.word	0x0800be8c

0800aa98 <__hi0bits>:
 800aa98:	0c03      	lsrs	r3, r0, #16
 800aa9a:	041b      	lsls	r3, r3, #16
 800aa9c:	b9d3      	cbnz	r3, 800aad4 <__hi0bits+0x3c>
 800aa9e:	0400      	lsls	r0, r0, #16
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aaa6:	bf04      	itt	eq
 800aaa8:	0200      	lsleq	r0, r0, #8
 800aaaa:	3308      	addeq	r3, #8
 800aaac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aab0:	bf04      	itt	eq
 800aab2:	0100      	lsleq	r0, r0, #4
 800aab4:	3304      	addeq	r3, #4
 800aab6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aaba:	bf04      	itt	eq
 800aabc:	0080      	lsleq	r0, r0, #2
 800aabe:	3302      	addeq	r3, #2
 800aac0:	2800      	cmp	r0, #0
 800aac2:	db05      	blt.n	800aad0 <__hi0bits+0x38>
 800aac4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aac8:	f103 0301 	add.w	r3, r3, #1
 800aacc:	bf08      	it	eq
 800aace:	2320      	moveq	r3, #32
 800aad0:	4618      	mov	r0, r3
 800aad2:	4770      	bx	lr
 800aad4:	2300      	movs	r3, #0
 800aad6:	e7e4      	b.n	800aaa2 <__hi0bits+0xa>

0800aad8 <__lo0bits>:
 800aad8:	6803      	ldr	r3, [r0, #0]
 800aada:	f013 0207 	ands.w	r2, r3, #7
 800aade:	4601      	mov	r1, r0
 800aae0:	d00b      	beq.n	800aafa <__lo0bits+0x22>
 800aae2:	07da      	lsls	r2, r3, #31
 800aae4:	d423      	bmi.n	800ab2e <__lo0bits+0x56>
 800aae6:	0798      	lsls	r0, r3, #30
 800aae8:	bf49      	itett	mi
 800aaea:	085b      	lsrmi	r3, r3, #1
 800aaec:	089b      	lsrpl	r3, r3, #2
 800aaee:	2001      	movmi	r0, #1
 800aaf0:	600b      	strmi	r3, [r1, #0]
 800aaf2:	bf5c      	itt	pl
 800aaf4:	600b      	strpl	r3, [r1, #0]
 800aaf6:	2002      	movpl	r0, #2
 800aaf8:	4770      	bx	lr
 800aafa:	b298      	uxth	r0, r3
 800aafc:	b9a8      	cbnz	r0, 800ab2a <__lo0bits+0x52>
 800aafe:	0c1b      	lsrs	r3, r3, #16
 800ab00:	2010      	movs	r0, #16
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	b90a      	cbnz	r2, 800ab0a <__lo0bits+0x32>
 800ab06:	3008      	adds	r0, #8
 800ab08:	0a1b      	lsrs	r3, r3, #8
 800ab0a:	071a      	lsls	r2, r3, #28
 800ab0c:	bf04      	itt	eq
 800ab0e:	091b      	lsreq	r3, r3, #4
 800ab10:	3004      	addeq	r0, #4
 800ab12:	079a      	lsls	r2, r3, #30
 800ab14:	bf04      	itt	eq
 800ab16:	089b      	lsreq	r3, r3, #2
 800ab18:	3002      	addeq	r0, #2
 800ab1a:	07da      	lsls	r2, r3, #31
 800ab1c:	d403      	bmi.n	800ab26 <__lo0bits+0x4e>
 800ab1e:	085b      	lsrs	r3, r3, #1
 800ab20:	f100 0001 	add.w	r0, r0, #1
 800ab24:	d005      	beq.n	800ab32 <__lo0bits+0x5a>
 800ab26:	600b      	str	r3, [r1, #0]
 800ab28:	4770      	bx	lr
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	e7e9      	b.n	800ab02 <__lo0bits+0x2a>
 800ab2e:	2000      	movs	r0, #0
 800ab30:	4770      	bx	lr
 800ab32:	2020      	movs	r0, #32
 800ab34:	4770      	bx	lr
	...

0800ab38 <__i2b>:
 800ab38:	b510      	push	{r4, lr}
 800ab3a:	460c      	mov	r4, r1
 800ab3c:	2101      	movs	r1, #1
 800ab3e:	f7ff feb9 	bl	800a8b4 <_Balloc>
 800ab42:	4602      	mov	r2, r0
 800ab44:	b928      	cbnz	r0, 800ab52 <__i2b+0x1a>
 800ab46:	4b05      	ldr	r3, [pc, #20]	; (800ab5c <__i2b+0x24>)
 800ab48:	4805      	ldr	r0, [pc, #20]	; (800ab60 <__i2b+0x28>)
 800ab4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab4e:	f000 fec9 	bl	800b8e4 <__assert_func>
 800ab52:	2301      	movs	r3, #1
 800ab54:	6144      	str	r4, [r0, #20]
 800ab56:	6103      	str	r3, [r0, #16]
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	bf00      	nop
 800ab5c:	0800be00 	.word	0x0800be00
 800ab60:	0800be8c 	.word	0x0800be8c

0800ab64 <__multiply>:
 800ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab68:	4691      	mov	r9, r2
 800ab6a:	690a      	ldr	r2, [r1, #16]
 800ab6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	bfb8      	it	lt
 800ab74:	460b      	movlt	r3, r1
 800ab76:	460c      	mov	r4, r1
 800ab78:	bfbc      	itt	lt
 800ab7a:	464c      	movlt	r4, r9
 800ab7c:	4699      	movlt	r9, r3
 800ab7e:	6927      	ldr	r7, [r4, #16]
 800ab80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab84:	68a3      	ldr	r3, [r4, #8]
 800ab86:	6861      	ldr	r1, [r4, #4]
 800ab88:	eb07 060a 	add.w	r6, r7, sl
 800ab8c:	42b3      	cmp	r3, r6
 800ab8e:	b085      	sub	sp, #20
 800ab90:	bfb8      	it	lt
 800ab92:	3101      	addlt	r1, #1
 800ab94:	f7ff fe8e 	bl	800a8b4 <_Balloc>
 800ab98:	b930      	cbnz	r0, 800aba8 <__multiply+0x44>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	4b44      	ldr	r3, [pc, #272]	; (800acb0 <__multiply+0x14c>)
 800ab9e:	4845      	ldr	r0, [pc, #276]	; (800acb4 <__multiply+0x150>)
 800aba0:	f240 115d 	movw	r1, #349	; 0x15d
 800aba4:	f000 fe9e 	bl	800b8e4 <__assert_func>
 800aba8:	f100 0514 	add.w	r5, r0, #20
 800abac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abb0:	462b      	mov	r3, r5
 800abb2:	2200      	movs	r2, #0
 800abb4:	4543      	cmp	r3, r8
 800abb6:	d321      	bcc.n	800abfc <__multiply+0x98>
 800abb8:	f104 0314 	add.w	r3, r4, #20
 800abbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800abc0:	f109 0314 	add.w	r3, r9, #20
 800abc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800abc8:	9202      	str	r2, [sp, #8]
 800abca:	1b3a      	subs	r2, r7, r4
 800abcc:	3a15      	subs	r2, #21
 800abce:	f022 0203 	bic.w	r2, r2, #3
 800abd2:	3204      	adds	r2, #4
 800abd4:	f104 0115 	add.w	r1, r4, #21
 800abd8:	428f      	cmp	r7, r1
 800abda:	bf38      	it	cc
 800abdc:	2204      	movcc	r2, #4
 800abde:	9201      	str	r2, [sp, #4]
 800abe0:	9a02      	ldr	r2, [sp, #8]
 800abe2:	9303      	str	r3, [sp, #12]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d80c      	bhi.n	800ac02 <__multiply+0x9e>
 800abe8:	2e00      	cmp	r6, #0
 800abea:	dd03      	ble.n	800abf4 <__multiply+0x90>
 800abec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d05a      	beq.n	800acaa <__multiply+0x146>
 800abf4:	6106      	str	r6, [r0, #16]
 800abf6:	b005      	add	sp, #20
 800abf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfc:	f843 2b04 	str.w	r2, [r3], #4
 800ac00:	e7d8      	b.n	800abb4 <__multiply+0x50>
 800ac02:	f8b3 a000 	ldrh.w	sl, [r3]
 800ac06:	f1ba 0f00 	cmp.w	sl, #0
 800ac0a:	d024      	beq.n	800ac56 <__multiply+0xf2>
 800ac0c:	f104 0e14 	add.w	lr, r4, #20
 800ac10:	46a9      	mov	r9, r5
 800ac12:	f04f 0c00 	mov.w	ip, #0
 800ac16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ac1a:	f8d9 1000 	ldr.w	r1, [r9]
 800ac1e:	fa1f fb82 	uxth.w	fp, r2
 800ac22:	b289      	uxth	r1, r1
 800ac24:	fb0a 110b 	mla	r1, sl, fp, r1
 800ac28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ac2c:	f8d9 2000 	ldr.w	r2, [r9]
 800ac30:	4461      	add	r1, ip
 800ac32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac36:	fb0a c20b 	mla	r2, sl, fp, ip
 800ac3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ac3e:	b289      	uxth	r1, r1
 800ac40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac44:	4577      	cmp	r7, lr
 800ac46:	f849 1b04 	str.w	r1, [r9], #4
 800ac4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac4e:	d8e2      	bhi.n	800ac16 <__multiply+0xb2>
 800ac50:	9a01      	ldr	r2, [sp, #4]
 800ac52:	f845 c002 	str.w	ip, [r5, r2]
 800ac56:	9a03      	ldr	r2, [sp, #12]
 800ac58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	f1b9 0f00 	cmp.w	r9, #0
 800ac62:	d020      	beq.n	800aca6 <__multiply+0x142>
 800ac64:	6829      	ldr	r1, [r5, #0]
 800ac66:	f104 0c14 	add.w	ip, r4, #20
 800ac6a:	46ae      	mov	lr, r5
 800ac6c:	f04f 0a00 	mov.w	sl, #0
 800ac70:	f8bc b000 	ldrh.w	fp, [ip]
 800ac74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac78:	fb09 220b 	mla	r2, r9, fp, r2
 800ac7c:	4492      	add	sl, r2
 800ac7e:	b289      	uxth	r1, r1
 800ac80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac84:	f84e 1b04 	str.w	r1, [lr], #4
 800ac88:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac8c:	f8be 1000 	ldrh.w	r1, [lr]
 800ac90:	0c12      	lsrs	r2, r2, #16
 800ac92:	fb09 1102 	mla	r1, r9, r2, r1
 800ac96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac9a:	4567      	cmp	r7, ip
 800ac9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aca0:	d8e6      	bhi.n	800ac70 <__multiply+0x10c>
 800aca2:	9a01      	ldr	r2, [sp, #4]
 800aca4:	50a9      	str	r1, [r5, r2]
 800aca6:	3504      	adds	r5, #4
 800aca8:	e79a      	b.n	800abe0 <__multiply+0x7c>
 800acaa:	3e01      	subs	r6, #1
 800acac:	e79c      	b.n	800abe8 <__multiply+0x84>
 800acae:	bf00      	nop
 800acb0:	0800be00 	.word	0x0800be00
 800acb4:	0800be8c 	.word	0x0800be8c

0800acb8 <__pow5mult>:
 800acb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acbc:	4615      	mov	r5, r2
 800acbe:	f012 0203 	ands.w	r2, r2, #3
 800acc2:	4606      	mov	r6, r0
 800acc4:	460f      	mov	r7, r1
 800acc6:	d007      	beq.n	800acd8 <__pow5mult+0x20>
 800acc8:	4c25      	ldr	r4, [pc, #148]	; (800ad60 <__pow5mult+0xa8>)
 800acca:	3a01      	subs	r2, #1
 800accc:	2300      	movs	r3, #0
 800acce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800acd2:	f7ff fe51 	bl	800a978 <__multadd>
 800acd6:	4607      	mov	r7, r0
 800acd8:	10ad      	asrs	r5, r5, #2
 800acda:	d03d      	beq.n	800ad58 <__pow5mult+0xa0>
 800acdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acde:	b97c      	cbnz	r4, 800ad00 <__pow5mult+0x48>
 800ace0:	2010      	movs	r0, #16
 800ace2:	f7ff fdc1 	bl	800a868 <malloc>
 800ace6:	4602      	mov	r2, r0
 800ace8:	6270      	str	r0, [r6, #36]	; 0x24
 800acea:	b928      	cbnz	r0, 800acf8 <__pow5mult+0x40>
 800acec:	4b1d      	ldr	r3, [pc, #116]	; (800ad64 <__pow5mult+0xac>)
 800acee:	481e      	ldr	r0, [pc, #120]	; (800ad68 <__pow5mult+0xb0>)
 800acf0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800acf4:	f000 fdf6 	bl	800b8e4 <__assert_func>
 800acf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acfc:	6004      	str	r4, [r0, #0]
 800acfe:	60c4      	str	r4, [r0, #12]
 800ad00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad08:	b94c      	cbnz	r4, 800ad1e <__pow5mult+0x66>
 800ad0a:	f240 2171 	movw	r1, #625	; 0x271
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff ff12 	bl	800ab38 <__i2b>
 800ad14:	2300      	movs	r3, #0
 800ad16:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	6003      	str	r3, [r0, #0]
 800ad1e:	f04f 0900 	mov.w	r9, #0
 800ad22:	07eb      	lsls	r3, r5, #31
 800ad24:	d50a      	bpl.n	800ad3c <__pow5mult+0x84>
 800ad26:	4639      	mov	r1, r7
 800ad28:	4622      	mov	r2, r4
 800ad2a:	4630      	mov	r0, r6
 800ad2c:	f7ff ff1a 	bl	800ab64 <__multiply>
 800ad30:	4639      	mov	r1, r7
 800ad32:	4680      	mov	r8, r0
 800ad34:	4630      	mov	r0, r6
 800ad36:	f7ff fdfd 	bl	800a934 <_Bfree>
 800ad3a:	4647      	mov	r7, r8
 800ad3c:	106d      	asrs	r5, r5, #1
 800ad3e:	d00b      	beq.n	800ad58 <__pow5mult+0xa0>
 800ad40:	6820      	ldr	r0, [r4, #0]
 800ad42:	b938      	cbnz	r0, 800ad54 <__pow5mult+0x9c>
 800ad44:	4622      	mov	r2, r4
 800ad46:	4621      	mov	r1, r4
 800ad48:	4630      	mov	r0, r6
 800ad4a:	f7ff ff0b 	bl	800ab64 <__multiply>
 800ad4e:	6020      	str	r0, [r4, #0]
 800ad50:	f8c0 9000 	str.w	r9, [r0]
 800ad54:	4604      	mov	r4, r0
 800ad56:	e7e4      	b.n	800ad22 <__pow5mult+0x6a>
 800ad58:	4638      	mov	r0, r7
 800ad5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad5e:	bf00      	nop
 800ad60:	0800bfd8 	.word	0x0800bfd8
 800ad64:	0800bd8e 	.word	0x0800bd8e
 800ad68:	0800be8c 	.word	0x0800be8c

0800ad6c <__lshift>:
 800ad6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad70:	460c      	mov	r4, r1
 800ad72:	6849      	ldr	r1, [r1, #4]
 800ad74:	6923      	ldr	r3, [r4, #16]
 800ad76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad7a:	68a3      	ldr	r3, [r4, #8]
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	4691      	mov	r9, r2
 800ad80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad84:	f108 0601 	add.w	r6, r8, #1
 800ad88:	42b3      	cmp	r3, r6
 800ad8a:	db0b      	blt.n	800ada4 <__lshift+0x38>
 800ad8c:	4638      	mov	r0, r7
 800ad8e:	f7ff fd91 	bl	800a8b4 <_Balloc>
 800ad92:	4605      	mov	r5, r0
 800ad94:	b948      	cbnz	r0, 800adaa <__lshift+0x3e>
 800ad96:	4602      	mov	r2, r0
 800ad98:	4b2a      	ldr	r3, [pc, #168]	; (800ae44 <__lshift+0xd8>)
 800ad9a:	482b      	ldr	r0, [pc, #172]	; (800ae48 <__lshift+0xdc>)
 800ad9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ada0:	f000 fda0 	bl	800b8e4 <__assert_func>
 800ada4:	3101      	adds	r1, #1
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	e7ee      	b.n	800ad88 <__lshift+0x1c>
 800adaa:	2300      	movs	r3, #0
 800adac:	f100 0114 	add.w	r1, r0, #20
 800adb0:	f100 0210 	add.w	r2, r0, #16
 800adb4:	4618      	mov	r0, r3
 800adb6:	4553      	cmp	r3, sl
 800adb8:	db37      	blt.n	800ae2a <__lshift+0xbe>
 800adba:	6920      	ldr	r0, [r4, #16]
 800adbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800adc0:	f104 0314 	add.w	r3, r4, #20
 800adc4:	f019 091f 	ands.w	r9, r9, #31
 800adc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800adcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800add0:	d02f      	beq.n	800ae32 <__lshift+0xc6>
 800add2:	f1c9 0e20 	rsb	lr, r9, #32
 800add6:	468a      	mov	sl, r1
 800add8:	f04f 0c00 	mov.w	ip, #0
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	fa02 f209 	lsl.w	r2, r2, r9
 800ade2:	ea42 020c 	orr.w	r2, r2, ip
 800ade6:	f84a 2b04 	str.w	r2, [sl], #4
 800adea:	f853 2b04 	ldr.w	r2, [r3], #4
 800adee:	4298      	cmp	r0, r3
 800adf0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800adf4:	d8f2      	bhi.n	800addc <__lshift+0x70>
 800adf6:	1b03      	subs	r3, r0, r4
 800adf8:	3b15      	subs	r3, #21
 800adfa:	f023 0303 	bic.w	r3, r3, #3
 800adfe:	3304      	adds	r3, #4
 800ae00:	f104 0215 	add.w	r2, r4, #21
 800ae04:	4290      	cmp	r0, r2
 800ae06:	bf38      	it	cc
 800ae08:	2304      	movcc	r3, #4
 800ae0a:	f841 c003 	str.w	ip, [r1, r3]
 800ae0e:	f1bc 0f00 	cmp.w	ip, #0
 800ae12:	d001      	beq.n	800ae18 <__lshift+0xac>
 800ae14:	f108 0602 	add.w	r6, r8, #2
 800ae18:	3e01      	subs	r6, #1
 800ae1a:	4638      	mov	r0, r7
 800ae1c:	612e      	str	r6, [r5, #16]
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f7ff fd88 	bl	800a934 <_Bfree>
 800ae24:	4628      	mov	r0, r5
 800ae26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae2e:	3301      	adds	r3, #1
 800ae30:	e7c1      	b.n	800adb6 <__lshift+0x4a>
 800ae32:	3904      	subs	r1, #4
 800ae34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae38:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae3c:	4298      	cmp	r0, r3
 800ae3e:	d8f9      	bhi.n	800ae34 <__lshift+0xc8>
 800ae40:	e7ea      	b.n	800ae18 <__lshift+0xac>
 800ae42:	bf00      	nop
 800ae44:	0800be00 	.word	0x0800be00
 800ae48:	0800be8c 	.word	0x0800be8c

0800ae4c <__mcmp>:
 800ae4c:	b530      	push	{r4, r5, lr}
 800ae4e:	6902      	ldr	r2, [r0, #16]
 800ae50:	690c      	ldr	r4, [r1, #16]
 800ae52:	1b12      	subs	r2, r2, r4
 800ae54:	d10e      	bne.n	800ae74 <__mcmp+0x28>
 800ae56:	f100 0314 	add.w	r3, r0, #20
 800ae5a:	3114      	adds	r1, #20
 800ae5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae6c:	42a5      	cmp	r5, r4
 800ae6e:	d003      	beq.n	800ae78 <__mcmp+0x2c>
 800ae70:	d305      	bcc.n	800ae7e <__mcmp+0x32>
 800ae72:	2201      	movs	r2, #1
 800ae74:	4610      	mov	r0, r2
 800ae76:	bd30      	pop	{r4, r5, pc}
 800ae78:	4283      	cmp	r3, r0
 800ae7a:	d3f3      	bcc.n	800ae64 <__mcmp+0x18>
 800ae7c:	e7fa      	b.n	800ae74 <__mcmp+0x28>
 800ae7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae82:	e7f7      	b.n	800ae74 <__mcmp+0x28>

0800ae84 <__mdiff>:
 800ae84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	460c      	mov	r4, r1
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	4611      	mov	r1, r2
 800ae8e:	4620      	mov	r0, r4
 800ae90:	4690      	mov	r8, r2
 800ae92:	f7ff ffdb 	bl	800ae4c <__mcmp>
 800ae96:	1e05      	subs	r5, r0, #0
 800ae98:	d110      	bne.n	800aebc <__mdiff+0x38>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	4630      	mov	r0, r6
 800ae9e:	f7ff fd09 	bl	800a8b4 <_Balloc>
 800aea2:	b930      	cbnz	r0, 800aeb2 <__mdiff+0x2e>
 800aea4:	4b3a      	ldr	r3, [pc, #232]	; (800af90 <__mdiff+0x10c>)
 800aea6:	4602      	mov	r2, r0
 800aea8:	f240 2132 	movw	r1, #562	; 0x232
 800aeac:	4839      	ldr	r0, [pc, #228]	; (800af94 <__mdiff+0x110>)
 800aeae:	f000 fd19 	bl	800b8e4 <__assert_func>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aeb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebc:	bfa4      	itt	ge
 800aebe:	4643      	movge	r3, r8
 800aec0:	46a0      	movge	r8, r4
 800aec2:	4630      	mov	r0, r6
 800aec4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aec8:	bfa6      	itte	ge
 800aeca:	461c      	movge	r4, r3
 800aecc:	2500      	movge	r5, #0
 800aece:	2501      	movlt	r5, #1
 800aed0:	f7ff fcf0 	bl	800a8b4 <_Balloc>
 800aed4:	b920      	cbnz	r0, 800aee0 <__mdiff+0x5c>
 800aed6:	4b2e      	ldr	r3, [pc, #184]	; (800af90 <__mdiff+0x10c>)
 800aed8:	4602      	mov	r2, r0
 800aeda:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aede:	e7e5      	b.n	800aeac <__mdiff+0x28>
 800aee0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aee4:	6926      	ldr	r6, [r4, #16]
 800aee6:	60c5      	str	r5, [r0, #12]
 800aee8:	f104 0914 	add.w	r9, r4, #20
 800aeec:	f108 0514 	add.w	r5, r8, #20
 800aef0:	f100 0e14 	add.w	lr, r0, #20
 800aef4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aef8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aefc:	f108 0210 	add.w	r2, r8, #16
 800af00:	46f2      	mov	sl, lr
 800af02:	2100      	movs	r1, #0
 800af04:	f859 3b04 	ldr.w	r3, [r9], #4
 800af08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800af0c:	fa1f f883 	uxth.w	r8, r3
 800af10:	fa11 f18b 	uxtah	r1, r1, fp
 800af14:	0c1b      	lsrs	r3, r3, #16
 800af16:	eba1 0808 	sub.w	r8, r1, r8
 800af1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800af1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800af22:	fa1f f888 	uxth.w	r8, r8
 800af26:	1419      	asrs	r1, r3, #16
 800af28:	454e      	cmp	r6, r9
 800af2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800af2e:	f84a 3b04 	str.w	r3, [sl], #4
 800af32:	d8e7      	bhi.n	800af04 <__mdiff+0x80>
 800af34:	1b33      	subs	r3, r6, r4
 800af36:	3b15      	subs	r3, #21
 800af38:	f023 0303 	bic.w	r3, r3, #3
 800af3c:	3304      	adds	r3, #4
 800af3e:	3415      	adds	r4, #21
 800af40:	42a6      	cmp	r6, r4
 800af42:	bf38      	it	cc
 800af44:	2304      	movcc	r3, #4
 800af46:	441d      	add	r5, r3
 800af48:	4473      	add	r3, lr
 800af4a:	469e      	mov	lr, r3
 800af4c:	462e      	mov	r6, r5
 800af4e:	4566      	cmp	r6, ip
 800af50:	d30e      	bcc.n	800af70 <__mdiff+0xec>
 800af52:	f10c 0203 	add.w	r2, ip, #3
 800af56:	1b52      	subs	r2, r2, r5
 800af58:	f022 0203 	bic.w	r2, r2, #3
 800af5c:	3d03      	subs	r5, #3
 800af5e:	45ac      	cmp	ip, r5
 800af60:	bf38      	it	cc
 800af62:	2200      	movcc	r2, #0
 800af64:	441a      	add	r2, r3
 800af66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af6a:	b17b      	cbz	r3, 800af8c <__mdiff+0x108>
 800af6c:	6107      	str	r7, [r0, #16]
 800af6e:	e7a3      	b.n	800aeb8 <__mdiff+0x34>
 800af70:	f856 8b04 	ldr.w	r8, [r6], #4
 800af74:	fa11 f288 	uxtah	r2, r1, r8
 800af78:	1414      	asrs	r4, r2, #16
 800af7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af7e:	b292      	uxth	r2, r2
 800af80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af84:	f84e 2b04 	str.w	r2, [lr], #4
 800af88:	1421      	asrs	r1, r4, #16
 800af8a:	e7e0      	b.n	800af4e <__mdiff+0xca>
 800af8c:	3f01      	subs	r7, #1
 800af8e:	e7ea      	b.n	800af66 <__mdiff+0xe2>
 800af90:	0800be00 	.word	0x0800be00
 800af94:	0800be8c 	.word	0x0800be8c

0800af98 <__ulp>:
 800af98:	b082      	sub	sp, #8
 800af9a:	ed8d 0b00 	vstr	d0, [sp]
 800af9e:	9b01      	ldr	r3, [sp, #4]
 800afa0:	4912      	ldr	r1, [pc, #72]	; (800afec <__ulp+0x54>)
 800afa2:	4019      	ands	r1, r3
 800afa4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800afa8:	2900      	cmp	r1, #0
 800afaa:	dd05      	ble.n	800afb8 <__ulp+0x20>
 800afac:	2200      	movs	r2, #0
 800afae:	460b      	mov	r3, r1
 800afb0:	ec43 2b10 	vmov	d0, r2, r3
 800afb4:	b002      	add	sp, #8
 800afb6:	4770      	bx	lr
 800afb8:	4249      	negs	r1, r1
 800afba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800afbe:	ea4f 5021 	mov.w	r0, r1, asr #20
 800afc2:	f04f 0200 	mov.w	r2, #0
 800afc6:	f04f 0300 	mov.w	r3, #0
 800afca:	da04      	bge.n	800afd6 <__ulp+0x3e>
 800afcc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800afd0:	fa41 f300 	asr.w	r3, r1, r0
 800afd4:	e7ec      	b.n	800afb0 <__ulp+0x18>
 800afd6:	f1a0 0114 	sub.w	r1, r0, #20
 800afda:	291e      	cmp	r1, #30
 800afdc:	bfda      	itte	le
 800afde:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800afe2:	fa20 f101 	lsrle.w	r1, r0, r1
 800afe6:	2101      	movgt	r1, #1
 800afe8:	460a      	mov	r2, r1
 800afea:	e7e1      	b.n	800afb0 <__ulp+0x18>
 800afec:	7ff00000 	.word	0x7ff00000

0800aff0 <__b2d>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	6905      	ldr	r5, [r0, #16]
 800aff4:	f100 0714 	add.w	r7, r0, #20
 800aff8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800affc:	1f2e      	subs	r6, r5, #4
 800affe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b002:	4620      	mov	r0, r4
 800b004:	f7ff fd48 	bl	800aa98 <__hi0bits>
 800b008:	f1c0 0320 	rsb	r3, r0, #32
 800b00c:	280a      	cmp	r0, #10
 800b00e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b08c <__b2d+0x9c>
 800b012:	600b      	str	r3, [r1, #0]
 800b014:	dc14      	bgt.n	800b040 <__b2d+0x50>
 800b016:	f1c0 0e0b 	rsb	lr, r0, #11
 800b01a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b01e:	42b7      	cmp	r7, r6
 800b020:	ea41 030c 	orr.w	r3, r1, ip
 800b024:	bf34      	ite	cc
 800b026:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b02a:	2100      	movcs	r1, #0
 800b02c:	3015      	adds	r0, #21
 800b02e:	fa04 f000 	lsl.w	r0, r4, r0
 800b032:	fa21 f10e 	lsr.w	r1, r1, lr
 800b036:	ea40 0201 	orr.w	r2, r0, r1
 800b03a:	ec43 2b10 	vmov	d0, r2, r3
 800b03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b040:	42b7      	cmp	r7, r6
 800b042:	bf3a      	itte	cc
 800b044:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b048:	f1a5 0608 	subcc.w	r6, r5, #8
 800b04c:	2100      	movcs	r1, #0
 800b04e:	380b      	subs	r0, #11
 800b050:	d017      	beq.n	800b082 <__b2d+0x92>
 800b052:	f1c0 0c20 	rsb	ip, r0, #32
 800b056:	fa04 f500 	lsl.w	r5, r4, r0
 800b05a:	42be      	cmp	r6, r7
 800b05c:	fa21 f40c 	lsr.w	r4, r1, ip
 800b060:	ea45 0504 	orr.w	r5, r5, r4
 800b064:	bf8c      	ite	hi
 800b066:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b06a:	2400      	movls	r4, #0
 800b06c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b070:	fa01 f000 	lsl.w	r0, r1, r0
 800b074:	fa24 f40c 	lsr.w	r4, r4, ip
 800b078:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b07c:	ea40 0204 	orr.w	r2, r0, r4
 800b080:	e7db      	b.n	800b03a <__b2d+0x4a>
 800b082:	ea44 030c 	orr.w	r3, r4, ip
 800b086:	460a      	mov	r2, r1
 800b088:	e7d7      	b.n	800b03a <__b2d+0x4a>
 800b08a:	bf00      	nop
 800b08c:	3ff00000 	.word	0x3ff00000

0800b090 <__d2b>:
 800b090:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b094:	4689      	mov	r9, r1
 800b096:	2101      	movs	r1, #1
 800b098:	ec57 6b10 	vmov	r6, r7, d0
 800b09c:	4690      	mov	r8, r2
 800b09e:	f7ff fc09 	bl	800a8b4 <_Balloc>
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	b930      	cbnz	r0, 800b0b4 <__d2b+0x24>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	4b25      	ldr	r3, [pc, #148]	; (800b140 <__d2b+0xb0>)
 800b0aa:	4826      	ldr	r0, [pc, #152]	; (800b144 <__d2b+0xb4>)
 800b0ac:	f240 310a 	movw	r1, #778	; 0x30a
 800b0b0:	f000 fc18 	bl	800b8e4 <__assert_func>
 800b0b4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b0b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0bc:	bb35      	cbnz	r5, 800b10c <__d2b+0x7c>
 800b0be:	2e00      	cmp	r6, #0
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	d028      	beq.n	800b116 <__d2b+0x86>
 800b0c4:	4668      	mov	r0, sp
 800b0c6:	9600      	str	r6, [sp, #0]
 800b0c8:	f7ff fd06 	bl	800aad8 <__lo0bits>
 800b0cc:	9900      	ldr	r1, [sp, #0]
 800b0ce:	b300      	cbz	r0, 800b112 <__d2b+0x82>
 800b0d0:	9a01      	ldr	r2, [sp, #4]
 800b0d2:	f1c0 0320 	rsb	r3, r0, #32
 800b0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0da:	430b      	orrs	r3, r1
 800b0dc:	40c2      	lsrs	r2, r0
 800b0de:	6163      	str	r3, [r4, #20]
 800b0e0:	9201      	str	r2, [sp, #4]
 800b0e2:	9b01      	ldr	r3, [sp, #4]
 800b0e4:	61a3      	str	r3, [r4, #24]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	bf14      	ite	ne
 800b0ea:	2202      	movne	r2, #2
 800b0ec:	2201      	moveq	r2, #1
 800b0ee:	6122      	str	r2, [r4, #16]
 800b0f0:	b1d5      	cbz	r5, 800b128 <__d2b+0x98>
 800b0f2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0f6:	4405      	add	r5, r0
 800b0f8:	f8c9 5000 	str.w	r5, [r9]
 800b0fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b100:	f8c8 0000 	str.w	r0, [r8]
 800b104:	4620      	mov	r0, r4
 800b106:	b003      	add	sp, #12
 800b108:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b10c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b110:	e7d5      	b.n	800b0be <__d2b+0x2e>
 800b112:	6161      	str	r1, [r4, #20]
 800b114:	e7e5      	b.n	800b0e2 <__d2b+0x52>
 800b116:	a801      	add	r0, sp, #4
 800b118:	f7ff fcde 	bl	800aad8 <__lo0bits>
 800b11c:	9b01      	ldr	r3, [sp, #4]
 800b11e:	6163      	str	r3, [r4, #20]
 800b120:	2201      	movs	r2, #1
 800b122:	6122      	str	r2, [r4, #16]
 800b124:	3020      	adds	r0, #32
 800b126:	e7e3      	b.n	800b0f0 <__d2b+0x60>
 800b128:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b12c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b130:	f8c9 0000 	str.w	r0, [r9]
 800b134:	6918      	ldr	r0, [r3, #16]
 800b136:	f7ff fcaf 	bl	800aa98 <__hi0bits>
 800b13a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b13e:	e7df      	b.n	800b100 <__d2b+0x70>
 800b140:	0800be00 	.word	0x0800be00
 800b144:	0800be8c 	.word	0x0800be8c

0800b148 <__ratio>:
 800b148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	4688      	mov	r8, r1
 800b14e:	4669      	mov	r1, sp
 800b150:	4681      	mov	r9, r0
 800b152:	f7ff ff4d 	bl	800aff0 <__b2d>
 800b156:	a901      	add	r1, sp, #4
 800b158:	4640      	mov	r0, r8
 800b15a:	ec55 4b10 	vmov	r4, r5, d0
 800b15e:	f7ff ff47 	bl	800aff0 <__b2d>
 800b162:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b166:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b16a:	eba3 0c02 	sub.w	ip, r3, r2
 800b16e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b172:	1a9b      	subs	r3, r3, r2
 800b174:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b178:	ec51 0b10 	vmov	r0, r1, d0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	bfd6      	itet	le
 800b180:	460a      	movle	r2, r1
 800b182:	462a      	movgt	r2, r5
 800b184:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b188:	468b      	mov	fp, r1
 800b18a:	462f      	mov	r7, r5
 800b18c:	bfd4      	ite	le
 800b18e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b192:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b196:	4620      	mov	r0, r4
 800b198:	ee10 2a10 	vmov	r2, s0
 800b19c:	465b      	mov	r3, fp
 800b19e:	4639      	mov	r1, r7
 800b1a0:	f7f5 fb64 	bl	800086c <__aeabi_ddiv>
 800b1a4:	ec41 0b10 	vmov	d0, r0, r1
 800b1a8:	b003      	add	sp, #12
 800b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1ae <__copybits>:
 800b1ae:	3901      	subs	r1, #1
 800b1b0:	b570      	push	{r4, r5, r6, lr}
 800b1b2:	1149      	asrs	r1, r1, #5
 800b1b4:	6914      	ldr	r4, [r2, #16]
 800b1b6:	3101      	adds	r1, #1
 800b1b8:	f102 0314 	add.w	r3, r2, #20
 800b1bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b1c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b1c4:	1f05      	subs	r5, r0, #4
 800b1c6:	42a3      	cmp	r3, r4
 800b1c8:	d30c      	bcc.n	800b1e4 <__copybits+0x36>
 800b1ca:	1aa3      	subs	r3, r4, r2
 800b1cc:	3b11      	subs	r3, #17
 800b1ce:	f023 0303 	bic.w	r3, r3, #3
 800b1d2:	3211      	adds	r2, #17
 800b1d4:	42a2      	cmp	r2, r4
 800b1d6:	bf88      	it	hi
 800b1d8:	2300      	movhi	r3, #0
 800b1da:	4418      	add	r0, r3
 800b1dc:	2300      	movs	r3, #0
 800b1de:	4288      	cmp	r0, r1
 800b1e0:	d305      	bcc.n	800b1ee <__copybits+0x40>
 800b1e2:	bd70      	pop	{r4, r5, r6, pc}
 800b1e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1ec:	e7eb      	b.n	800b1c6 <__copybits+0x18>
 800b1ee:	f840 3b04 	str.w	r3, [r0], #4
 800b1f2:	e7f4      	b.n	800b1de <__copybits+0x30>

0800b1f4 <__any_on>:
 800b1f4:	f100 0214 	add.w	r2, r0, #20
 800b1f8:	6900      	ldr	r0, [r0, #16]
 800b1fa:	114b      	asrs	r3, r1, #5
 800b1fc:	4298      	cmp	r0, r3
 800b1fe:	b510      	push	{r4, lr}
 800b200:	db11      	blt.n	800b226 <__any_on+0x32>
 800b202:	dd0a      	ble.n	800b21a <__any_on+0x26>
 800b204:	f011 011f 	ands.w	r1, r1, #31
 800b208:	d007      	beq.n	800b21a <__any_on+0x26>
 800b20a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b20e:	fa24 f001 	lsr.w	r0, r4, r1
 800b212:	fa00 f101 	lsl.w	r1, r0, r1
 800b216:	428c      	cmp	r4, r1
 800b218:	d10b      	bne.n	800b232 <__any_on+0x3e>
 800b21a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b21e:	4293      	cmp	r3, r2
 800b220:	d803      	bhi.n	800b22a <__any_on+0x36>
 800b222:	2000      	movs	r0, #0
 800b224:	bd10      	pop	{r4, pc}
 800b226:	4603      	mov	r3, r0
 800b228:	e7f7      	b.n	800b21a <__any_on+0x26>
 800b22a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b22e:	2900      	cmp	r1, #0
 800b230:	d0f5      	beq.n	800b21e <__any_on+0x2a>
 800b232:	2001      	movs	r0, #1
 800b234:	e7f6      	b.n	800b224 <__any_on+0x30>

0800b236 <_calloc_r>:
 800b236:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b238:	fba1 2402 	umull	r2, r4, r1, r2
 800b23c:	b94c      	cbnz	r4, 800b252 <_calloc_r+0x1c>
 800b23e:	4611      	mov	r1, r2
 800b240:	9201      	str	r2, [sp, #4]
 800b242:	f7fb fff9 	bl	8007238 <_malloc_r>
 800b246:	9a01      	ldr	r2, [sp, #4]
 800b248:	4605      	mov	r5, r0
 800b24a:	b930      	cbnz	r0, 800b25a <_calloc_r+0x24>
 800b24c:	4628      	mov	r0, r5
 800b24e:	b003      	add	sp, #12
 800b250:	bd30      	pop	{r4, r5, pc}
 800b252:	220c      	movs	r2, #12
 800b254:	6002      	str	r2, [r0, #0]
 800b256:	2500      	movs	r5, #0
 800b258:	e7f8      	b.n	800b24c <_calloc_r+0x16>
 800b25a:	4621      	mov	r1, r4
 800b25c:	f7fb ffc3 	bl	80071e6 <memset>
 800b260:	e7f4      	b.n	800b24c <_calloc_r+0x16>
	...

0800b264 <_free_r>:
 800b264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b266:	2900      	cmp	r1, #0
 800b268:	d044      	beq.n	800b2f4 <_free_r+0x90>
 800b26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26e:	9001      	str	r0, [sp, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	f1a1 0404 	sub.w	r4, r1, #4
 800b276:	bfb8      	it	lt
 800b278:	18e4      	addlt	r4, r4, r3
 800b27a:	f7ff fb0f 	bl	800a89c <__malloc_lock>
 800b27e:	4a1e      	ldr	r2, [pc, #120]	; (800b2f8 <_free_r+0x94>)
 800b280:	9801      	ldr	r0, [sp, #4]
 800b282:	6813      	ldr	r3, [r2, #0]
 800b284:	b933      	cbnz	r3, 800b294 <_free_r+0x30>
 800b286:	6063      	str	r3, [r4, #4]
 800b288:	6014      	str	r4, [r2, #0]
 800b28a:	b003      	add	sp, #12
 800b28c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b290:	f7ff bb0a 	b.w	800a8a8 <__malloc_unlock>
 800b294:	42a3      	cmp	r3, r4
 800b296:	d908      	bls.n	800b2aa <_free_r+0x46>
 800b298:	6825      	ldr	r5, [r4, #0]
 800b29a:	1961      	adds	r1, r4, r5
 800b29c:	428b      	cmp	r3, r1
 800b29e:	bf01      	itttt	eq
 800b2a0:	6819      	ldreq	r1, [r3, #0]
 800b2a2:	685b      	ldreq	r3, [r3, #4]
 800b2a4:	1949      	addeq	r1, r1, r5
 800b2a6:	6021      	streq	r1, [r4, #0]
 800b2a8:	e7ed      	b.n	800b286 <_free_r+0x22>
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	b10b      	cbz	r3, 800b2b4 <_free_r+0x50>
 800b2b0:	42a3      	cmp	r3, r4
 800b2b2:	d9fa      	bls.n	800b2aa <_free_r+0x46>
 800b2b4:	6811      	ldr	r1, [r2, #0]
 800b2b6:	1855      	adds	r5, r2, r1
 800b2b8:	42a5      	cmp	r5, r4
 800b2ba:	d10b      	bne.n	800b2d4 <_free_r+0x70>
 800b2bc:	6824      	ldr	r4, [r4, #0]
 800b2be:	4421      	add	r1, r4
 800b2c0:	1854      	adds	r4, r2, r1
 800b2c2:	42a3      	cmp	r3, r4
 800b2c4:	6011      	str	r1, [r2, #0]
 800b2c6:	d1e0      	bne.n	800b28a <_free_r+0x26>
 800b2c8:	681c      	ldr	r4, [r3, #0]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	6053      	str	r3, [r2, #4]
 800b2ce:	4421      	add	r1, r4
 800b2d0:	6011      	str	r1, [r2, #0]
 800b2d2:	e7da      	b.n	800b28a <_free_r+0x26>
 800b2d4:	d902      	bls.n	800b2dc <_free_r+0x78>
 800b2d6:	230c      	movs	r3, #12
 800b2d8:	6003      	str	r3, [r0, #0]
 800b2da:	e7d6      	b.n	800b28a <_free_r+0x26>
 800b2dc:	6825      	ldr	r5, [r4, #0]
 800b2de:	1961      	adds	r1, r4, r5
 800b2e0:	428b      	cmp	r3, r1
 800b2e2:	bf04      	itt	eq
 800b2e4:	6819      	ldreq	r1, [r3, #0]
 800b2e6:	685b      	ldreq	r3, [r3, #4]
 800b2e8:	6063      	str	r3, [r4, #4]
 800b2ea:	bf04      	itt	eq
 800b2ec:	1949      	addeq	r1, r1, r5
 800b2ee:	6021      	streq	r1, [r4, #0]
 800b2f0:	6054      	str	r4, [r2, #4]
 800b2f2:	e7ca      	b.n	800b28a <_free_r+0x26>
 800b2f4:	b003      	add	sp, #12
 800b2f6:	bd30      	pop	{r4, r5, pc}
 800b2f8:	20005340 	.word	0x20005340

0800b2fc <__ssputs_r>:
 800b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b300:	688e      	ldr	r6, [r1, #8]
 800b302:	429e      	cmp	r6, r3
 800b304:	4682      	mov	sl, r0
 800b306:	460c      	mov	r4, r1
 800b308:	4690      	mov	r8, r2
 800b30a:	461f      	mov	r7, r3
 800b30c:	d838      	bhi.n	800b380 <__ssputs_r+0x84>
 800b30e:	898a      	ldrh	r2, [r1, #12]
 800b310:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b314:	d032      	beq.n	800b37c <__ssputs_r+0x80>
 800b316:	6825      	ldr	r5, [r4, #0]
 800b318:	6909      	ldr	r1, [r1, #16]
 800b31a:	eba5 0901 	sub.w	r9, r5, r1
 800b31e:	6965      	ldr	r5, [r4, #20]
 800b320:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b324:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b328:	3301      	adds	r3, #1
 800b32a:	444b      	add	r3, r9
 800b32c:	106d      	asrs	r5, r5, #1
 800b32e:	429d      	cmp	r5, r3
 800b330:	bf38      	it	cc
 800b332:	461d      	movcc	r5, r3
 800b334:	0553      	lsls	r3, r2, #21
 800b336:	d531      	bpl.n	800b39c <__ssputs_r+0xa0>
 800b338:	4629      	mov	r1, r5
 800b33a:	f7fb ff7d 	bl	8007238 <_malloc_r>
 800b33e:	4606      	mov	r6, r0
 800b340:	b950      	cbnz	r0, 800b358 <__ssputs_r+0x5c>
 800b342:	230c      	movs	r3, #12
 800b344:	f8ca 3000 	str.w	r3, [sl]
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b34e:	81a3      	strh	r3, [r4, #12]
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b358:	6921      	ldr	r1, [r4, #16]
 800b35a:	464a      	mov	r2, r9
 800b35c:	f7fb ff35 	bl	80071ca <memcpy>
 800b360:	89a3      	ldrh	r3, [r4, #12]
 800b362:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b36a:	81a3      	strh	r3, [r4, #12]
 800b36c:	6126      	str	r6, [r4, #16]
 800b36e:	6165      	str	r5, [r4, #20]
 800b370:	444e      	add	r6, r9
 800b372:	eba5 0509 	sub.w	r5, r5, r9
 800b376:	6026      	str	r6, [r4, #0]
 800b378:	60a5      	str	r5, [r4, #8]
 800b37a:	463e      	mov	r6, r7
 800b37c:	42be      	cmp	r6, r7
 800b37e:	d900      	bls.n	800b382 <__ssputs_r+0x86>
 800b380:	463e      	mov	r6, r7
 800b382:	6820      	ldr	r0, [r4, #0]
 800b384:	4632      	mov	r2, r6
 800b386:	4641      	mov	r1, r8
 800b388:	f000 fafe 	bl	800b988 <memmove>
 800b38c:	68a3      	ldr	r3, [r4, #8]
 800b38e:	1b9b      	subs	r3, r3, r6
 800b390:	60a3      	str	r3, [r4, #8]
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	4433      	add	r3, r6
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	2000      	movs	r0, #0
 800b39a:	e7db      	b.n	800b354 <__ssputs_r+0x58>
 800b39c:	462a      	mov	r2, r5
 800b39e:	f000 fb0d 	bl	800b9bc <_realloc_r>
 800b3a2:	4606      	mov	r6, r0
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d1e1      	bne.n	800b36c <__ssputs_r+0x70>
 800b3a8:	6921      	ldr	r1, [r4, #16]
 800b3aa:	4650      	mov	r0, sl
 800b3ac:	f7ff ff5a 	bl	800b264 <_free_r>
 800b3b0:	e7c7      	b.n	800b342 <__ssputs_r+0x46>
	...

0800b3b4 <_svfiprintf_r>:
 800b3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b8:	4698      	mov	r8, r3
 800b3ba:	898b      	ldrh	r3, [r1, #12]
 800b3bc:	061b      	lsls	r3, r3, #24
 800b3be:	b09d      	sub	sp, #116	; 0x74
 800b3c0:	4607      	mov	r7, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	d50e      	bpl.n	800b3e6 <_svfiprintf_r+0x32>
 800b3c8:	690b      	ldr	r3, [r1, #16]
 800b3ca:	b963      	cbnz	r3, 800b3e6 <_svfiprintf_r+0x32>
 800b3cc:	2140      	movs	r1, #64	; 0x40
 800b3ce:	f7fb ff33 	bl	8007238 <_malloc_r>
 800b3d2:	6028      	str	r0, [r5, #0]
 800b3d4:	6128      	str	r0, [r5, #16]
 800b3d6:	b920      	cbnz	r0, 800b3e2 <_svfiprintf_r+0x2e>
 800b3d8:	230c      	movs	r3, #12
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e0:	e0d1      	b.n	800b586 <_svfiprintf_r+0x1d2>
 800b3e2:	2340      	movs	r3, #64	; 0x40
 800b3e4:	616b      	str	r3, [r5, #20]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ea:	2320      	movs	r3, #32
 800b3ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3f4:	2330      	movs	r3, #48	; 0x30
 800b3f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b5a0 <_svfiprintf_r+0x1ec>
 800b3fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3fe:	f04f 0901 	mov.w	r9, #1
 800b402:	4623      	mov	r3, r4
 800b404:	469a      	mov	sl, r3
 800b406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b40a:	b10a      	cbz	r2, 800b410 <_svfiprintf_r+0x5c>
 800b40c:	2a25      	cmp	r2, #37	; 0x25
 800b40e:	d1f9      	bne.n	800b404 <_svfiprintf_r+0x50>
 800b410:	ebba 0b04 	subs.w	fp, sl, r4
 800b414:	d00b      	beq.n	800b42e <_svfiprintf_r+0x7a>
 800b416:	465b      	mov	r3, fp
 800b418:	4622      	mov	r2, r4
 800b41a:	4629      	mov	r1, r5
 800b41c:	4638      	mov	r0, r7
 800b41e:	f7ff ff6d 	bl	800b2fc <__ssputs_r>
 800b422:	3001      	adds	r0, #1
 800b424:	f000 80aa 	beq.w	800b57c <_svfiprintf_r+0x1c8>
 800b428:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b42a:	445a      	add	r2, fp
 800b42c:	9209      	str	r2, [sp, #36]	; 0x24
 800b42e:	f89a 3000 	ldrb.w	r3, [sl]
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 80a2 	beq.w	800b57c <_svfiprintf_r+0x1c8>
 800b438:	2300      	movs	r3, #0
 800b43a:	f04f 32ff 	mov.w	r2, #4294967295
 800b43e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b442:	f10a 0a01 	add.w	sl, sl, #1
 800b446:	9304      	str	r3, [sp, #16]
 800b448:	9307      	str	r3, [sp, #28]
 800b44a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b44e:	931a      	str	r3, [sp, #104]	; 0x68
 800b450:	4654      	mov	r4, sl
 800b452:	2205      	movs	r2, #5
 800b454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b458:	4851      	ldr	r0, [pc, #324]	; (800b5a0 <_svfiprintf_r+0x1ec>)
 800b45a:	f7f4 fed1 	bl	8000200 <memchr>
 800b45e:	9a04      	ldr	r2, [sp, #16]
 800b460:	b9d8      	cbnz	r0, 800b49a <_svfiprintf_r+0xe6>
 800b462:	06d0      	lsls	r0, r2, #27
 800b464:	bf44      	itt	mi
 800b466:	2320      	movmi	r3, #32
 800b468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b46c:	0711      	lsls	r1, r2, #28
 800b46e:	bf44      	itt	mi
 800b470:	232b      	movmi	r3, #43	; 0x2b
 800b472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b476:	f89a 3000 	ldrb.w	r3, [sl]
 800b47a:	2b2a      	cmp	r3, #42	; 0x2a
 800b47c:	d015      	beq.n	800b4aa <_svfiprintf_r+0xf6>
 800b47e:	9a07      	ldr	r2, [sp, #28]
 800b480:	4654      	mov	r4, sl
 800b482:	2000      	movs	r0, #0
 800b484:	f04f 0c0a 	mov.w	ip, #10
 800b488:	4621      	mov	r1, r4
 800b48a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b48e:	3b30      	subs	r3, #48	; 0x30
 800b490:	2b09      	cmp	r3, #9
 800b492:	d94e      	bls.n	800b532 <_svfiprintf_r+0x17e>
 800b494:	b1b0      	cbz	r0, 800b4c4 <_svfiprintf_r+0x110>
 800b496:	9207      	str	r2, [sp, #28]
 800b498:	e014      	b.n	800b4c4 <_svfiprintf_r+0x110>
 800b49a:	eba0 0308 	sub.w	r3, r0, r8
 800b49e:	fa09 f303 	lsl.w	r3, r9, r3
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	9304      	str	r3, [sp, #16]
 800b4a6:	46a2      	mov	sl, r4
 800b4a8:	e7d2      	b.n	800b450 <_svfiprintf_r+0x9c>
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	1d19      	adds	r1, r3, #4
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	9103      	str	r1, [sp, #12]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	bfbb      	ittet	lt
 800b4b6:	425b      	neglt	r3, r3
 800b4b8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4bc:	9307      	strge	r3, [sp, #28]
 800b4be:	9307      	strlt	r3, [sp, #28]
 800b4c0:	bfb8      	it	lt
 800b4c2:	9204      	strlt	r2, [sp, #16]
 800b4c4:	7823      	ldrb	r3, [r4, #0]
 800b4c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4c8:	d10c      	bne.n	800b4e4 <_svfiprintf_r+0x130>
 800b4ca:	7863      	ldrb	r3, [r4, #1]
 800b4cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ce:	d135      	bne.n	800b53c <_svfiprintf_r+0x188>
 800b4d0:	9b03      	ldr	r3, [sp, #12]
 800b4d2:	1d1a      	adds	r2, r3, #4
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	9203      	str	r2, [sp, #12]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	bfb8      	it	lt
 800b4dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4e0:	3402      	adds	r4, #2
 800b4e2:	9305      	str	r3, [sp, #20]
 800b4e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5b0 <_svfiprintf_r+0x1fc>
 800b4e8:	7821      	ldrb	r1, [r4, #0]
 800b4ea:	2203      	movs	r2, #3
 800b4ec:	4650      	mov	r0, sl
 800b4ee:	f7f4 fe87 	bl	8000200 <memchr>
 800b4f2:	b140      	cbz	r0, 800b506 <_svfiprintf_r+0x152>
 800b4f4:	2340      	movs	r3, #64	; 0x40
 800b4f6:	eba0 000a 	sub.w	r0, r0, sl
 800b4fa:	fa03 f000 	lsl.w	r0, r3, r0
 800b4fe:	9b04      	ldr	r3, [sp, #16]
 800b500:	4303      	orrs	r3, r0
 800b502:	3401      	adds	r4, #1
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b50a:	4826      	ldr	r0, [pc, #152]	; (800b5a4 <_svfiprintf_r+0x1f0>)
 800b50c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b510:	2206      	movs	r2, #6
 800b512:	f7f4 fe75 	bl	8000200 <memchr>
 800b516:	2800      	cmp	r0, #0
 800b518:	d038      	beq.n	800b58c <_svfiprintf_r+0x1d8>
 800b51a:	4b23      	ldr	r3, [pc, #140]	; (800b5a8 <_svfiprintf_r+0x1f4>)
 800b51c:	bb1b      	cbnz	r3, 800b566 <_svfiprintf_r+0x1b2>
 800b51e:	9b03      	ldr	r3, [sp, #12]
 800b520:	3307      	adds	r3, #7
 800b522:	f023 0307 	bic.w	r3, r3, #7
 800b526:	3308      	adds	r3, #8
 800b528:	9303      	str	r3, [sp, #12]
 800b52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52c:	4433      	add	r3, r6
 800b52e:	9309      	str	r3, [sp, #36]	; 0x24
 800b530:	e767      	b.n	800b402 <_svfiprintf_r+0x4e>
 800b532:	fb0c 3202 	mla	r2, ip, r2, r3
 800b536:	460c      	mov	r4, r1
 800b538:	2001      	movs	r0, #1
 800b53a:	e7a5      	b.n	800b488 <_svfiprintf_r+0xd4>
 800b53c:	2300      	movs	r3, #0
 800b53e:	3401      	adds	r4, #1
 800b540:	9305      	str	r3, [sp, #20]
 800b542:	4619      	mov	r1, r3
 800b544:	f04f 0c0a 	mov.w	ip, #10
 800b548:	4620      	mov	r0, r4
 800b54a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b54e:	3a30      	subs	r2, #48	; 0x30
 800b550:	2a09      	cmp	r2, #9
 800b552:	d903      	bls.n	800b55c <_svfiprintf_r+0x1a8>
 800b554:	2b00      	cmp	r3, #0
 800b556:	d0c5      	beq.n	800b4e4 <_svfiprintf_r+0x130>
 800b558:	9105      	str	r1, [sp, #20]
 800b55a:	e7c3      	b.n	800b4e4 <_svfiprintf_r+0x130>
 800b55c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b560:	4604      	mov	r4, r0
 800b562:	2301      	movs	r3, #1
 800b564:	e7f0      	b.n	800b548 <_svfiprintf_r+0x194>
 800b566:	ab03      	add	r3, sp, #12
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	462a      	mov	r2, r5
 800b56c:	4b0f      	ldr	r3, [pc, #60]	; (800b5ac <_svfiprintf_r+0x1f8>)
 800b56e:	a904      	add	r1, sp, #16
 800b570:	4638      	mov	r0, r7
 800b572:	f7fb ff75 	bl	8007460 <_printf_float>
 800b576:	1c42      	adds	r2, r0, #1
 800b578:	4606      	mov	r6, r0
 800b57a:	d1d6      	bne.n	800b52a <_svfiprintf_r+0x176>
 800b57c:	89ab      	ldrh	r3, [r5, #12]
 800b57e:	065b      	lsls	r3, r3, #25
 800b580:	f53f af2c 	bmi.w	800b3dc <_svfiprintf_r+0x28>
 800b584:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b586:	b01d      	add	sp, #116	; 0x74
 800b588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58c:	ab03      	add	r3, sp, #12
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	462a      	mov	r2, r5
 800b592:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <_svfiprintf_r+0x1f8>)
 800b594:	a904      	add	r1, sp, #16
 800b596:	4638      	mov	r0, r7
 800b598:	f7fc fa06 	bl	80079a8 <_printf_i>
 800b59c:	e7eb      	b.n	800b576 <_svfiprintf_r+0x1c2>
 800b59e:	bf00      	nop
 800b5a0:	0800bfe4 	.word	0x0800bfe4
 800b5a4:	0800bfee 	.word	0x0800bfee
 800b5a8:	08007461 	.word	0x08007461
 800b5ac:	0800b2fd 	.word	0x0800b2fd
 800b5b0:	0800bfea 	.word	0x0800bfea

0800b5b4 <__sfputc_r>:
 800b5b4:	6893      	ldr	r3, [r2, #8]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	b410      	push	{r4}
 800b5bc:	6093      	str	r3, [r2, #8]
 800b5be:	da08      	bge.n	800b5d2 <__sfputc_r+0x1e>
 800b5c0:	6994      	ldr	r4, [r2, #24]
 800b5c2:	42a3      	cmp	r3, r4
 800b5c4:	db01      	blt.n	800b5ca <__sfputc_r+0x16>
 800b5c6:	290a      	cmp	r1, #10
 800b5c8:	d103      	bne.n	800b5d2 <__sfputc_r+0x1e>
 800b5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5ce:	f7fd bd3f 	b.w	8009050 <__swbuf_r>
 800b5d2:	6813      	ldr	r3, [r2, #0]
 800b5d4:	1c58      	adds	r0, r3, #1
 800b5d6:	6010      	str	r0, [r2, #0]
 800b5d8:	7019      	strb	r1, [r3, #0]
 800b5da:	4608      	mov	r0, r1
 800b5dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <__sfputs_r>:
 800b5e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e4:	4606      	mov	r6, r0
 800b5e6:	460f      	mov	r7, r1
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	18d5      	adds	r5, r2, r3
 800b5ec:	42ac      	cmp	r4, r5
 800b5ee:	d101      	bne.n	800b5f4 <__sfputs_r+0x12>
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	e007      	b.n	800b604 <__sfputs_r+0x22>
 800b5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f8:	463a      	mov	r2, r7
 800b5fa:	4630      	mov	r0, r6
 800b5fc:	f7ff ffda 	bl	800b5b4 <__sfputc_r>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d1f3      	bne.n	800b5ec <__sfputs_r+0xa>
 800b604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b608 <_vfiprintf_r>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	460d      	mov	r5, r1
 800b60e:	b09d      	sub	sp, #116	; 0x74
 800b610:	4614      	mov	r4, r2
 800b612:	4698      	mov	r8, r3
 800b614:	4606      	mov	r6, r0
 800b616:	b118      	cbz	r0, 800b620 <_vfiprintf_r+0x18>
 800b618:	6983      	ldr	r3, [r0, #24]
 800b61a:	b90b      	cbnz	r3, 800b620 <_vfiprintf_r+0x18>
 800b61c:	f7fb fd10 	bl	8007040 <__sinit>
 800b620:	4b89      	ldr	r3, [pc, #548]	; (800b848 <_vfiprintf_r+0x240>)
 800b622:	429d      	cmp	r5, r3
 800b624:	d11b      	bne.n	800b65e <_vfiprintf_r+0x56>
 800b626:	6875      	ldr	r5, [r6, #4]
 800b628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b62a:	07d9      	lsls	r1, r3, #31
 800b62c:	d405      	bmi.n	800b63a <_vfiprintf_r+0x32>
 800b62e:	89ab      	ldrh	r3, [r5, #12]
 800b630:	059a      	lsls	r2, r3, #22
 800b632:	d402      	bmi.n	800b63a <_vfiprintf_r+0x32>
 800b634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b636:	f7fb fdc6 	bl	80071c6 <__retarget_lock_acquire_recursive>
 800b63a:	89ab      	ldrh	r3, [r5, #12]
 800b63c:	071b      	lsls	r3, r3, #28
 800b63e:	d501      	bpl.n	800b644 <_vfiprintf_r+0x3c>
 800b640:	692b      	ldr	r3, [r5, #16]
 800b642:	b9eb      	cbnz	r3, 800b680 <_vfiprintf_r+0x78>
 800b644:	4629      	mov	r1, r5
 800b646:	4630      	mov	r0, r6
 800b648:	f7fd fd66 	bl	8009118 <__swsetup_r>
 800b64c:	b1c0      	cbz	r0, 800b680 <_vfiprintf_r+0x78>
 800b64e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b650:	07dc      	lsls	r4, r3, #31
 800b652:	d50e      	bpl.n	800b672 <_vfiprintf_r+0x6a>
 800b654:	f04f 30ff 	mov.w	r0, #4294967295
 800b658:	b01d      	add	sp, #116	; 0x74
 800b65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65e:	4b7b      	ldr	r3, [pc, #492]	; (800b84c <_vfiprintf_r+0x244>)
 800b660:	429d      	cmp	r5, r3
 800b662:	d101      	bne.n	800b668 <_vfiprintf_r+0x60>
 800b664:	68b5      	ldr	r5, [r6, #8]
 800b666:	e7df      	b.n	800b628 <_vfiprintf_r+0x20>
 800b668:	4b79      	ldr	r3, [pc, #484]	; (800b850 <_vfiprintf_r+0x248>)
 800b66a:	429d      	cmp	r5, r3
 800b66c:	bf08      	it	eq
 800b66e:	68f5      	ldreq	r5, [r6, #12]
 800b670:	e7da      	b.n	800b628 <_vfiprintf_r+0x20>
 800b672:	89ab      	ldrh	r3, [r5, #12]
 800b674:	0598      	lsls	r0, r3, #22
 800b676:	d4ed      	bmi.n	800b654 <_vfiprintf_r+0x4c>
 800b678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b67a:	f7fb fda5 	bl	80071c8 <__retarget_lock_release_recursive>
 800b67e:	e7e9      	b.n	800b654 <_vfiprintf_r+0x4c>
 800b680:	2300      	movs	r3, #0
 800b682:	9309      	str	r3, [sp, #36]	; 0x24
 800b684:	2320      	movs	r3, #32
 800b686:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b68a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b68e:	2330      	movs	r3, #48	; 0x30
 800b690:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b854 <_vfiprintf_r+0x24c>
 800b694:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b698:	f04f 0901 	mov.w	r9, #1
 800b69c:	4623      	mov	r3, r4
 800b69e:	469a      	mov	sl, r3
 800b6a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a4:	b10a      	cbz	r2, 800b6aa <_vfiprintf_r+0xa2>
 800b6a6:	2a25      	cmp	r2, #37	; 0x25
 800b6a8:	d1f9      	bne.n	800b69e <_vfiprintf_r+0x96>
 800b6aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ae:	d00b      	beq.n	800b6c8 <_vfiprintf_r+0xc0>
 800b6b0:	465b      	mov	r3, fp
 800b6b2:	4622      	mov	r2, r4
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	4630      	mov	r0, r6
 800b6b8:	f7ff ff93 	bl	800b5e2 <__sfputs_r>
 800b6bc:	3001      	adds	r0, #1
 800b6be:	f000 80aa 	beq.w	800b816 <_vfiprintf_r+0x20e>
 800b6c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c4:	445a      	add	r2, fp
 800b6c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b6c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 80a2 	beq.w	800b816 <_vfiprintf_r+0x20e>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6dc:	f10a 0a01 	add.w	sl, sl, #1
 800b6e0:	9304      	str	r3, [sp, #16]
 800b6e2:	9307      	str	r3, [sp, #28]
 800b6e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b6ea:	4654      	mov	r4, sl
 800b6ec:	2205      	movs	r2, #5
 800b6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f2:	4858      	ldr	r0, [pc, #352]	; (800b854 <_vfiprintf_r+0x24c>)
 800b6f4:	f7f4 fd84 	bl	8000200 <memchr>
 800b6f8:	9a04      	ldr	r2, [sp, #16]
 800b6fa:	b9d8      	cbnz	r0, 800b734 <_vfiprintf_r+0x12c>
 800b6fc:	06d1      	lsls	r1, r2, #27
 800b6fe:	bf44      	itt	mi
 800b700:	2320      	movmi	r3, #32
 800b702:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b706:	0713      	lsls	r3, r2, #28
 800b708:	bf44      	itt	mi
 800b70a:	232b      	movmi	r3, #43	; 0x2b
 800b70c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b710:	f89a 3000 	ldrb.w	r3, [sl]
 800b714:	2b2a      	cmp	r3, #42	; 0x2a
 800b716:	d015      	beq.n	800b744 <_vfiprintf_r+0x13c>
 800b718:	9a07      	ldr	r2, [sp, #28]
 800b71a:	4654      	mov	r4, sl
 800b71c:	2000      	movs	r0, #0
 800b71e:	f04f 0c0a 	mov.w	ip, #10
 800b722:	4621      	mov	r1, r4
 800b724:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b728:	3b30      	subs	r3, #48	; 0x30
 800b72a:	2b09      	cmp	r3, #9
 800b72c:	d94e      	bls.n	800b7cc <_vfiprintf_r+0x1c4>
 800b72e:	b1b0      	cbz	r0, 800b75e <_vfiprintf_r+0x156>
 800b730:	9207      	str	r2, [sp, #28]
 800b732:	e014      	b.n	800b75e <_vfiprintf_r+0x156>
 800b734:	eba0 0308 	sub.w	r3, r0, r8
 800b738:	fa09 f303 	lsl.w	r3, r9, r3
 800b73c:	4313      	orrs	r3, r2
 800b73e:	9304      	str	r3, [sp, #16]
 800b740:	46a2      	mov	sl, r4
 800b742:	e7d2      	b.n	800b6ea <_vfiprintf_r+0xe2>
 800b744:	9b03      	ldr	r3, [sp, #12]
 800b746:	1d19      	adds	r1, r3, #4
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	9103      	str	r1, [sp, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bfbb      	ittet	lt
 800b750:	425b      	neglt	r3, r3
 800b752:	f042 0202 	orrlt.w	r2, r2, #2
 800b756:	9307      	strge	r3, [sp, #28]
 800b758:	9307      	strlt	r3, [sp, #28]
 800b75a:	bfb8      	it	lt
 800b75c:	9204      	strlt	r2, [sp, #16]
 800b75e:	7823      	ldrb	r3, [r4, #0]
 800b760:	2b2e      	cmp	r3, #46	; 0x2e
 800b762:	d10c      	bne.n	800b77e <_vfiprintf_r+0x176>
 800b764:	7863      	ldrb	r3, [r4, #1]
 800b766:	2b2a      	cmp	r3, #42	; 0x2a
 800b768:	d135      	bne.n	800b7d6 <_vfiprintf_r+0x1ce>
 800b76a:	9b03      	ldr	r3, [sp, #12]
 800b76c:	1d1a      	adds	r2, r3, #4
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	9203      	str	r2, [sp, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	bfb8      	it	lt
 800b776:	f04f 33ff 	movlt.w	r3, #4294967295
 800b77a:	3402      	adds	r4, #2
 800b77c:	9305      	str	r3, [sp, #20]
 800b77e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b864 <_vfiprintf_r+0x25c>
 800b782:	7821      	ldrb	r1, [r4, #0]
 800b784:	2203      	movs	r2, #3
 800b786:	4650      	mov	r0, sl
 800b788:	f7f4 fd3a 	bl	8000200 <memchr>
 800b78c:	b140      	cbz	r0, 800b7a0 <_vfiprintf_r+0x198>
 800b78e:	2340      	movs	r3, #64	; 0x40
 800b790:	eba0 000a 	sub.w	r0, r0, sl
 800b794:	fa03 f000 	lsl.w	r0, r3, r0
 800b798:	9b04      	ldr	r3, [sp, #16]
 800b79a:	4303      	orrs	r3, r0
 800b79c:	3401      	adds	r4, #1
 800b79e:	9304      	str	r3, [sp, #16]
 800b7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a4:	482c      	ldr	r0, [pc, #176]	; (800b858 <_vfiprintf_r+0x250>)
 800b7a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7aa:	2206      	movs	r2, #6
 800b7ac:	f7f4 fd28 	bl	8000200 <memchr>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d03f      	beq.n	800b834 <_vfiprintf_r+0x22c>
 800b7b4:	4b29      	ldr	r3, [pc, #164]	; (800b85c <_vfiprintf_r+0x254>)
 800b7b6:	bb1b      	cbnz	r3, 800b800 <_vfiprintf_r+0x1f8>
 800b7b8:	9b03      	ldr	r3, [sp, #12]
 800b7ba:	3307      	adds	r3, #7
 800b7bc:	f023 0307 	bic.w	r3, r3, #7
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	9303      	str	r3, [sp, #12]
 800b7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c6:	443b      	add	r3, r7
 800b7c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ca:	e767      	b.n	800b69c <_vfiprintf_r+0x94>
 800b7cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	2001      	movs	r0, #1
 800b7d4:	e7a5      	b.n	800b722 <_vfiprintf_r+0x11a>
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	3401      	adds	r4, #1
 800b7da:	9305      	str	r3, [sp, #20]
 800b7dc:	4619      	mov	r1, r3
 800b7de:	f04f 0c0a 	mov.w	ip, #10
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7e8:	3a30      	subs	r2, #48	; 0x30
 800b7ea:	2a09      	cmp	r2, #9
 800b7ec:	d903      	bls.n	800b7f6 <_vfiprintf_r+0x1ee>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0c5      	beq.n	800b77e <_vfiprintf_r+0x176>
 800b7f2:	9105      	str	r1, [sp, #20]
 800b7f4:	e7c3      	b.n	800b77e <_vfiprintf_r+0x176>
 800b7f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	e7f0      	b.n	800b7e2 <_vfiprintf_r+0x1da>
 800b800:	ab03      	add	r3, sp, #12
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	462a      	mov	r2, r5
 800b806:	4b16      	ldr	r3, [pc, #88]	; (800b860 <_vfiprintf_r+0x258>)
 800b808:	a904      	add	r1, sp, #16
 800b80a:	4630      	mov	r0, r6
 800b80c:	f7fb fe28 	bl	8007460 <_printf_float>
 800b810:	4607      	mov	r7, r0
 800b812:	1c78      	adds	r0, r7, #1
 800b814:	d1d6      	bne.n	800b7c4 <_vfiprintf_r+0x1bc>
 800b816:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b818:	07d9      	lsls	r1, r3, #31
 800b81a:	d405      	bmi.n	800b828 <_vfiprintf_r+0x220>
 800b81c:	89ab      	ldrh	r3, [r5, #12]
 800b81e:	059a      	lsls	r2, r3, #22
 800b820:	d402      	bmi.n	800b828 <_vfiprintf_r+0x220>
 800b822:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b824:	f7fb fcd0 	bl	80071c8 <__retarget_lock_release_recursive>
 800b828:	89ab      	ldrh	r3, [r5, #12]
 800b82a:	065b      	lsls	r3, r3, #25
 800b82c:	f53f af12 	bmi.w	800b654 <_vfiprintf_r+0x4c>
 800b830:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b832:	e711      	b.n	800b658 <_vfiprintf_r+0x50>
 800b834:	ab03      	add	r3, sp, #12
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	462a      	mov	r2, r5
 800b83a:	4b09      	ldr	r3, [pc, #36]	; (800b860 <_vfiprintf_r+0x258>)
 800b83c:	a904      	add	r1, sp, #16
 800b83e:	4630      	mov	r0, r6
 800b840:	f7fc f8b2 	bl	80079a8 <_printf_i>
 800b844:	e7e4      	b.n	800b810 <_vfiprintf_r+0x208>
 800b846:	bf00      	nop
 800b848:	0800bbb0 	.word	0x0800bbb0
 800b84c:	0800bbd0 	.word	0x0800bbd0
 800b850:	0800bb90 	.word	0x0800bb90
 800b854:	0800bfe4 	.word	0x0800bfe4
 800b858:	0800bfee 	.word	0x0800bfee
 800b85c:	08007461 	.word	0x08007461
 800b860:	0800b5e3 	.word	0x0800b5e3
 800b864:	0800bfea 	.word	0x0800bfea

0800b868 <_read_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4d07      	ldr	r5, [pc, #28]	; (800b888 <_read_r+0x20>)
 800b86c:	4604      	mov	r4, r0
 800b86e:	4608      	mov	r0, r1
 800b870:	4611      	mov	r1, r2
 800b872:	2200      	movs	r2, #0
 800b874:	602a      	str	r2, [r5, #0]
 800b876:	461a      	mov	r2, r3
 800b878:	f7f5 fde6 	bl	8001448 <_read>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d102      	bne.n	800b886 <_read_r+0x1e>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	b103      	cbz	r3, 800b886 <_read_r+0x1e>
 800b884:	6023      	str	r3, [r4, #0]
 800b886:	bd38      	pop	{r3, r4, r5, pc}
 800b888:	20005348 	.word	0x20005348
 800b88c:	00000000 	.word	0x00000000

0800b890 <nan>:
 800b890:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b898 <nan+0x8>
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	00000000 	.word	0x00000000
 800b89c:	7ff80000 	.word	0x7ff80000

0800b8a0 <strncmp>:
 800b8a0:	b510      	push	{r4, lr}
 800b8a2:	b17a      	cbz	r2, 800b8c4 <strncmp+0x24>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	3901      	subs	r1, #1
 800b8a8:	1884      	adds	r4, r0, r2
 800b8aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b8b2:	4290      	cmp	r0, r2
 800b8b4:	d101      	bne.n	800b8ba <strncmp+0x1a>
 800b8b6:	42a3      	cmp	r3, r4
 800b8b8:	d101      	bne.n	800b8be <strncmp+0x1e>
 800b8ba:	1a80      	subs	r0, r0, r2
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d1f3      	bne.n	800b8aa <strncmp+0xa>
 800b8c2:	e7fa      	b.n	800b8ba <strncmp+0x1a>
 800b8c4:	4610      	mov	r0, r2
 800b8c6:	e7f9      	b.n	800b8bc <strncmp+0x1c>

0800b8c8 <__ascii_wctomb>:
 800b8c8:	b149      	cbz	r1, 800b8de <__ascii_wctomb+0x16>
 800b8ca:	2aff      	cmp	r2, #255	; 0xff
 800b8cc:	bf85      	ittet	hi
 800b8ce:	238a      	movhi	r3, #138	; 0x8a
 800b8d0:	6003      	strhi	r3, [r0, #0]
 800b8d2:	700a      	strbls	r2, [r1, #0]
 800b8d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8d8:	bf98      	it	ls
 800b8da:	2001      	movls	r0, #1
 800b8dc:	4770      	bx	lr
 800b8de:	4608      	mov	r0, r1
 800b8e0:	4770      	bx	lr
	...

0800b8e4 <__assert_func>:
 800b8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4b09      	ldr	r3, [pc, #36]	; (800b910 <__assert_func+0x2c>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4605      	mov	r5, r0
 800b8f0:	68d8      	ldr	r0, [r3, #12]
 800b8f2:	b14c      	cbz	r4, 800b908 <__assert_func+0x24>
 800b8f4:	4b07      	ldr	r3, [pc, #28]	; (800b914 <__assert_func+0x30>)
 800b8f6:	9100      	str	r1, [sp, #0]
 800b8f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8fc:	4906      	ldr	r1, [pc, #24]	; (800b918 <__assert_func+0x34>)
 800b8fe:	462b      	mov	r3, r5
 800b900:	f000 f80e 	bl	800b920 <fiprintf>
 800b904:	f000 f889 	bl	800ba1a <abort>
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <__assert_func+0x38>)
 800b90a:	461c      	mov	r4, r3
 800b90c:	e7f3      	b.n	800b8f6 <__assert_func+0x12>
 800b90e:	bf00      	nop
 800b910:	20000014 	.word	0x20000014
 800b914:	0800bff5 	.word	0x0800bff5
 800b918:	0800c002 	.word	0x0800c002
 800b91c:	0800c030 	.word	0x0800c030

0800b920 <fiprintf>:
 800b920:	b40e      	push	{r1, r2, r3}
 800b922:	b503      	push	{r0, r1, lr}
 800b924:	4601      	mov	r1, r0
 800b926:	ab03      	add	r3, sp, #12
 800b928:	4805      	ldr	r0, [pc, #20]	; (800b940 <fiprintf+0x20>)
 800b92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b92e:	6800      	ldr	r0, [r0, #0]
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	f7ff fe69 	bl	800b608 <_vfiprintf_r>
 800b936:	b002      	add	sp, #8
 800b938:	f85d eb04 	ldr.w	lr, [sp], #4
 800b93c:	b003      	add	sp, #12
 800b93e:	4770      	bx	lr
 800b940:	20000014 	.word	0x20000014

0800b944 <_fstat_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4d07      	ldr	r5, [pc, #28]	; (800b964 <_fstat_r+0x20>)
 800b948:	2300      	movs	r3, #0
 800b94a:	4604      	mov	r4, r0
 800b94c:	4608      	mov	r0, r1
 800b94e:	4611      	mov	r1, r2
 800b950:	602b      	str	r3, [r5, #0]
 800b952:	f7f5 fdbe 	bl	80014d2 <_fstat>
 800b956:	1c43      	adds	r3, r0, #1
 800b958:	d102      	bne.n	800b960 <_fstat_r+0x1c>
 800b95a:	682b      	ldr	r3, [r5, #0]
 800b95c:	b103      	cbz	r3, 800b960 <_fstat_r+0x1c>
 800b95e:	6023      	str	r3, [r4, #0]
 800b960:	bd38      	pop	{r3, r4, r5, pc}
 800b962:	bf00      	nop
 800b964:	20005348 	.word	0x20005348

0800b968 <_isatty_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	4d06      	ldr	r5, [pc, #24]	; (800b984 <_isatty_r+0x1c>)
 800b96c:	2300      	movs	r3, #0
 800b96e:	4604      	mov	r4, r0
 800b970:	4608      	mov	r0, r1
 800b972:	602b      	str	r3, [r5, #0]
 800b974:	f7f5 fdbd 	bl	80014f2 <_isatty>
 800b978:	1c43      	adds	r3, r0, #1
 800b97a:	d102      	bne.n	800b982 <_isatty_r+0x1a>
 800b97c:	682b      	ldr	r3, [r5, #0]
 800b97e:	b103      	cbz	r3, 800b982 <_isatty_r+0x1a>
 800b980:	6023      	str	r3, [r4, #0]
 800b982:	bd38      	pop	{r3, r4, r5, pc}
 800b984:	20005348 	.word	0x20005348

0800b988 <memmove>:
 800b988:	4288      	cmp	r0, r1
 800b98a:	b510      	push	{r4, lr}
 800b98c:	eb01 0402 	add.w	r4, r1, r2
 800b990:	d902      	bls.n	800b998 <memmove+0x10>
 800b992:	4284      	cmp	r4, r0
 800b994:	4623      	mov	r3, r4
 800b996:	d807      	bhi.n	800b9a8 <memmove+0x20>
 800b998:	1e43      	subs	r3, r0, #1
 800b99a:	42a1      	cmp	r1, r4
 800b99c:	d008      	beq.n	800b9b0 <memmove+0x28>
 800b99e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9a6:	e7f8      	b.n	800b99a <memmove+0x12>
 800b9a8:	4402      	add	r2, r0
 800b9aa:	4601      	mov	r1, r0
 800b9ac:	428a      	cmp	r2, r1
 800b9ae:	d100      	bne.n	800b9b2 <memmove+0x2a>
 800b9b0:	bd10      	pop	{r4, pc}
 800b9b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9ba:	e7f7      	b.n	800b9ac <memmove+0x24>

0800b9bc <_realloc_r>:
 800b9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c0:	4680      	mov	r8, r0
 800b9c2:	4614      	mov	r4, r2
 800b9c4:	460e      	mov	r6, r1
 800b9c6:	b921      	cbnz	r1, 800b9d2 <_realloc_r+0x16>
 800b9c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	f7fb bc33 	b.w	8007238 <_malloc_r>
 800b9d2:	b92a      	cbnz	r2, 800b9e0 <_realloc_r+0x24>
 800b9d4:	f7ff fc46 	bl	800b264 <_free_r>
 800b9d8:	4625      	mov	r5, r4
 800b9da:	4628      	mov	r0, r5
 800b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e0:	f000 f822 	bl	800ba28 <_malloc_usable_size_r>
 800b9e4:	4284      	cmp	r4, r0
 800b9e6:	4607      	mov	r7, r0
 800b9e8:	d802      	bhi.n	800b9f0 <_realloc_r+0x34>
 800b9ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9ee:	d812      	bhi.n	800ba16 <_realloc_r+0x5a>
 800b9f0:	4621      	mov	r1, r4
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	f7fb fc20 	bl	8007238 <_malloc_r>
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d0ed      	beq.n	800b9da <_realloc_r+0x1e>
 800b9fe:	42bc      	cmp	r4, r7
 800ba00:	4622      	mov	r2, r4
 800ba02:	4631      	mov	r1, r6
 800ba04:	bf28      	it	cs
 800ba06:	463a      	movcs	r2, r7
 800ba08:	f7fb fbdf 	bl	80071ca <memcpy>
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4640      	mov	r0, r8
 800ba10:	f7ff fc28 	bl	800b264 <_free_r>
 800ba14:	e7e1      	b.n	800b9da <_realloc_r+0x1e>
 800ba16:	4635      	mov	r5, r6
 800ba18:	e7df      	b.n	800b9da <_realloc_r+0x1e>

0800ba1a <abort>:
 800ba1a:	b508      	push	{r3, lr}
 800ba1c:	2006      	movs	r0, #6
 800ba1e:	f000 f833 	bl	800ba88 <raise>
 800ba22:	2001      	movs	r0, #1
 800ba24:	f7f5 fd06 	bl	8001434 <_exit>

0800ba28 <_malloc_usable_size_r>:
 800ba28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba2c:	1f18      	subs	r0, r3, #4
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	bfbc      	itt	lt
 800ba32:	580b      	ldrlt	r3, [r1, r0]
 800ba34:	18c0      	addlt	r0, r0, r3
 800ba36:	4770      	bx	lr

0800ba38 <_raise_r>:
 800ba38:	291f      	cmp	r1, #31
 800ba3a:	b538      	push	{r3, r4, r5, lr}
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	460d      	mov	r5, r1
 800ba40:	d904      	bls.n	800ba4c <_raise_r+0x14>
 800ba42:	2316      	movs	r3, #22
 800ba44:	6003      	str	r3, [r0, #0]
 800ba46:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
 800ba4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba4e:	b112      	cbz	r2, 800ba56 <_raise_r+0x1e>
 800ba50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba54:	b94b      	cbnz	r3, 800ba6a <_raise_r+0x32>
 800ba56:	4620      	mov	r0, r4
 800ba58:	f000 f830 	bl	800babc <_getpid_r>
 800ba5c:	462a      	mov	r2, r5
 800ba5e:	4601      	mov	r1, r0
 800ba60:	4620      	mov	r0, r4
 800ba62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba66:	f000 b817 	b.w	800ba98 <_kill_r>
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d00a      	beq.n	800ba84 <_raise_r+0x4c>
 800ba6e:	1c59      	adds	r1, r3, #1
 800ba70:	d103      	bne.n	800ba7a <_raise_r+0x42>
 800ba72:	2316      	movs	r3, #22
 800ba74:	6003      	str	r3, [r0, #0]
 800ba76:	2001      	movs	r0, #1
 800ba78:	e7e7      	b.n	800ba4a <_raise_r+0x12>
 800ba7a:	2400      	movs	r4, #0
 800ba7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba80:	4628      	mov	r0, r5
 800ba82:	4798      	blx	r3
 800ba84:	2000      	movs	r0, #0
 800ba86:	e7e0      	b.n	800ba4a <_raise_r+0x12>

0800ba88 <raise>:
 800ba88:	4b02      	ldr	r3, [pc, #8]	; (800ba94 <raise+0xc>)
 800ba8a:	4601      	mov	r1, r0
 800ba8c:	6818      	ldr	r0, [r3, #0]
 800ba8e:	f7ff bfd3 	b.w	800ba38 <_raise_r>
 800ba92:	bf00      	nop
 800ba94:	20000014 	.word	0x20000014

0800ba98 <_kill_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d07      	ldr	r5, [pc, #28]	; (800bab8 <_kill_r+0x20>)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	4611      	mov	r1, r2
 800baa4:	602b      	str	r3, [r5, #0]
 800baa6:	f7f5 fcb5 	bl	8001414 <_kill>
 800baaa:	1c43      	adds	r3, r0, #1
 800baac:	d102      	bne.n	800bab4 <_kill_r+0x1c>
 800baae:	682b      	ldr	r3, [r5, #0]
 800bab0:	b103      	cbz	r3, 800bab4 <_kill_r+0x1c>
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	bd38      	pop	{r3, r4, r5, pc}
 800bab6:	bf00      	nop
 800bab8:	20005348 	.word	0x20005348

0800babc <_getpid_r>:
 800babc:	f7f5 bca2 	b.w	8001404 <_getpid>

0800bac0 <_init>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	bf00      	nop
 800bac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac6:	bc08      	pop	{r3}
 800bac8:	469e      	mov	lr, r3
 800baca:	4770      	bx	lr

0800bacc <_fini>:
 800bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bace:	bf00      	nop
 800bad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bad2:	bc08      	pop	{r3}
 800bad4:	469e      	mov	lr, r3
 800bad6:	4770      	bx	lr
